module foo ;
 func foo ( foo int . int . int , foo int , foo int , foo int , foo int , foo int ) int { } ;
 func foo ( foo int . int . int , foo int . int , foo int ) int . int { } ;
 foo : : [ ] ( ) ;
 foo : = - - 123 ;
 func foo ( ) int { } ;
 class foo { foo int . int . int ;
 } ;
 foo : : 123 ( ) ;
 func foo ( foo int ) int . int . int { foo : = true ;
 } ;
 class foo { foo int . int ;
 func foo ( foo int , foo int . int , foo int . int , foo int . int . int , foo int , foo int ) int { } ;
 func foo ( ) int { if - "bar" { SKIP { { } } SEIZE ( ! false ) { { } } SEIZE { { } } SEIZE { { REVERSE ! ( ~ [ ] ( true . foo >= foo , ~ "bar" , true [ "bar" or foo and ( - - false or true <= ! "bar" ) . foo ] , ~ true ( ~ ! 123 [ 123 ] ) != ! ! true ( ! ~ [ ~ ( - ~ true or true ) , ! ! - foo [ true ( ~ ~ - ( ! false + - [ ( - foo ( ) ) , ! foo and ( ~ false ) , ! - "bar" . foo and 123 ] ) , ~ ( foo ( ) ) , ~ foo , ! [ ] , - ~ ! "bar" == ~ ! ! ( "bar" ) , ( true ) ( ) << ~ ! - ~ "bar" / ! ~ ! true ) ] , false , ~ - true , false [ ~ [ ] and ~ [ foo != - ( foo or ! ~ true ) + ( ~ 123 / foo ) , [ ] [ ! ( ( ~ - 123 [ true and ! ~ ~ - ~ ! [ ! "bar" ( "bar" . foo , - [ - ( "bar" [ ~ - ! foo ] ) , "bar" , ! "bar" ( ) or ~ - ~ ~ ! false and ! ! ! [ - ! foo != 123 , ( false ) and ! ~ false , "bar" . foo , ~ - - 123 , - true and - ~ true >> ~ foo , ! false . foo ] - ~ true , ~ ! "bar" - true ( true , 123 , - ( ~ true ) . foo >> 123 or true > ( [ ( - true . foo ) , foo , ~ ! false , - ( true ) ] ( ) ) , "bar" ) & ~ ~ 123 , ! - ~ foo ( foo , ~ - ! ! - "bar" [ [ ~ ! ~ - [ ( foo ) and ~ ! - ~ 123 ( - ( ! ( ~ - ~ foo ) and - false [ "bar" ] >= - ( ! ~ "bar" ) ) / "bar" , ~ ~ ~ foo or ! - ~ ( ! ! foo ) << ~ ! ! ( ! [ ] ) ( ) | ~ ( true ) , false , 123 , "bar" | - ( ( foo ) ) , ~ ! - 123 << ! ! foo and ~ ( ~ ~ ~ foo & ! ~ ! false ) ) <= - 123 , foo . foo ] , foo and "bar" & foo , ! ~ ~ "bar" or foo , - [ ] , ~ - "bar" ] ] , - "bar" , ! false or ~ "bar" / true and 123 * [ "bar" , - - [ ] , - [ ] ] . foo , ! false << true ) ] and - ! false , true , ! - true , [ ] < ~ ( "bar" ( ! ( ~ - ! - 123 ) ) or - ~ ! false << "bar" ) ) and ! ( - ~ foo and ! [ - true ( ) ] ) , [ - foo , - true [ false ] , ! ! 123 . foo , ( ~ true and ~ [ foo and ! ~ ! false , true [ - - "bar" ] , ! [ ] , [ ] [ - ! ( - ( false ) ) ] , - [ foo ] ] ) ] ( ) != 123 . foo , ( [ ( [ "bar" ] >> "bar" / ! ! foo ) + ~ ~ ! - false , false ] . foo ) [ - [ ] ] , 123 [ ~ - ! "bar" . foo or [ ] ] , ~ "bar" * true ] >> 123 > [ - ~ ( ! - ~ "bar" ) | true or true , true , "bar" ] ] ) < true ) . foo or ~ - false / false ] / ! true , "bar" , ! "bar" % false ] ] ] ) << foo , "bar" . foo / ! [ ! - foo , ! - 123 [ 123 ] , - [ ] , - 123 , ! foo or ! foo , ~ 123 or ! false ] > ! - foo ( false , foo , - [ ] * "bar" , "bar" ) ) ) ;
 ;
 } } ;
 } else { } ;
 } ;
 foo int ;
 } ;
 class foo { func foo ( ) int . int . int { } ;
 func foo ( ) int { } ;
 foo int ;
 } ;
 foo : int . int . int = false and ! ~ ( - 123 . foo << false ) ( - ! ( true ) , - false or [ [ ] , true or - 123 and - ! - ! ! ! [ ] , true ] ( ) ) >> ! foo ( ! false , "bar" , ~ - - true , ! ! [ ( - - - [ ] == - "bar" [ [ ] ] ) % ! - "bar" << - ~ ! 123 , ~ ! ~ "bar" or - "bar" , ! - foo ^ ( - 123 and 123 + false [ ~ ! true ] ) [ - ( true ) ] != - ~ foo , ~ true + true and ( ( false and foo ) and [ foo , [ ] ] ) , true ] , ~ ~ - - - - ! [ false , ! [ ] < ( false [ ~ ~ ~ - ( false . foo ) ] ) / ~ - ! true , ( true << foo and 123 ) or foo , ! "bar" [ [ ] [ ! - true ] and ( "bar" or "bar" ( ~ - ! true ( ) ) ) or ! ~ 123 ] ] [ 123 . foo ] + false and - foo ) ;
 foo : int = ! foo and ! - - ~ false * ~ ! foo ;
 foo : : ! false ;
 foo : int : ! 123 [ foo ] ;
 class foo { func foo ( foo int , foo int , foo int , foo int . int . int , foo int , foo int ) int . int . int { if "bar" == ~ - "bar" { ! ( ! - - ~ - - ! ! ~ ( foo . foo ) ( ) ) . foo or foo ++ ;
 } else { foo : int : ( foo and foo < [ ! ! ~ ( false ) or "bar" == "bar" , - foo , ! - "bar" ] ) and true ;
 } ;
 } ;
 foo int . int . int ;
 func foo ( ) int . int . int { } ;
 func foo ( ) int { foo : = ~ foo or 123 ;
 } ;
 } ;
 func foo ( ) int { } ;
 func foo ( foo int ) int { foo : int . int . int : true ;
 } ;
 foo : int : ! ! true | - ( ( 123 ) ( ) and foo >> ! false ( ~ - - - 123 , "bar" or false != ( ~ - ( ( ! ( [ [ ] , "bar" >= foo , ! ! foo , ! false , ! ~ false ] . foo - [ true , ~ ( true and true . foo ) ^ - ! true , ! ~ 123 | foo , ~ - - ~ 123 [ ~ ! [ ] and - - foo ] , [ ! "bar" , ~ ~ - foo , ~ ( true ( ~ ( - - ~ - [ - ! - ! foo & foo | ! ~ foo , foo ( foo , foo ) , ! - ( ~ false ) . foo , "bar" >= ! foo , foo , true ] [ ( ~ ( - - ! 123 != ! ! ~ "bar" ) ) ^ "bar" ] ) and ~ ~ ~ foo < ~ - [ "bar" , - ~ 123 , ( ~ ! 123 ) ] or [ ] , - - false , ! 123 << - false , foo > ! false == ~ [ ] >= true and foo ( ) < ! 123 , - ~ ! true ) != false and ( - true == "bar" and ~ ! true ) ) << foo + ( - ! ( false ) ) , ! ! - 123 , - [ ~ - foo , false % 123 ] , false . foo ] ] ) ) ) ) , true , 123 << - foo and - ~ - ~ "bar" , ! ! ~ - [ ] ) == - ~ false [ ! - 123 or 123 <= foo ] ) ;
 foo : : ~ ~ true ;
 func foo ( foo int , foo int . int . int , foo int ) int { } ;
 class foo { func foo ( ) int { } ;
 foo int ;
 } ;
 foo : = - ~ false ;
 func foo ( ) int { foo : int . int . int : 123 ;
 } ;
 class foo { foo int ;
 func foo ( foo int ) int { } ;
 } ;
 func foo ( foo int , foo int , foo int . int , foo int . int , foo int , foo int ) int { } ;
 class foo { func foo ( foo int . int . int , foo int , foo int , foo int , foo int . int . int , foo int ) int . int { } ;
 foo int ;
 foo int . int ;
 foo int . int ;
 func foo ( foo int . int , foo int , foo int ) int { ! ( [ ] ) ( ) -- ;
 } ;
 } ;
 class foo { func foo ( foo int . int . int , foo int , foo int . int , foo int ) int { } ;
 foo int ;
 } ;
 func foo ( ) int { SKIP { { } } SEIZE ( ~ ( ! "bar" ) ) { { foo : = foo ;
 } } SEIZE { { ! ( ! [ ] . foo ) ++ ;
 } } SEIZE { { } } ;
 } ;
 foo : : "bar" - [ ~ ~ "bar" or ( ! ! false ) , "bar" << ~ ~ ! ! foo , - - "bar" , ( ( "bar" . foo / ~ "bar" != 123 ) ) , ~ ! ~ ~ "bar" or ! - ~ false . foo , foo and ( ! true ) . foo / ~ - - ! ! [ ] ] ;
 class foo { func foo ( foo int ) int { } ;
 foo int . int . int ;
 } ;
 class foo { func foo ( ) int . int { REVERSE ;
 ;
 } ;
 } ;
 func foo ( foo int , foo int ) int { REVERSE ;
 ;
 } ;
 foo : = ! - ~ 123 and ~ foo ;
 foo : : ! foo ;
 func foo ( foo int , foo int , foo int . int , foo int . int , foo int , foo int ) int . int { } ;
 foo : int = ~ false [ 123 * - "bar" [ ~ - ~ "bar" - false or ! true != false [ - foo [ - ( ~ ! [ ! true . foo ] . foo ) ] ] ^ ! false ] != - true ( foo or [ ] != false and false ) ] >> false ( ) ;
 foo : = - [ 123 . foo ] ;
 func foo ( ) int { - ( [ ] ) **= "bar" [ false % - [ ( foo ) [ - - "bar" and ~ "bar" ] , - foo , ! ~ ( ~ ~ ( - 123 ) and - ! foo ) , ~ - - ! ~ true or ! "bar" , ! - [ ! false , ! - - [ ( false <= false ) & false , false ( ) and "bar" . foo ] , ! - "bar" [ - ! - - "bar" > ~ - - 123 ] , ! ( ( true . foo ) and ! false ) ] , "bar" ] and false ] ;
 } ;
 class foo { } ;
 
