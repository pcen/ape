module foo ;
 var foo int = ! - ! ~ ~ ( - ! - ~ ( 123 ) ( "bar" . foo , ! ~ ! ! - foo != ! ! ~ ! ( foo ) | 123 ) != ! false [ ! - 123 ] ) ;
 class foo { true . foo > "bar" -- ;
 } ;
 func foo ( ) int { - ~ 123 != - false > ( 123 <= ! true ) . foo & 123 ++ ;
 } ;
 class foo { ~ true ( ) ;
 } ;
 var foo int = ~ ~ "bar" [ true * ! ! ! foo [ "bar" > ! ~ "bar" ] != - ( ~ true ) . foo | ~ 123 ] + ~ true ;
 class foo { if 123 { true == ~ ! ~ 123 [ ! ! ! foo ] | - ~ ! false ;
 } else { foo . foo ;
 } ;
 } ;
 func foo ( foo int ) int { ! ! - foo ;
 } ;
 func foo ( ) int { for val foo int = ~ false < false ;
 ! false ;
 foo /= true { ( - ( true ) ) ++ ;
 } ;
 } ;
 class foo { - false != false += true . foo ^ false ( ) ;
 } ;
 class foo { for val foo int . int = ! ~ "bar" == ! ! ~ ! ~ ~ ( ~ - 123 ) ( ~ false <= - false [ 123 ] , - - ! - false ) ;
 ~ - ~ ! false ;
 ~ 123 { ( - false <= ( "bar" | ! 123 ) ) != - ~ false = ! 123 ;
 } ;
 } ;
 class foo { for var foo int . int = "bar" ;
 ( ~ false & ! "bar" ) ;
 ! foo -= - - "bar" [ foo [ "bar" . foo >= - ~ ! false ] ] >= 123 { - true . foo -- ;
 } ;
 } ;
 class foo { ! - ( "bar" | ( - 123 ^ 123 ( "bar" ( ) , ~ ~ "bar" ) != foo ) ( ) == - "bar" ) ;
 } ;
 class foo { if - 123 [ - ~ ! ~ ! ( ~ ~ "bar" . foo / ( false - "bar" & 123 ) ) | false ] { if - ! - ~ false == 123 | ( "bar" . foo ) { for var foo int . int . int = ! - foo ( ~ - ~ ~ "bar" , "bar" + - true ) - true / "bar" . foo ;
 - 123 . foo > true . foo ^ ( ! ~ foo ) ;
 ( ~ - - - ~ ~ false [ ~ ~ - - ! - - ! true ] ) . foo != ( ~ ~ - ~ ~ "bar" ( ! "bar" ( ) / true , true ) + - false * ! "bar" ) *= true . foo { for val foo int = ! "bar" [ - ~ 123 != false ] ;
 123 ;
 foo * ~ true [ - ~ - "bar" . foo ^ 123 ] >= ~ ~ foo ( ) -- { ( - 123 > foo ) - ( - foo ) ++ ;
 } ;
 } ;
 } else { for var foo int . int = foo . foo * ~ true [ foo ] ;
 foo . foo ;
 false { if - - ~ ~ ( - - foo <= ( - true [ 123 ] ) ) { if - "bar" { - ( ( ! ~ - ! ( ~ ! ! - false & false ) ( - ( "bar" . foo ) , ( ( foo / false [ ~ "bar" ( ) ] ) >= foo ) ) ) [ ! 123 ] ) ;
 } else { ! ~ ! true == - foo [ false ] += true * ! - ~ true [ ~ false [ foo ] != 123 [ ( - foo <= ! ! true ) ] ] ;
 } ;
 } else { for var foo int = ! ~ "bar" - "bar" . foo ;
 - ! - ~ ! 123 <= - ( ~ ! 123 [ false & - ~ - true ] ) ;
 ! ! - ( foo / true ) ++ { 123 . foo < foo **= "bar" ;
 } ;
 } ;
 } ;
 } ;
 } else { foo * ( 123 != ~ false ) . foo /= ~ - foo ( - 123 [ ~ ( - "bar" ) ] , ~ foo == - "bar" . foo <= ! true ) ;
 } ;
 } ;
 class foo { foo /= "bar" ;
 } ;
 class foo { if ! true . foo / - 123 ( ) { for val foo int = 123 ( ) ;
 ( - ( 123 ) ) ;
 ( - ( foo [ ( 123 + true & ~ "bar" ) ] ) ) <= foo == 123 { ~ 123 == ~ - "bar" >= ~ false ;
 } ;
 } else { - - false - true < ! - ( - false . foo ) ;
 } ;
 } ;
 class foo { for var foo int . int . int = - false / ( - ! - true ) ( ~ ! ! ~ - - ( ~ ! - ! 123 | true [ ! "bar" == ~ - foo ] * false ) , - ! "bar" ) <= - "bar" ;
 true ;
 123 . foo <= true **= false . foo { ~ false *= true . foo == ! ( false [ true [ ! - ~ ! ! - false [ - ! true ( ) / 123 ] ] ] & ! ! - false ) <= ! ~ true ( ~ "bar" , false . foo ) & - ! ( true + foo & ~ 123 ) ;
 } ;
 } ;
 func foo ( foo int . int ) int { for val foo int = foo . foo ;
 ~ true ;
 false > - ~ false ( ( foo ) , ~ true / ~ true ) /= ~ - - false { false . foo **= ( ( ! false ( - true , 123 < ! 123 [ foo . foo ] ^ true [ ! ~ false . foo ] ) != ~ ~ - - - false ) . foo ) + foo ;
 } ;
 } ;
 func foo ( ) int { ( false != true . foo ) ;
 } ;
 val foo int = ( false ) . foo ;
 class foo { - - - ( "bar" ) . foo -- ;
 } ;
 class foo { if false ( "bar" [ 123 != false . foo ] , ~ ! "bar" ) { if true < ~ ~ - 123 . foo { ~ ~ - - - ~ ~ true -- ;
 } else { if foo { 123 -- ;
 } else { ( ! true ) ++ ;
 } ;
 } ;
 } else { - 123 [ ! foo . foo != ! true ] -- ;
 } ;
 } ;
 class foo { for var foo int = ~ foo [ ! false [ "bar" ] ] | ~ false ;
 - true ;
 ! ! "bar" { ( ~ ( true ( ) < 123 [ false ( true , ( ! ( ( ! 123 ( ) ) ^ ! true ) == 123 ) ) ] ) + ( - ( - ~ "bar" != ! 123 ) [ - ( "bar" [ ! - ~ foo ( ! ~ - "bar" , ~ "bar" ) ] ) <= - "bar" . foo ] + ! foo [ foo . foo ] ) ) > ~ ( ! ! false ) -- ;
 } ;
 } ;
 
