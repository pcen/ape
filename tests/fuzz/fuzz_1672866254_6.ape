module foo ;
 func foo ( foo int , foo int . int , foo int , foo int . int ) int . int . int { } ;
 func foo ( foo int . int , foo int ) int . int { val foo int = - 123 ;
 } ;
 class foo { foo int . int . int ;
 func foo ( ) int { ~ false ++ ;
 } ;
 foo int . int ;
 } ;
 class foo { foo int . int . int ;
 } ;
 var foo int = 123 << "bar" ;
 var foo int = ~ true ;
 func foo ( ) int { for var foo int = ~ foo . foo ;
 ~ - true / "bar" != foo and foo << ( [ - ~ ~ ( ( 123 or 123 ) ) != ~ [ 123 , ~ ! ( ~ ~ ~ ! false and "bar" ( "bar" ( ) , false , [ ~ ( ~ 123 - 123 ) . foo , - - false , ~ ( [ ] ) , ! ( ! ! - - ~ true . foo ) - 123 , - - "bar" , ! ~ ! true ( ) ] , 123 % ! "bar" , true , ~ ~ [ ] ) ) and - ! ! 123 ( true ) == ! "bar" ( ) , - ! ( - ~ ~ false ) - ~ - true ( ) ] ] ) . foo ;
 ~ ~ "bar" | - ! - false -- { } ;
 } ;
 class foo { func foo ( foo int , foo int , foo int , foo int ) int { var foo int = "bar" ;
 } ;
 func foo ( foo int . int . int , foo int ) int { } ;
 foo int . int . int ;
 } ;
 func foo ( foo int . int . int ) int { } ;
 class foo { } ;
 class foo { } ;
 val foo int = [ ] ;
 func foo ( ) int { for var foo int = - false and ~ false ;
 ~ ! 123 ( ~ - ( [ ] or ~ foo * - "bar" ) > foo , ! "bar" , ! ~ 123 , 123 ( - foo , ~ ( true ) - false , foo . foo , ~ [ foo , - 123 <= - true and true , false , false , ( true ) < true ] ) and true + false , - ~ 123 ( ) / ! true , - ~ ! ~ "bar" ) - - true ;
 ( - true ^ [ true , ! "bar" % - ! [ ~ true , ( true . foo - false [ 123 ] >> "bar" ) . foo , 123 or ~ false >= ~ ~ foo , ( ! 123 ( true [ false & 123 ( ) < "bar" ] , ( 123 - ! true ( ) ) ) ) > ! ~ ~ ! ( ~ false - - foo ) ] [ "bar" ( ) ] == false ] ) ( ) += ( - ~ false ) >= [ false , ! 123 [ "bar" ] << ! ! ! ~ "bar" ] { } ;
 } ;
 val foo int = - [ ( "bar" ) ] ( [ ] , ~ ( true ) + 123 ) ;
 func foo ( foo int , foo int , foo int . int . int , foo int , foo int ) int . int { } ;
 func foo ( foo int . int . int , foo int . int . int , foo int . int , foo int . int ) int { } ;
 func foo ( ) int . int { if foo ( "bar" . foo and "bar" , 123 , [ ! - [ ] ^ 123 != - - "bar" ( ) , true ] , ( foo [ ( ! ( ~ ( 123 << "bar" . foo ) . foo and ! ( true and false ) << [ ! - ~ ! 123 [ ~ false ] * ! ( ~ ! foo & ! foo ( ! false , true , ! ( - ( foo [ [ ] ] ) or ! false ) ( 123 , ( ~ - ~ [ ] and [ - ~ ! ! 123 < foo , 123 . foo , true * 123 , true ] ) , foo , ~ true << false and - - ~ foo == ~ ( ( ! ~ ~ ~ - ! false and [ ] ) ) . foo ) , 123 [ ~ ( [ ! 123 [ foo [ - false and true ] == false + false >= - - true ] , true and ~ true or - [ ] ^ false & - ! ! ~ ! foo , true == ! ~ ~ foo , "bar" , true ( ) / [ ! foo , - foo , - ! ( 123 ) , ~ - ~ - ~ ~ ~ ! - [ ] > - "bar" ( ) , ~ - - - true , 123 [ - false [ ~ 123 ( false , foo , false , "bar" , 123 ) ] ] ] or ~ - foo [ ~ [ - true and - false % ! - ~ ~ false , ! ~ ~ - ~ "bar" , true ] ] ] and - ! ! true ) ] ) << ~ - false ) and true , foo , [ - - ~ ~ 123 or - ! true | - true , ! false , ( true [ ~ ~ ~ "bar" [ ~ "bar" ] ] or ! [ ] << ~ ! true <= - ~ ! ! ~ foo ) [ "bar" or true ] , false % 123 and - ! - false , - "bar" , 123 ] ( ) ] ) ) ] ) and true , ! ( [ ~ [ true or false [ true | ( ~ 123 or true ) [ ! ( ~ 123 ) ] << - 123 ] , ( ( foo >= 123 >> true [ ! ! ~ foo or ~ foo ] - ! ( 123 ( ) ) ) ) , ~ ~ true > ( true + true ) . foo ^ ( false . foo ) , ! 123 , false , ! ~ "bar" ] or ~ [ ] [ ( foo ( - "bar" , ! false , ( ! - ! ! - ~ [ ] . foo ) ( ) + true , true , ! "bar" , [ ] or - 123 ) ) ] , ~ "bar" , - foo , - - ! true ( ) , true ] + true ) ) { for val foo int . int = - true << true ;
 ! - - [ ! ( ! - ~ - 123 != ! false ) [ ! - ! true . foo ] , ~ 123 , [ ] , - ( - ~ false ) ( ) ] ( ) ;
 ( - 123 ^ - ( false [ [ ] ] ) <= foo [ ~ - ! ~ [ "bar" , ( 123 ) and - ~ - ( "bar" ( - true . foo , foo ) ) ] ] ) /= ~ "bar" { } ;
 } else { } ;
 } ;
 val foo int = - ~ ~ ! foo - 123 ;
 func foo ( foo int . int , foo int ) int . int { } ;
 class foo { } ;
 class foo { } ;
 func foo ( foo int , foo int , foo int . int , foo int . int ) int . int { } ;
 class foo { foo int ;
 func foo ( foo int . int . int , foo int , foo int , foo int . int ) int . int { if ( ! ! ! ! false ) . foo { foo and ( ! ( ~ true ) . foo ) % ! ! ~ ~ "bar" ( - 123 . foo != ( ( true ) ) or [ ] , [ - ~ ( ! true ( ) ) ] , ~ false ^ ! ~ - "bar" . foo , foo and [ false ] % ( [ ! - ~ "bar" . foo , false ( ~ ~ ! 123 , 123 [ false [ ! ~ ( 123 or "bar" ) >> - [ foo < ! - ! [ ] . foo , false , foo ] <= ! - ! 123 ] ] , false , true << foo / - - ( - ( - false . foo ) ) . foo , ( - - - false ) <= ~ 123 | ! false ) ] and true ) - ! false , true ( ) , ( false and 123 ) ) ++ ;
 } else { } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int . int . int ) int { } ;
 } ;
 func foo ( ) int { } ;
 func foo ( ) int { } ;
 class foo { func foo ( foo int ) int . int { if foo { var foo int = ~ - ! true or 123 ;
 } else { ! - ( ! ~ foo ) /= "bar" != "bar" ;
 } ;
 } ;
 foo int ;
 } ;
 var foo int = - ! false . foo ;
 class foo { foo int ;
 foo int . int . int ;
 } ;
 var foo int . int . int = ( ! ! "bar" ) ;
 func foo ( ) int . int . int { ! - ! [ ~ 123 ( ) ] [ ~ ! - false or 123 ] *= - ( true . foo ) and false ;
 } ;
 class foo { func foo ( foo int , foo int , foo int , foo int , foo int , foo int . int . int ) int { val foo int = 123 / ( [ ] ) ;
 } ;
 func foo ( ) int . int . int { ! ! ~ ~ foo & false ++ ;
 } ;
 } ;
 var foo int = ! true or true ;
 func foo ( foo int , foo int ) int { if - - "bar" { } else { } ;
 } ;
 class foo { } ;
 class foo { func foo ( ) int . int { if false { true [ "bar" > false . foo ] ++ ;
 } else { } ;
 } ;
 } ;
 class foo { foo int . int ;
 func foo ( foo int , foo int , foo int , foo int . int ) int { } ;
 foo int . int . int ;
 func foo ( ) int { } ;
 func foo ( foo int . int , foo int , foo int . int . int , foo int ) int . int { - foo ++ ;
 } ;
 } ;
 val foo int . int = - [ ~ ! - ~ - - false , ~ [ ] ] ;
 val foo int = foo ;
 
