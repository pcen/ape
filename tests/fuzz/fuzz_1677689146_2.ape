module foo ;
 foo : : - ( ( ! ! - foo or 123 [ - - "bar" ] ) or ~ - 123 == 123 ) [ "bar" [ ! foo ] ] ;
 foo : int = - false ;
 func foo ( ) int . int . int { - - ( "bar" ) *= foo ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int , foo int ) int { foo : = ! 123 [ [ ] ] ;
 } ;
 func foo ( foo int . int . int , foo int . int , foo int , foo int . int . int , foo int , foo int ) int . int { REVERSE [ ~ - ~ ~ - ! ~ ( ~ false ) ( - ( ( ( ! ! ~ ! "bar" ) . foo ) << ! "bar" ) , ! ~ ( ( 123 == true ) ( ) % ( ~ true ) - ! foo . foo >> - [ ] ) , 123 [ - ~ 123 ] ) , "bar" ( ~ ( false >> - false > false [ - ~ "bar" != [ ! false , false ( ) != [ ] , ! ~ false ( ) , ( ! foo ) ] [ 123 or ~ 123 ] ] ) , ~ - - false [ [ ] ] and false . foo % 123 ) >= 123 + [ ] , false | - true << ! 123 , [ foo ] ( foo , - "bar" , - - ( - 123 ) , ( ! 123 ) >> 123 , - ~ [ ] ) % - true ( ) ] . foo ;
 ;
 } ;
 class foo { foo int . int . int ;
 } ;
 foo : int . int = - ~ 123 or true ;
 foo : int : ( ~ ~ - "bar" ) ;
 func foo ( ) int { foo : : - ( [ - ~ "bar" , - ~ false ] ) ;
 } ;
 class foo { func foo ( ) int . int { REVERSE ! ! 123 + ~ ~ - false ;
 ;
 } ;
 } ;
 foo : = ! ! ~ "bar" ;
 func foo ( foo int , foo int , foo int . int . int ) int { } ;
 foo : int . int = ~ true and [ ] >= ~ ( ~ ( 123 ) ) ;
 class foo { func foo ( ) int . int { } ;
 foo int ;
 } ;
 class foo { } ;
 foo : = - - ! - 123 & 123 << ( [ 123 , false | ! ! - ! foo != ~ ~ - true ^ foo , - true , ~ true , - true ] ) ( ) ;
 foo : int . int = ! ! false ;
 
