module foo ;
 class foo { foo int ;
 func foo ( ) int . int . int { if ( ! 123 << ~ "bar" ) { } else { } ;
 } ;
 foo int ;
 foo int ;
 } ;
 foo : = true ;
 func foo ( ) int . int { SKIP { { } } SEIZE ( ~ - - ! - false <= ~ - ! false ) { { foo : = [ false [ ( "bar" >> - "bar" ( ) ) ] , [ false [ true * ! true ] , - - ~ [ ] or ( false >= [ "bar" , foo and true . foo , ~ [ ] . foo and ~ ~ ~ false , ! ~ "bar" ( foo , ! - ! ~ ~ false . foo , foo , ! ( ! "bar" ^ - ~ ~ ! ~ ~ ~ foo ) % "bar" ) or - "bar" != ! foo ] ) , ~ ( - true ) . foo , ! ! ~ foo == ~ 123 ] | foo ] or ! foo ;
 } } SEIZE ( ~ - ~ ! ~ - 123 . foo ) { { } } ;
 } ;
 func foo ( ) int { } ;
 class foo { foo int . int . int ;
 func foo ( ) int . int { for foo : int : foo ;
 false ;
 123 | foo -- { if 123 % ~ 123 { } else { } ;
 } ;
 } ;
 } ;
 func foo ( foo int . int . int , foo int ) int { foo : int . int = ! true and ! ! true ;
 } ;
 class foo { foo int . int ;
 func foo ( foo int , foo int . int . int , foo int , foo int . int ) int . int { } ;
 func foo ( foo int , foo int , foo int . int ) int { } ;
 } ;
 foo : : foo . foo > foo ( ) ;
 func foo ( ) int { foo : int : true ;
 } ;
 func foo ( foo int , foo int ) int { 123 **= ! "bar" [ [ ! ! false , 123 , - foo ] != true << false [ [ ] ] ] ;
 } ;
 foo : : ( ! false ) and ~ ~ true or false != 123 ;
 func foo ( foo int , foo int , foo int . int . int ) int { for foo : int . int : ~ true ;
 - false ( ! - ! [ - - ! ! foo , true != "bar" [ foo ] ] , 123 [ - ~ [ 123 ( [ ~ foo [ "bar" ] , - - ! - ( "bar" & ! ! - - - 123 ) [ ~ ~ false ] or ! "bar" , [ - "bar" or true , true [ ( - true [ - - ( ! ~ "bar" ) != [ ] ] ) ] ^ - "bar" ] ^ foo , "bar" and ! ! true ( [ ] [ "bar" >> ! "bar" ] , - ( false ) , true [ - ! ! - - - - ( "bar" and [ ! ~ ! - 123 or "bar" < [ ! - foo . foo , ( "bar" [ 123 ] ) or true + ~ - true ] , ~ - ( foo ) >> - ! - ! [ ] , ~ [ ] , "bar" . foo ] ) ] ) , 123 , foo ] , ( false - [ ] ) ) / ! true , ! ( true >> foo or ~ 123 and "bar" ) ] == [ ( foo ) , - ! ! foo , ( ~ - "bar" ( ) == ~ ! true ) , ~ - true and ~ foo . foo ] ] , - true & ~ true == ~ - - ! [ ~ false , ~ ~ [ ] , foo , ! ( false ) ] + ( false ) / ! - - ! 123 ) ;
 123 == [ ] - false { } ;
 } ;
 func foo ( foo int , foo int , foo int . int . int , foo int ) int . int { } ;
 foo : = ~ - ! - true ;
 foo : : "bar" ( ! ! foo or - ~ - ! foo , foo ) % ! ! true ( true > - ~ ~ false , - - 123 [ foo ] , ~ ~ - - foo ( 123 , [ ! ! ! [ ] , ~ ~ - ~ 123 [ false >> foo ] , false > true , - - [ "bar" , ! ! "bar" , ~ false or ! 123 and ~ - ~ - ~ "bar" <= ! 123 ] ( "bar" ) > true & foo . foo or foo [ ~ "bar" ] and - ! ! ! ~ false , ( ~ "bar" ) , ( 123 ) / - "bar" or ! - ! ( true ) ] , ~ [ false [ ! true ] << - ~ - ! 123 , ( foo ) , "bar" ] , - - false + - ( "bar" | "bar" [ ~ ! "bar" ] & [ ~ ! ( ! ! ! ~ ~ ( 123 ( ) and - ( true ) [ ~ "bar" ^ "bar" [ foo and ! foo ( ) ] ] ) ) . foo - ! true >> - ~ ! ! [ - ~ ( ~ ~ true ) ] ] [ - false != ! - ! - ! [ ] ] ) ) , ~ ~ ~ ! [ ] ) ;
 class foo { foo int ;
 func foo ( ) int { } ;
 } ;
 func foo ( ) int . int . int { } ;
 
