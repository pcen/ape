module foo ;
 val foo int = ! ( ~ foo ) != - foo ;
 func foo ( foo int . int . int , foo int . int , foo int ) int . int { false >= ! true -- ;
 } ;
 var foo int . int = ! - "bar" ;
 class foo { - ! "bar" ++ ;
 } ;
 val foo int = - false [ true [ true ] ] ^ false ;
 func foo ( foo int , foo int , foo int , foo int , foo int . int , foo int ) int { for var foo int = ~ true ;
 - - ( - foo >= false ( ) & true ) ( ) ;
 ~ ! ~ true == ~ ! ~ - 123 { if true { for var foo int = - foo != ! ! ( false ) <= ~ - "bar" / ! ~ true ^ ! "bar" ;
 - - ~ ~ "bar" + - - 123 ;
 foo . foo + ~ ! - ! ( - ~ ! ~ ( - 123 [ 123 ] ) + "bar" >= - - - - - false ) * ! foo [ foo + ! ! true <= ! - false ] += foo . foo == foo { ! ( ~ 123 [ - 123 == ( ~ 123 < true [ true ] ) [ ~ - - "bar" ] ] == - ~ false . foo ) ;
 } ;
 } else { if 123 - - ~ "bar" == ~ foo ^ false { for var foo int . int . int = false ;
 - ( ! false ) ( ) ;
 123 | - foo { for val foo int = ~ ~ ! true ;
 foo / - - ( - ~ - ! ( foo [ 123 != ! ! foo & true . foo ] ) ( ) ) ;
 - foo . foo ++ { - true ++ ;
 } ;
 } ;
 } else { if 123 { ~ foo & ~ - false -= "bar" ;
 } else { if foo >= ! ~ "bar" { - 123 ;
 } else { if foo { if ! ~ ! - ! "bar" ( foo , false ) - ! 123 { 123 += ! true == foo ;
 } else { ~ ( ! ~ ( 123 ) ) . foo | ( foo . foo - ~ - false ) ++ ;
 } ;
 } else { if - ( foo ) . foo <= - ! - ! ! ( false ) / - ~ foo { if "bar" + ! 123 < - ! 123 ( ) { if ~ false { if false [ 123 ( ) ] { for val foo int = foo / false ;
 ( "bar" ) ;
 ! "bar" ++ { 123 **= true ( ~ ! true , ~ ( ~ 123 . foo ) ) ;
 } ;
 } else { ! 123 ++ ;
 } ;
 } else { if false >= ! false { false [ ~ "bar" ] | ! ( true == ~ ! true - ~ - false ) ;
 } else { - foo [ "bar" ] ;
 } ;
 } ;
 } else { for val foo int . int . int = foo . foo ;
 ! ~ foo | 123 ;
 ( true ) *= ~ - - ~ ~ ( ( - ~ false . foo ) ) . foo { if ~ foo . foo { if true ( ) - true { if true <= - - foo . foo ^ - - ( true ( ) ) ( true , ~ ! - ~ ~ ! true * 123 . foo ) { for val foo int = false . foo ;
 false ;
 false = ~ ! ! - "bar" { for var foo int = true | - - ( foo [ ~ true ] ) . foo ;
 - - - ! ~ ! foo ;
 - "bar" -- { ~ ! false ;
 } ;
 } ;
 } else { if ( - 123 ( ) != ~ ( foo ( ) ) ) - true [ ( foo ) | ! true ] != ! ~ ~ 123 . foo { for val foo int = 123 ;
 - foo ;
 false ( ~ - ! foo ( ) , 123 ) < ( "bar" ) [ ( "bar" . foo * true ) ( true ^ ~ ~ false , ! 123 ) != - ! - ( - - ! ! - false ) ] & ! "bar" . foo != 123 & - 123 -- { true = - true * - 123 ;
 } ;
 } else { for var foo int . int = ! foo ;
 - ~ 123 ;
 false >= foo /= "bar" { foo * ~ foo ( false , ! foo / - false ) ++ ;
 } ;
 } ;
 } ;
 } else { for val foo int = ( ( foo ^ false ) [ ( true ( ) ) - foo ] / foo ) <= 123 ;
 ~ "bar" > "bar" ;
 123 ( ! ~ true , - true ) -- { true > false [ ~ ! true [ foo ] ] *= ! ~ ( ! 123 ) ;
 } ;
 } ;
 } else { if "bar" >= ( ( ! foo ) [ ! - ~ ( - - ! true . foo ) / - false . foo <= foo ] ) { ~ "bar" ( ! ( ! ! "bar" . foo ) , "bar" [ ~ ( - ~ ! false ) ] ) <= ( false ) * false != ~ ( - ~ ~ - false ( ! true , "bar" . foo ) ) -- ;
 } else { if ~ 123 { "bar" ++ ;
 } else { ~ ! - - ! ~ ! ~ ( "bar" ) **= - true >= false & true ( - ! "bar" , "bar" [ ~ ! - false | ! - ( true ) >= ~ 123 - "bar" ] ) ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { - - ( - ~ ~ ~ - - 123 ) -- ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 class foo { ( ~ foo ( ~ ! false == ! 123 . foo > - ~ true [ ~ - ! true ] , true ) ) -= - - "bar" ;
 } ;
 var foo int . int = 123 == true + ~ - false ;
 var foo int = true ;
 class foo { ! true [ ~ "bar" ] | - false * ! - true ( ) ++ ;
 } ;
 val foo int = ~ 123 ;
 func foo ( foo int . int , foo int . int . int , foo int . int . int ) int . int { if 123 * false { ~ false += ~ "bar" != foo . foo ;
 } else { if - foo ( ~ ! - ~ - "bar" < false | ( ~ - ! ~ "bar" > ! false ( ( - - foo ) . foo , ! ! ( false ) / ~ ! 123 ) ) . foo , ~ - 123 ) { if - ! false . foo { true -- ;
 } else { for val foo int = ! - ( false . foo ) ;
 ! ! ! foo ;
 foo . foo * - ! ( - 123 . foo * ~ ! ! ~ - ! ~ - true ) *= - true { for var foo int . int = ~ - false >= "bar" & false . foo ;
 ! ~ ! - "bar" ;
 foo . foo -- { "bar" ;
 } ;
 } ;
 } ;
 } else { if ~ 123 . foo { for var foo int . int = 123 . foo - true [ ( foo ) ] ;
 ! true ;
 123 & ! ( "bar" ) . foo -- { for val foo int = ! - - ! false ;
 "bar" - 123 != ! ~ 123 ;
 true . foo ^ false **= - ( true != foo [ foo ( ) ] | true ( foo < ( true ) + false , ! ~ true ) ) { "bar" **= ! foo ;
 } ;
 } ;
 } else { for val foo int . int = true & ( 123 ) ;
 123 [ ( - "bar" . foo ) . foo ] ;
 123 & 123 [ - true ] <= 123 { for var foo int . int = 123 ;
 ( "bar" ^ false ) ;
 foo { if - ( false [ "bar" ] ) { if ! 123 ( ) + ! "bar" / ! - false [ 123 [ ( ! - 123 ( ) * ~ ~ "bar" ) . foo & - - foo ] ^ ! - ~ ~ - ~ ~ ~ - foo . foo ] { if - - ! "bar" { foo == ~ true ;
 } else { "bar" += ! ! ~ - - ! true ( false ( ) , - ~ true ( foo , false == ( true ( ) - false ) ^ ! ! 123 ) ) ;
 } ;
 } else { ~ true == ! ( - ! ! 123 == foo ) [ - - ! ! true ] > false = ( true . foo ) ^ ( false ) ;
 } ;
 } else { ~ - "bar" **= ( ( true ) ) ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 class foo { ~ ! ! ~ ~ - "bar" ;
 } ;
 var foo int = - ( foo | - "bar" ) [ foo [ ( "bar" ) ] ] - - foo ;
 var foo int = foo ( ) ;
 func foo ( foo int , foo int , foo int . int . int , foo int . int , foo int , foo int ) int . int . int { if ~ foo { ~ - ~ ~ ! true ;
 } else { if false { "bar" ++ ;
 } else { "bar" . foo /= ! "bar" ;
 } ;
 } ;
 } ;
 func foo ( ) int { ! "bar" . foo - ! ! foo ( ) -- ;
 } ;
 func foo ( foo int . int . int , foo int ) int { for var foo int = - true ;
 - ~ false != false ;
 foo **= - ! ~ 123 { ~ ! ~ - ! - ~ foo ++ ;
 } ;
 } ;
 class foo { "bar" | foo ;
 } ;
 var foo int = ( - ( false ) . foo ) != "bar" ;
 val foo int . int = ! foo > - foo ( ) ;
 class foo { ! foo ( ) & foo [ foo ] ;
 } ;
 class foo { ! true -- ;
 } ;
 var foo int = ~ 123 ;
 class foo { "bar" . foo ;
 } ;
 func foo ( ) int { if 123 { if ~ ( ! - false ) == - ( 123 + ! ! - ! foo ) { if true ( foo [ ~ false ] <= - 123 , ! false . foo < - ! "bar" ) == ! ~ ~ - foo { for var foo int . int . int = ~ ! ! ~ true == - ! ~ - true ( ) ;
 123 ;
 false -- { if - ! ! ! true == ~ ~ - ( ( "bar" ) ) >= ! foo { if 123 != false { ( "bar" ) [ ~ ~ true ] ;
 } else { for val foo int . int . int = ~ ! - 123 ;
 false != ! 123 ;
 false /= - ( ~ - ! ~ ( - - foo . foo * ~ foo ) [ ! ~ true ] ) { ( true == ~ ~ "bar" ) /= ! ! ( ! foo ) ;
 } ;
 } ;
 } else { for val foo int = false - ! true [ ~ true ] ;
 ~ ~ 123 . foo ;
 ~ foo { ~ false . foo /= ! ( ~ ! 123 [ true ] ) . foo & - ! true . foo <= ~ foo [ ~ ! ~ "bar" [ true ] ] + "bar" ;
 } ;
 } ;
 } ;
 } else { "bar" >= foo + ~ ~ ! ~ foo [ false & "bar" < "bar" ] -- ;
 } ;
 } else { ~ ! "bar" -- ;
 } ;
 } else { ~ - true . foo ++ ;
 } ;
 } ;
 class foo { ~ - foo <= ! - - - ( ( foo ) ) / foo ( ) ;
 } ;
 class foo { for var foo int = ( - false <= true ) ;
 ( - - true [ "bar" . foo ^ ! ~ ! ( - ! - true - ! "bar" ) ] == 123 . foo < ~ ~ 123 ) ( ) ;
 false ++ { if ! ( "bar" ) { if ! ! - ! "bar" ( ) >= ! 123 { if "bar" { ! true [ true ( ) != ~ ! - "bar" ] -- ;
 } else { for var foo int . int = ~ - foo ;
 foo ;
 ~ ~ 123 { ! ! true / ( ! - - ! foo ) += ( - true >= ~ ~ ! ! ~ ! 123 * true ) | 123 ;
 } ;
 } ;
 } else { ! ( "bar" . foo ) ^ ( true . foo ) ( ! ! ! - foo , ( - ~ - false * 123 ( "bar" , true / ~ ! 123 ) ) * false [ - - true ] ) ;
 } ;
 } else { 123 /= ( ~ ! ! ~ true ) ;
 } ;
 } ;
 } ;
 val foo int = ! true [ ! ! true != ~ ! ~ ~ false [ - foo ^ "bar" ] ] ;
 func foo ( ) int { for val foo int = ! foo ( ) ^ ~ ( ! foo >= ~ ~ ~ - ! ! false ) ;
 ( - "bar" ( ) == true ) [ ~ ~ - ~ ( foo ) != "bar" ] ;
 true **= "bar" . foo { ~ 123 ( ) ;
 } ;
 } ;
 class foo { if foo == "bar" [ ! ~ ~ ~ "bar" . foo ] { 123 ;
 } else { if foo { ~ foo != ( - ( ~ 123 ) ^ foo == - - ~ false <= foo ( ! true . foo , ( ~ foo . foo ) ) / - - foo ) ;
 } else { for var foo int = ( "bar" ) + ~ 123 ;
 ! ~ ! false ;
 true != "bar" = ~ true | foo [ - foo ( "bar" ^ ! ! "bar" , ~ ! ! foo ) + ~ ~ false != 123 ] { - - - foo & foo != true /= ~ ~ 123 <= - false . foo ;
 } ;
 } ;
 } ;
 } ;
 class foo { if foo { if true >= true { false ;
 } else { - 123 >= - "bar" . foo ^ false / foo **= true . foo / ~ ! ( foo [ - - false ] ) ( ) ;
 } ;
 } else { ~ 123 + "bar" ++ ;
 } ;
 } ;
 var foo int = ~ foo ;
 val foo int = foo * foo ;
 class foo { if - ~ true . foo { foo [ false >= ~ "bar" ] != - - true ;
 } else { "bar" ( ) ;
 } ;
 } ;
 func foo ( ) int . int { ~ ! ! foo + ( 123 ) [ foo . foo ] ;
 } ;
 class foo { if "bar" . foo { if - - 123 < false != - false + - true { if true { false ( - ( 123 . foo ) >= - "bar" , - - "bar" * false ( ) ) = ! ! false [ foo [ ~ - foo ] ] ;
 } else { ~ ( - ( ( true ) ( ) ) <= "bar" ) [ ! ( - ~ "bar" [ ( 123 <= ! false ) ( ! ! - 123 [ true ] / false , ! - ~ - ( ~ 123 ( ) ) ) ] ) ] *= false ;
 } ;
 } else { foo [ ~ true ] ++ ;
 } ;
 } else { foo /= ~ foo . foo | false ;
 } ;
 } ;
 func foo ( ) int { ( 123 ( ) + - ( ! foo ) * ! true ) ++ ;
 } ;
 
