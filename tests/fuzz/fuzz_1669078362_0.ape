module foo ;
 val foo int = ~ ~ foo | false . foo > - ~ ( ~ ~ foo < false + ( true ) [ "bar" ] == "bar" ) . foo ;
 func foo ( foo int , foo int ) { for val foo int = ! "bar" ;
 false & 123 ;
 ~ - "bar" -- { ~ - ! "bar" *= true ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int ) { if ! - "bar" ( ~ 123 , 123 ) / ! 123 ( "bar" , true . foo ) { for var foo int = foo ;
 foo ;
 ~ ! 123 != 123 > - ~ ~ false ++ { if foo . foo - "bar" < foo { if true . foo { ( 123 . foo ) | ~ true & ~ true ;
 } else { for var foo int = - - true ;
 ~ ( ! ~ foo ) . foo < ~ ! ~ ( "bar" != ~ - false . foo ) ;
 ~ ~ ( ~ true == 123 > - ( foo >= ~ - ~ true ) ) { if 123 != - ~ true | ~ true { true ( false , 123 [ true ] ) ;
 } else { if foo { for val foo int = ~ - - false > - foo ;
 - "bar" ;
 ~ ! ( 123 + false . foo < "bar" ( ~ true , 123 ) ) [ false [ - ! ~ - ! ! ~ true [ - true [ ~ ( 123 ) . foo ] * 123 ] ] & ~ - ~ "bar" . foo ] * foo [ - ~ ! ! "bar" ] **= - ~ ~ true != foo * false { if false . foo { ( ( ~ ~ false ) ( ~ ~ "bar" , false [ "bar" ] ) ) ( ! false . foo >= "bar" , foo == foo . foo ) * "bar" -- ;
 } else { for val foo int = false ;
 123 [ foo ] ;
 123 != ~ ! ! - ! false > false & "bar" ++ { for var foo int = ~ "bar" >= "bar" ;
 foo . foo + ( foo [ ! ! true + - ~ true ] | ~ 123 * ~ "bar" [ foo <= foo ( true , false <= ! "bar" [ false . foo ] != ~ false [ ( ! false ) ( "bar" , ~ ~ foo ) ] ) ] ) == ( ! foo [ - 123 ] ) & ! ( ~ ~ ! ! ! true [ ! ~ 123 [ ! false ] / ~ false [ - foo ( - - ~ - ! ~ false != ~ 123 , foo ) ] != ~ false - ! true ] ) ;
 ~ true * "bar" ++ { true <= false ;
 } ;
 } ;
 } ;
 } ;
 } else { false -- ;
 } ;
 } ;
 } ;
 } ;
 } else { - ( ~ - ~ ~ false ) < ! true [ foo ] ^ ( 123 ) -- ;
 } ;
 } ;
 } else { - ! ! - ! - true > ( ( - foo ( ~ false & true , - ! ( ! "bar" ) [ ! ~ ~ false . foo ] ) ) ) ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int ) { 123 [ false ] -- ;
 } ;
 class foo { for val foo int = - foo ;
 ~ ~ true ;
 ~ ! ! false ( true <= ! ! ~ ! "bar" , - ! ! - ! ~ "bar" + ! foo == foo & ~ true [ ! false ] ) * "bar" == - ~ false <= ~ ( - - true . foo ) ( ~ foo , "bar" ( - ! - false > true == ( - foo ) , ! ~ ( 123 [ ! ~ ~ foo ] ) ) + "bar" ) & ( ~ false ) ( ( - 123 ) ( - ( - ~ true ) ( false / "bar" , true [ ! ! ! ~ "bar" [ ! - foo . foo ] ] ) , ~ - 123 != - false ( - 123 , foo + true ) ) - false , ! true / - ( "bar" ) ) + 123 -= "bar" | - - true { if - foo * "bar" { if foo > foo [ - ( ~ ! 123 ) [ - ! "bar" . foo ] ] { ~ ~ false <= ~ true += ( true <= - - ! ( ! false [ ~ ! "bar" ( - - ( ! ! ~ ! 123 [ ! ~ - ! 123 & - ! ! ~ - - ~ - "bar" < - ! - ! ~ ! ~ ~ 123 ] ) , ( "bar" . foo ) ( - ( ( foo / false ) ) , - - foo [ - ~ ( ~ foo ) ( 123 , ~ - ! "bar" ) ] ^ - "bar" * ! foo ) / foo ( ! ( true ) ( 123 / ~ - ~ ! true == foo . foo < ~ true ( 123 / foo ^ "bar" [ ( - ! false >= "bar" ) * foo [ ! - - "bar" ] ] , 123 . foo ) , foo ( ~ ! foo [ foo . foo ] , ! ! true >= true ) | foo ) < false != "bar" . foo > ( - ! ! ! ! ~ 123 ) ( 123 . foo != ! 123 , ( foo ( ~ foo , - ( ! false ) == - ~ ! true & false ) ) . foo ) , ! - ~ "bar" ) ) <= ( ~ ! - - ! 123 ) [ - - - - ! 123 + "bar" ( - foo [ - - foo ] != ~ ! 123 <= ( ~ ! - ~ true ) , true | "bar" . foo ) ] ] ) ) [ foo ] & ( ~ false < "bar" [ foo ] ) ;
 } else { ( ( true & foo ) ) [ 123 ] == ~ foo >= - ~ - ! ( ~ "bar" | ! - ~ - - ~ foo & "bar" ) **= "bar" ;
 } ;
 } else { ~ ! - "bar" [ true >= - ~ ( true . foo == ~ foo . foo ) [ ~ - ~ ! ~ ( ~ ! true ) > ! ~ - true == ~ foo ] ] **= true . foo ;
 } ;
 } ;
 } ;
 var foo int = ~ false ;
 var foo int = ~ ~ ( - "bar" ) [ ~ true ] ;
 class foo { "bar" * - ( foo ( ~ "bar" , false == ~ 123 ) ) /= ~ ! ~ ! 123 ( true , true ) ;
 } ;
 class foo { if ~ - - - false { ~ ( ! ~ "bar" ) [ ! ! ! true [ true != true ] < "bar" ] /= ( "bar" ) ;
 } else { if ( "bar" [ foo + "bar" ( "bar" ( - 123 [ ~ ( ( ( "bar" [ - true / ! false - ~ - false ] ) ( "bar" > true , true [ ( ! foo ) . foo ] ) != foo . foo ) - ( foo ) . foo ) > - - ~ - true ^ - ! - true & - ~ false ] , - ~ ! "bar" < true & ( true ( "bar" <= - false , "bar" ) > true ) ) , ~ false ) ] ^ "bar" ) { if ! foo [ ~ "bar" ( foo ( ( ~ - - true . foo / - - foo ) ( - foo , ~ ~ foo != 123 ( ~ - false [ 123 & false [ false / ~ ! - ~ - ~ ! "bar" < ~ ~ false . foo ] ] , 123 == ! false ) ) , ! - ~ ! false ( foo <= ~ - ! false . foo , ( 123 . foo - ( 123 . foo > - ~ "bar" . foo ) <= - ( 123 ) ( foo , false ) ^ ! - ~ - false != ~ 123 * "bar" [ ! true ] ) ) ) / "bar" == true + true . foo , ! ~ ! true ) ^ ~ ! ~ true ] { if - false { ~ true == "bar" ^ 123 ++ ;
 } else { for val foo int = foo * "bar" ( ! true , ! false [ ~ true ] == "bar" - - - true & 123 ) ;
 ( false | foo ) != true ;
 123 . foo <= ~ ~ ! ( 123 ) ( ( - ! "bar" ) ^ ! ~ foo ( false <= ~ true + foo , - ( ( ~ ! ~ ! ! true ) / - 123 ) ) / false [ ~ "bar" [ ~ ( ( ! "bar" ) [ foo != ~ ~ false ] ) ] ] , true [ - ! foo ] ) *= ( ~ - foo / ! ~ foo ( true , ( ( true [ ( ! 123 - ! ( - ! false [ foo ] ) ) [ false & - foo ] ] ) - ( true ( "bar" [ false ] , - false ^ ( 123 ( false [ ! ~ ~ - - - - true ] , ! ! ( - "bar" ) + true ) ) ) / 123 . foo + ! ! ~ - foo ( ~ ! false | ~ "bar" & ! false . foo , ~ foo . foo ) ) ( foo , true == ~ ~ ! 123 ( ( true ) ( ! ( 123 - - true ) ( 123 . foo , - 123 ) , - - 123 ^ ! true . foo ) , ~ ( foo ) ) ) ) . foo ) ) { if - foo . foo != - - ( ~ ~ ! ! false ) { for var foo int = - ! "bar" [ ~ ( ~ ~ "bar" . foo + 123 ( - 123 != - ~ ! 123 , ! ! true < - ! - - ! "bar" & false ) ) . foo ] ;
 - - - ~ ( ~ "bar" ) ;
 123 . foo ++ { - ( foo ^ false [ false . foo > 123 ] & false . foo ) ( ! ~ false . foo & ! false + ! "bar" , ~ false ( - ! - - - - ~ ~ "bar" [ false . foo ] / - - false == ~ "bar" - "bar" , 123 != "bar" / ( "bar" == false ) . foo ) >= false & foo ) -= 123 ;
 } ;
 } else { - foo - false ;
 } ;
 } ;
 } ;
 } else { for val foo int = - true ;
 "bar" . foo ;
 - ( ~ false ) /= - true { false & - ! ~ - - ( ! - - ~ ( - ! false ) ) -- ;
 } ;
 } ;
 } else { 123 . foo ;
 } ;
 } ;
 } ;
 var foo int = ! ( ~ 123 ) ;
 val foo int = ! foo [ foo ] ;
 class foo { for val foo int = 123 ;
 ~ ~ ~ ! false ;
 "bar" + - - false ( foo == 123 ( "bar" * true <= 123 , ! ~ - ! ( true ) [ - false ] ) - true , 123 ( ! ~ ~ - ! ! - true . foo , - "bar" | ~ "bar" [ true ] ) ) { ( ! ~ 123 * foo != ~ ! - ( - ! foo ) [ - "bar" ] ) -- ;
 } ;
 } ;
 class foo { false ( ~ ( ( ~ ~ ( true ) [ true ] * foo . foo ) [ true ^ foo ] ) , ! ~ 123 [ ~ ~ - ! - true ( ! 123 < 123 * "bar" . foo != foo ( false ( ( ! ! 123 [ ( ! ~ ( foo [ ! 123 ( ( "bar" ^ - false ) , foo | 123 ) ] == foo ) != - ! ~ 123 + true ( ~ - - true / - foo ( ~ "bar" , - ! ~ ( - ! foo [ ~ ~ ( 123 ) . foo ] ) < ~ - foo & ( ! - ! false + ( ( ~ - false * false ) ) . foo ) ) , "bar" ) ) - ~ ! - true ] <= ( 123 | ~ ~ ! ( ~ "bar" [ 123 ] ) ) ) , - 123 >= ! "bar" [ 123 [ ! ! false ] ] != false ) , ~ 123 < ! false ) < ~ ! "bar" ( ( - ~ 123 == ( true / ~ ! false . foo ) * - ( 123 <= ~ ! - ( "bar" ) [ false . foo ] ) ) , false ) , 123 ) & "bar" . foo | - ! true ] * false ) * true == ( ( true ) ) | foo / ~ true ( ~ false , ~ ~ - ! "bar" ) ;
 } ;
 func foo ( foo int , foo int ) { for val foo int = - - true ;
 ( foo [ false ] ) ^ "bar" ;
 ( ~ ! - ( foo . foo ) ) { for var foo int = foo . foo ;
 ~ ( foo . foo ) != ~ "bar" . foo / ! ~ - ~ ( true ) ;
 ~ - ( false ) { for val foo int = - ( ~ ( ( true ( - foo != foo , ! ~ - ( ~ ! ~ ! 123 | ~ ~ - ~ foo ) [ ~ ! 123 [ "bar" ] >= "bar" [ ~ false ] | ~ ( ~ foo ) ] ) ) ) ) ;
 ( foo . foo ) ;
 ( foo == ~ foo . foo ) { for val foo int = "bar" ;
 123 - true ;
 ( - - - ! "bar" . foo != 123 ) / ( ~ ! true ) /= false { - ! ~ ( "bar" ) / ! 123 >= true ++ ;
 } ;
 } ;
 } ;
 } ;
 } ;
 class foo { true -- ;
 } ;
 class foo { false > ! 123 != false -- ;
 } ;
 val foo int = ! "bar" ;
 class foo { for val foo int = ! foo ;
 false ( ( false ( ~ ~ - 123 , false . foo ) ) <= foo * 123 == foo , ! foo ( 123 , 123 ) * ~ ( false ) ) == ( true ^ ~ - false [ ~ ! - ! foo ] ) ;
 ! "bar" ( 123 < ~ ! ~ ~ foo ( - - false , foo ) , ~ - ~ 123 ) != foo -- { for var foo int = foo ( "bar" ( "bar" / ! true , ~ ~ - - - ~ "bar" ) , - foo ) / "bar" ;
 123 . foo ;
 ~ ! false & ~ - ~ 123 . foo **= ! "bar" ( 123 , 123 ) { ( ( "bar" ) . foo ) | ! ~ ! ! false . foo ;
 } ;
 } ;
 } ;
 class foo { false >= false /= ~ - - ! false & 123 [ - foo ] == ! ! true > ! ~ ( - "bar" <= ( foo ( ( ! ( false ) ) [ - - ! ! foo == ! true - 123 ( - false , ( ~ ( foo != false ) [ false > foo . foo - - 123 ( false ( ( ( "bar" ) [ foo ] ) , ~ ( 123 / - foo ) ) , - foo != 123 ) ] ) / ~ false != foo ) ] , true / foo ( - ~ - false [ false ] , - ( - ~ - foo > ! foo ) ) ) ) ) - "bar" ( ( 123 ) , ( ! ( ~ ~ ~ false >= ~ - true / 123 ) ) . foo != 123 < ! ( 123 > ~ false [ false ( false . foo , "bar" ) * foo [ ~ false ] > - 123 ( false , ! "bar" ) | - ! false ] ) / ( "bar" * - ! - - ~ "bar" ) ( ~ ( ! false / ~ ~ - true ) . foo , ! foo <= ! ~ ! ( "bar" | 123 ) & - - ! - ~ foo . foo ^ false ) ) ;
 } ;
 func foo ( foo int , foo int ) { ! ( 123 . foo ) ;
 } ;
 val foo int = "bar" [ - - true <= - true ( - true * ( foo ) + - ( foo ) < ! ~ ! ~ ( - ! ! - ~ foo [ ~ ! ~ ~ ~ foo ] ) , ~ true == - ! true . foo * - false ) ] ;
 func foo ( foo int ) { for var foo int = true ;
 true ;
 - foo + ( ( 123 / ~ - ~ - ~ ~ ! - true ) [ ( - - ! "bar" ) [ ! ! ~ ( ! ~ - "bar" [ true ] == "bar" ) ] ] | ! ~ ~ foo ( 123 , true . foo ) & - - "bar" ) ++ { for val foo int = 123 . foo & - true ;
 ~ ( 123 ) ;
 ~ ! "bar" = - "bar" ( foo [ - ~ ~ ! ! 123 ( ~ foo / - - "bar" ^ ~ - ! ~ - ~ ( false ) , ( "bar" ) [ ~ ! ! foo . foo ] ) ] == 123 ( - false , ! ~ ~ ( - ~ ( ( ~ true [ ! ! ! - ~ ! "bar" / true ] == - "bar" . foo > false ) ) - ! ~ ~ - ! foo == - ( foo & false != 123 ) & ( ~ ( ! - false * foo ) ) ) . foo ) , ! "bar" | foo ) ^ false . foo < ! ! - false & - ~ ! ~ - false { if ! 123 ( ~ foo . foo < false ( foo == ( ~ true . foo | - - ! "bar" ( "bar" , ~ - ~ 123 ) ) , 123 ( 123 , ! false ^ - 123 == - ! ~ ( ! "bar" - ~ - - 123 ) . foo ) ) | ~ ~ foo , - false * - "bar" [ 123 [ ! foo . foo != 123 ] ] ) { ~ - - foo ++ ;
 } else { - ! ~ ! foo ++ ;
 } ;
 } ;
 } ;
 } ;
 class foo { if true { for var foo int = ! - ! - true ;
 false + "bar" ;
 foo ( ~ ! ( true <= true ( true [ 123 ] , - "bar" ) ) != ! ! ( ( 123 ( foo , ! 123 ) ) ( true . foo , ! true ) ) * - foo , false ) /= false + 123 { if ! - "bar" * ( foo ) { for var foo int = 123 . foo ^ ( 123 ) ( ( false ) , ! foo ) & 123 ;
 - 123 != "bar" ;
 true ( ( ~ - ~ ( false . foo ) ) , ~ ~ ! ! ~ false / true ) /= ~ ~ 123 * true . foo < 123 { for var foo int = ~ ~ - "bar" ;
 ~ "bar" | ( foo / - ~ ! false ) ;
 - 123 { for var foo int = ! true ;
 false ;
 true [ ! "bar" ^ "bar" & "bar" <= false ] <= false [ ~ ! ! ~ true ] *= ~ foo ( ( ~ false != 123 ( - - ! "bar" , ! - true . foo < ~ true ) ) [ false ] , ( ~ ! - ( ! 123 ) > - foo . foo | ! ~ foo ) * ~ ! - ( true [ ( ! ( - foo <= ! ! - - foo ) == - ( true ) ) / ( ! true ( - 123 , true [ 123 / false ] > - ~ ~ ! ! ( "bar" * ( ( "bar" ) ) ^ - 123 <= ~ false ) ) < 123 [ 123 ] ) ] ) [ ! "bar" ] == 123 . foo ) == - foo { for val foo int = ! true ;
 false ( ! - false [ - ! "bar" [ 123 >= 123 ] ] != false - "bar" / ! false , ! foo ) - 123 ;
 ~ true { if ~ ! ! "bar" { ~ true <= false ( ( - ~ foo ) , ~ ~ foo ) ;
 } else { if "bar" ( - - 123 < ! ( - ( ! foo ) ( ~ true [ ( ( foo ) ) ] , "bar" ^ - - ( ~ ~ ( 123 ) . foo ) ) ) , 123 ) { ( ( ~ ( "bar" ) ) ) / ! 123 = 123 ;
 } else { ! ~ ~ ! ~ ~ 123 ++ ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { - ~ ! 123 == foo ;
 } ;
 } ;
 } else { false ;
 } ;
 } ;
 var foo int = false [ ( true [ ! ! foo ] ) ( ~ - ! ! ~ ( - 123 ) != ! ! 123 . foo , ( - ! 123 ) >= - 123 ) ] ^ 123 [ true ] & false [ ! - ~ foo . foo > ( "bar" ) ] ;
 class foo { if foo { for var foo int = ! true ;
 ~ ! ~ ~ true ;
 true { "bar" = 123 == ! "bar" ;
 } ;
 } else { ! false . foo + ~ - ( true [ foo . foo - true * 123 ] * ~ - ! ~ 123 != ~ foo . foo ) ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int ) { ! foo **= - ~ false . foo ;
 } ;
 
