module foo ;
 class foo { foo int ;
 func foo ( ) int . int . int { } ;
 foo int ;
 func foo ( ) int { } ;
 func foo ( foo int , foo int . int . int , foo int , foo int , foo int , foo int ) int { foo : = ! "bar" ;
 } ;
 } ;
 func foo ( ) int . int { } ;
 class foo { } ;
 class foo { foo int ;
 foo int ;
 } ;
 foo : = ~ [ ! ~ false , 123 ] ;
 class foo { foo int . int ;
 func foo ( ) int { for foo : : - - true ;
 [ ~ "bar" - [ true ] or foo , 123 == ~ ! ~ ~ ~ true [ ~ foo . foo << ! - ! ~ false . foo ] ] and ( 123 >= ! - foo ) << - true / ! 123 != [ ] ;
 "bar" / true . foo or [ - true , foo ( ) , ! true ] . foo **= 123 * "bar" << ~ true { if false { foo : int . int = true ;
 } else { } ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int ) int { } ;
 foo int ;
 func foo ( ) int { } ;
 } ;
 foo : int . int : ~ false + true ;
 class foo { func foo ( foo int , foo int , foo int ) int . int . int { } ;
 foo int ;
 foo int ;
 func foo ( ) int { } ;
 } ;
 foo : int : ( "bar" ) ;
 foo : = true ;
 class foo { func foo ( ) int . int . int { } ;
 foo int . int . int ;
 foo int ;
 } ;
 foo : : foo and 123 ;
 foo : = - true <= ~ ~ "bar" ;
 class foo { } ;
 class foo { foo int ;
 } ;
 
