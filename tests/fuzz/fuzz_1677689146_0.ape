module foo ;
 class foo { } ;
 func foo ( ) int { } ;
 foo : = ~ 123 % 123 ;
 foo : = ! [ ] ;
 class foo { } ;
 func foo ( foo int , foo int , foo int , foo int . int . int ) int { } ;
 func foo ( ) int . int { if "bar" { if - ! ( [ false , - - 123 ] ) { true or ~ - ! "bar" ++ ;
 } else { } ;
 } else { for foo : : false ;
 [ ~ [ ] , ~ true > ~ "bar" , foo << false + ! [ ] ( ) , ! true [ ! "bar" != foo >= ~ - ! foo ( [ ] or foo , ( ~ foo ) , - ~ [ - - ~ false ] , false , foo >> - ( ( "bar" ) and [ ! ! ( ( ~ ! ( ! ~ ~ ! "bar" or ~ ! foo ) and "bar" or - ! - - [ ] ) ) [ ( [ ! ! ~ ~ "bar" == "bar" , ~ 123 , - - ~ - "bar" , ! foo and ! ! ! ~ "bar" , ( ~ ! ~ ~ ~ "bar" ) . foo <= "bar" * ! - - ( ~ 123 ( ) ) and 123 , 123 . foo and false ( - - ~ ( "bar" ) , ~ "bar" ) ] and - - ! "bar" ) ] >= "bar" & ~ - ~ - false , foo or ~ "bar" ( ) , - ! "bar" or - 123 , ~ false <= ~ [ ] >> "bar" , foo and 123 ] [ - foo << ~ ~ foo ] ) [ [ ] * foo or true ] ) * - ! ( ~ ( ~ ! ! ~ ( ! true ( ! ! foo , [ ( - - ! ! ! true ( ) ) < ( - - "bar" ) and "bar" << ! ~ false , "bar" , ~ ! ~ ! "bar" ] , false and true or ! ~ [ ] , ! foo , ! ! "bar" / ~ ! - "bar" , "bar" ) & ~ foo ) ) ) [ ! true and [ false ] . foo ] ] , 123 ] ;
 ~ true /= true and ! true { } ;
 } ;
 } ;
 foo : = ~ "bar" . foo ;
 class foo { foo int . int . int ;
 } ;
 func foo ( foo int . int , foo int . int , foo int , foo int , foo int ) int . int { REVERSE [ ! - ! ( "bar" and "bar" == ! true ) * "bar" , - - ! ~ foo ] ;
 ;
 } ;
 foo : : - - ( ~ 123 ) ( ) ;
 
