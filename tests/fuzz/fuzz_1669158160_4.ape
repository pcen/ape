module foo ;
 val foo int = foo ;
 func foo ( ) int { ~ foo ( ) ;
 } ;
 func foo ( ) int { ! - - true ( ~ "bar" ( 123 != ( ~ false ) , ( - - - ! 123 ) >= - "bar" . foo != - ! ~ - 123 . foo / ! "bar" ) > ! ~ ( - "bar" . foo ) [ foo . foo > ~ - ( true ) ( ~ foo , ~ ! "bar" ( ) ) ^ "bar" ] / true , ( - ! foo ) & false ) & "bar" ( - ! ! true , false ( ! false != ! - "bar" , ~ - ! foo >= - - false ) ) ;
 } ;
 func foo ( foo int . int . int , foo int . int , foo int , foo int , foo int , foo int ) int { for var foo int = ! - ~ false == foo ;
 - - - ! ! ~ ! ! true + - foo [ - ! ~ true > "bar" . foo ] != - false ;
 true -= false { ! ~ - - - ! ~ 123 ( ! ~ - - - - true , ~ false ) ++ ;
 } ;
 } ;
 var foo int . int = - - ! - ( foo | ! "bar" ) . foo ;
 var foo int = true ;
 func foo ( ) int { true ( ) ;
 } ;
 class foo { } ;
 func foo ( ) int { for var foo int = - "bar" ( ) < ! true & false ;
 - true - ! false ;
 "bar" [ "bar" ] = - ! ! true { for var foo int = false . foo > 123 ;
 ~ foo . foo ;
 ( 123 ) . foo -- { "bar" ( ) > - ! ~ - ! true * ( - - "bar" - foo ) ;
 } ;
 } ;
 } ;
 class foo { foo int ;
 foo int . int . int ;
 func foo ( foo int , foo int , foo int ) int { if ~ ~ - 123 { "bar" [ false ] -- ;
 } else { if - ~ ( "bar" ) { if "bar" { "bar" *= ( 123 ) ;
 } else { ( - 123 ) ;
 } ;
 } else { for val foo int = "bar" == 123 & "bar" ;
 "bar" ;
 - - - ! ( ( ( 123 ( ) ) ( ! ( false ) , ( ( ! "bar" . foo ) == ! false . foo | true ) ( ! ! ( ( ~ 123 != 123 >= - ~ ! ~ ~ - true ) ) , ~ ~ "bar" < "bar" != ! 123 ) ) ) [ - 123 != ~ ! true [ true ] / - foo ^ foo ] <= ~ ! ~ - ( ~ ~ true & ~ ! - ~ - - ( ( true . foo - 123 ( false ( 123 < "bar" , 123 . foo ) >= ! ! ! ! ( ! - "bar" <= true ) != "bar" [ ( ( ~ false ) ( ( "bar" ) ^ ~ - "bar" , 123 ( ! ! "bar" ( false != ! ~ ! ! foo . foo , - true . foo ) != ~ "bar" ( ) , foo & ! ! ! - 123 ) - ~ - ~ "bar" [ "bar" != true > "bar" ( ) ] ) - ! ~ ~ "bar" ) ] , ~ true ) ) ( ! ! 123 , - ~ 123 ) ) ( ) ) ) ( 123 == ! false , - true ) -- { if false { if ( - "bar" ( ~ foo [ false [ ( false == true . foo & ~ ( "bar" != - foo * ~ ( ~ ~ ( 123 ) * - ! true ) [ false + "bar" ] ) . foo ) ] ] >= ! - ~ ( ! ! ~ foo * foo [ ~ ~ - - ! ~ foo ] | "bar" ( ) ) ( ) == ( "bar" ) , false == 123 ) ) ( ) { if ( - ! foo [ - ~ ( ~ - 123 ) ] ) { for val foo int = ~ ~ ~ true . foo ;
 ! - ( false < 123 + ~ ! ~ - true ) ;
 foo ( - ! ! "bar" ( ) , 123 ) & ! ! "bar" { "bar" ++ ;
 } ;
 } else { ~ ! true [ - - ~ false ] -- ;
 } ;
 } else { ~ ! foo -= true ;
 } ;
 } else { 123 * 123 + ( true ( foo / ! 123 , ! "bar" ) * 123 . foo ) != 123 & ~ ! ~ ! ~ "bar" ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int ) int { for val foo int = true [ false [ false ] > foo . foo ] & foo ( true , ( ( "bar" | ( ! ~ ( false ) * ~ ( ! foo + ~ ! - - true ) ) & false ) ) . foo == ~ ! "bar" ) <= - foo != ! ! - false ;
 123 ;
 ~ ( ~ ~ false ) != false + ~ ~ true / ~ false -- { for val foo int = - true ;
 ~ ~ 123 < false ;
 false { if "bar" & ! 123 ( true ( ) , ( ~ 123 >= ( - foo ) / ~ - 123 ) . foo ) { for var foo int . int . int = "bar" / ! - ~ - ! - - ( - ( 123 ) ( ) ) ;
 ( - false ) ;
 ( 123 < true ) >= ! ( "bar" * ~ - foo ( ! - - "bar" , - ~ - "bar" ) ) *= foo { - ~ - 123 = false + "bar" ;
 } ;
 } else { if "bar" { "bar" . foo != ! ~ - false [ ( false ) ] += foo ;
 } else { if true [ "bar" > ( ~ "bar" [ ! ! ~ foo ( ~ ~ ( ~ ~ true ) , "bar" ) ^ - - - - 123 ] ) ] + - ! foo { true ^ ~ true . foo **= ~ true ;
 } else { for var foo int = ! false ;
 ~ true ;
 - false ( ! false , ! true ( ! foo , - 123 [ ! - foo + ( "bar" < ~ foo [ false ] == ~ - ( true ) - ~ ( ~ ( ~ 123 ) ) & ! - 123 ) [ 123 ] == - "bar" ] ) ) == true -- { false . foo -= - 123 . foo <= false ^ - - - ! ~ ! ! 123 [ ( ! foo [ ( false ) ] <= ! "bar" ) [ - ~ ! ! false ] ] ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 val foo int . int = "bar" ;
 class foo { } ;
 class foo { foo int ;
 foo int ;
 func foo ( foo int . int , foo int , foo int , foo int , foo int , foo int . int . int ) int . int . int { for var foo int = "bar" > - ! ! ~ true ;
 ! ! true ( 123 , 123 ^ "bar" ) + - foo ;
 false += foo { "bar" ( - false ( ) , - ~ foo ) ++ ;
 } ;
 } ;
 foo int ;
 func foo ( ) int . int . int { for val foo int = ! false . foo ;
 ( - true ) == - - foo . foo ;
 - - ! "bar" + ( ! "bar" == ( - ~ - "bar" ) & ~ 123 ) [ foo ] { ~ 123 ++ ;
 } ;
 } ;
 foo int . int ;
 func foo ( foo int . int , foo int , foo int , foo int , foo int ) int . int . int { for var foo int = ~ - ~ true ;
 123 == - foo ;
 - - true + 123 -= true & - foo { if 123 . foo == ! ~ "bar" / "bar" { ( ! 123 ) >= - - ! ~ ( 123 < ~ ~ ! ! 123 [ 123 ] ) . foo ;
 } else { ( - "bar" / - - 123 ( - "bar" , - - "bar" ) == - false ) [ "bar" ] ++ ;
 } ;
 } ;
 } ;
 foo int . int ;
 } ;
 class foo { } ;
 func foo ( foo int . int , foo int , foo int . int . int , foo int . int . int ) int . int . int { ~ false . foo + true ;
 } ;
 var foo int . int . int = - - - 123 . foo * foo ;
 class foo { foo int ;
 func foo ( ) int { ! ! 123 [ false ] - - - ( ! ~ true ) == true -= ! true ;
 } ;
 } ;
 class foo { func foo ( ) int { if ! ~ - "bar" { for var foo int . int . int = false ;
 true ;
 ~ true . foo -- { ~ ! ! ! - true . foo -- ;
 } ;
 } else { if "bar" { if ~ true != true . foo { if - 123 + "bar" . foo { ~ false ;
 } else { "bar" != ( ! false ) ++ ;
 } ;
 } else { ! - ! - foo ++ ;
 } ;
 } else { for val foo int . int . int = true <= ! ~ 123 ;
 ~ ~ 123 * ( ! "bar" ) [ ( ! 123 ) ] ;
 ~ "bar" /= ! ( ! - - 123 ) ( ~ foo & ( false == ! ~ false . foo & false ) , - - true ( ! 123 + - ( true == foo . foo ^ - false ) , - true ^ false . foo ) ) { ! foo . foo & "bar" **= ! ~ - ~ - true ;
 } ;
 } ;
 } ;
 } ;
 foo int ;
 foo int ;
 func foo ( foo int ) int { for var foo int . int . int = false ;
 true * ( 123 ) ;
 ! ! ~ ~ ! ~ false ( ~ ~ - 123 ( - ! "bar" . foo & - ! ~ foo != true , false ) , ~ - "bar" ^ false * ! 123 ) /= ! ! ! ( ( "bar" ) ( foo , ~ foo . foo ) ) == ! foo { ( ! ! ~ ~ "bar" [ ! "bar" ^ true ] ) **= ( foo ) [ false ( "bar" / - false . foo ^ - true ( ~ ! ! 123 , ( 123 | 123 ( ) >= - ( false != ( 123 ) . foo ) ) ( ) ) , foo ) != "bar" ( ) ] | ~ - ! - "bar" ;
 } ;
 } ;
 func foo ( ) int { ~ "bar" . foo ;
 } ;
 foo int ;
 foo int ;
 } ;
 val foo int . int . int = - ! false > false ;
 class foo { func foo ( foo int . int . int , foo int . int , foo int ) int . int { ( false . foo == "bar" ) += true ;
 } ;
 foo int ;
 func foo ( foo int , foo int , foo int . int , foo int , foo int . int . int , foo int ) int { for val foo int . int = - foo ;
 false [ "bar" / "bar" ] ;
 false ++ { foo ;
 } ;
 } ;
 foo int ;
 foo int . int . int ;
 } ;
 func foo ( foo int . int , foo int , foo int , foo int , foo int , foo int ) int { for var foo int = - 123 ( foo , true [ ! ~ "bar" [ false ] ] ) ;
 - - false & ( ( - foo == false ( - true < false , 123 != - ( ( ~ "bar" ( - true , - - ~ - foo / ! ( true ) ) * ! "bar" ) == true ( false ( ) , "bar" . foo ) ) | ~ ! foo ) ) * true ) < 123 [ false - foo [ ! ( - ~ ~ ! - ~ ! - ! "bar" ^ false ) | 123 ] == - 123 * ! 123 ] & ! ~ true ;
 ! foo / ! - ( foo ( ~ "bar" ( ( "bar" ) / - - ~ true , ~ ( 123 | - - "bar" [ 123 & ~ foo ( ) - foo ] ) ) , "bar" >= 123 == ! false . foo ) ) ( foo . foo , - ! ! foo * ! false ) { "bar" -- ;
 } ;
 } ;
 class foo { func foo ( foo int , foo int . int . int , foo int , foo int , foo int . int ) int { ! - 123 ;
 } ;
 func foo ( foo int , foo int , foo int . int , foo int , foo int . int ) int { true . foo -- ;
 } ;
 foo int ;
 foo int ;
 foo int ;
 } ;
 var foo int = 123 ;
 func foo ( foo int , foo int , foo int , foo int . int . int , foo int . int , foo int . int . int ) int { - ! ! foo == true ( ) -- ;
 } ;
 class foo { foo int ;
 func foo ( ) int { - ~ "bar" != true ;
 } ;
 } ;
 func foo ( ) int . int . int { for var foo int = ! ~ ( "bar" == foo ) <= foo ;
 - true ( ~ false . foo - ~ false == false / - foo , true ) ;
 ! ! true ( ) ++ { for var foo int . int . int = - ( ! foo ^ - - "bar" . foo > 123 & ~ ! ~ - "bar" ) ;
 ! ! ( foo ) ;
 ( ! ~ ~ - 123 * ( "bar" >= ! ! ~ foo . foo == ( ~ ( - ~ foo [ ~ false ] * ~ ~ ! 123 - ! ! foo ( "bar" | "bar" ( ~ "bar" [ - ~ - ( false >= - 123 . foo == ~ ! 123 & ~ ~ 123 >= - ( "bar" ) . foo ) . foo ] , ! - false ( ! 123 ( - foo . foo - - ! ! ~ ( ( ( "bar" * "bar" ) ) + ! 123 ) [ true <= ! - 123 ] , 123 ) / foo , false ) ) , ~ ( ~ 123 . foo ) + false ) ) ) ) ^ true ) + - ( - - 123 [ foo ] ) [ ~ false . foo - - - - false . foo ] { if false != - ~ false { - ~ "bar" [ ! ! ~ ~ - ~ ! - foo ] -- ;
 } else { ~ true == - "bar" . foo -= - foo * 123 != true ;
 } ;
 } ;
 } ;
 } ;
 val foo int = - "bar" ;
 func foo ( foo int , foo int . int . int , foo int , foo int ) int { true - 123 > "bar" [ true ] -= false ;
 } ;
 var foo int . int . int = ~ foo ;
 var foo int . int . int = false ;
 class foo { foo int ;
 foo int . int . int ;
 foo int . int ;
 func foo ( foo int . int . int , foo int , foo int , foo int ) int { for var foo int = ! ~ ! ( false [ ~ - ( true != - - ~ foo <= - foo * ~ 123 ) ( ) & ( ! "bar" != true [ false . foo ] ) ] | false ( foo , false ) & ! - ! - 123 ) ;
 ! - "bar" ;
 foo . foo -- { 123 ( ) -- ;
 } ;
 } ;
 func foo ( ) int { - foo **= false ;
 } ;
 foo int . int ;
 } ;
 var foo int = ( true ) [ true >= true ( - ~ "bar" * false , ! false ) / ~ ~ "bar" [ ! ~ ~ "bar" . foo ] ] ;
 func foo ( foo int . int . int , foo int . int , foo int . int ) int { if ( ( "bar" ) ) { for var foo int = ! "bar" ;
 ! false ;
 false ++ { for var foo int = - false ;
 - "bar" . foo ;
 123 [ ~ ! foo & ( true <= - 123 [ ! 123 ] ) ] ++ { for val foo int . int = foo ;
 true ;
 - ~ - foo += ~ true == ! - 123 { if "bar" ( - - ~ foo ( 123 , ~ ~ ! ~ "bar" [ false [ ! true <= - - ( ! - ( false ) * foo ) ( ) ] ] > ! true ) , true ) { for val foo int = "bar" ;
 ( - ~ false ) ;
 ! 123 -- { if 123 { if true ( ) { for val foo int = - - "bar" . foo ;
 - ! ( ~ ! false ) ;
 123 ( false [ foo ] , false ) { foo . foo == ~ ! ~ - ( true ) & ( ~ 123 ) -- ;
 } ;
 } else { ~ ! - ( 123 ) . foo != ~ "bar" . foo * ~ ! "bar" *= false <= 123 . foo ;
 } ;
 } else { 123 **= ! ! ~ ( ~ false [ true [ ! - false | false ] ] ^ false ( ! ~ - - ! - ~ ( true ) != true , ! 123 / ( - ! 123 [ ( ~ ! ! ( ~ ( false ) ) - ! - ! ! ~ ~ foo ) ] > - true . foo ) + ~ ~ ~ ! ( ( ~ ! ! true ) ) ) == "bar" ) ;
 } ;
 } ;
 } else { ! 123 [ foo ] -- ;
 } ;
 } ;
 } ;
 } ;
 } else { for var foo int = ~ ~ "bar" != ! ( ~ - ! - ! 123 ( ) ) ;
 ~ ~ ! 123 ;
 foo == false = ! false { 123 += - 123 ^ false <= ! 123 ( ) != false ;
 } ;
 } ;
 } ;
 func foo ( ) int { ! ~ ~ ~ ~ ( "bar" . foo ^ ! true ) != true [ ~ ! ~ - foo <= "bar" . foo ] & - ! false [ 123 . foo | foo ] **= - ( ! ! - ! foo ) <= false . foo ^ ( foo != ~ ! true ) ;
 } ;
 func foo ( ) int { - - 123 -= "bar" ;
 } ;
 func foo ( ) int { ! ( ! foo ) -- ;
 } ;
 var foo int = true ;
 func foo ( foo int , foo int . int ) int . int . int { foo ( ) -- ;
 } ;
 func foo ( foo int , foo int , foo int . int . int , foo int , foo int , foo int ) int { ! ~ - 123 ;
 } ;
 var foo int = ~ true ;
 class foo { func foo ( foo int , foo int . int . int , foo int ) int { for var foo int = 123 . foo == true ;
 foo ( foo ( ) , false [ ( ! - ~ false ) | "bar" ( - - ! 123 / ! - foo , ~ foo ) ] ) | "bar" ;
 foo -= ( - "bar" ) { if ! ! true >= ~ false { for var foo int = ~ 123 ( ~ ! ~ ! ( ! ~ 123 ( ) ) , false ) ;
 ~ ~ false ;
 123 . foo = true { for val foo int = foo ;
 false ;
 123 { false . foo | false ;
 } ;
 } ;
 } else { foo ( ) -- ;
 } ;
 } ;
 } ;
 func foo ( foo int . int . int ) int { - "bar" . foo & false -- ;
 } ;
 func foo ( foo int , foo int , foo int ) int { if ! "bar" . foo { for val foo int . int . int = ! ( "bar" & 123 ) ;
 ! ! false ;
 ~ ( 123 [ 123 / false ] ) * true **= false [ 123 <= foo ] { - - true . foo >= 123 *= - ! "bar" [ ( true * false [ "bar" . foo ] ) * ! - true ] ;
 } ;
 } else { - ~ ! "bar" [ ( ! true ) . foo / ~ foo . foo ] ;
 } ;
 } ;
 foo int ;
 foo int ;
 func foo ( ) int { if - ! foo { ( ( - "bar" ) ) != ! ~ foo ++ ;
 } else { for val foo int . int . int = - - "bar" ;
 - ( ( true | ! "bar" ) >= ( ~ false * ~ ! 123 - ( ! ! - foo ) ) ) ;
 false /= - ! false ( ! ! false , ! ! "bar" * - true . foo ) { for val foo int . int = - - ~ ( "bar" ) ;
 ~ false [ "bar" <= foo . foo ] ;
 ! foo / 123 > "bar" / foo { for val foo int . int . int = ! foo ;
 - ~ - true ;
 foo + ~ - ! ! 123 ( ! "bar" [ true ] , - - ! ( ( "bar" . foo ) [ true != "bar" ] ) ) ++ { true [ ( ( true . foo ) <= false ) ] - ! "bar" ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 val foo int = false ;
 class foo { func foo ( foo int , foo int , foo int , foo int . int , foo int . int ) int { ! - ~ foo ;
 } ;
 foo int ;
 foo int ;
 foo int ;
 func foo ( ) int { false != true . foo -- ;
 } ;
 foo int . int . int ;
 func foo ( ) int { ~ true -- ;
 } ;
 foo int ;
 func foo ( foo int , foo int . int . int , foo int , foo int . int , foo int . int , foo int ) int { if 123 & "bar" { for var foo int . int . int = foo >= - foo ;
 true [ "bar" [ "bar" ] ] ;
 false / - ! "bar" *= ~ ~ ~ ( 123 / true ) . foo { - ~ foo | ~ ( true ) . foo / - - true = true ( ) ;
 } ;
 } else { for var foo int . int = "bar" ( "bar" ( ~ ( 123 ) , "bar" * ! ! "bar" ( ! ! ~ ( true ) ( true | true > ~ - 123 [ ~ true [ ! ! ! false [ ( foo ) ( 123 , false ) ] ] == ~ ~ true ] , "bar" . foo ) == 123 [ ~ ! foo <= - ! ~ ~ 123 [ ! - true & ( ! foo [ 123 + true ] ) ] ] + ! foo , ~ ! ( ! false ^ ! ~ - ~ ~ ~ ( 123 ) ) ( ! ~ "bar" [ ~ - foo ] , foo . foo ) - ~ true ) < ! 123 ) , 123 ( ) / ! foo >= - ( ! ! - true + "bar" ( ) ) ) * 123 ;
 - ! foo . foo ;
 foo = 123 - 123 { true -- ;
 } ;
 } ;
 } ;
 func foo ( ) int . int { if "bar" ( ) - false { if "bar" { ! ! 123 -- ;
 } else { if 123 / false . foo { false ;
 } else { ( foo . foo ) = false ;
 } ;
 } ;
 } else { ! true ;
 } ;
 } ;
 } ;
 
