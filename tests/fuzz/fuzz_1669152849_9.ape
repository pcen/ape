module foo ;
 class foo { ! 123 == - ~ false . foo -= ! ! false * - - foo ;
 } ;
 var foo int . int = "bar" >= 123 ;
 func foo ( ) int { false ;
 } ;
 var foo int . int . int = "bar" ;
 class foo { ! ~ ~ "bar" ( ) / ! ~ - - ~ foo ;
 } ;
 var foo int = foo ;
 func foo ( foo int . int . int , foo int , foo int . int ) int { - true * ~ ( "bar" [ ! ~ ( ! ( "bar" != foo ) * foo ^ ~ "bar" ) [ ~ false ] ] ) -= ~ true ;
 } ;
 val foo int . int = ( - ~ ( ! ! true | 123 > "bar" == - - - ~ "bar" ( ( 123 ) [ - true ] , ~ ~ ~ - 123 ) ) ( ~ ! ( ~ ( ! true [ false ] ) ) / ( ( true ) ) , ! - 123 . foo ) ) & "bar" [ - ! foo ] > true ;
 class foo { - ~ ~ - "bar" & - true *= ~ ! true / ! - ~ ~ - ! 123 ;
 } ;
 val foo int = ( ( ! "bar" ( ) ) / ~ true ) ;
 func foo ( foo int ) int . int . int { - "bar" *= false . foo ;
 } ;
 val foo int = 123 - "bar" ;
 val foo int = false ;
 func foo ( foo int , foo int . int ) int . int { "bar" ++ ;
 } ;
 class foo { for val foo int . int = ( foo != foo & ~ - 123 [ "bar" ] | ~ ( "bar" * ! ! - ( - ~ ~ ! 123 . foo | ~ ( ( ~ 123 >= ~ foo / true [ foo ] ^ - foo . foo ) | ! ~ ( false ) * ~ ~ ( 123 ) [ - ( ~ foo [ ( true [ ( 123 - - false ) * ( ( false ) ) ] ) != 123 ] ) ] <= 123 ) ) ) ) . foo ;
 "bar" [ foo / ( ~ 123 ) ] ;
 ~ ~ foo [ - foo < false ] { for val foo int = false . foo ;
 ~ ~ ( ! - false . foo ) ;
 - foo /= ! - foo [ foo ] > foo != ~ - foo ( ) / ( ( ~ "bar" ) ) { for var foo int = 123 ;
 ~ ~ ~ ~ - false . foo ;
 - 123 . foo -- { 123 / - - - ! false *= 123 ( foo ( ) , ~ - "bar" ) ;
 } ;
 } ;
 } ;
 } ;
 func foo ( ) int { if false . foo + foo { for var foo int . int . int = false [ ~ - ~ ! 123 ] ;
 "bar" ;
 false { ! true . foo & true [ true ] = ! false [ ( ! - true + ~ false . foo ) >= ( foo ) / - true ] ;
 } ;
 } else { for var foo int . int = ( "bar" ) == foo ;
 - "bar" ;
 123 . foo / ( "bar" == ! ( ~ - foo == false ) ) ++ { "bar" . foo ++ ;
 } ;
 } ;
 } ;
 val foo int = false ;
 class foo { if true >= foo . foo { ~ ! 123 ( ) * - - true . foo ;
 } else { true >= foo ( ) ;
 } ;
 } ;
 class foo { for val foo int = - - ~ - - ! "bar" ;
 - - ~ - foo != ~ false ;
 - - - ! ! 123 /= - "bar" | - ! true { for var foo int = 123 ;
 ! true ;
 ~ - ~ ( ! ( ~ "bar" [ ~ ! 123 + false [ "bar" ( ) & "bar" ] > "bar" == ! foo | ~ foo * ~ ! 123 ( ) ] < - false ) [ - foo ] ) ( - ! - foo , ! "bar" ) { "bar" & 123 ( ! "bar" ( ) , true ) ;
 } ;
 } ;
 } ;
 class foo { if ( false ( ) * - - ~ ! - - ! "bar" ) [ foo ] ^ ~ "bar" . foo { for var foo int . int . int = false ( ) + true ( ~ 123 , ( ~ ~ true ( ) ) ) ;
 - 123 < "bar" | ! - - ( - false ) ;
 true ( - true [ - - "bar" ] , false & - - ( ( ! ! ( foo ( ) / ~ ! ( ! true >= ~ - ! ~ ~ - false != ! false > true ) == foo . foo + 123 ) & ! "bar" ) . foo ) ) != foo += - "bar" / ~ ~ - true { if ! 123 ( ! "bar" , ! 123 ) | foo ( 123 [ "bar" ] , ! 123 ) { if 123 . foo - foo { if "bar" ^ "bar" ( "bar" , true . foo ) { ( true - ! - ! foo . foo != ~ ( "bar" | false ) ) -- ;
 } else { if false ( "bar" != ~ false [ foo * - foo ] , - ( ! - ( ~ 123 & foo ( ) ) ) ) { "bar" /= "bar" ;
 } else { for val foo int = ! false ^ - "bar" ;
 ! true [ foo . foo ] == "bar" ;
 ( 123 + 123 ) * ~ ( foo [ 123 . foo == ( ! "bar" ) ] < true ( ) ) ( ~ ( ~ 123 . foo ) , - false ) = true { if true { if true + ! - ~ ! "bar" { if foo == foo { ( 123 ) + ! ! ~ - - ! ( ! ~ false [ ( ~ - ~ "bar" != ~ "bar" * ( ! 123 ) [ ! foo [ false ] / - "bar" ] ) ] ) ++ ;
 } else { - false ^ - ! true ( false , foo * foo ) ;
 } ;
 } else { if 123 { ! "bar" ;
 } else { if - ! true [ ! ~ ( ( ~ ~ false . foo ) ) / ~ foo ] { if ! 123 { ! ~ ! ~ true [ ( true [ ~ 123 > ~ ~ ! ~ ~ - ( ! ~ 123 ) ( "bar" , ! ! true ) + - ! foo ] >= true ( ) / 123 ) > - ! - foo ] -- ;
 } else { - ~ false ;
 } ;
 } else { false -= ! foo . foo ;
 } ;
 } ;
 } ;
 } else { if - ! "bar" { ~ ~ - ~ true + "bar" ;
 } else { for val foo int . int . int = - ~ ! - ( ! - ~ ! false ) != true ;
 - ( foo . foo != ( 123 [ ( - ( - "bar" . foo ) != ~ ~ ( - ! "bar" [ - ~ foo ] ) [ true ] ^ ( true ) ) ] - true [ true [ 123 ] * false . foo ] ) ) ( ) ;
 - - true ++ { if ( false * ! ! ~ ! ! ~ - ~ ! ~ ! ~ "bar" ( ) > ~ foo . foo ) . foo { ~ ! foo -= - "bar" / - 123 ;
 } else { ( 123 ) ++ ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { true . foo * ~ false ^ true . foo ;
 } ;
 } else { for val foo int = true == false . foo ;
 foo . foo < ~ ~ ~ ! false ;
 foo & ~ - ! - ~ ! ( ~ - ( foo < - foo ( ) ) ( 123 >= true ( ) * - - - - ( true >= "bar" ) , true == ! - ! ~ - foo ) ) [ ! ! ! 123 & ~ "bar" ( foo , - 123 ) ] { ! false ++ ;
 } ;
 } ;
 } ;
 } else { ! ~ - 123 -= ! ! - true ;
 } ;
 } ;
 func foo ( ) int { for val foo int = 123 ;
 false <= ! ( ! - ~ true . foo | - ! true . foo & "bar" ) ;
 false == ~ false > false { ! - - ~ - ! foo *= ~ true ;
 } ;
 } ;
 val foo int = 123 ;
 class foo { for val foo int . int . int = "bar" + 123 ;
 ! foo ( ) == ! ! - - 123 / "bar" ;
 ! - false != ~ foo ++ { ! 123 [ ~ - - "bar" == - - "bar" ] ;
 } ;
 } ;
 func foo ( ) int { ~ - ~ "bar" [ - ! 123 ] ++ ;
 } ;
 val foo int = true / false ;
 val foo int . int = "bar" ( ~ false , ! foo ( ) ) / "bar" ;
 func foo ( ) int { true [ ( ~ ~ ! "bar" ) ] & - false [ ~ ~ ! false / ( - - "bar" > - ! ! 123 ) . foo == 123 / ~ "bar" . foo <= foo ] -= ~ foo ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) int . int { for val foo int = ! 123 ;
 ! false ;
 ~ false /= ! 123 { ~ ~ ! ! ( ~ foo == ~ 123 [ false / ~ true - true ] - ~ 123 [ ~ - - true . foo & ~ false >= true ] ) [ ( 123 . foo ) ^ false * ( ( ~ ~ false ) ) ] /= foo . foo == foo [ ~ ! ( 123 . foo ) >= ! ! ~ foo ] ;
 } ;
 } ;
 class foo { if false * - - true { ~ ~ "bar" . foo ^ false & ! - ~ false ;
 } else { true ++ ;
 } ;
 } ;
 var foo int = "bar" ;
 var foo int = true ;
 val foo int . int = ~ foo ;
 func foo ( foo int . int . int , foo int , foo int . int . int , foo int , foo int . int ) int { if ~ 123 < ~ ( true == - false ) { ( ! foo ( ) ) | foo ;
 } else { - ( - false ) ( ) ++ ;
 } ;
 } ;
 class foo { for val foo int . int . int = ( false ) [ - 123 [ ~ true ( - - ( true >= ! ~ ! foo ( false . foo , - ! ! ! foo ) ) , - 123 ) ] ] != ! - 123 - ! ~ foo ( 123 [ ! "bar" ] , - ! ! - ( ~ - ! ( ! false ) >= - true ) ) ;
 foo ( ! false , - foo ) | - ! "bar" == foo ^ - true ;
 ! 123 [ ( false ) ] { for val foo int = ~ 123 . foo ;
 - foo != "bar" * ~ ! - 123 ;
 foo { "bar" ( ) >= ! ~ - ! - ( foo ( - false - ~ false . foo , "bar" [ - false . foo ] ) / "bar" ) /= true [ ~ - true ] ;
 } ;
 } ;
 } ;
 func foo ( ) int { if ! - ! ! foo ( ) { for val foo int . int . int = - true == 123 ;
 false ;
 foo { 123 -- ;
 } ;
 } else { if - true [ false | ( ! true [ - false ] ) ] * true { ~ ~ ~ "bar" ( false [ ! ~ false - ~ ! true > ~ - - ~ - ~ - true ] , foo ( ) ) = ~ - ~ 123 . foo ;
 } else { if ~ - "bar" { if ~ - ! "bar" ( ~ foo , ! ~ ! ~ false ( ) ) { if - 123 [ - ~ 123 ] < - - ~ - true { ! "bar" ++ ;
 } else { for val foo int = foo ;
 ( ~ foo == ~ "bar" ^ ~ ! "bar" ) . foo & - ~ ! - "bar" ;
 ( "bar" >= - foo [ 123 ] ) -- { true [ ! true . foo ] != ( ~ true ( ) ) ( ) ++ ;
 } ;
 } ;
 } else { ~ ( "bar" != ~ "bar" ( - false * ( ~ false ) , ( ! ! ~ ! ! - - ! foo ) ) | ~ "bar" ) + - 123 ;
 } ;
 } else { if 123 . foo { ~ ( foo != foo ) += - - false [ - ! "bar" ] ;
 } else { for var foo int = foo . foo | "bar" ( ) ;
 ( ! "bar" ( ) ) . foo <= - false [ - ~ - 123 ] ;
 foo ++ { if 123 { if 123 == foo . foo { ! - false . foo ;
 } else { - 123 [ false . foo ] < ~ "bar" * ( "bar" [ ! foo ] ) [ foo ] **= ! ~ - ( false . foo ) != true [ ~ ( foo . foo ) >= ! ( - foo ( ~ ! ~ - foo ( ) , foo == ~ ( ~ ( - false / false ) ) >= ! "bar" ) & "bar" . foo ) ( ~ - ! ! 123 ( ) , ! 123 != ! ~ ! ( 123 ( ~ ( 123 - "bar" [ - 123 ] ) , ~ "bar" [ ~ - ~ true ] ) ) ) ] / - ~ foo ;
 } ;
 } else { if ~ foo ( ) { false = ( true ) ;
 } else { foo ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 val foo int . int = ! ( - "bar" ( ) ) ;
 var foo int = ( false ( 123 , - ! - foo < - true ) ) / foo ;
 val foo int = ~ ! ! ~ true [ foo >= ( ! - - ~ ( ~ "bar" ) [ ( - "bar" ) . foo ] ) * foo ( ) ] & ~ 123 != - "bar" ;
 class foo { 123 & foo /= ! ! "bar" ( ) >= ( ! ( - ! true . foo < false ) ) ;
 } ;
 var foo int = false + ~ false . foo ;
 func foo ( foo int , foo int , foo int . int , foo int . int . int , foo int ) int { for val foo int = ~ ~ false . foo ;
 ( ( "bar" ) >= - - 123 ) . foo ;
 ! - true -- { "bar" -- ;
 } ;
 } ;
 class foo { for var foo int = ~ ! false ;
 ( 123 ) ( ) <= ~ ( true ( ) ^ ~ false ) ;
 ~ ( ~ 123 ( false , ( ! ! ! ! false ) ) - "bar" . foo ) ( foo . foo , ~ ~ ~ - - foo ) == ~ - ( ! ! "bar" ) ( ) -= ( ! false ) ( foo ( ~ foo . foo , - ! foo ) | "bar" , 123 ) < foo { ( - foo ) <= ( - ( 123 ( false , false | "bar" . foo > - foo ) ) ( foo , - - foo [ 123 ] - ~ ! ( 123 ) ( ) ) ) ;
 } ;
 } ;
 class foo { if ! true [ ~ ~ - "bar" ] { if true { if foo / ~ ! ~ foo { for var foo int = ~ ~ false ;
 ! ~ ! ! 123 ;
 ~ foo ++ { false . foo **= - - ( ( 123 ) ) > - 123 != false [ ~ ! ( - - - ~ foo <= 123 ( ~ - ~ - - ~ true . foo , "bar" <= - 123 ( ~ - ~ ~ ~ ! ( false ) , ~ ~ ! ~ ~ ~ ~ 123 ) ) ) [ ! ( false ) * - ~ ~ 123 ( - ~ foo , false ) ] ^ - foo ] ;
 } ;
 } else { if - ! false & - false { if 123 { if ! "bar" >= ( - false [ ( "bar" ) ( ~ ( false ( ) ) . foo != foo ( ) , ! "bar" ) ] | false ) { - foo = ( ! ~ - false ) . foo == ~ ! ( ! foo == - ( ! foo ) . foo ) ;
 } else { ~ - false ;
 } ;
 } else { if ~ foo { if true * ! ~ - false . foo { if ~ true ( ) { for var foo int = - foo != ~ ( "bar" ) > "bar" ;
 ( ~ true + ! true ) ( ! ! foo == ~ ( - false ) / foo , "bar" ) ;
 - ! - 123 -= ~ foo * ~ "bar" { for var foo int = true ;
 "bar" ( ) ;
 - 123 != ! ! ! ( "bar" [ ~ ! "bar" ] < 123 ) = ~ false { for val foo int = false ( ) ;
 123 ( ( - 123 . foo ) , ! - ! - ~ 123 ( ! - ~ - foo , ! ! 123 ( foo * ~ "bar" . foo , - false ) ) >= ! "bar" [ ( - ! ( ! "bar" [ false ( ! ! - - ! ~ - - - ( ( 123 [ ~ ~ ! ( ~ 123 ) | "bar" ] + ( ( "bar" . foo / ( 123 ) == ! - 123 [ ~ ! - ~ - foo ] ) ) . foo ) < ~ true ) , - ! foo . foo / - "bar" == - - ( ~ ! - ! ( foo ) . foo / ! true ) ( ) ) ] + ~ foo . foo >= ! "bar" [ false ] + ! 123 ) / ~ ! false . foo ) ] ) ;
 "bar" -- { true [ ! ! ~ - true != - ~ "bar" ] -- ;
 } ;
 } ;
 } ;
 } else { ( ! ( - false [ ( true ) ] ) & ! ! - false ) [ "bar" ] ;
 } ;
 } else { ( foo ) ;
 } ;
 } else { for var foo int . int = false . foo ;
 "bar" - ~ foo ;
 123 ++ { for var foo int . int . int = foo ;
 ! ! ! ! - ~ ! ! true >= true ;
 ! ( true [ ~ ~ - ~ "bar" / - - ~ ! ( foo > false . foo ) ( ) ] ) [ ! 123 | ! 123 ] { if ! true . foo { for var foo int . int . int = ~ ( - ~ false - "bar" . foo != true ^ 123 ) ;
 ! "bar" [ false . foo ] != false ;
 ! "bar" ++ { "bar" **= ~ ! ! ! ~ ! false ;
 } ;
 } else { if foo { "bar" . foo == ! - ( "bar" ) . foo ++ ;
 } else { true <= foo - ~ ( ( false == 123 [ ~ 123 ( ) | ! foo . foo ] > ~ true ) & 123 <= ! - - ! true ) ( - ~ ~ 123 + 123 , ! ~ "bar" ) += false ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { if "bar" { ! ! ! false ;
 } else { if foo * ~ ! ~ foo { ( ( foo ( ) - - 123 [ "bar" * ~ - true ^ ! ( ! "bar" ) ] == - "bar" ( ) - "bar" . foo ) * ~ ~ ! - false ) == false /= - ! foo [ ~ 123 ] ;
 } else { for val foo int = ( 123 == 123 ) ;
 ( - ( true ( ~ false != ~ foo , true ( ) == ! ~ true < ~ 123 ( ) ^ "bar" ) ) ) & ~ ~ 123 ;
 ~ ~ ~ 123 += ~ ! 123 { false & "bar" ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { for var foo int . int . int = ! 123 [ ! foo != ! ( foo ( ( false ) + ~ 123 , 123 . foo ) ) ] ;
 123 ;
 - true != ~ foo { 123 [ true / ~ "bar" . foo ] -- ;
 } ;
 } ;
 } else { foo ( ) -- ;
 } ;
 } ;
 func foo ( ) int { "bar" -= 123 ;
 } ;
 class foo { for val foo int . int . int = ! ~ "bar" * ! ( ~ ( 123 / - false ) ( ~ - 123 ( false , 123 [ foo ( true . foo , "bar" & - true ) ] ) , "bar" ) ) ;
 ~ 123 ;
 ( ~ foo ) [ ! ( "bar" / 123 . foo ) ] { for val foo int = "bar" ( ) ;
 true ;
 ~ true [ false ^ ~ ~ ! - 123 ( ! ~ false , true ( ) ) ] * foo >= 123 += 123 [ 123 - ! foo < ( ~ 123 [ ( - ~ false [ ( ~ "bar" ) != - ( foo [ false . foo ] ) ] ) ] ) ] { if foo [ "bar" ] { if true != 123 <= - true { ~ ! "bar" / false . foo -- ;
 } else { for val foo int = ~ - foo ;
 "bar" ( foo [ ~ ! ! ~ ~ ! - - - ! true + ! "bar" ] , true ) > ( - foo . foo ) == true ;
 ! ~ foo += "bar" . foo { for var foo int = true | ! - - - ! - - ! - ~ ! false [ ! ! ( ! ( "bar" ) [ false ] ) . foo & ! false ] & foo . foo == - ~ ! ~ ~ ! foo ( ) ;
 123 [ ! - - - ~ - foo [ - foo ( ( ~ ~ ! - ! 123 ) ( ) , false ) - ! 123 ] ] ;
 ~ "bar" . foo -- { if - 123 . foo { - false ;
 } else { if foo ( ) { ( 123 ) /= ! "bar" ;
 } else { if false { ! true **= true ;
 } else { foo ( ( ~ 123 ) [ 123 ] , - ( ! ~ false ) [ "bar" [ "bar" . foo ] ] ) -= foo ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { if ! - ~ ! ( ( false ) ) != - ! "bar" { for val foo int = - - ~ - foo ;
 - ! ! false ;
 ~ foo { - 123 > ! ! "bar" ;
 } ;
 } else { foo -- ;
 } ;
 } ;
 } ;
 } ;
 } ;
 
