module foo ;
 class foo { foo int . int ;
 foo int ;
 func foo ( foo int ) int . int { SKIP { { } } SEIZE { { } } SEIZE { { } } ;
 } ;
 foo int . int . int ;
 } ;
 class foo { foo int ;
 func foo ( foo int . int . int , foo int ) int { } ;
 } ;
 class foo { foo int ;
 foo int ;
 foo int . int ;
 func foo ( ) int . int { } ;
 } ;
 foo : int = true ;
 foo : : ~ - true ;
 class foo { func foo ( ) int { foo : int : ! true ( ) <= foo ;
 } ;
 } ;
 foo : int . int : - - - ~ "bar" ;
 class foo { func foo ( foo int , foo int , foo int , foo int , foo int ) int . int { } ;
 } ;
 func foo ( ) int { for foo : : ~ ~ - ~ ! ~ ~ [ ] ;
 false != - ! "bar" ;
 ( "bar" ) or - ! false { false ;
 } ;
 } ;
 foo : = ! ~ [ true or - [ ] , "bar" >> false < 123 . foo , ! ! ~ - ( ~ ~ ! ~ foo >> "bar" and ~ ! ! - - - "bar" > ( ! true ) ( [ ] * 123 and - true * ( ! ( true ) >> ~ "bar" and true >= false ) , 123 ) ) and true , [ ~ ( - - false or "bar" ) , ! ~ foo << ~ ! 123 [ - 123 ] , true , ~ "bar" ( - "bar" , - ~ ~ ! - ( 123 ) , ~ "bar" , foo != foo , foo or - - ~ true , ! ~ ! ~ - - ~ [ [ 123 , true ] [ 123 == ! ( true . foo ) ] , false , - ! ~ 123 , foo ] ) << ! ~ ~ true , ~ false , ~ [ ] ] , ! false , - ~ [ ~ "bar" , "bar" , ! true [ - ! 123 ] , ~ ~ ~ true ] + - foo ] ;
 func foo ( foo int , foo int . int , foo int , foo int . int ) int { foo : int : true / ! foo << 123 ;
 } ;
 func foo ( ) int . int . int { SKIP { { REVERSE ~ - true ;
 } } SEIZE ( ! ~ ! ! ! foo ) { { REVERSE ;
 } } ;
 } ;
 class foo { } ;
 
