module foo ;
 var foo int = ! ! 123 ;
 val foo int . int . int = false ;
 var foo int . int . int = 123 | false . foo ;
 func foo ( foo int , foo int . int , foo int , foo int . int . int , foo int ) int . int { - 123 . foo **= ( ~ ! foo - ( true == - true ) ) ;
 } ;
 class foo { if ~ ~ ! ! - ~ false { if false ( ) { "bar" . foo += foo ( ) / ( ! ( - ! false ) ) . foo ;
 } else { if - "bar" [ "bar" ] & - ! true [ ~ true ] { - - ~ false ;
 } else { foo -- ;
 } ;
 } ;
 } else { ! foo ( ) *= 123 [ ! ~ 123 - ~ - 123 ] ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int . int , foo int , foo int ) int { if ~ ! ( - true . foo ) { ! - ~ true ;
 } else { ~ ! foo . foo ;
 } ;
 } ;
 val foo int = false ;
 func foo ( ) int { true . foo | ~ true . foo -- ;
 } ;
 func foo ( ) int . int . int { if "bar" . foo { foo **= foo ( ) ;
 } else { for val foo int = false & false ( ) ;
 ! 123 ;
 ~ - ! true <= ~ ! "bar" ( ) { if true { 123 . foo ++ ;
 } else { for val foo int = "bar" == "bar" . foo ;
 false ;
 ~ ! 123 -- { if ( ( ! ! ~ true ) > "bar" ) . foo { "bar" -= - false ;
 } else { false [ 123 ] ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 class foo { true ( ~ "bar" == - ( ~ - 123 ) , - ~ 123 ) ++ ;
 } ;
 class foo { ( ! ! ! ~ false ( 123 , ! - "bar" ( ) ) ) [ false . foo <= ! "bar" . foo ] ;
 } ;
 val foo int = ~ ! true [ ! foo [ ! ! - - 123 ] ] != 123 ( ! - ~ ~ "bar" , 123 != foo [ ( - foo ) ] ) ;
 func foo ( ) int { if ! foo { for val foo int = ! ( ( ! "bar" ( ! ~ ~ 123 == ~ "bar" - foo ( ) , false . foo * true + - ( ! false ) ) >= ~ ! ~ - ! ~ ~ true ( ) ) ) >= true [ foo ] ;
 - false ;
 123 ++ { - - ! ( - ( true ) ) ++ ;
 } ;
 } else { if ! ( ! ! ( true ( ! 123 != ~ - - ~ - 123 , ~ true ) >= - 123 ) ) < "bar" [ false + ! - ( ~ foo ) & ~ ! ! true . foo ] { for var foo int = "bar" ;
 ! ! - ! ~ true ;
 ! "bar" ( ) { if true { for val foo int = ! 123 > - ~ ! foo ;
 true * - ~ - ~ false ( ) ;
 ~ "bar" -- { for val foo int = ~ ! ! ( 123 [ true | "bar" ] ) ;
 - 123 . foo ;
 ! false <= true != ~ ~ ~ foo ++ { for val foo int = ! ( foo ) / ! ! "bar" ;
 false ( ) ;
 - ( - false ) / foo + ( true ^ - - - "bar" ( ) ) . foo = ( - foo ) { if ~ foo { foo ;
 } else { 123 ( ) & 123 ;
 } ;
 } ;
 } ;
 } ;
 } else { if true { false >= "bar" ++ ;
 } else { for val foo int = ~ false [ ! - ! 123 / ~ ( - false [ ! - ~ true ( ) ] ) ] ;
 123 <= - - ~ "bar" ;
 true -= ( ~ foo ) { ! true [ - 123 ] != 123 ( ) + ~ - foo ( ~ - ( "bar" ) , "bar" ) ;
 } ;
 } ;
 } ;
 } ;
 } else { foo [ - true >= foo ] ;
 } ;
 } ;
 } ;
 val foo int = ! "bar" ;
 val foo int . int . int = - ~ ( - 123 ) >= 123 ;
 class foo { true . foo ;
 } ;
 func foo ( ) int { if ~ ! foo >= ~ foo { "bar" ++ ;
 } else { - true -= - 123 ;
 } ;
 } ;
 func foo ( ) int { true > ~ false != ! ~ foo ( ) ++ ;
 } ;
 val foo int = ! ! ! ( "bar" . foo ) ( ) ;
 class foo { ! "bar" <= ! foo /= foo & - ! ! foo ;
 } ;
 func foo ( foo int , foo int . int , foo int , foo int ) int { for var foo int = - ! ! ( false * "bar" . foo != 123 ) [ ( foo [ ~ false ] ) ] ;
 true ;
 "bar" -= 123 { - ! true -- ;
 } ;
 } ;
 func foo ( foo int ) int { for val foo int = 123 & true ;
 ~ true ;
 false [ ! ( true ^ foo . foo * - false [ ( ~ foo ) ] ) ] -- { for val foo int = "bar" ;
 ! ~ 123 ;
 123 != foo [ true ] ++ { if - false < "bar" ( ) { - ~ false ( ) -- ;
 } else { 123 . foo * foo -= ~ 123 [ ~ foo - 123 [ "bar" & 123 [ - "bar" ( ~ foo ( - - false , - ( "bar" ) ) , 123 * ~ - ~ ~ ( ! ! foo * - "bar" ) ) ] > ( 123 [ ~ - foo ] ) ] ] ;
 } ;
 } ;
 } ;
 } ;
 class foo { if 123 + ~ "bar" . foo { if ~ - - ! 123 { for var foo int = true ;
 - 123 [ true [ foo [ ! false == ~ 123 & ~ ! "bar" ] ] ] ;
 ( false ) . foo += - foo == ! ~ ( ! true <= ! ! "bar" . foo ) [ foo [ ! - false ] - - ! true / true <= ! ~ ! - ( ! 123 * foo ( ) ) ] { ~ false ++ ;
 } ;
 } else { for var foo int = ~ false >= ~ 123 ;
 false ;
 ~ foo & - - foo *= ~ foo { for var foo int . int . int = true [ true ] ;
 - true ;
 ~ ~ "bar" { ~ ! - - ( - - ~ ~ - foo ( false < ! - foo , - foo [ - - - - true ] ) ^ foo ) ++ ;
 } ;
 } ;
 } ;
 } else { for val foo int = - ( ! 123 ) == "bar" ;
 foo ;
 123 ++ { 123 -- ;
 } ;
 } ;
 } ;
 class foo { "bar" [ - "bar" ] >= "bar" ;
 } ;
 class foo { for val foo int = - ! ~ true ;
 ~ ! "bar" . foo ;
 - ! true [ ! ! ! ! ! ! false < ! ~ ~ ~ true ] -- { false . foo ++ ;
 } ;
 } ;
 func foo ( ) int { ( ~ ! false ) | true -- ;
 } ;
 val foo int . int = ! ( ! ~ 123 < foo ) ;
 func foo ( ) int { 123 ;
 } ;
 var foo int . int = - false | ! 123 ;
 class foo { for val foo int = - ( ! ~ ! true [ false ] ) ;
 foo ( ! 123 , "bar" ) ;
 ! foo > ! "bar" - ~ true += - ~ - true / false [ true ] <= foo * false { for var foo int . int . int = true ;
 123 ^ ~ - 123 ;
 false ( ( - 123 . foo & ~ 123 == ! "bar" | ! true ) , 123 ) { if true ( ) { ! false . foo / ! ~ ( - true / ! ~ foo ) ( ) /= ! ! ~ foo < false . foo ;
 } else { if - - 123 . foo ^ ( true ) { ( ! ! ~ true < ! - - - - - - false ) ;
 } else { ~ "bar" < false ( ) = ~ ~ true == ~ foo ;
 } ;
 } ;
 } ;
 } ;
 } ;
 val foo int = true ;
 class foo { if - "bar" . foo { ! foo ;
 } else { for val foo int = "bar" ;
 ! "bar" != 123 + ~ true [ "bar" * ~ ( "bar" ( ( ! ~ foo ) ( - true , ! ( ! ~ true [ ! foo . foo ] ) ) & ! 123 , true ) ) ] <= ( "bar" ) . foo ;
 ! ~ false /= foo { foo ++ ;
 } ;
 } ;
 } ;
 class foo { for val foo int = ! "bar" ( ( - 123 & 123 ) ( false / ~ - ! ~ - ! true . foo , false ( ) + foo == ( true / true ) . foo ) != true , 123 | 123 ) / "bar" [ foo ] >= ~ 123 ^ ! "bar" . foo ;
 false ( - ~ "bar" ( ) ^ 123 , ~ - foo ( ) ^ ( 123 . foo ) ) / "bar" != - - foo [ 123 ] ;
 ~ false [ ~ foo ] { if - foo ( ) { - ~ ~ 123 ( ! "bar" . foo , ~ ~ ( 123 . foo ) ) & foo < ! ~ - false . foo = - ! false ;
 } else { for val foo int = ! - - false ;
 ~ foo ;
 - ~ foo { for var foo int = - "bar" ;
 false ;
 false * ~ ! "bar" { for var foo int = ! ~ ! false ;
 ! - - ! "bar" ;
 foo / ! 123 -- { foo ++ ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 class foo { if ~ true { ~ true < ~ true != ! ~ - - true ;
 } else { ! "bar" [ ! ! ~ "bar" . foo == foo ( ) / "bar" ] *= foo >= ! 123 | ! false ;
 } ;
 } ;
 var foo int . int = ~ ~ "bar" ( ! ! "bar" , ! ~ "bar" ) ;
 class foo { for val foo int . int . int = "bar" ;
 123 [ false ] <= ! - "bar" ;
 true -- { - 123 ;
 } ;
 } ;
 func foo ( foo int , foo int . int ) int { if ( foo [ ~ false ] >= ~ 123 ) { 123 == - ~ ( - ( 123 [ foo ( ~ ~ false , ( "bar" ) ) ] ) ) ++ ;
 } else { for var foo int = ~ true != ~ ! ~ false <= "bar" ;
 false ;
 - ( foo ) . foo ++ { if ! ! - ! ( ! ( ~ ~ 123 ( ~ - - "bar" , "bar" ) ) [ - true * true ( foo , - foo [ ! ~ false == - 123 [ - foo [ ( "bar" == ! "bar" [ - "bar" ] ) ] & ~ - ~ ~ 123 ] ] ) ] == ( false [ true ] ) ) + ( true != true ) <= - true ( ) { if - ! true != - - true { ~ - - ~ "bar" -- ;
 } else { if 123 { ~ 123 & "bar" -- ;
 } else { ~ ! ( ( ! ~ false * ~ foo . foo ) [ ! 123 / ! foo ] ) | - - foo ;
 } ;
 } ;
 } else { false != - 123 -- ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int . int , foo int . int ) int { if foo { - ~ ~ ( - true [ ! - "bar" ] - ~ ! ! ~ foo ) ;
 } else { if ( foo . foo * ! foo | 123 ) { if ! false { foo ;
 } else { 123 ++ ;
 } ;
 } else { for val foo int = ! ~ ( true ) ;
 ( ( ~ ! false [ ~ foo / - - - true ] ) [ false ] ) & ( ~ - false [ true == foo ( ) ] ) ;
 - ! - - ! "bar" [ - ! ~ ! ! false ] / "bar" ( - "bar" [ ! ~ "bar" ] , - true [ ~ foo ( false ( ) <= ~ false , ( ( - - ~ false ) ) ( ! "bar" [ ! 123 ( "bar" . foo , ! true ( ) * - false [ ( - - "bar" ) ] ) ] < - false - "bar" [ "bar" ] , ! ( true ) ) != - foo [ ( ( ~ ~ ! ! ( ~ false [ foo & - foo . foo ] ) ) [ - ~ ~ - - false ( ) ] != ! ~ ! "bar" ) ] ) ] > 123 ) -- { if 123 { if ! false [ ~ - ( ~ ! ! foo ) ] { 123 ;
 } else { - foo . foo = ! false . foo | 123 ;
 } ;
 } else { if ! - ! - 123 & ~ "bar" { for val foo int . int . int = false [ ! true ( ~ ~ ! ~ "bar" . foo , true <= ( ! ~ foo ) * foo ) * true . foo ] ;
 ! foo ;
 ~ 123 ( ) < ~ foo [ - true & true ] == ! "bar" . foo { for var foo int = ~ - true ;
 - 123 ;
 ! ! ~ ~ foo { 123 ;
 } ;
 } ;
 } else { ! ~ ( ~ ! - ~ - true ) ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 class foo { true = ! ~ "bar" ;
 } ;
 func foo ( foo int , foo int , foo int . int . int , foo int ) int { if - ~ "bar" { ! foo . foo ++ ;
 } else { - true == "bar" ++ ;
 } ;
 } ;
 var foo int . int = ! foo ;
 class foo { for val foo int = - ~ - false ;
 ~ ! ( ! 123 ) ;
 - ( false ) **= 123 { false [ true ] == true ;
 } ;
 } ;
 val foo int = ! "bar" ;
 func foo ( foo int , foo int , foo int , foo int . int . int , foo int ) int . int { for var foo int = true . foo & ~ ! ! - ~ 123 ;
 "bar" ( ) ;
 ! foo & - false . foo -- { - ! ~ true ( ) *= ! ( foo * ( "bar" ) . foo ) ;
 } ;
 } ;
 class foo { false ( ) -= "bar" ;
 } ;
 
