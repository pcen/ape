module foo ;
 func foo ( foo int , foo int , foo int ) int . int { if false [ ! ( ! ~ - 123 < false & - 123 ) ] { for var foo int = ( ! ! 123 != "bar" ( false , ~ ~ foo . foo ) ) == 123 ;
 - ~ 123 . foo ;
 - ! true -- { for var foo int . int . int = foo ;
 foo . foo < ! - - foo [ 123 ] ;
 ! - - ~ ( 123 . foo ) *= - ! ! foo { 123 [ false ] * ! ~ ( ! true ) - false . foo / - ( ~ - 123 ) -= ! - ( ! foo ) ;
 } ;
 } ;
 } else { foo ++ ;
 } ;
 } ;
 var foo int = foo . foo != foo ;
 class foo { func foo ( ) int { if - 123 ( ) { false + - ! ( ! ! "bar" ) [ "bar" . foo ] * - ! - ( ( ~ ~ ! - ~ true . foo ) ) ( ) -- ;
 } else { ! ! ~ ! - - true ^ ~ - ~ ~ false [ - - false ] **= - "bar" ;
 } ;
 } ;
 foo int ;
 func foo ( ) int { for var foo int = ~ true [ true ] ;
 ~ ~ ~ false ;
 foo ( ) = - "bar" <= "bar" . foo + false { if foo / ~ - ! ( "bar" ( ! true , ! true [ ~ ! - ! foo * foo ] ) ^ ~ ( ~ false == - ~ - true ) ) <= ! ! foo [ ~ ! ~ - - true ( ) != ! ~ false ] { if false . foo { for val foo int = ! - - ! true ;
 ! ( ( ! - ! ~ - ~ ! - - ~ "bar" ) - true [ 123 ( "bar" . foo , "bar" ) * "bar" ( true [ ~ ( foo [ ! - - foo . foo ^ ( ! ! ! ! foo ) . foo ] ) ] < ~ ~ - foo ( ( ! - ( ! ! "bar" . foo ) ) [ ( true ) ( "bar" , "bar" ( foo [ ~ true ] , ! true ) * - foo ( false , false ) != true . foo ) * "bar" != ~ - ( true | ~ - 123 ) [ - ~ "bar" == ~ 123 [ ! ( ~ - ! ~ 123 ( ) ) . foo < - 123 ] ^ ~ foo ] ] , ! foo . foo ) , ! - - - true ) ] ) ;
 true { ~ ~ "bar" | false & ~ ~ - false = ~ - ! ~ - foo ^ - false ;
 } ;
 } else { if ~ ~ 123 { false -= false ( ! ~ - ! ( foo [ 123 ] ) , 123 ) ;
 } else { "bar" != ~ false & 123 - ~ foo -- ;
 } ;
 } ;
 } else { ~ ~ - true . foo *= - ! foo . foo ;
 } ;
 } ;
 } ;
 func foo ( foo int ) int . int . int { for val foo int = ~ true . foo >= "bar" ;
 ~ false ;
 "bar" += ( 123 ( ) ) . foo / ! "bar" ( true , true != true ) { if ! ~ foo & - ~ foo { ~ ! - false ;
 } else { false ( ) ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int . int . int ) int . int { ( - ! false ) == - ! ~ - ! ~ ! ~ ~ false ;
 } ;
 foo int ;
 foo int . int ;
 func foo ( foo int . int , foo int , foo int , foo int . int . int , foo int , foo int ) int . int . int { for var foo int = foo ;
 foo ( ~ "bar" ^ "bar" , foo | ( ~ 123 ) ) ;
 "bar" / 123 . foo - ~ - ( ( - ! ~ ! - ! foo == "bar" - false ) [ "bar" [ ! ~ true [ ~ true . foo ] ] ] >= foo ( ) + ! false ( ) ) { if 123 { ! ! "bar" + - - true += ! "bar" ;
 } else { ! 123 >= ! - foo **= true ;
 } ;
 } ;
 } ;
 func foo ( foo int ) int . int { for var foo int = true ( ) ;
 - ~ ! foo ;
 - - ! - ! "bar" += ! true { if ! ~ - true | foo == false { if - ( 123 > ~ ~ "bar" == - "bar" & - 123 ) + true { if ! ~ ! ~ ( 123 ( ) ) { for val foo int = 123 ;
 - ! "bar" . foo ;
 - ( "bar" . foo + foo [ ! ! foo - ! 123 . foo ] ) / ~ foo { false ( ! 123 . foo , true ( 123 == 123 . foo , ~ true ) ) /= - false == false . foo ;
 } ;
 } else { for val foo int . int = ! 123 ;
 "bar" ;
 ~ false ( ~ true ( ) , ~ - 123 [ ! "bar" ( ) ] ) = 123 ^ false { ~ ! ( foo ) **= - ( foo . foo ) [ ~ false | ~ foo ] ;
 } ;
 } ;
 } else { ( - foo ( foo , - ~ ! ! foo ( ! false [ ~ ! 123 / ( ! ! - "bar" [ false . foo > ! - foo & - 123 ( 123 , true ) ] ) ] , true ) ) ) /= 123 . foo ;
 } ;
 } else { foo *= true != ! "bar" ;
 } ;
 } ;
 } ;
 foo int . int ;
 } ;
 class foo { foo int . int . int ;
 func foo ( ) int . int . int { for var foo int . int = ~ ( ~ ! foo * ! - ~ ! 123 ) ( - ! ! ~ false , - 123 . foo ) ;
 123 == - true ;
 ! foo { true **= ! false ( foo , false ( 123 ( ) / ! "bar" > false , 123 * ~ ( "bar" ) ) ) ;
 } ;
 } ;
 func foo ( ) int { false ^ foo & ! ( ! true ) -= ~ - "bar" . foo ;
 } ;
 } ;
 var foo int = "bar" == true | ~ true ( ) ;
 class foo { func foo ( ) int { ! false != ! - true ++ ;
 } ;
 foo int ;
 func foo ( foo int . int , foo int , foo int , foo int . int ) int . int . int { ! foo . foo != ( ! - - - ! false . foo ) ( ) ;
 } ;
 foo int ;
 } ;
 val foo int = true . foo ;
 class foo { foo int . int . int ;
 foo int ;
 func foo ( ) int . int . int { if true { if ! foo | "bar" [ false / - ~ - ! - true ] != ! 123 { ! ~ ! ! ~ true ;
 } else { 123 ;
 } ;
 } else { ! false + false **= ~ ! foo . foo > ( ~ ~ ~ "bar" <= ! - 123 / foo . foo ^ - false ) ;
 } ;
 } ;
 foo int ;
 func foo ( foo int . int . int , foo int , foo int . int . int , foo int ) int . int { for var foo int . int = true ^ - ~ ! "bar" ;
 - - 123 ;
 - ~ false -- { ~ ( ! 123 . foo != "bar" ) . foo -- ;
 } ;
 } ;
 func foo ( foo int . int , foo int , foo int , foo int , foo int . int , foo int . int . int ) int { for val foo int = - foo ;
 - foo ( ) ;
 foo -- { if 123 < foo { false [ 123 ] ;
 } else { if "bar" ( - foo + ! ! ~ true < ( true . foo == ( false ) ) ( ( ~ true | foo . foo == ~ ! ~ foo ) >= ! false , true ) != false * ~ ~ 123 . foo , 123 . foo ) { false < - 123 == true ++ ;
 } else { - true ( ) ;
 } ;
 } ;
 } ;
 } ;
 } ;
 class foo { func foo ( foo int , foo int , foo int , foo int . int ) int . int . int { if foo { for var foo int = - ~ - - foo ;
 false ;
 ~ foo . foo { if ( ~ ! foo ) ^ ~ ~ ~ ( ( foo ) ) { "bar" . foo | true ( ) /= true ( 123 . foo == false , false ) ;
 } else { for var foo int = ~ false / true . foo <= ! true . foo ;
 - ~ 123 & - ( ! true ) ;
 - 123 -= ( ! ~ - ~ 123 | ! foo ( - 123 & true [ - ~ "bar" ] , true . foo == "bar" ) < ( true ) ( ) ) { false . foo ++ ;
 } ;
 } ;
 } ;
 } else { if - false { ~ 123 ;
 } else { for var foo int = foo + ~ "bar" ;
 "bar" ;
 ( 123 ) **= ~ ~ false ( ) <= ! "bar" { 123 *= ! true ^ "bar" . foo & foo ( false , - "bar" [ "bar" ] ) ;
 } ;
 } ;
 } ;
 } ;
 foo int ;
 foo int ;
 } ;
 func foo ( foo int . int , foo int . int ) int { if 123 != - ! - ~ foo <= ! false { for var foo int = - ( ( true ) ( ) ) ( false | false ( ) , - ( ~ ! ! - ! false == - ~ ( 123 ) ) ( ~ - ! ( false [ false ] ) [ true + "bar" . foo ] , ( 123 ( true , 123 ) / true ) ) ) ;
 false [ foo <= - ! ~ "bar" ] ;
 true [ - foo ] { if ~ ! ! - true { true . foo ;
 } else { foo >= foo [ - ~ ! ! ~ ( - true . foo ) | true ( ( true ) , ! 123 ) ] ;
 } ;
 } ;
 } else { foo ;
 } ;
 } ;
 class foo { foo int ;
 foo int ;
 func foo ( foo int . int , foo int , foo int , foo int , foo int , foo int ) int . int . int { false ++ ;
 } ;
 func foo ( ) int { ~ ~ foo >= - foo + - ! ! ! "bar" -= - ( - ~ - ( true ) == ( ~ - false == true ) ) [ ~ ~ ! true . foo ] | - 123 ;
 } ;
 func foo ( ) int . int . int { ~ foo = 123 & ~ ! ! "bar" ;
 } ;
 foo int ;
 } ;
 val foo int = ! 123 ;
 func foo ( foo int . int . int , foo int . int , foo int , foo int , foo int . int . int , foo int ) int { ! foo += ~ "bar" + ! "bar" ;
 } ;
 class foo { } ;
 var foo int . int . int = 123 ;
 class foo { func foo ( foo int . int . int , foo int , foo int , foo int , foo int ) int { ~ - ( ~ ( foo [ "bar" ] * false ) ) ( ( true [ ~ ! "bar" . foo ] ) ( ) >= ! ! false , true ) += ! true == "bar" * - ~ ~ - - true <= ! "bar" [ foo / ( "bar" ( - ( ( foo ) [ ! "bar" != true ] ) ( "bar" , ~ false ) , foo ) < ! foo ) ] ;
 } ;
 func foo ( foo int , foo int , foo int ) int { if ~ false ^ false { ! 123 ;
 } else { - false . foo += ~ 123 ( ) ;
 } ;
 } ;
 } ;
 class foo { foo int ;
 foo int ;
 func foo ( ) int { for var foo int = 123 ;
 true ;
 - foo != 123 ( "bar" , true >= foo * "bar" ( ! foo ( "bar" , ~ true + ( true . foo == ( 123 ) ^ foo * foo [ ~ foo ] ) ) , - ( ~ ! ! ~ 123 == "bar" ) ) == ~ foo . foo ) += true [ ! ~ ( false >= - ! true ( ! foo , - - ( 123 ) != ~ ( - ~ ~ ( ~ - - ( 123 ^ ! ! - - foo ) > ~ 123 ) ) ) ) ] { "bar" ;
 } ;
 } ;
 } ;
 val foo int . int . int = ( ! ~ ! - ! ( ! ~ "bar" ) . foo ) ;
 class foo { func foo ( ) int { ! true . foo ;
 } ;
 func foo ( ) int . int { if "bar" { - ! "bar" -- ;
 } else { for var foo int = - foo ;
 ( false ) ;
 true { 123 -- ;
 } ;
 } ;
 } ;
 foo int . int ;
 foo int . int ;
 foo int . int . int ;
 foo int . int . int ;
 func foo ( ) int { for val foo int . int = - true [ ! true ] * ~ ! false ;
 "bar" ;
 ~ ! false += true / "bar" . foo { if ~ 123 { ! ( true ) > 123 | foo ;
 } else { for var foo int = false ;
 ( - 123 ( ( "bar" . foo > ! - foo [ ( true [ 123 . foo ] ) ] ) != ~ ( "bar" ( ) | "bar" ) , ~ ! ~ foo ) ) ;
 "bar" [ "bar" ] ++ { false ;
 } ;
 } ;
 } ;
 } ;
 foo int . int ;
 func foo ( ) int . int . int { if foo < - ~ - foo { ! - foo ( ) * ( ~ - "bar" [ ~ ! ~ "bar" ] ) ;
 } else { for var foo int = ~ ( 123 ) . foo + ! - ! - - ( - - foo == ( ~ ! false ) . foo ) . foo != ~ foo ( "bar" == foo , true ) ;
 foo ;
 true -- { if false [ - ~ false [ ~ ! - foo ] - "bar" [ false ] > ( ~ ! ! - - ! ~ 123 . foo ) ] { if false { ! - true / 123 . foo ;
 } else { if ~ ( ~ false | ~ ! 123 ) [ false ] { ~ ~ false < true [ false ] ;
 } else { 123 [ ! ! ~ false [ 123 ] ] -- ;
 } ;
 } ;
 } else { for var foo int = "bar" != ! foo / ~ ( ! ! ! false - - ! ! "bar" . foo ) ;
 true . foo > foo ;
 - ( 123 ) == 123 ++ { true . foo *= false & foo [ ( false / true . foo ) >= ! - ( foo ) . foo | false ] | true ;
 } ;
 } ;
 } ;
 } ;
 } ;
 func foo ( ) int . int . int { false **= "bar" [ ! ! - - - - ~ ~ - ! 123 ( ! 123 . foo , ! - - true ^ true == - ! foo [ false ] ) ] * false ;
 } ;
 } ;
 var foo int = foo ;
 func foo ( ) int { for val foo int = ~ 123 ;
 ( ( ~ 123 + - - false ) ( - foo , "bar" & ~ 123 ) ) . foo ;
 true /= - ! ~ 123 >= ~ ~ true { - ~ ~ "bar" [ ~ true / - ! foo >= - ! ! false [ 123 < ! ! ~ foo ] != ! ( foo ) ] **= ( 123 ) ;
 } ;
 } ;
 func foo ( ) int { ! ~ 123 ;
 } ;
 var foo int = ~ foo . foo ;
 var foo int = - false . foo ;
 func foo ( foo int , foo int , foo int . int . int , foo int ) int { for val foo int . int . int = true ;
 - ! ~ - "bar" ;
 ~ true / "bar" [ ~ 123 [ true [ "bar" ( false & "bar" >= false , true != 123 ) ] | - ~ ! ~ false [ ! ! ~ true ] < ! ~ ~ - - 123 / - ! ~ ( - - 123 ) . foo ] < foo [ ! ! false ] != ~ 123 & true [ 123 ^ ! false [ ( ! 123 . foo ) ] ] ] -= - ~ false { "bar" * "bar" -= ~ true ( foo - "bar" > - ( ~ ! false ) , 123 ) ;
 } ;
 } ;
 val foo int . int . int = false ;
 func foo ( ) int { for val foo int = - ! ~ ! ! false ;
 ~ - ! foo ;
 foo . foo ^ ! ~ - "bar" /= foo { false ;
 } ;
 } ;
 val foo int = foo ;
 var foo int = ( 123 ) ;
 class foo { func foo ( foo int , foo int . int , foo int . int ) int . int . int { 123 / ~ ~ - ( "bar" >= ! - false == ! ! ! true ) /= foo ;
 } ;
 } ;
 func foo ( ) int { "bar" ;
 } ;
 class foo { foo int ;
 foo int . int ;
 foo int ;
 foo int ;
 func foo ( foo int . int . int , foo int , foo int , foo int , foo int ) int . int . int { for var foo int . int = ~ foo ;
 foo [ true [ - foo ] ] * ~ ! false ;
 true { ! 123 ( foo ( ) , "bar" / ! 123 ) += foo ;
 } ;
 } ;
 func foo ( ) int { ~ ( ~ true ) ( ) **= ! ~ ~ ~ ( ~ ! - false > - - true ) / - foo ;
 } ;
 func foo ( foo int . int . int , foo int , foo int , foo int . int , foo int ) int { foo -- ;
 } ;
 foo int . int ;
 } ;
 val foo int . int = ~ "bar" ;
 class foo { func foo ( foo int , foo int . int , foo int , foo int . int . int , foo int . int . int ) int . int . int { if ! "bar" { for val foo int . int = 123 ;
 ~ ! 123 . foo ;
 - foo == ! ! ~ "bar" ( ! foo , foo [ true & ! ! "bar" ] ) = ~ ~ foo <= foo { 123 ++ ;
 } ;
 } else { - false ++ ;
 } ;
 } ;
 func foo ( ) int { if ( "bar" / - ! ! ! "bar" != "bar" ( ) / ! ( ~ "bar" ) ) { if foo . foo { ~ ~ foo ( ) ++ ;
 } else { foo <= false & - - ( false . foo ) != - foo ;
 } ;
 } else { ! 123 . foo -- ;
 } ;
 } ;
 func foo ( ) int { foo ( ) >= foo . foo += "bar" [ 123 . foo != ! - ( ~ ( ! ~ ~ true ) [ ! ~ foo ( - ~ ! ~ foo , ( ! - ~ - ~ 123 == ! 123 . foo ) ( ~ ( false ( ) == ! 123 | foo [ ( ( true ( ) ) ) * true ( "bar" & - - true , 123 [ ~ ! ( "bar" ( ( ! true ) + ~ foo , ! ~ "bar" != ! ! "bar" / - ~ ~ ~ 123 [ - true ] < ! ! foo ) ) ] ) ] ) . foo , - 123 [ true ] ) ) ] ) ] ;
 } ;
 foo int . int ;
 foo int ;
 func foo ( ) int { 123 ;
 } ;
 foo int ;
 foo int ;
 foo int ;
 } ;
 func foo ( ) int . int . int { for var foo int = false ;
 false < - false ;
 true { if - "bar" { - - - "bar" ++ ;
 } else { if - foo ( ) { if ! ~ 123 { if ~ ( ( foo ( true ( false < false | ! ~ ! ! false , ! "bar" . foo / false ) , foo ) * foo ) . foo & false ) { for val foo int = ! foo ;
 123 + "bar" . foo ;
 foo . foo & true ++ { - ~ false -- ;
 } ;
 } else { for var foo int = foo . foo * ! false ;
 - "bar" ;
 foo [ - true [ ~ "bar" ( ) ] ] { for var foo int . int = foo >= - - ! ~ true ;
 - - false ;
 true += ( - ( "bar" ) > ( "bar" ) [ true ( ) >= true - 123 ( ) ] != ! false ( - true , - false | ( ! ~ foo | "bar" ( false ( ) , ! 123 ) ) ) ) ( ) { ! ~ ~ true ;
 } ;
 } ;
 } ;
 } else { false ( ) / ~ - ~ ! ( - - ~ true ) ( ( false . foo ) * true > - - "bar" != ! ~ ~ "bar" [ ( ! ~ false < ~ ~ - ! true [ ( ~ foo ( ) ) [ - 123 ] ] ) . foo ] - ( foo ) ( ) , 123 . foo ) == 123 + 123 -- ;
 } ;
 } else { if 123 . foo { - true ;
 } else { "bar" ( ) & - ! ! foo ;
 } ;
 } ;
 } ;
 } ;
 } ;
 class foo { func foo ( ) int { ! ~ foo -- ;
 } ;
 func foo ( foo int , foo int , foo int . int . int , foo int , foo int ) int . int { for var foo int = ! ( true [ - - true . foo ] ) & - ~ ~ true ( foo , true == - ~ ~ - 123 ) ;
 ~ foo ;
 - - - - ( false ) & - ~ "bar" { - true ++ ;
 } ;
 } ;
 foo int ;
 func foo ( ) int { if ( ( foo [ foo ( ) ] ) ) { for var foo int . int = ~ ! ! ~ ( ! ! true ) ;
 ( true ) != foo ;
 foo ( ) == false / 123 . foo { foo != "bar" > ~ ~ "bar" ;
 } ;
 } else { if ! "bar" { if ~ ( 123 [ ~ "bar" ^ ( true - ! - - - true ) ] ) { if - "bar" { ! 123 += ! ! ! false [ ~ true <= - foo [ foo ( ) & 123 ] ] ;
 } else { false . foo **= false ;
 } ;
 } else { for var foo int . int = foo ;
 foo ( ) ;
 ~ foo | ( true != ( - - ! - - 123 ) . foo ) [ 123 != - "bar" ( ( false * - ~ false . foo ) > false ( ) , true ( false ( ) * false != ~ "bar" , ( ! - ~ - ~ ~ ! foo . foo <= false . foo == ! 123 ) ) > - ! - false | ! - - ! false ) ] { for val foo int = false [ foo ] ;
 - ! ~ "bar" == ( ~ ( ! true . foo ) ) ;
 ! ~ false ++ { if - - ( ! foo . foo ) { ! ! ~ 123 ;
 } else { for val foo int = 123 ;
 foo ;
 "bar" ++ { ! 123 += - foo - "bar" ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { true | foo < false + ! ~ 123 ;
 } ;
 } ;
 } ;
 func foo ( ) int . int { for var foo int = ! "bar" ( ~ ! 123 ( ~ ! false ( foo , ~ ! ~ false * false ) / - ( - ~ - - foo * - - true ) , true ) * true != - ! ~ foo , - ~ 123 ) ;
 foo ;
 true { if - false [ ~ ~ - ~ foo ] { foo >= "bar" ++ ;
 } else { if - "bar" + false { ~ foo ^ - - true . foo <= foo ++ ;
 } else { for var foo int = false . foo / foo - ~ ! ~ foo ;
 "bar" ^ foo ;
 - ( ~ ~ "bar" ) != "bar" ( ) { 123 /= ~ ~ false >= 123 ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 class foo { } ;
 class foo { func foo ( foo int ) int { ! ( 123 ) += ! true ( false ( false , "bar" / - false ) , true <= 123 ) ;
 } ;
 foo int . int ;
 func foo ( foo int , foo int . int . int ) int { for val foo int = ~ ( ! ~ ! ~ ! ( "bar" ) - ~ ! foo ) ;
 - - ! true ;
 ~ - 123 ^ 123 . foo **= ! - "bar" . foo { ~ ( - ! ~ true ) ++ ;
 } ;
 } ;
 foo int . int ;
 foo int . int ;
 func foo ( ) int . int { if ! ~ ( ~ ~ ~ ! 123 & foo ) { if ! foo [ - "bar" | ~ true == ~ 123 * ( ( - 123 [ foo ] & ~ ! ! ~ ! foo <= ~ ! ! false . foo ) ) ( foo ( - ( true . foo & ~ ! ~ ! ( ( ! 123 ) ( ) ) ) + "bar" , - "bar" * ~ false . foo ) , false ( ) ^ 123 ) ] - true [ 123 . foo & "bar" ( ) ] & ! 123 . foo { "bar" ++ ;
 } else { if - - ~ ! foo { for var foo int = ! 123 / false ;
 foo ( ~ ! foo , ~ true ) ;
 123 & - 123 [ false ( ) >= 123 / foo [ "bar" . foo ] ] < 123 -- { "bar" ++ ;
 } ;
 } else { - false [ false ] *= ( ! "bar" ) [ ! true ] + ! 123 ;
 } ;
 } ;
 } else { if false { foo += ~ ~ foo ;
 } else { false | ! ! - true [ false ] = false ;
 } ;
 } ;
 } ;
 foo int ;
 foo int ;
 func foo ( foo int . int , foo int . int . int , foo int , foo int , foo int . int . int , foo int . int ) int . int . int { - ! 123 + 123 >= foo . foo -- ;
 } ;
 } ;
 func foo ( ) int . int . int { ~ ! ( ! foo < foo ) ;
 } ;
 func foo ( foo int , foo int , foo int , foo int ) int { if ! "bar" { ~ - ~ foo ++ ;
 } else { ~ "bar" [ ! ( - "bar" ) ] < ! - foo . foo ;
 } ;
 } ;
 var foo int = - - true ;
 class foo { func foo ( ) int { if false >= true != - - false { if - ~ - true + ( "bar" ) { for var foo int = 123 [ "bar" . foo ] ;
 123 ;
 ~ true [ ! ! true ] = false ( - 123 ( - ! "bar" == - false ( ! "bar" [ 123 * false <= ~ ( - true - ( ~ ! - ! ! "bar" != ! 123 [ 123 | ! "bar" ] ) < ! 123 ) [ foo ] ] , - - ~ ~ ! ~ "bar" ( ~ true , ( ! ! ( false ) + ~ foo ) ( ! foo . foo / false . foo > ! true , "bar" [ ( ( ! 123 ) ) ] ) - foo . foo ) / ! ( 123 ) == ~ - false ) , - ~ ! "bar" <= foo ( ) ) , - ! ( ~ ~ ! 123 & ~ false >= ~ - 123 ) ) { true ;
 } ;
 } else { for val foo int . int . int = ~ false != - - "bar" + ! - - foo ;
 ~ "bar" [ - - ~ ~ ~ - - 123 / 123 ( ) ] | true ;
 "bar" { if - "bar" [ - ! ~ "bar" . foo ] { if false { for var foo int . int . int = ! true ;
 ! ~ "bar" ;
 - ! ! ~ ~ - false . foo / 123 = true [ ~ "bar" ] { if 123 + ! ~ true { if true + ! "bar" { if - - 123 [ foo - ( false ( ! ! ~ 123 >= ~ ( foo / - true ) , ! 123 ) == 123 . foo ) [ ! false ( ) ] ] { for val foo int = ~ foo & false ;
 foo ( foo , 123 / "bar" ( ) ) ;
 ( ( - ! ~ ! 123 ( ) ) ) ^ 123 { ~ ~ - true ;
 } ;
 } else { foo - foo >= foo . foo -- ;
 } ;
 } else { for val foo int = ! foo ;
 ~ true [ ~ true - true <= - foo ] * ~ ~ ! ( - false . foo ) < ! "bar" . foo ;
 ~ - false [ - - ( foo ) ( ( "bar" / false . foo ) , false ) <= ! ! "bar" ] -- { 123 / ! ~ - ~ ~ false ;
 } ;
 } ;
 } else { ~ foo ++ ;
 } ;
 } ;
 } else { if ! "bar" { for val foo int = foo * 123 ;
 ~ ~ - ! ( ~ foo . foo > ~ false ( ) ) & - true == true [ 123 - "bar" ] ;
 - ! 123 *= ( ! - false ( ) ) { foo . foo ++ ;
 } ;
 } else { ~ ~ 123 ( "bar" ( ~ - ! - - ~ ~ ! ~ ! - - - - true , - 123 == ~ false ) , ( - ( - ! - ( true ) / 123 ( - 123 , ~ ! foo . foo ) ) ( ) ) >= ~ foo ) = ! true [ false ] ;
 } ;
 } ;
 } else { if 123 { if ~ true + ! ! foo { 123 . foo ;
 } else { if ~ true ( - foo , "bar" . foo ^ false ) { for val foo int = ! 123 < 123 ( ) ;
 - ~ foo ;
 ! - false == "bar" /= true { for var foo int = false ( ( true ( foo , ! false ) ) , ! true . foo ) ;
 ~ ~ ~ ! ( true ( 123 ( ) != ( - ! ! - ~ foo ) , foo ) & - "bar" ) - false ;
 ( false | true > ! 123 == ! ( foo > ! "bar" ) ) = ~ foo > ~ - ! 123 / foo { if ~ ! true { true * ~ ! "bar" + "bar" [ - - foo ] *= - - foo ;
 } else { 123 -- ;
 } ;
 } ;
 } ;
 } else { foo [ "bar" != - "bar" ] ;
 } ;
 } ;
 } else { foo . foo -- ;
 } ;
 } ;
 } ;
 } ;
 } else { ! - - ( ~ ~ false < foo ) ( ~ foo . foo / ~ ! foo , "bar" ) ++ ;
 } ;
 } ;
 func foo ( ) int . int { foo & foo -- ;
 } ;
 func foo ( ) int { if ~ true < 123 ( ~ - ! ~ - true != false . foo , true ) { foo [ ~ ! ~ ! ~ 123 [ ~ ~ ~ false ] ] / ! foo - ~ ( ~ ( "bar" ) / ! - ( true ) [ ~ ( false ( ) ) . foo ] ) ++ ;
 } else { for val foo int = - foo ;
 true ;
 ~ - ( 123 ) { if - ~ ! ! ( false ) < - foo { for val foo int . int . int = "bar" > false ;
 ! - true ( ) ;
 ! false -= false . foo { - ~ ~ ( ! ( "bar" ) ) [ ~ ~ true ] ;
 } ;
 } else { ~ false . foo * - "bar" [ "bar" ] -- ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int . int . int , foo int . int ) int { for val foo int = 123 ;
 - ( - - ~ ! ! false . foo ) ;
 true ++ { if foo == ( ~ foo > "bar" ) { if false { if foo ( foo < - ( - "bar" < ~ "bar" ) [ "bar" ] , false ) { true > 123 . foo **= - ~ ~ ~ ~ "bar" | - 123 ;
 } else { ~ ! - - - ~ true >= - foo == ~ foo [ ! "bar" > 123 ] += false ;
 } ;
 } else { true [ true + ! ( 123 [ ~ true [ - "bar" ] ] == "bar" ) & ( ~ ! ( false ) ) . foo ] = true . foo ;
 } ;
 } else { false . foo ;
 } ;
 } ;
 } ;
 func foo ( ) int . int { if ! "bar" { ! false + false -- ;
 } else { for var foo int = ~ foo ;
 ~ ~ false ;
 123 < foo -= true { for var foo int . int = true ( - true == ( ~ ~ ( ! ~ ~ true . foo < ~ ~ ~ 123 ) ( ) ) , true + "bar" & "bar" ) * 123 . foo ;
 ( true * true ) / ! "bar" ;
 - false <= - - foo { for var foo int = 123 ;
 ( - ( ( foo != foo ) . foo | - - ! - true != ! ~ ! ~ ! - ~ ~ ( true ) . foo ) ( false | ~ foo , false ( ) == ~ ~ true ) ) ( ( 123 . foo ) ^ false [ - ! true [ ~ ~ foo ] ] , "bar" ) ;
 123 < ~ - "bar" . foo + 123 ( false , ~ - ~ ( 123 / ! foo ) ) += 123 / foo { for val foo int = ( - ( ~ 123 ) ) ( true , ( 123 ) ) ;
 ~ - ~ ! ( - "bar" == 123 ) . foo / foo + ! "bar" ;
 ! ! "bar" | - 123 -- { false * foo . foo /= ! "bar" [ ~ false ] ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 class foo { foo int ;
 func foo ( foo int , foo int . int ) int { true == - ~ ! "bar" ;
 } ;
 foo int ;
 func foo ( ) int . int { if false ( ( "bar" ^ ( true <= ! ~ ! ! false ) . foo / ! false ) , "bar" [ ~ ( ~ ! ~ false ( ) ) != "bar" . foo ] | "bar" [ ~ "bar" ^ ! - ~ "bar" >= 123 ] / ! ( false != - foo ) == - ~ ( true . foo ) ) & - - "bar" { for var foo int = ( ! ( true [ ! ~ - - - ( ! "bar" . foo + false ) ] ) ) ;
 false == ( - true ( true , false <= foo ( false , foo [ ( foo ) <= ~ ~ - ( false ) . foo - "bar" ( ! - ( 123 ) * ! 123 , "bar" / false . foo ) ] ^ ! false ) ) ) ;
 ( foo [ "bar" [ ~ ~ - ! false ] ] == - ( true <= - foo . foo ) ) <= false { for val foo int = ~ - ( false ) ;
 ! false [ "bar" ] ;
 - ~ ~ "bar" * ~ 123 ( ~ - ( "bar" ) , - - ~ ( ( - "bar" . foo ) ) ) + 123 ++ { foo > ~ foo /= false ;
 } ;
 } ;
 } else { ! foo ( ) **= foo ;
 } ;
 } ;
 foo int . int ;
 func foo ( ) int { for var foo int = ! true == ~ ~ ( foo . foo ) & ( foo * 123 ) ( ~ "bar" [ - 123 ( ) ] == ~ 123 . foo , foo != ~ - ( ! - false ( ) ) . foo ) ;
 true != ( ~ - ~ true ( 123 , ! ~ "bar" ) ) > - - false + ! ( - ! true ) ;
 false -- { for val foo int = ~ ~ ! ( ~ foo . foo != true ) >= ! - ~ ! - "bar" / ! - false == 123 / ! - ! ( ~ ! ~ ~ false [ - true . foo + ~ ! ! false ( ( false ) == ! - ~ 123 * "bar" , ~ foo - ! 123 & ! 123 . foo ) ] ) ;
 ~ - false ;
 ! 123 - foo [ false ] { ~ true + ~ ! ( ! ( ( 123 [ ! ! - "bar" [ 123 . foo ] != ( ( 123 ) . foo | ~ - foo ) ] ) ) ) ;
 } ;
 } ;
 } ;
 foo int . int . int ;
 foo int . int ;
 } ;
 val foo int = true ( ) ;
 class foo { func foo ( foo int . int ) int . int { foo += ! 123 >= ~ - false . foo ;
 } ;
 func foo ( foo int , foo int . int , foo int , foo int ) int . int { false -- ;
 } ;
 foo int . int ;
 foo int . int . int ;
 func foo ( ) int { for val foo int = "bar" ;
 123 != "bar" ;
 foo ( "bar" , 123 ) *= ( false ( ) ) > 123 == "bar" { for val foo int . int = "bar" != ~ ! - ! - ( "bar" ( ) ) ;
 - "bar" ;
 ! - 123 { ! true = true | ~ ! - ! "bar" ;
 } ;
 } ;
 } ;
 foo int . int . int ;
 func foo ( ) int { if - 123 * ! foo { if "bar" . foo + - 123 { for var foo int = ~ ( ~ 123 ) ;
 123 . foo ;
 "bar" - false ++ { for var foo int = - - - ! ( false != ~ "bar" ) ;
 "bar" [ - 123 != ( ~ ~ ~ true ) & false ] | ! foo . foo == ~ ~ 123 ;
 ( - ~ foo ) { if 123 { for var foo int = true ;
 false & ! "bar" ^ - true & true ( ) ;
 foo ++ { "bar" . foo ;
 } ;
 } else { if false [ ! true ] { if true == ( ~ ! ( ~ ! ~ ~ ! ( foo . foo != "bar" . foo ) | 123 != "bar" . foo ) - ! ~ true [ - ~ ( false . foo ) ] ) . foo - - ! false { - true & 123 ;
 } else { if "bar" { for var foo int = true ;
 "bar" ;
 123 { for var foo int = foo ( ) ;
 ( "bar" ) ( ) ;
 ~ true != false = ! - foo . foo { if ( ( false ) * ! ! "bar" ) [ "bar" ] { ( ! - - false ( ~ - ~ false & - - - false , - 123 ) ) ;
 } else { 123 . foo -- ;
 } ;
 } ;
 } ;
 } else { if "bar" [ "bar" >= false ] + ~ ~ ~ ! - - false { for val foo int = ~ ( ( "bar" ( ) ^ foo . foo ) ) ;
 - - ( foo ) . foo ;
 - - ( false . foo ) -= - ~ foo ( - false , ~ - false ) * - foo { - foo [ true . foo ] + "bar" / - "bar" ;
 } ;
 } else { for val foo int = ~ 123 ;
 ( ! - 123 >= true ) ;
 ! false { ( ~ ! - false [ ! true ] ) /= false ;
 } ;
 } ;
 } ;
 } ;
 } else { for var foo int . int = ( true ( false [ - 123 [ false ] ] , - foo ) - "bar" ) * 123 < foo ;
 123 | ( ( 123 ( ) ) == ~ true ) ;
 ! ! "bar" -- { if foo . foo ^ true { if ( ~ ( ! - ~ false ) [ "bar" ] < ! 123 [ ~ foo * ! ! ( false ) ( ) ] ) == ~ - ~ ~ false ( ~ - foo + ! "bar" , foo <= ! true ) { if ( ( ! ! foo . foo ) ) { "bar" & ( 123 ) ;
 } else { ! foo *= - ! ~ "bar" * ~ ~ false ;
 } ;
 } else { ! true ;
 } ;
 } else { - - ( ~ "bar" ( false , false [ true ( ) > foo == false ] ) ) . foo > ( ~ false / foo ( 123 , ~ ~ ~ - false ) != "bar" > ! false + - ~ ! ~ "bar" ( ) * ~ - "bar" ) **= 123 ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { foo ;
 } ;
 } else { false - ~ false ( ) ++ ;
 } ;
 } ;
 foo int ;
 foo int ;
 foo int ;
 } ;
 
