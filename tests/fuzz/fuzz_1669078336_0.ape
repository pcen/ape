module foo ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) { false * true ;
 } ;
 class foo { ~ - ~ false ;
 } ;
 class foo { for var foo int = ! foo . foo * true + false ;
 - ! ! ! true ;
 ~ "bar" == true . foo ++ { ! ~ ~ false / ( ~ "bar" ( foo , ! false ) ) ;
 } ;
 } ;
 var foo int = "bar" . foo + "bar" & true ;
 class foo { false -- ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int , foo int ) { false & ! ~ ! - true ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) { if - ! ! ! ! 123 ( true == foo [ ~ true < ~ false != foo ( - ! ! 123 , ~ foo ) | foo . foo ] , ! 123 | true ) { - ! ! ! ~ ~ false -- ;
 } else { for var foo int = ! 123 ;
 false ;
 false = ! "bar" ^ true { for val foo int = ( "bar" ) ;
 ( ( foo ) ) ;
 foo [ - ~ ~ ~ "bar" - true ] -- { - true -- ;
 } ;
 } ;
 } ;
 } ;
 class foo { - foo ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) { true += ~ ! ~ ! - "bar" . foo / "bar" ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) { for var foo int = foo ;
 "bar" ;
 true { for var foo int = ~ "bar" ;
 - ! ( ~ false ( false . foo , ~ ~ foo [ ( ( ~ ~ false ) [ ~ ! ! ! - false != ! foo ^ ! ~ ! ~ 123 ] ) / ! ~ - 123 ] > foo != foo [ foo ] ) ) [ false / foo ] + foo >= true * 123 ;
 123 [ "bar" ] { for val foo int = ~ ~ ! foo ;
 ~ ~ ~ ( foo ) > 123 ;
 - "bar" != ~ ( - ! ~ false ) ( ~ 123 , ~ ( false ) / ( ~ - - ~ ! foo ) ) -= ! ( - ! 123 ) { ! true ( ! 123 . foo , - - ~ foo ( ~ false , true . foo ) / - ~ foo . foo + ( - foo ) >= 123 ) **= false != ~ ~ - "bar" <= ! ! ! foo ;
 } ;
 } ;
 } ;
 } ;
 var foo int = ~ foo ( - "bar" [ - - foo > ~ "bar" [ - foo ^ - 123 == ! - 123 ] ] , foo ) ;
 func foo ( foo int , foo int , foo int , foo int ) { "bar" ++ ;
 } ;
 func foo ( foo int , foo int ) { false /= false ;
 } ;
 class foo { ! - ~ - - ! - 123 ++ ;
 } ;
 class foo { for val foo int = ~ ( ! - 123 >= ( foo == ( true ) - ~ foo ) ( false , foo ) ) ^ ~ "bar" ;
 true . foo >= ! 123 ;
 ( foo & true ) / - 123 -- { if false { for var foo int = foo ;
 ( - true ) ;
 123 += foo [ - "bar" ] { if ~ foo / ( ~ ! "bar" ) . foo { for val foo int = foo ;
 foo ;
 false & ( false ) - ( ( ~ 123 . foo ) ) [ - ! 123 ^ - ( ~ 123 >= - foo . foo ) . foo ] ++ { 123 **= - ! - true != ~ ! ( - ! ! ~ foo . foo ) ;
 } ;
 } else { if ! true ( - - - ! ! false / foo , true ) != ! true { - "bar" ;
 } else { ! false **= ! ~ true * false <= true ;
 } ;
 } ;
 } ;
 } else { ! foo | "bar" [ foo ( true >= 123 [ - false ] , ~ "bar" . foo ) / foo [ - true < - - true ] ] ;
 } ;
 } ;
 } ;
 class foo { for var foo int = - ~ "bar" . foo ;
 ! ~ ! - ~ - ( 123 . foo >= foo ) ;
 123 [ ~ ! 123 ^ foo . foo ] == - ~ false { for val foo int = ! - 123 ;
 ~ ! true ;
 - ~ ! false [ ( true - ~ 123 / ! 123 ) ] { 123 ^ ! true ++ ;
 } ;
 } ;
 } ;
 val foo int = true [ 123 ] / 123 ;
 class foo { for var foo int = ( ~ - ! ~ false & - 123 ) ;
 foo [ true & ~ ! foo ] ;
 - - true { true != ! ~ ( "bar" == ~ true + "bar" . foo > ! false ^ ! false ) *= - ~ - ~ - "bar" == ! 123 ;
 } ;
 } ;
 var foo int = 123 ;
 class foo { true . foo <= true == "bar" >= ~ foo / false . foo += ! ~ - ~ - ! ~ foo . foo ;
 } ;
 func foo ( foo int , foo int ) { if - ! "bar" ^ ~ "bar" { for var foo int = ~ ! ! ! ! ! foo + - "bar" != ! "bar" ;
 false + - ( false ) ;
 - ( - - ( foo ( true * 123 | "bar" . foo / 123 ( - ~ ( false ) , "bar" [ - - ~ true / foo [ ~ ! ! - true ( ~ ! ! true . foo / - 123 < false , ~ ~ ~ false ) == ( "bar" ) ( true , ! 123 . foo ^ foo ) ] ] - "bar" ) , "bar" ) ) ) - - true { ( foo [ false ] == true ( ! "bar" , ~ false ) * - foo ) -- ;
 } ;
 } else { - ! ( ~ - - true ) *= "bar" / ~ - - - foo ( ~ 123 . foo , 123 ) - - - ! "bar" ( ~ false , foo ) ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int ) { for val foo int = ( ! false . foo == "bar" * ~ ( "bar" ) ( "bar" , false ) ) ;
 false [ ( 123 ( true , true ^ - ! ~ 123 < "bar" ) - ! ~ ~ ! false >= - true . foo ) ] * "bar" ;
 - - ( ( false ) ( - - - false , - - ! foo ^ ~ - 123 ) ) ++ { ~ - ! - 123 . foo ++ ;
 } ;
 } ;
 func foo ( foo int , foo int ) { ! true ( ! false . foo * "bar" , ( true . foo * 123 ( true , false . foo ) ) ) += true [ foo ] ;
 } ;
 var foo int = ! false < ( "bar" ) . foo ;
 class foo { ~ ~ "bar" + ! ~ foo ;
 } ;
 func foo ( foo int ) { if ! 123 { for val foo int = ~ ~ false [ true ( true , ~ ~ ! ~ 123 == false ) & ! - "bar" . foo ] <= ! ~ - false ( ~ - ! "bar" * foo , - - 123 [ ! ~ false & - ! ( "bar" ) ] ) ;
 ~ false ;
 foo + true { for var foo int = ~ ~ "bar" . foo * ( - "bar" ^ "bar" < ~ ! - ~ false . foo ) ;
 ! true - foo ;
 "bar" ^ ! foo / ! foo { if ! - ~ 123 ^ true / foo { "bar" . foo ;
 } else { foo & foo != 123 | foo ( ! false - - - foo , 123 ) ;
 } ;
 } ;
 } ;
 } else { if ~ ! ! "bar" < ~ true == true + ! ~ ( ( ! foo . foo ) ) ( false , ~ ~ - - true <= true . foo ) { if - "bar" [ ~ 123 ] >= - "bar" / - - "bar" != "bar" ( ! true ^ - true [ - foo > - - "bar" [ ~ - "bar" + - ~ "bar" ] ] & true ( "bar" . foo , ! foo != true [ - true ] <= ! ~ true ) , ~ "bar" ) { if foo > - - ! ( ~ "bar" ( true , ( ~ - - - true ( 123 , "bar" ) ) [ false ] >= "bar" ) >= false ) [ ~ - "bar" ] | ( 123 ) == ! true { if false ( ! ~ false > true ( foo , "bar" ) ^ - 123 , ! ~ true ) >= - ~ ~ false / true [ ~ false ] { ( ~ ~ true ) . foo ^ ~ ~ ~ - "bar" ;
 } else { if false [ ( false ) - ~ ( ! 123 ) ] { if ! ! 123 . foo { if true [ - ! ~ "bar" ] | 123 { ! ! ~ ~ - ! ~ ~ ( ( foo ) [ ~ - ! false > ! ! - - ! true == foo [ foo ( ~ ! true [ true >= foo & ~ false [ ( true ( "bar" , ! - foo & foo . foo >= false | ! ( ~ ~ ~ ( true - ( ( - false . foo == false - ( true ) . foo < true . foo | ! true ) ) ) - - ! ~ false [ ( ( ( true [ ~ "bar" ] ) . foo ) . foo ) + ~ "bar" & foo > 123 ] ) ) - "bar" / - "bar" ( - ~ true , ~ ~ - "bar" != ~ ~ 123 ) ) / ~ - ( true ) ] ] != - ~ "bar" ( 123 / ~ ~ ~ true . foo , foo [ "bar" ] ) , foo ( - - - true , ! "bar" ) ) ] > ! ( foo <= "bar" . foo ^ - true ( - ~ true . foo - "bar" , - "bar" [ - foo [ ( true . foo ) | ~ - ~ foo ] != "bar" ( ! true ( foo , ( - ! - - true * true ) ( true , true . foo ) ) , false == true / ( - ( foo [ false [ - ! foo ( 123 & - 123 , ! ( true ) - ( "bar" [ true ^ false ] ) ) ] == 123 ( - false ( "bar" < "bar" , - ( ~ - ( - true ) | ! ! - foo ( false >= 123 , 123 [ ! 123 <= "bar" . foo == ! foo / ( ~ "bar" ) ] + false > ~ ~ ! ~ - - - - ! ~ ( ( ! - 123 * "bar" >= ~ - ! ~ false | ( ! ! - - - ( foo [ foo * ! foo ] | - foo ( "bar" & - ~ ( 123 [ 123 [ ~ foo ( ~ ( - false | ! ~ foo ) != - true ( ( - ! "bar" ) , foo ( 123 , - "bar" ) != ( foo ) + - "bar" ) & true , ! ( "bar" ) != ~ true ) ] != false ] ) [ ( - - - - ~ ( foo ) ) | foo ] , "bar" | ~ "bar" ( ! 123 , "bar" ( true , ! ~ ( ! ~ "bar" ) * foo ) ) ) < - foo ) ) ) ) ^ false == "bar" . foo ) ) <= foo ) == ~ foo ^ 123 , false ) < foo ] ) . foo ) ) ] ) ) ] ) /= 123 [ 123 ] ;
 } else { for var foo int = ( - ! false ( ! foo , ( ! - - true ) ) ) ;
 foo * ! - - foo . foo != ! 123 / ~ 123 ;
 ( ! ! foo / 123 >= 123 . foo ) ( ( ~ foo ) < - ! false | ! ( ~ 123 ) * ( ~ "bar" . foo / ~ foo ( ( ~ false ) . foo , false ) ) != 123 , false ( true , - ! foo ) >= true ) * ~ ~ true == ~ foo -= ~ 123 [ - true ] { if - ~ false { if foo { ( "bar" . foo ) -- ;
 } else { for var foo int = ~ ! "bar" ;
 ( - "bar" - false . foo ) . foo != true ;
 - - ! ~ "bar" . foo { for var foo int = ~ foo ;
 123 < - 123 [ "bar" ] != "bar" ;
 - foo = ~ - foo { if ( - ! true * true . foo ) { true [ 123 != "bar" & ! ~ ~ 123 ] ;
 } else { if - true { ~ ! ( - ! ~ ~ - ( 123 * - ~ foo ( "bar" , false ) | true [ true != ! false ] ) ) ( true , 123 - ( "bar" | - ( ! ~ ! ~ ( ! foo ( false . foo , ! "bar" > true ( ! false , ( 123 . foo ) [ false ] ) ) ) . foo ) ) [ false < ! true [ ! 123 ( - false - ! ! ( false [ 123 ] == ~ - false ) ( ( 123 ) [ ! false [ - 123 . foo ] ] , "bar" ( ( - foo ) < true [ false ( - 123 , - false . foo <= false == false & 123 ) ] , 123 ) ) , ( ~ false . foo != 123 ) < "bar" ( foo ( - ~ false , ~ ( - - ~ ( 123 <= ! - "bar" ) ) - ! ~ ~ ~ 123 < 123 ) , ~ true ( ! - false / "bar" ( ~ 123 . foo , - "bar" ( "bar" > foo ( ~ ~ - - ~ true , ~ foo ( false , ! true . foo >= 123 ) ) , foo & 123 ) ) , ~ ~ "bar" ^ 123 ) ) ) ] ] ) += foo . foo | 123 ;
 } else { for var foo int = ~ false [ ! ~ ~ - ! ! false ] ;
 "bar" ;
 foo != foo . foo - 123 [ "bar" [ ~ foo [ ~ ( - ~ false == ~ ! ~ true ) >= "bar" + - ( 123 [ ~ ~ ~ false / ( 123 ) ] ) ] ] ] ++ { - - ~ ! "bar" * false ++ ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { for val foo int = - 123 ;
 ( ( "bar" [ ~ false == ! ! "bar" ] ) | ! 123 ( 123 ( ( ~ ! - - false ) , ~ ( "bar" == - - foo ( "bar" , false == true ) ) ( ! - true , ~ ~ foo ) != ~ true > ~ - ~ ! false ) , 123 ) ) ;
 - ~ "bar" /= - 123 { for val foo int = ( foo ( foo , - ~ ! ! ~ 123 ) ) / false ;
 ! ! ! foo ;
 true [ ~ - true & "bar" | - foo ] { if ( ~ ! ! false . foo / ~ - - ! true ) < false [ ! ( ~ ( ~ ( foo . foo > "bar" ) ) [ - "bar" | ! ~ 123 ( ~ ! false != ! ~ ~ - 123 . foo , ( - ( ( ! - - "bar" > ! foo ) ( "bar" , true ) * true ( ~ 123 [ ~ - 123 - 123 <= - - ~ ( ! - foo ( ~ ~ - ! true , false . foo ) / 123 . foo ) ] != ~ ! "bar" , "bar" . foo / ( 123 [ true ] | "bar" ) ( ! ( true ) ( ! 123 < ! ( ( ( foo | false ) ) ( ! ~ ~ ! ! - - ! false , - - ( ~ - ! ~ ! ( foo ( foo < ! "bar" [ - 123 ( false [ ~ false ( "bar" < ~ - ~ ( false ) , ! - ( ! foo & foo + - ~ ! ( ~ false != foo ) ) ) ] , ~ false > true [ 123 <= false ] ^ true ) ] , "bar" ) >= ! ~ ~ ! true ( "bar" - ! false & false , 123 ^ foo ) | false ) ) ) & ( ( ~ - ! - ~ ~ false [ - ! ~ ~ ~ foo [ true ] ^ false != - - false >= true / ( ~ true ( ~ foo ( true ( 123 , ~ "bar" * ! false ) * - - ~ 123 , false ) , "bar" ) ) ] ) ) ) . foo , ! - ( foo ( ~ ! - true , ~ ! - ( false ) ( 123 , ! foo ) ) & "bar" [ ~ 123 ] != ( foo ) ) [ - ~ - ! ! 123 ( 123 . foo / false , ! ! "bar" . foo / ~ foo . foo ) ] == ! - ! ~ "bar" ( - ( ! - "bar" [ ! ~ - "bar" ( - ! ! - - - false / true > ! true . foo , ~ ! ! - - - true ) ] ) & ~ ( ! ( ( ! 123 ) <= ( 123 ) ) ) ( true . foo , ! ! ~ ! true ) , 123 ) ) , foo ) ) ) != foo . foo ) ( foo , "bar" . foo ) ) ] != "bar" >= foo ) [ "bar" * ~ - ! foo ( ( ~ "bar" ) ( true , ! 123 ) , false ) ] != true | ! 123 ] { if "bar" { for val foo int = ~ foo < ( foo [ true ] ) - 123 ;
 foo [ true ] | "bar" ;
 true . foo { true **= 123 ( ~ true , false ) ;
 } ;
 } else { for var foo int = ( - ! true * ~ 123 ( ! - false == ! false . foo , ( ! - ~ 123 ) & - ! foo < foo ) ) ;
 ! true < ! "bar" ;
 - "bar" - "bar" ++ { for val foo int = ~ foo / false [ ! true ] == foo ;
 ~ ( 123 . foo / 123 ) | ! - ! - ! "bar" ;
 ( ! ~ - true ) > ( ( ~ true [ - false ] ) ) ( ~ ~ 123 . foo | ( - ! true ( - ( - ~ - - ~ false ) [ "bar" ] - ! ~ ( ~ foo > ~ - ~ 123 ) , ~ 123 [ - - - ! true ( ( ~ true ) , ~ ( ! "bar" ) ( - ! "bar" >= ~ - "bar" , - "bar" ) ) ] > - ( ! 123 ) ) == - - "bar" ) ( true , - false ) , ! - 123 . foo ) & ~ 123 *= foo { for val foo int = ~ ~ ! ~ false . foo ;
 - ! ~ ( true | false ( "bar" . foo != true / ~ - "bar" | "bar" , false ( - 123 , ( "bar" ( ( ! 123 . foo & ! foo . foo <= true ) , - true == - ! ( false ) [ false [ ( ! ! 123 . foo ) ^ "bar" ] ] ) ) ) ) ) ;
 ! - ~ "bar" ++ { if ! true != true ( - true & ! "bar" . foo - - ~ ! ~ ! ( "bar" . foo & "bar" [ foo ( 123 , - - ~ ( "bar" != ~ 123 ) . foo != - - 123 ) / "bar" ( - true , ! true / "bar" - - ~ - 123 ) ] ) , - "bar" ) <= "bar" { ! ( ( foo ) ( ~ "bar" , ~ 123 . foo ) != 123 . foo ) -- ;
 } else { if - ~ "bar" { for val foo int = "bar" ;
 - ( 123 ) - ! ! ! ~ ~ foo ;
 ! 123 *= - ! - 123 [ ! - - - foo ] { foo - - ! ! "bar" ( ~ foo / false , ~ - "bar" . foo & ( 123 ) ) & "bar" != ( true ( foo + - "bar" , ! ~ foo [ - foo ] <= true ) ) . foo <= foo ++ ;
 } ;
 } else { "bar" ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { if ( ! ! ~ ! ! 123 ) - "bar" [ false . foo ] { ~ ( ~ foo ) -= true ;
 } else { false ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { ! 123 ;
 } ;
 } else { ( ~ "bar" ) [ - "bar" == - false ] -- ;
 } ;
 } ;
 } else { ~ foo ++ ;
 } ;
 } else { if 123 { true [ ~ 123 ] ;
 } else { - ( "bar" ) -- ;
 } ;
 } ;
 } else { for val foo int = ! - ( ~ ~ ! true [ ~ - ~ ~ 123 ( 123 ( ~ "bar" , "bar" ) != "bar" . foo , ~ ( 123 & foo ) ) / ( "bar" - ~ ! false ) [ ! ! - ! - "bar" ] ] == ! ! 123 . foo ) ( - ! ~ "bar" [ ~ ( - ~ ~ - "bar" | ! ! ! ~ ! ( ! true ) ) * foo >= true . foo ] , true ) != true ;
 "bar" ;
 - 123 & foo . foo < true **= - ( false ( foo & - false , ~ ! ! false ) ) != false { for val foo int = false ( false , false ) != foo * ! - - ! true ;
 false ;
 ~ ! "bar" & ~ ! ~ foo += ~ true - foo { for var foo int = "bar" [ foo ] != true ^ foo < - false ;
 foo ;
 "bar" >= true ++ { if 123 . foo { true ( true / ~ foo [ - ~ true != "bar" * ( true . foo ) ] , - ~ - 123 ) = ( ~ false . foo - 123 ) ;
 } else { if ( "bar" [ false ] != - - ( ! ! ~ ! ( ! false ( "bar" , foo ) ) . foo ) [ false ] ) . foo >= ~ ( ! 123 < foo / false ) { - ! ( false . foo / "bar" ) ;
 } else { if ~ ~ false { for var foo int = - ! true ;
 false - true ;
 false { if 123 [ false ] { ( - ( true == "bar" & ( 123 ( true - ~ true , 123 ) * - ! ( ~ ! 123 ) ) . foo ) / ! - - ( - foo ) ( ( true ) , - ! "bar" + false ) ) - ~ ! foo ( - ~ true , ~ ~ ~ ~ ! - 123 ) == ! ! ( ! ~ false ^ ! ! "bar" [ true ] ) ++ ;
 } else { foo ;
 } ;
 } ;
 } else { "bar" /= ! 123 ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 class foo { - ~ "bar" <= - foo ( - - - "bar" , "bar" ) ;
 } ;
 val foo int = foo ;
 class foo { ~ true + 123 ++ ;
 } ;
 class foo { for val foo int = - ( true ) ;
 true != true . foo + "bar" ( ! ~ false >= ~ 123 / 123 , - ! ! 123 + ! ( ~ ~ "bar" & foo | ~ - ( ~ ~ ! true ) == - true ) ( "bar" , ~ foo & ( - ( ! "bar" ) == true ) ) ) ;
 ( - - - 123 ) -- { ( true ) ( true <= - true [ foo [ ! ! ~ ! "bar" ( ! ~ foo , ! "bar" != ~ foo ( - "bar" . foo , - ! ! true == "bar" ) + ( "bar" ) ) <= 123 ( ! ~ ~ "bar" * "bar" [ ~ foo . foo ] > ~ ~ 123 , ! ~ false ) != ~ - ~ true ] >= - ~ true ( - 123 & ~ true ( ! - ! ! false [ "bar" ] , false . foo ) , 123 ) | 123 ] + true , true [ "bar" ] + "bar" ) **= ( ! ! ! true ) . foo ;
 } ;
 } ;
 class foo { if ~ true { if 123 / ~ - - 123 [ 123 . foo ] { ! - ! ~ 123 /= ! foo ;
 } else { for val foo int = ( ( foo [ ~ true ] ) [ ! ~ false * true ] < ~ ! ~ ~ foo ) / - foo ;
 false ;
 ~ ~ 123 * 123 [ foo ] ++ { ~ "bar" ;
 } ;
 } ;
 } else { false ;
 } ;
 } ;
 val foo int = true / ~ ( foo == ~ 123 ) > ~ foo & ! ~ ~ true ;
 func foo ( foo int ) { ~ ! ! false >= ~ ~ "bar" = foo & - 123 ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) { ( true [ - ~ false & "bar" ( - ~ ~ ! ( ~ false [ ! ( - ( ~ foo . foo ) ) ] ) ( ! ~ ! ( foo <= ! true ) , "bar" ) , - "bar" ) < ~ foo [ "bar" ] == ~ - ~ ! - true ] ) ++ ;
 } ;
 func foo ( foo int , foo int ) { if false { foo . foo == foo ++ ;
 } else { "bar" [ false ] ;
 } ;
 } ;
 var foo int = foo - foo ;
 func foo ( foo int ) { for var foo int = - ! - ~ - false / ! ~ ~ foo . foo == foo ;
 - ! ! - ( - 123 ) ;
 foo { false -- ;
 } ;
 } ;
 class foo { for var foo int = false [ false ( ~ ! ! - "bar" ( ! ~ 123 != ! - ( ! ( 123 / - ! foo ( 123 ( ~ ! ( "bar" ) [ ! "bar" ] >= - false , "bar" <= ( 123 ) & - 123 ( ~ ~ ( ! false [ - ~ - - false . foo ] ) < - ~ false , ~ "bar" ) ) , ( false ) ( ! false , ~ "bar" * ~ - ~ foo [ false ] ) ) != - foo ) == - true ) , ~ "bar" * false ( 123 / ! ! - "bar" , ( "bar" ) | ~ false . foo ) ) , ~ - 123 . foo & ~ "bar" ) ] ;
 123 ;
 - true ++ { 123 ;
 } ;
 } ;
 func foo ( foo int , foo int ) { for val foo int = ! false ^ false [ ( ( false ) < 123 * foo . foo ) ] ;
 ~ - ! ~ ! ( ~ 123 > "bar" != true ^ ( false != - foo ) ) ;
 ! foo [ "bar" ( "bar" , ~ ~ true ) ] ^ 123 /= false { for var foo int = ! 123 ;
 ~ - ~ foo > 123 ;
 ~ - - ! foo -- { for val foo int = false == false [ ~ foo ] > - false * foo ;
 - ( false ) . foo | ! ~ ! - true ;
 ( false ) = ~ foo { if - ~ ! ! - true | "bar" != false { for val foo int = - - - ~ "bar" == ! ~ ! ! ! "bar" [ ! - - false . foo ] ;
 true [ false . foo ] ;
 - foo { ! ~ 123 == ~ - - ! ( foo | 123 ) ( ( ! "bar" != ~ - false ) , ~ 123 ( - false , ~ false ) == - foo ) -- ;
 } ;
 } else { - "bar" / 123 > ~ ( - false [ ! ~ ~ - 123 - 123 ] ) [ - ( true ( ! "bar" , false ) ) == ( ( "bar" ( ~ foo . foo ^ ! ( true ( ( false ) , ~ 123 . foo / true . foo < ! "bar" ) < ~ 123 [ ~ ! ! true ( false != false [ 123 ] , true ) ] ) , ! ! ! true . foo ) ) ( ! foo , "bar" ) ) ] ++ ;
 } ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int ) { - ~ ! foo *= true ;
 } ;
 class foo { - ~ - ~ ~ - ( 123 ) & foo == foo ^ ! 123 -- ;
 } ;
 func foo ( foo int ) { for val foo int = 123 ( 123 , false ) ;
 ! - 123 ;
 ~ ~ ~ ~ - foo /= "bar" { if true { 123 != "bar" ;
 } else { for var foo int = false ( false , true ) ;
 ! "bar" ;
 false **= ~ ! ~ foo { if ~ foo { if 123 { ! true ;
 } else { if - ~ true + ! ! - true { if "bar" { true ( ~ - ~ - "bar" . foo , "bar" ) ;
 } else { ! ~ ( foo ) += false . foo ;
 } ;
 } else { foo <= ~ ( 123 + ( ! ~ "bar" ) ) & foo ^ foo != - ! - foo >= 123 ( ! 123 . foo & ( - true ) . foo <= ! true , ! ! true [ ! true & ! 123 ] ) *= false [ - ! 123 ] > 123 & true ;
 } ;
 } ;
 } else { 123 -- ;
 } ;
 } ;
 } ;
 } ;
 } ;
 class foo { if true { for var foo int = ( ! false == ! - ! ( - foo ( ~ ~ ( - 123 . foo ) , ~ foo ) != foo ) . foo ) ;
 - false [ - - - 123 [ 123 ( ~ 123 , ~ foo < ~ - ~ foo ) ] ] ^ ~ ~ ! ~ ( foo ) ;
 ! true < ! - false ( ! - "bar" , true & ( false == ( ! ~ 123 . foo | ! true ) ) ) += false { if 123 ( false . foo , - "bar" ) { "bar" ;
 } else { - ( ~ false . foo - true ) ++ ;
 } ;
 } ;
 } else { true = 123 ( ~ ~ ! - ! - ! ! ! ~ ~ ( - ! ( false ( ! ! foo != "bar" & 123 [ ! 123 ] , - ( false [ ! ! 123 ] >= ~ ( ! - - ~ ~ foo ) / true - foo ( true * 123 < foo , true ) ) + ! ! ~ ( ~ ( foo ) != foo ( 123 , - "bar" . foo >= - - ! ! false ) ) ( 123 <= 123 ( false . foo / ! ( false ) + "bar" . foo > ~ 123 , ! ~ ! ! - foo ) , ~ 123 != ( foo ) ) ) ^ ( ! ( - - - true ) - ~ ! "bar" ) ) ) , ~ false ( foo , ! ! - "bar" ) ) != ! 123 | - true & "bar" ;
 } ;
 } ;
 
