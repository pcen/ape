module foo ;
 foo : int = - [ ] ^ ( 123 and ! - ~ foo . foo ) or ! "bar" ;
 func foo ( foo int ) int { } ;
 foo : : [ ~ false . foo and - ! 123 ] < ~ true << ! ! ~ "bar" and "bar" / ( - false ) ;
 foo : int . int . int = true . foo or - true ;
 foo : : "bar" ;
 foo : : ~ ~ - foo [ ~ 123 ] ;
 foo : = false ;
 foo : = [ ] ;
 foo : = 123 . foo ;
 func foo ( ) int . int . int { [ - - "bar" , - true . foo ] [ - 123 and - "bar" ( ) ] %= ( ! ~ true ) [ ~ ! ! [ ~ ~ [ ] / false or ! [ ] > foo . foo and - ~ ( "bar" . foo ) , - foo . foo != ! foo ] . foo << ~ foo ] or - ! - true * true ;
 } ;
 foo : int = true & false ;
 class foo { foo int ;
 foo int . int . int ;
 foo int ;
 foo int ;
 func foo ( ) int { false or ~ ~ true /= - false ;
 } ;
 } ;
 class foo { func foo ( ) int { } ;
 func foo ( ) int . int { } ;
 } ;
 class foo { func foo ( ) int { foo : int . int : false and ! - foo [ - false % true < [ - "bar" ] / ( ! "bar" ) ] ;
 } ;
 func foo ( ) int { } ;
 func foo ( foo int . int , foo int , foo int , foo int . int , foo int . int ) int . int . int { } ;
 foo int ;
 foo int . int ;
 } ;
 func foo ( foo int . int . int , foo int , foo int , foo int , foo int . int . int , foo int ) int . int . int { } ;
 func foo ( ) int { foo : : true and - ~ - false ;
 } ;
 
