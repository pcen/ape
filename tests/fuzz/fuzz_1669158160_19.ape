module foo ;
 val foo int = ( false ) ;
 func foo ( foo int ) int { if ~ false { if true { if ! "bar" / foo { for val foo int = ~ true . foo ;
 - ~ ( ( false ) . foo ) ;
 false *= "bar" <= ~ - foo / - ! true { if true - 123 { ~ true *= - - ( - - ! ! - foo - 123 ) . foo == - ( 123 ) . foo & true ;
 } else { for val foo int . int . int = ! ~ ! "bar" == - true . foo ;
 ! ! ! - ! - foo * true ;
 123 . foo { ( ~ ! false == ( foo ) . foo ) -= true ;
 } ;
 } ;
 } ;
 } else { if foo { ( ! "bar" ) * ( 123 . foo ) [ - ~ - ~ foo ] ;
 } else { for val foo int . int . int = ( true ) ;
 false ;
 ! - ~ ( true / ~ true ) . foo += - ~ 123 ( ) { if false ^ ! ~ ~ ~ - - true [ ( ( - - - foo ) ) ] { ~ - foo *= ~ ( ! ~ - - ~ foo / foo ) ;
 } else { if ! "bar" { if foo { foo ;
 } else { if ! false { if foo > 123 == - false & ( 123 ) { if ! foo { for var foo int = 123 ( ( "bar" ) , - false . foo == - foo ) ;
 "bar" == ( "bar" <= "bar" != true ) ;
 ! - - ~ ( ~ - ! ~ ~ ( false [ - 123 ] ) ) { 123 ++ ;
 } ;
 } else { ( ~ foo ^ 123 ) ;
 } ;
 } else { for var foo int = - 123 ;
 "bar" [ ~ - foo ] ;
 - true { for val foo int . int . int = ( "bar" ) ( ) + ( ~ false != ( ( foo ( ) ) ( ) | ! 123 ) ) ;
 foo ( true [ "bar" [ - false ] * ~ "bar" [ "bar" ] ] & ~ "bar" , ! ~ ! true [ ( "bar" ( true ( ! "bar" , ~ 123 . foo ) , ! foo [ true ] ) & false ) ] ) ;
 ~ true + - foo [ "bar" [ true ] < true [ ~ foo . foo ] ] += - "bar" { for val foo int = 123 >= "bar" / ! ! true [ ! ~ - "bar" != 123 . foo ] ;
 "bar" <= ! foo ;
 ~ ~ false . foo != ~ foo ( ) ++ { - ( ~ ! - true [ ~ "bar" ] ) & false . foo ;
 } ;
 } ;
 } ;
 } ;
 } else { true ( ( ( ~ ! - true ( ! ~ ~ ! 123 , true ) ) ) , true & foo ) / - - true [ - - ~ ! foo ] != foo -- ;
 } ;
 } ;
 } else { for val foo int = ~ ~ false ;
 foo . foo != true ;
 false [ ! - ~ "bar" ] ++ { ~ ! "bar" **= ! - foo ( - "bar" & - false , ! "bar" ^ "bar" ) ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { if ~ - ( true . foo ) ( - 123 , 123 ) { 123 ;
 } else { if ! ! ~ true { if ~ ~ foo { for val foo int . int = false ;
 ! 123 ( 123 , ~ foo ) * ( - true == ! "bar" ( ) ) ;
 123 -= - ~ - foo { ( ! foo . foo ) += false ;
 } ;
 } else { for var foo int = - "bar" . foo ;
 ~ ~ false ;
 123 ( foo , false ) { if ( foo ( ( ! - ! ~ - ! ! ! "bar" ) , - ! ~ - - "bar" ) != ! - - true - ~ ( 123 ( false , "bar" . foo ) ) ) ( ) { for var foo int = ( ! ~ 123 ( 123 [ foo ] , "bar" ^ true ( ~ "bar" , foo . foo == - ! ! - foo >= true ) ) / false ) >= - false ;
 true ( ) != ( ~ foo . foo ) <= false ;
 "bar" ^ true ( ) != ! ! 123 *= 123 { if ! "bar" & foo [ true / ! ! 123 [ ~ ~ - true ] ] { for val foo int = ~ ~ - ~ - - foo . foo ;
 false [ foo ] ;
 ! - ~ "bar" { ( ! - ! ! ~ - true > - - - "bar" ^ ~ false & ~ "bar" ) ( ) ;
 } ;
 } else { for var foo int . int . int = true ;
 ~ ( ~ true ( - - ~ false . foo , false ) ) != ! ! 123 [ - "bar" . foo ] <= 123 ( ! true , ~ foo ) ;
 ! foo [ ( 123 ( ~ false [ ~ "bar" ] - ( - true > "bar" ) , true ) ) [ "bar" ] ] -= - 123 [ true ] { for var foo int . int = ! ! - true ;
 ! - ! ~ "bar" ;
 ~ false ( ) != 123 . foo ++ { for var foo int . int = foo ;
 true ;
 ( - "bar" - ! false ) | true [ - true [ foo != - false ] ] > ! foo { "bar" ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { ~ foo ++ ;
 } ;
 } ;
 } ;
 } else { if ! ~ ! 123 { if ~ - - 123 < - - foo - - ~ ! false ( ) { foo ;
 } else { for val foo int . int = "bar" == ( ! ~ ( foo ( - ( false ) , "bar" ) ) / false ) [ ! 123 ] >= - - foo ( ) ;
 ~ ! foo ;
 123 -- { if foo { ! ! ~ ~ "bar" += "bar" ;
 } else { ( ( - true ) / - ~ - foo ) /= 123 | "bar" ;
 } ;
 } ;
 } ;
 } else { ! - ~ foo ( ) / 123 ++ ;
 } ;
 } ;
 } ;
 } ;
 } else { if ~ ~ ( ( ! false - ~ true ) != true ) { 123 ;
 } else { ! - ~ ! - ! ( ( foo ) ) += foo ( ) ;
 } ;
 } ;
 } ;
 val foo int = - foo ;
 func foo ( ) int . int { false < ! - "bar" ^ 123 . foo * true *= ~ ! ~ ! - - ! ~ true . foo ;
 } ;
 var foo int = ~ true ;
 var foo int = true ;
 func foo ( ) int { - - true [ - ! "bar" ] >= ! ! ! - ~ foo ( ) & ~ false **= foo ( ) ;
 } ;
 class foo { foo int ;
 func foo ( foo int , foo int , foo int , foo int . int , foo int . int ) int . int . int { 123 -- ;
 } ;
 func foo ( foo int ) int { false ++ ;
 } ;
 func foo ( ) int { if 123 { false != false ( ~ - foo , ! ~ true & "bar" . foo ) < ( - "bar" ) - false -= - true . foo ;
 } else { if ! ~ - - ! ~ "bar" == ~ - ~ ~ ~ - ! ~ ! - - - ~ "bar" . foo > true { if foo { ! - foo += foo + 123 ( ) ;
 } else { ~ ~ - ~ - true ( ~ false , ( ~ 123 ( ~ "bar" , "bar" != - ~ false ) ) ) - 123 [ false < foo ] /= ! ! 123 < foo ;
 } ;
 } else { if false + ~ ! "bar" { ! false < true ++ ;
 } else { true >= foo . foo -- ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int , foo int ) int { ( foo . foo ) ( ) *= "bar" ;
 } ;
 } ;
 var foo int = true != foo . foo ;
 var foo int = 123 ;
 class foo { func foo ( foo int , foo int . int , foo int , foo int , foo int , foo int . int ) int { ~ ! "bar" == false <= "bar" ( ) ;
 } ;
 foo int ;
 func foo ( foo int , foo int ) int { for var foo int = ~ ~ foo . foo ;
 ! true ;
 ~ - ( ~ "bar" [ true ( - - - ! "bar" , "bar" ) ] < foo [ "bar" . foo ] ) **= ~ - 123 * foo [ "bar" ] { foo ;
 } ;
 } ;
 foo int ;
 func foo ( foo int . int , foo int . int , foo int . int ) int { for var foo int = ! "bar" [ ( 123 ) * ~ - ! "bar" ] ;
 ( foo . foo ) ;
 123 . foo { if foo [ ~ ~ 123 ] { 123 [ ! 123 ] ;
 } else { ~ ~ ~ "bar" >= foo /= "bar" ;
 } ;
 } ;
 } ;
 foo int . int . int ;
 foo int ;
 func foo ( ) int { for val foo int = 123 ;
 123 ;
 ! foo ++ { ! ~ ~ true * ! ~ ( - true . foo * foo ( ) ) ( ) >= - - ! 123 [ ~ true ] == ~ true ++ ;
 } ;
 } ;
 } ;
 val foo int = ! ( ( - true >= true != ! foo ) > ~ ~ ! 123 != "bar" ) ;
 func foo ( ) int . int . int { false [ ~ foo * 123 ] | ~ ~ true ( true + ( ! - ~ "bar" >= ~ ~ ~ - 123 & - - ! foo ) . foo , foo ( ) ) >= 123 [ ~ false ] ;
 } ;
 val foo int = ~ false . foo ;
 val foo int . int . int = - "bar" [ foo | ! ! ( - - ( ! true < ! ~ 123 ) ) >= - ( ( - - ! ~ false ) ) | ! ~ "bar" [ ~ ~ ! true > ! - ! ! true != - "bar" ] ] != ~ 123 [ "bar" >= ~ ( ~ "bar" ( ~ ! ! "bar" / ~ "bar" , ~ false != ! true ) <= ( false ( ) >= ~ foo / true . foo ) & ! ~ false ) . foo ] ;
 func foo ( ) int { ( ~ ~ - ( ~ foo . foo ) ) += ( ! "bar" ) | ! ! ! ~ foo * ! ( 123 ) ;
 } ;
 var foo int = - ~ ( ! - 123 ) [ ! - ~ - ! foo >= true ] - - ~ - - foo ;
 val foo int . int . int = - 123 [ true ] ;
 var foo int . int . int = - 123 / - ~ ! "bar" . foo > ~ true . foo ;
 func foo ( ) int . int . int { for var foo int = - 123 * 123 . foo - foo . foo ;
 ( ~ ! - - ~ - ! 123 ) | ( ! - "bar" ) ;
 ~ 123 ++ { for var foo int . int . int = 123 ;
 ! ( false . foo + foo == ! ( ~ ! true ) ( ) ) . foo & - - - ! foo ;
 - false != ! ~ 123 -- { if foo + 123 { if true { if true | ( true ) { if ~ ~ - ( ( foo ( ) ) ) * ~ ! ~ ! foo { ! ~ false -- ;
 } else { ! true >= ~ ! - - - ! ! ~ true ++ ;
 } ;
 } else { true ++ ;
 } ;
 } else { if - foo ( ) { - - ! ~ ~ "bar" *= true ;
 } else { for val foo int = - ~ false ( ! ! "bar" ( ) , - ~ - ~ ~ "bar" >= ~ ~ false ) ;
 123 <= false ;
 - "bar" | ~ 123 { if ~ ( "bar" ) { 123 - - foo ( ) ;
 } else { true += - ( ! ! "bar" ) [ ~ ( ~ ! - - true <= "bar" ( 123 , ( 123 ( true ^ "bar" / - - - ( - ! 123 / ( foo ) ) , "bar" < ! 123 . foo ) ) ) ) ] ;
 } ;
 } ;
 } ;
 } ;
 } else { - ~ ! ~ "bar" += "bar" ;
 } ;
 } ;
 } ;
 } ;
 func foo ( ) int . int . int { for val foo int = - true > ! 123 + ~ "bar" . foo ;
 - 123 ;
 false [ foo ] -- { ~ ! - foo ;
 } ;
 } ;
 var foo int = ~ ( foo ) ;
 func foo ( ) int { - false += ~ ~ "bar" ;
 } ;
 val foo int = foo [ foo ] ;
 func foo ( ) int . int . int { foo *= ~ ~ foo >= true ;
 } ;
 val foo int . int . int = "bar" ( ) ;
 class foo { func foo ( ) int { true > "bar" ;
 } ;
 foo int ;
 func foo ( ) int { if false { - - false -- ;
 } else { for var foo int = true >= false * ! 123 ;
 - true . foo ;
 123 != ( false ) -- { ! foo [ foo ] *= - "bar" | ! "bar" == foo & ! true ;
 } ;
 } ;
 } ;
 func foo ( ) int { ~ 123 . foo *= foo <= ~ ~ - ~ true ;
 } ;
 foo int ;
 func foo ( ) int { if ! ( 123 > ! - "bar" ^ false & true ) { for val foo int = - ~ ~ - false != ! ~ - - false . foo + ~ ~ "bar" ;
 ! ~ "bar" ;
 ( 123 ) <= foo ++ { for var foo int = false ;
 "bar" ;
 true / "bar" -- { if - ! true . foo { ~ foo . foo /= foo [ - 123 ] ;
 } else { ~ ( - ~ foo ( ) != - "bar" ) ++ ;
 } ;
 } ;
 } ;
 } else { for var foo int = "bar" & - 123 ;
 "bar" [ ( ( - "bar" ^ ~ true ) ) ] == - true . foo ;
 ! ! ~ ! ~ true -- { for val foo int = ! true ( ) ;
 ~ "bar" ( ! foo , false ( ) * - ~ "bar" . foo ) ;
 foo ( ) | - foo -- { if 123 + - 123 { for val foo int . int = 123 * foo [ 123 . foo ] ;
 false [ ~ - "bar" ] ;
 ~ ~ ! false -- { for var foo int = - ! 123 [ 123 [ ~ - ~ - ! ~ ( false ) > ( false [ ~ ~ - ! false . foo / ! foo > foo ] == ~ - - false [ ! foo ] ^ ! ~ ~ "bar" ) != - "bar" ( ) ] != foo ] ;
 ~ "bar" ;
 foo ( - ( - - "bar" ) , ~ "bar" ) - ~ 123 { if - "bar" { for val foo int . int = - "bar" ;
 ! ! false ;
 true . foo /= foo ( - ! foo , ~ false ) { if ( - ( ~ ! - false ) ) ( - foo , ~ - true ) { - - - false ;
 } else { foo ( ) **= ~ "bar" ;
 } ;
 } ;
 } else { ~ "bar" += ! "bar" ( ! ! ~ - - ! - foo , "bar" ) ;
 } ;
 } ;
 } ;
 } else { "bar" /= true ;
 } ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int ) int { for val foo int . int . int = ~ ! ( - - - true ( ! true <= - ! "bar" , "bar" ) & false ) . foo ;
 - - false ;
 - - ! - ! ! false [ ( ~ ! 123 . foo ) [ ! true ] ] /= foo [ ! ! "bar" . foo ] { if ~ true / 123 { for var foo int = - true ;
 true . foo ;
 false & - - ~ - "bar" -= ( - - ( ! ! ~ ! ( true ) ) ) [ false [ 123 [ - "bar" [ ! ~ 123 ] <= "bar" ( ! ( ! true ) ( ! ~ ! 123 == - - foo ( foo != false ( ) , 123 ( ! false , "bar" [ "bar" ] ) >= false ) , true <= foo ( ~ - true ( ) , ~ - - "bar" / ~ true ) ) > ~ 123 , ~ ! ! ~ ! true ) * ~ false ] ] == false [ ! ~ "bar" ] ] { for var foo int = ! 123 ;
 foo ( ) ;
 - true . foo <= true -- { 123 ( 123 , "bar" ) ++ ;
 } ;
 } ;
 } else { for var foo int = false | 123 ;
 ! "bar" ;
 false < ! ! - 123 & ! ! "bar" -- { for val foo int = ! false * true ;
 123 ( ( ( ~ ~ - ! false ) ) [ ~ foo [ ( - - "bar" ( ~ - ! foo / ! true , false >= foo | false [ - - ( 123 ) | true ] ) ^ ( - false ) ( ) ) ] != foo < 123 . foo ] , - "bar" ) ;
 false ( "bar" >= ! - foo ( ~ - false ^ foo , ~ foo ) , foo [ - 123 / ! ~ foo ] + false ) < ~ true ( 123 , "bar" ( "bar" , foo ) - ~ false ) -= - - ~ "bar" { if true { - ~ - foo - ! foo -- ;
 } else { if - - false <= foo ( ~ 123 ( ~ "bar" , ~ ( false ) ( "bar" , ~ - ~ ! "bar" ) ) - ! ! false , ~ ~ true . foo < - - foo ) { ( false >= ~ - - - ! "bar" ) . foo -= true ( "bar" [ true ] , - ! - true ) / ( false < - foo ) [ ! true ] ;
 } else { if 123 { for var foo int . int = 123 < ! 123 == - ~ - foo . foo ;
 123 / foo ( ) ;
 ! ! ( - - foo ) { for var foo int . int = "bar" ( ) ;
 "bar" >= - - foo != ! ! "bar" ( ( - 123 != foo >= - ( false - - "bar" . foo ) [ "bar" ] ) , - 123 ) ;
 123 ( - ~ ! ! ! 123 , foo ) - - false <= ~ - - false . foo == - ! - ~ ( ! ~ - false == ~ foo ) += - ! ! ! foo { 123 . foo = 123 <= ~ "bar" != foo . foo ;
 } ;
 } ;
 } else { ~ - - ( "bar" != foo ( ) > - "bar" ) [ "bar" ^ ! - ! ~ ! 123 ] - ! foo += ~ false ( foo ( ) , ! ~ ~ foo ) < ! - false & - 123 ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int ) int { ! true -- ;
 } ;
 } ;
 class foo { foo int ;
 func foo ( foo int , foo int . int . int , foo int , foo int , foo int ) int { if foo { if "bar" ( ) - 123 { if - ~ 123 . foo != true { 123 >= ~ ~ - ( ~ false & ! ~ - true | ! ! false [ ~ - true - foo ( - ! - - - foo . foo | ( ( - - ~ foo != - ! ! true ) ) [ 123 . foo ] , ! ~ ~ - - ~ ( true & - true ) - foo ( foo . foo , false / ~ false ) ) ] & ~ false ) = ! - ( false ^ 123 ) . foo ;
 } else { if ( ! ( ! - true ) [ foo ] ) { ( false ( ~ "bar" [ ~ 123 . foo - 123 . foo ] , ~ 123 [ foo != ! 123 . foo ] ) ) ++ ;
 } else { ( ~ false ( ) ) & ~ ~ foo ;
 } ;
 } ;
 } else { foo += ! "bar" [ ~ ! ~ "bar" ] ;
 } ;
 } else { foo ;
 } ;
 } ;
 foo int . int . int ;
 func foo ( ) int { 123 <= ! - "bar" ( ) == ! - ! ( ~ ( true ) ) ;
 } ;
 } ;
 class foo { foo int . int ;
 foo int ;
 } ;
 func foo ( ) int . int . int { - - - ~ "bar" [ ( "bar" . foo != ! ( ~ ~ foo . foo ) ) ( ) - "bar" . foo == ~ - ~ ! false [ 123 [ foo . foo + ( ~ foo [ ~ ~ "bar" ] >= 123 ) ] ] ] ;
 } ;
 
