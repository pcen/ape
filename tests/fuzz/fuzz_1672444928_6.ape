module foo ;
 class foo { foo int . int . int ;
 func foo ( foo int , foo int ) int { if ~ 123 << - - foo { 123 ^ ~ ! true and ! 123 + foo ++ ;
 } else { if ~ "bar" . foo >> - ~ ( ! ( foo [ true ] / foo ^ "bar" % 123 == - "bar" ) . foo ) [ true ] { for var foo int = - foo == - ~ ! false << 123 ;
 "bar" and - ! ! false ;
 123 [ 123 ] + ! 123 %= ~ ! false + 123 >= "bar" >> true . foo + 123 and true >= true [ "bar" and - "bar" . foo ] { ~ foo ( 123 < - - 123 , - foo ) / - true ( - foo and ! ! ~ foo , foo and ~ 123 . foo ) += 123 ;
 } ;
 } else { val foo int = foo . foo == true ( ) or ~ - "bar" ;
 } ;
 } ;
 } ;
 func foo ( ) int { var foo int = ~ ~ ! 123 ( false , foo ( - ( false ) , - ! foo ^ ( foo ( "bar" ( ) or foo , ( ~ true >> false ) << - ! ! - false ( ~ - ~ "bar" [ ( - ! "bar" . foo == ! - ! "bar" and ~ ( - foo & true ) ) > 123 ] , - "bar" / ! true and ! true ) ) ) ) ) ;
 } ;
 foo int ;
 foo int ;
 func foo ( ) int { for val foo int . int . int = ! "bar" % false and foo <= - ( ~ ! ~ - foo ( ) and ~ "bar" <= false . foo or true and ~ foo & 123 . foo ) - ! ! foo or ~ ~ - "bar" <= ~ foo . foo - true ;
 false >> foo [ 123 >> - ~ false ( ! ~ "bar" or false < false & ! ! false != ~ - false [ "bar" [ ~ 123 ] == - true ] * ! true ( ) , ! ! false ) ] >= true % ( ~ true ^ foo ) ;
 true [ ! ( true [ true ] * ! foo ) ( ! false == 123 , - - "bar" . foo < ! ~ ! 123 ) == - foo or foo ( ) / 123 ( ) ] >> ! "bar" . foo += ~ ! ~ foo or ~ ! "bar" { for val foo int = ( ! ~ - false [ ( ( ~ ( foo != true ) ( ( 123 or ! ~ ! ! true ) , ! true <= false == 123 + - ( ! ! 123 == ! foo ( foo % ( ~ foo ) [ - ~ ! ! foo ] == ! ~ - ~ ~ false , false ( ! foo [ true + ! "bar" ] << - - - true == ~ 123 . foo >= - - - "bar" + ~ - ~ ~ ! 123 and false . foo * "bar" >= ! "bar" , true or - 123 [ ~ ~ true or "bar" [ 123 ] ] ) or false << ~ foo >= false ) or ( ! ( ! true and 123 >> foo ) . foo * - ! ~ ( 123 and 123 . foo or false ( 123 , - ! ! ~ foo ) / ~ 123 ) ) ) or ! foo << ~ - ~ foo ) ) ( ) ) ] or - false [ ~ ~ ( ! ~ 123 . foo ) + - 123 >> true ] * "bar" [ foo | ( - ! - ! - foo . foo - 123 ) [ ~ "bar" ] >> ~ 123 ] ) ( ! ! 123 or ! 123 [ false % ( foo . foo or - "bar" and - true ( ) ) [ ( ~ 123 and "bar" ( false and ( ~ ! ~ ( ( ~ 123 ) >> 123 ) ) , ~ ! ! ! false % ! true << false ) ) + ~ ~ ~ ! 123 ] == true | ! - "bar" << ( "bar" [ true >= ! ~ false ] != ! ( foo / ! ~ ( ! ~ ~ false << ! ! 123 . foo - foo < ! ~ ~ "bar" << ~ ~ ~ ( false ) ) . foo and 123 >> - ( foo . foo >= false . foo ) [ - foo ] ) / ! 123 . foo ) ( ! ~ false and "bar" , ! ~ true / ~ ! ~ false [ - - "bar" . foo ] ) ] , ! ~ ( ( ~ false ) ( foo & - foo , ( true ) ) or ~ 123 != 123 ) ( ) and false ( ) != - ! ! - ! ~ ~ true ( ) ) ;
 false ;
 ~ true /= ! true { if true << ! - false { if ! - - false { var foo int = - ! ! foo << ! true [ - false ( foo or ~ - ! ( foo ) , true < ( ! foo ) . foo != foo ( ~ ~ false , ! "bar" ( ) << true ) ) % ( true ) [ - 123 ( ) ] >= ( ! 123 >> - ! ~ - - ~ ~ 123 [ - - ! ! - "bar" or true & false ] ) << ! - 123 ] <= 123 ( ! true + true [ - - "bar" or false > - ! foo [ foo ] % ~ ! 123 ] and 123 , ~ - - ~ - ! "bar" + true << - ~ - ( 123 and - false - foo [ "bar" and ( true ) / ! ~ ( ! ~ "bar" ) or true ] ) . foo ) ;
 } else { if - - "bar" != ~ true [ ~ ~ ! ( ~ ! - ( ! 123 [ ~ - false ] ) << ! ~ - 123 [ ( foo ( ) ) and foo ( ) / 123 [ 123 ] ] ) . foo and ~ "bar" | "bar" != foo ] { val foo int . int = 123 / ~ 123 >> true ;
 } else { false [ - ! ! ! true . foo ] ;
 } ;
 } ;
 } else { val foo int = ~ ! "bar" == foo <= - ~ 123 [ - true and ( "bar" * ~ ~ "bar" ) or - ! true ] or ( ! ! "bar" ( ) >> ! ~ ~ false ) ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int . int , foo int . int , foo int , foo int ) int { for var foo int . int = false [ - false != true ] and ~ ( ! ( 123 ) [ ! - false ] >= ( false or "bar" and "bar" [ true / ( ! "bar" / "bar" ( ) ) ] ) ( ) ) ( ) ;
 - ! "bar" & - foo ;
 ~ false and ( ~ ( ( - ! - 123 [ foo . foo and - - false [ ~ - 123 ] != false ] ) <= foo . foo ) << ~ ( ! - ~ - false ) ) << foo -- { val foo int = - false ;
 } ;
 } ;
 foo int ;
 func foo ( foo int , foo int , foo int . int . int , foo int ) int . int . int { ~ ! 123 [ - ( "bar" - ~ - "bar" == ! - - true or foo >> - true and foo == ! ~ ~ foo ) % false or 123 . foo == ~ ! - - false . foo ] or ! "bar" ++ ;
 } ;
 func foo ( foo int . int ) int { var foo int . int . int = false and true [ ! true [ - ~ false + ~ ! ( true . foo == 123 >> false . foo % - ~ ~ ( ( ! 123 . foo and - ~ ~ false == - ~ false [ ! true or false / ~ foo - ( ~ - true << ! - "bar" ) >> ! ! - true ( ) ] <= true [ ~ - true <= ~ ( "bar" ) [ false != 123 and - false ] ] ) ^ - ~ - ~ foo ( ) and - - "bar" ) ) ] or "bar" ] >= - ( ! ( true | ~ ! ! "bar" [ ! - "bar" or true ( ) >= - ! false ( "bar" ( false , true [ true ] ) , ! false ) ] >= true ( foo . foo ^ - ( foo ) , - "bar" ) ) . foo ) | "bar" ;
 } ;
 } ;
 class foo { foo int ;
 func foo ( ) int . int { val foo int = - ( ~ "bar" > ( - false . foo ) ) & false - - ( - - ~ ! foo ) ;
 } ;
 foo int ;
 foo int . int . int ;
 func foo ( foo int ) int { if "bar" { if ! ! "bar" [ true << ~ ! true >= 123 ] { ( - ~ ! false ) -- ;
 } else { - foo == ! ~ foo ++ ;
 } ;
 } else { false %= - ! false / ! true and true [ false ] == ~ ~ "bar" ;
 } ;
 } ;
 func foo ( ) int { false . foo **= ~ - ! "bar" . foo > true . foo != ~ ! false . foo >> - true . foo ;
 } ;
 func foo ( ) int { if - false + false { true ;
 } else { ~ false and "bar" [ ~ - - ~ foo ] < ! foo ;
 } ;
 } ;
 foo int ;
 } ;
 class foo { foo int ;
 func foo ( ) int { var foo int = true ^ ! true << - ( ! ! "bar" ) . foo ;
 } ;
 } ;
 func foo ( ) int { val foo int . int = ( ~ true ) and - - "bar" != - - false ;
 } ;
 class foo { func foo ( foo int , foo int , foo int . int , foo int . int . int , foo int , foo int . int ) int { if ~ false [ - - 123 ] { ~ foo + ~ ~ ! foo . foo and - ( "bar" / - true > false ) & ~ ( ! - - ! ( - ( ! - true < - "bar" [ false ( 123 > ( - ~ ~ ~ ! - 123 ( ) ) and - - ! - ! ~ false != - ~ foo , false or ( - 123 or - true ) == - - - ( ~ "bar" ) ( 123 == ! ! false and foo , ~ 123 ^ ~ ( foo [ - foo ] ) . foo < 123 ) - ! ~ - true % ( ! ( ~ false . foo == true . foo % ( ~ 123 > ~ ! ~ false [ true [ "bar" ( ) and "bar" ( ) ] << 123 [ ~ ! ( ~ "bar" and ~ ! false ) ] < ~ ( ~ false [ true ] * "bar" == - false ( "bar" >> "bar" , - true and ~ ! ( true ) ( ) ) < - ~ ! true ) % ( ( false or ~ true ) ( ! ! ( ~ foo . foo ) ( ) >> - ( false or ! ~ true ) and ~ ! ! 123 . foo , ! ! ! true / "bar" . foo + ( ! ~ true [ - ! - - ! true ( - ~ 123 and true * - false ( ) >> - foo | - true <= "bar" % ~ ! ! "bar" >> ! ~ ~ false [ ! false ] , - false [ false ( ) ] != 123 [ ! foo [ ~ ( false and foo ) . foo ] ] ) or 123 ( "bar" == "bar" , false ) << 123 ] or ! - ~ ( - "bar" ) ) [ ! ~ false == 123 ] ) ) ] & false ) ) ( ) and true or ! "bar" > ! "bar" ^ ( "bar" or ( 123 and ! ~ foo [ - false ] == ( ! ! "bar" ) ) * ! - ~ ~ ( 123 < "bar" << ( ( ( ~ "bar" < ~ ! ~ ! "bar" ) & true ( ~ true , foo [ false . foo % ~ "bar" . foo ] <= ! ~ 123 or 123 ) | "bar" == ~ - true and false ) ^ false ) . foo != "bar" and - 123 == ! ! ~ ! - ~ foo ( ) ) ) ( 123 ( "bar" . foo , false == ~ foo ) != ! false ( ) + false > ( - - foo or ~ ! - ( ( - ~ 123 ) ) and foo ) , ! - - ! ! ( ! ( ~ ~ - ~ ! ~ - "bar" ) ( "bar" ( - false [ ~ true > ! ! ~ ! "bar" [ - ! ( - - ! false or - ~ 123 & "bar" ) ] ] < foo [ "bar" ] , ! - - foo [ 123 ( ~ ! 123 and - foo . foo or ! ( ! ~ false ) ( - 123 . foo , 123 ) * "bar" ( - false [ foo ] + ~ ~ true , ( ! - false ) ) , ! - ~ "bar" ) and true or ! - "bar" >= - true ] >> 123 [ true ( "bar" , 123 ) ] & ~ ! ! ~ "bar" ) % ~ foo , true and false ( 123 , "bar" . foo ) ) - foo [ false ( ) & - false ( ) ] ) ) * 123 ) . foo << ! 123 ) and - - - false [ ~ ! foo ( ) ^ ~ true [ foo == - ( ( ! - ( false or false % ( false and "bar" == ~ false << - - 123 [ "bar" . foo or ~ ! - 123 . foo ] ) >> ~ 123 ) ( ~ ~ ! true [ - ( - - "bar" . foo and ( true ) or 123 ) ( true << ~ ~ 123 , true * false . foo ) ] > ~ - true . foo and ~ - foo , ( 123 . foo or ! 123 ) . foo ) ) << foo ) . foo ] ] ] >> ! ~ ! foo ) ) ) ++ ;
 } else { ~ ~ ~ 123 [ foo ] *= true [ ~ 123 << ~ - ~ ! - true ] ;
 } ;
 } ;
 foo int ;
 foo int ;
 foo int . int ;
 func foo ( foo int , foo int , foo int . int . int , foo int ) int { var foo int = true ;
 } ;
 foo int ;
 foo int ;
 func foo ( ) int { val foo int = ! foo ( ) and - ~ ~ ( true [ - false ] ) . foo or ~ - true ;
 } ;
 foo int . int . int ;
 foo int ;
 } ;
 func foo ( foo int . int . int ) int . int { for var foo int = true & ! 123 ;
 - "bar" & ! ~ 123 [ "bar" % ~ ! - "bar" and ! true >= "bar" != false > - 123 ] or - 123 == 123 ;
 ( foo . foo != - foo ) { val foo int . int = - ! - false ;
 } ;
 } ;
 class foo { func foo ( ) int { for var foo int = false and ( - - foo ) ( 123 , ~ ( ! - ! ( foo < ! "bar" | - foo ( ~ 123 - "bar" , foo >> "bar" ( ) != false ( ) ) ) [ "bar" ] ) ) << ~ ! foo ;
 ~ - ~ false ;
 foo { if ~ ( "bar" ) { - ! ! ~ 123 ^ "bar" ( ) and true - ! - false or ~ ( ( ( ( ( ! ( ! ~ true ) >= "bar" ) [ ! ! - "bar" + ! true == - ( ! ~ false ( ) or ! ~ ~ - ~ ! true ) ] and ! ( ! - - ~ ( "bar" [ ( ! ! ! true ) != - true ( false . foo , 123 or foo ) >> ! ~ ~ ! "bar" . foo | false ] ) ) [ ! - - foo ] & foo ( ) ) and ! 123 ) ) ) -- ;
 } else { if - ! ! ! false != false . foo { val foo int = - true [ ! ~ foo - - 123 ] and ! ! 123 . foo ;
 } else { 123 ;
 } ;
 } ;
 } ;
 } ;
 foo int ;
 func foo ( foo int . int , foo int . int , foo int . int . int , foo int , foo int , foo int . int . int ) int { ! ! "bar" . foo != ( - ! true <= "bar" [ "bar" and ! "bar" % ~ ! false >= ! true [ - foo ] or false and ! foo ] ) [ "bar" ] *= false [ ! ! ~ true ] / ! - ~ - - false > ~ ~ foo - 123 and false [ ~ "bar" [ ( ! 123 and false ) ( ) != true . foo and ! - true != ~ - - ( ~ ~ ~ false . foo ) / ~ ~ ~ ! foo ] and ! ~ true [ 123 > foo ] >> false ] ^ - ! - false . foo or ! "bar" << foo ^ true ;
 } ;
 } ;
 class foo { } ;
 var foo int . int = - - ~ "bar" [ - 123 . foo and ~ ~ "bar" ] + - false << foo ( ! true ( "bar" , ( ~ true ) ) != false > ~ - 123 , ( ( ! "bar" ( false or "bar" , ! ! ! true ^ foo ( - - 123 [ "bar" . foo ] , ~ - - - ! ! "bar" ( ) + ! ! foo ) ) ) ) ) ;
 class foo { func foo ( foo int ) int { 123 == foo -- ;
 } ;
 foo int ;
 func foo ( foo int , foo int , foo int . int . int ) int { ! ( 123 * false ) ^ foo and "bar" or true ++ ;
 } ;
 func foo ( foo int , foo int . int . int , foo int , foo int , foo int . int ) int { ! ~ - ! ~ true [ 123 . foo & 123 or ~ ! foo + 123 ] -- ;
 } ;
 foo int ;
 func foo ( ) int { for var foo int . int . int = ! false << - false ( ~ - ! - - "bar" != - foo or ( ( 123 << ~ true * ~ - true [ 123 ] ) ( ) ) ( - foo , - 123 ) , true <= ! ! ! - true - - false ) < ~ true ;
 - 123 >> 123 and ! "bar" . foo ;
 true or ( - - ! ! ( ( - ~ false [ "bar" ] ) . foo ) ) { val foo int = ~ true . foo ;
 } ;
 } ;
 foo int ;
 foo int ;
 } ;
 class foo { func foo ( foo int . int , foo int ) int { val foo int . int . int = ~ ~ "bar" ( ) == true * ( foo >= ! foo ^ false . foo or ! ! "bar" ) >= 123 . foo and false [ foo ( ) < ! false ] << ~ - ! false ;
 } ;
 func foo ( foo int , foo int . int . int , foo int . int . int , foo int , foo int ) int { - - - ~ ! ! ! - "bar" -- ;
 } ;
 foo int . int . int ;
 foo int . int ;
 func foo ( ) int { var foo int . int = ~ ! - ! foo / foo . foo ;
 } ;
 foo int ;
 func foo ( ) int { ( foo ) [ foo [ false ] ^ false . foo ] ;
 } ;
 func foo ( foo int , foo int , foo int ) int { for var foo int = foo . foo < ( ~ false ) [ ! ( true ( ) * - ! ~ ~ - true ) == foo . foo ] ;
 - false * - true ;
 - - - "bar" %= ( - foo == ! true & false or 123 ) / true [ ! ( "bar" or foo ( ) ) ] { val foo int = foo . foo | ! foo >> ( ! foo << - ! ( foo > foo ) . foo or ~ - 123 [ ( true [ - ~ ~ - "bar" and true >> 123 * ~ false or 123 . foo << ( "bar" ( true , "bar" != - false [ - ~ - false >> ~ - 123 . foo ] ) / ~ ~ "bar" and ! 123 ) == false . foo ^ ~ ( 123 >= false . foo ) & - true ] ) ( ) | true ] - ~ ~ ! ! ( foo & - ~ ! ! "bar" or ~ 123 & - true and ~ - 123 * 123 ) != - false and foo ) [ - - 123 . foo ] ;
 } ;
 } ;
 } ;
 func foo ( ) int . int { if ~ ! 123 { if ~ - ~ "bar" ^ 123 { for val foo int . int = ! foo ;
 ! ! - - ! ~ false . foo == ~ 123 ( ) + 123 ;
 foo >> - ! - false or true -- { var foo int . int = ! ! - - ( - - foo ( foo <= 123 . foo , foo [ - foo ( "bar" ( ) , false . foo << - - ~ ~ false < false ) or foo . foo ] ) | - ! - ( true % ~ 123 ) or ( false ) ) ;
 } ;
 } else { ~ "bar" + 123 ;
 } ;
 } else { var foo int . int . int = ( ( 123 [ - - false ^ true ] ) [ ! ! ! true ] + ~ false [ ! true != - foo . foo ] and ( 123 ( ( ( - ~ ! ~ ~ ~ foo and ( ~ 123 << false or ! ( 123 . foo ) and ( ( ! ~ "bar" + ( ! 123 . foo != 123 / ~ - ! ~ ! foo - - "bar" ) and - ! foo + "bar" . foo ) << - "bar" or true & 123 ) + "bar" ) ) << ! ( ~ foo ) ^ "bar" . foo or 123 / ~ foo > ( 123 and foo . foo ) [ ~ true . foo / 123 and ( - ! ( ! foo >= foo ( ! ~ ! ( ~ - ( ( "bar" ) - - true >> - ! false ( ~ foo , ! - ! ~ true or ~ ~ foo ( ) and - foo == ! foo [ 123 [ - ! ! true == false ] ^ ( ~ ! ! ~ ~ ! - true ( ! 123 == 123 ( "bar" [ foo [ 123 or false ( ( 123 - ( ~ ( false & 123 ( ) ) or ~ ~ ! - ( ~ ! ~ foo ^ 123 . foo ) << ~ "bar" [ ~ - ~ "bar" ] ) ) . foo , ~ ~ - true ) + foo == - - ! ! "bar" ] ] , foo ) / ~ ~ ! - ( ~ false ) , ( 123 - ( - ~ ( ~ - ! ~ "bar" [ ~ ! true [ - - "bar" and ~ ~ 123 ( ) ] == false ] < true ) ) << ! - false ) . foo ) and "bar" % true ) ( - "bar" != - - "bar" % ~ ~ - - false or ~ false , ! false and ~ 123 <= false ) ] ) ) << foo <= ! ( ! ! ! ~ 123 << - - - ( ! false ) or ! ~ foo << false ) or false - - ! true and - foo ) , ~ ! ! ! false ) ) ) & ~ foo ] ) , "bar" ) ) ) and ! - 123 != 123 ;
 } ;
 } ;
 func foo ( foo int , foo int . int . int , foo int , foo int ) int { val foo int = true != ~ ! 123 ;
 } ;
 class foo { foo int ;
 foo int ;
 func foo ( foo int ) int . int { var foo int . int = ~ 123 [ - 123 | true > ( true . foo + "bar" [ - - ! ( foo ) [ 123 ( ) ] / false ( ) > - - - - true ] or - ! ( - "bar" ) [ false . foo % ~ false ] and 123 ) != ~ ~ foo ] ;
 } ;
 func foo ( foo int , foo int , foo int . int . int ) int { ! false != foo ++ ;
 } ;
 foo int ;
 } ;
 func foo ( foo int , foo int ) int { val foo int = ~ ! ~ false ( ( ! 123 ( ! ! 123 . foo >> - - - 123 , ! ! ~ true and true | true < true << ~ foo ) != foo . foo ) . foo or - ( ! 123 or - ! ~ "bar" >> true ) and - 123 , - - ~ ( ! true % true + - "bar" > - ! "bar" and 123 ) ( "bar" and - false , "bar" [ "bar" or - foo << ~ ( ( - ~ ! - ! ~ ! false and "bar" ) [ ~ - true % ~ ! foo << ~ - "bar" == ~ ! - - ~ false ( ! foo ( ) , ~ ~ true ) ] ) and "bar" ] % true ) or 123 < true ) / foo + "bar" ;
 } ;
 func foo ( foo int , foo int , foo int ) int . int { ~ foo . foo % ! - true << ! ( 123 . foo != ( "bar" or ( "bar" ( false / foo , "bar" ) ) < ( false ) ) ) ( foo >> ~ - ! true , ~ ( ! ~ ( - true . foo ) and - ~ false != ! ( ! 123 . foo & "bar" or true + ! ! ! ( - ~ true >> ( - "bar" and ~ - 123 ( ! ( foo ) > true << ! "bar" and ! ( ! ~ - - ! - ! ! false . foo ) , ! ! ~ 123 + foo [ 123 ] and true << false ^ - 123 or 123 ) ) [ true or ~ ! 123 [ foo ] and ~ true << ~ ! 123 ] or false and ! true . foo >> true != ! - - "bar" . foo ) ) ( ! false . foo or ~ ! true . foo , foo . foo ) or ! - ! "bar" . foo ) or "bar" ) ;
 } ;
 class foo { foo int . int ;
 foo int ;
 func foo ( ) int . int { if 123 { val foo int . int . int = - true and ! foo << ! "bar" ;
 } else { foo and true == false [ "bar" % foo ] ;
 } ;
 } ;
 foo int . int ;
 foo int . int . int ;
 foo int ;
 } ;
 func foo ( ) int . int { val foo int = ~ - ( ! - ~ foo >= - true + foo ) + - 123 and true ( ) ;
 } ;
 func foo ( foo int . int . int , foo int , foo int . int ) int { val foo int = false << - ~ - ~ "bar" / - ! false ;
 } ;
 class foo { } ;
 func foo ( ) int . int { ~ false * - - ( 123 . foo * ~ "bar" - ! "bar" != 123 or - ~ ! false ) == - false >> foo or "bar" > false -- ;
 } ;
 func foo ( ) int { var foo int = false ;
 } ;
 var foo int = - "bar" [ - ~ 123 or ~ ! ( true ) ] ;
 var foo int . int . int = ~ ! false [ ! ! ( - false & ~ "bar" | - false ) ] or ! foo and ~ - 123 ;
 class foo { foo int ;
 foo int . int . int ;
 foo int . int ;
 func foo ( foo int . int , foo int , foo int , foo int . int , foo int ) int { for val foo int . int = ! true <= ~ ~ true ;
 "bar" ;
 true ++ { - 123 and - ~ - - "bar" [ ! ~ true >= - 123 . foo - "bar" ] + ~ ~ ! ( true ) or true ;
 } ;
 } ;
 func foo ( ) int { for var foo int = - ~ ~ ! false ;
 foo ;
 ! false % ! ! 123 . foo == 123 [ ( ! ! ~ ~ ~ "bar" ) . foo >= foo << ! - false ] += foo | foo { foo -= ~ - ~ - ~ ( ~ "bar" ) ( ) != - - true . foo ;
 } ;
 } ;
 foo int ;
 func foo ( foo int , foo int . int ) int { for val foo int . int . int = ! true or true >> ~ ~ ~ - - ~ true ;
 ~ ! 123 [ ~ - ! ! "bar" ] ;
 ~ "bar" . foo >> 123 % 123 /= foo [ 123 or 123 < ! foo ] { - ~ 123 [ - "bar" and ! foo ] = "bar" ;
 } ;
 } ;
 func foo ( foo int ) int { for val foo int = foo ( ) ;
 true ;
 ! ~ ! false << ~ ~ - 123 %= ( ! foo == "bar" ) << - ~ false { ! - ( - foo ) ( ) | 123 and ! foo / - ~ ! false > "bar" ( ) | "bar" or - foo ( 123 . foo and ~ "bar" , false >> ! "bar" and true & true ) % ! foo . foo and foo * true >> ! "bar" ;
 } ;
 } ;
 } ;
 class foo { foo int . int ;
 } ;
 var foo int = foo . foo >> ~ 123 or "bar" ;
 func foo ( ) int . int { if ! ( ! - foo . foo and false ) >= ! - - - ( foo ) ( 123 , ~ ~ - ~ ~ false ^ - - - ( ! - true ) / foo >> ( 123 >> ~ "bar" < ! false / ! ! foo ) & foo . foo or 123 ( ) ) { val foo int = ! - "bar" ( ) ;
 } else { if ! 123 != ~ ! true >> false / false ( ) { var foo int = true ;
 } else { ( - ! ~ ~ ( ~ ~ foo ) ) ;
 } ;
 } ;
 } ;
 var foo int = "bar" ( ) == ~ ! ! ~ ~ ~ ! false . foo ;
 
