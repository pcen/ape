module foo ;
 var foo int . int . int = - - ! false . foo != ( - true ) ;
 val foo int = 123 ;
 class foo { "bar" [ - ! ~ ( ! ! - - ! ! ~ foo & foo ) ] ^ ! ! ! ( ! true ) [ true ] = - true ;
 } ;
 val foo int . int = ! ~ ~ - false ;
 class foo { ~ ( - false ) *= ~ - "bar" ;
 } ;
 class foo { false -- ;
 } ;
 func foo ( foo int ) int { ( 123 . foo ) -- ;
 } ;
 func foo ( foo int , foo int ) int { ~ - ( ~ true ) *= ! - ( foo ) . foo >= - - ( ~ ! false * false ) - ( foo ) & ( ( ( foo ) ) ) == ( ~ true ) ( ) ;
 } ;
 class foo { if "bar" { ~ ( - foo ) ( ) ;
 } else { true ++ ;
 } ;
 } ;
 val foo int = ! false <= ( ~ ( foo . foo - true == - false < ! "bar" ) / ! ( ~ "bar" ) ) + - 123 [ ( - foo [ ~ true ] ) . foo ] ;
 func foo ( foo int , foo int , foo int . int , foo int . int ) int { for var foo int = - foo ;
 ! 123 - true ;
 - ! foo += true { for var foo int . int = false ;
 ~ false ;
 "bar" { for val foo int . int = "bar" ;
 ( ! 123 . foo ) ;
 123 { false ++ ;
 } ;
 } ;
 } ;
 } ;
 val foo int = - ( ! ! ~ ~ ! ~ ! ~ ! ~ false ) . foo + true <= ~ true ;
 class foo { for var foo int = true . foo ;
 foo ;
 - true . foo /= ! ! ~ - ! "bar" [ true . foo / ! - "bar" ( ) ] - ! false * - true . foo { 123 != 123 ;
 } ;
 } ;
 func foo ( ) int { ~ ! "bar" [ true ] ++ ;
 } ;
 func foo ( ) int . int . int { ~ ~ ~ "bar" [ 123 ] ;
 } ;
 func foo ( foo int . int , foo int ) int . int { if ( true ) . foo { if true * - true { for var foo int = "bar" ;
 foo ;
 ! ~ ~ ( - "bar" & "bar" ) ^ ! 123 { for val foo int = - - ~ 123 ;
 ( foo ) ;
 false *= - ~ ( foo > ( ( ( false [ ~ "bar" [ 123 == false ] ^ ~ "bar" [ ~ foo . foo ] ] ) ) [ - 123 [ - ( ( ! ~ true <= 123 ) ) . foo & true [ - ! ( foo | 123 ( foo , - "bar" [ ~ ! ! ! ( ~ "bar" ^ false ) ( ) ] ) ) ] ] & - - ! - ! ! ~ "bar" <= ~ false ] ) . foo ) { if false ( ) { ! - false ;
 } else { if ~ ( ~ ~ - ! - true [ ! 123 ] == - "bar" ( ) ) { if ~ ! - 123 - foo . foo { for var foo int = ( ( "bar" . foo > - 123 + true ) <= - foo ) >= - - ( true [ - ! - foo ] ) ( foo . foo , "bar" ^ ! ! "bar" >= false ) ;
 ! ( "bar" ) ( false . foo <= ~ - false , foo - ! ! - 123 ) ^ ! ! true ;
 true >= - - false [ false ( foo [ ~ 123 ] , ~ - ~ true ) ^ - - - ! ! - - false . foo ] { true . foo -- ;
 } ;
 } else { ~ ! ( - foo [ foo . foo / false != true & false ] ) ;
 } ;
 } else { 123 + ! 123 ( false <= - ~ ! ~ ( ! "bar" - - ~ true ) , ( false * ~ ! foo ^ ~ true [ true / - foo ( ~ "bar" ( ) + foo . foo >= ! false * ! ~ false , true / 123 ) ] > - ! ~ foo ( ) * - ~ - ( ~ ( ~ false * ~ - ( false ^ ! "bar" ) ) ) ) ) == false ;
 } ;
 } ;
 } ;
 } ;
 } else { if true * - ~ - 123 ^ true { for val foo int = ( - ! foo ( foo , - ! foo <= ~ ! - "bar" ) ) . foo ;
 - ! ~ ~ "bar" ^ ! 123 ;
 ( ~ - 123 ) -- { if - ~ ( ~ - foo [ ~ ! ! - true ] & "bar" ) | - foo { for val foo int = - ! 123 [ ~ true ] ;
 - false ;
 ( "bar" [ foo ] ) . foo { for val foo int = ( "bar" / ! false [ foo ( ) ] ) [ ~ ~ false [ - - - 123 * "bar" ^ "bar" ] != 123 . foo ] ;
 "bar" [ "bar" ] ;
 ( "bar" ) / ( foo [ true . foo ] != ~ ~ ( 123 ) / 123 ) ( ~ true ( foo , ~ ~ "bar" > 123 [ ~ "bar" ] ) , ( "bar" | true . foo ) ( ! foo != false ( ) , ! true ) ) == "bar" [ - ~ true ] -- { ! ! ! - foo ++ ;
 } ;
 } ;
 } else { ! true -- ;
 } ;
 } ;
 } else { for val foo int = "bar" ;
 foo ;
 - ~ 123 != ~ ! - foo { false / 123 = - 123 [ - "bar" [ "bar" ] ] ;
 } ;
 } ;
 } ;
 } else { if "bar" { ~ ! ( ~ foo ( ! foo [ "bar" . foo ] * ! true . foo , ~ ~ - true ) <= - - ~ ! 123 ) ( ) -= foo == ~ - foo . foo / false ;
 } else { "bar" /= - ( "bar" ( ) | ! "bar" ) ;
 } ;
 } ;
 } ;
 class foo { ! true ;
 } ;
 func foo ( foo int , foo int , foo int . int , foo int , foo int ) int . int { for val foo int . int . int = - 123 [ ! ! - ! false ] * - - - ! - "bar" . foo >= 123 + ( - ! true ) ;
 ! ! ! 123 - ~ 123 ;
 - false { false & ! ( ( - ~ - ~ 123 / "bar" ) ^ ! false ( foo ( ) , - 123 ) ) != "bar" < ! ~ ~ ! false ;
 } ;
 } ;
 val foo int . int = ! ~ ~ ! - ( ! ~ foo [ true ] ) * foo ;
 class foo { for val foo int . int . int = 123 ( ) ^ 123 ;
 false ;
 123 -- { ! ! ~ ( false ( ) ^ "bar" ) ^ ~ ! true == ~ ! 123 | ~ ! ~ ! 123 > foo [ 123 >= 123 ] ;
 } ;
 } ;
 val foo int . int = "bar" ;
 var foo int = "bar" ( ) / ! 123 == ! foo > - true / true ;
 val foo int . int . int = ( ( ! ( - ( ! 123 ) ) * true ) ( ) > ( - ~ foo ) [ ~ "bar" [ - 123 == ~ foo ( ) ] ] ) & ~ ~ ~ false ;
 func foo ( foo int , foo int . int . int , foo int , foo int . int ) int { - 123 = ! - ~ ( - ( ! "bar" ) ) ( ) ;
 } ;
 var foo int = ~ 123 . foo + true ;
 class foo { 123 -- ;
 } ;
 func foo ( ) int { for val foo int = ! foo ;
 false . foo ;
 123 { - 123 [ false ] != foo / "bar" ;
 } ;
 } ;
 func foo ( ) int { ( - foo - ! 123 [ foo ] ) ( ) ++ ;
 } ;
 class foo { for var foo int = ! - - ! true ;
 ! - "bar" . foo ^ 123 ;
 ~ - ~ ~ ! - 123 ++ { for val foo int . int . int = false ;
 foo ;
 true { for val foo int = "bar" ;
 ! 123 * 123 ;
 foo ( ! true , "bar" == ~ ! 123 ) *= ~ ~ ! "bar" [ ! "bar" ( ~ ! ~ foo == ( 123 ) . foo | foo , false ) ] != 123 | - ( 123 . foo ) { for val foo int = - ! ~ ( ! ! ! true ( - ( ! foo ) . foo , 123 < - ( ! 123 & true != ( - false . foo ) ( ) > - foo ) ( ) & ~ false . foo ) ) ;
 false ;
 ~ true != foo [ true . foo ] /= ( true ( 123 . foo < 123 , foo ) == ! ! "bar" ) ( - 123 , - ! ~ true . foo ) >= true { for val foo int . int . int = ! "bar" [ - ( foo . foo ) ] ;
 ! - ~ foo ;
 ~ - ( - "bar" ) -- { ( false ) ( ) * ! foo *= ~ 123 [ ( - - ! true [ true ] ) == ~ - ! ~ - true ] / foo <= - - - foo ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int . int . int , foo int . int . int , foo int , foo int , foo int ) int . int { - foo . foo <= - ! - "bar" . foo -- ;
 } ;
 
