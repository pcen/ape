module foo ;
 var foo int = - ! ~ foo ;
 val foo int = ! - ( "bar" . foo ) [ ~ true or ~ 123 ] ;
 func foo ( foo int , foo int , foo int , foo int . int . int , foo int . int , foo int ) int . int . int { val foo int = foo ( ) < false [ - ! "bar" << ! - 123 [ 123 ] and false [ ! - - "bar" | ( false or ~ true ) ] ] ;
 } ;
 class foo { foo int . int . int ;
 } ;
 class foo { func foo ( foo int , foo int ) int . int { val foo int . int . int = - false <= ~ - foo % "bar" and ~ foo ;
 } ;
 func foo ( foo int , foo int , foo int , foo int . int , foo int . int . int ) int { - ! - - 123 ;
 } ;
 foo int . int ;
 } ;
 val foo int . int = "bar" ;
 class foo { func foo ( foo int , foo int , foo int , foo int . int ) int . int . int { var foo int . int = foo and ~ ~ - true ( false << ~ true , 123 == foo or ~ - ! foo ) ;
 } ;
 foo int ;
 func foo ( foo int ) int { ( foo ) -- ;
 } ;
 func foo ( ) int . int { val foo int = true ;
 } ;
 func foo ( ) int { for val foo int = false ( "bar" ( ) * - "bar" or "bar" | - ~ false ( 123 or ( true ^ - "bar" ) < - ! ( ( ( true >> false ) << foo [ ~ false . foo or foo ] | true <= false ) ) , ( ~ "bar" != 123 [ ~ - ! ~ ! foo ] ) [ 123 << ! ! 123 [ foo [ ! "bar" or ! "bar" [ - ~ true [ ~ false ] < 123 | ! - ( "bar" . foo ) ] + foo % true << foo ( 123 and ! - ( ~ true << 123 ) , ! ~ foo and false ) < ! ~ 123 >> ~ ! "bar" . foo ^ true ( ) ] >> ! true ] < ~ "bar" == ! 123 ] >> true or - ! 123 + ! - 123 ( foo , ~ - ! - 123 == ! - true ( ) ) ) >> - - 123 , ~ false ) ;
 ! true | foo ;
 ! ! ! 123 { for val foo int . int . int = false * - - false [ false and false ] ;
 - true . foo << foo == - ( ~ true . foo ) ;
 ! 123 or ( "bar" and ! "bar" or ! ! - foo ( ) & ~ ! "bar" . foo ) { var foo int = 123 >> ~ ~ false ;
 } ;
 } ;
 } ;
 foo int . int . int ;
 } ;
 class foo { func foo ( foo int . int . int ) int . int { for val foo int . int . int = true and true ;
 "bar" & - foo ;
 ~ foo or ! ! - ~ true -- { 123 and "bar" != - foo >= - true . foo = ~ ! ! ! ( - false . foo ) . foo ;
 } ;
 } ;
 foo int . int . int ;
 foo int ;
 func foo ( ) int . int { ( "bar" ( ) or 123 + ~ 123 [ "bar" . foo - false << 123 [ 123 << - - ! ! true . foo ] ] >> true [ ! - true ] == - 123 >> ~ true ) [ ~ ( - "bar" ) | - - ~ true or - ! - true [ ! ! ~ false ] ] -- ;
 } ;
 foo int ;
 func foo ( foo int ) int . int { var foo int = ~ "bar" ( ) < ! ~ - ! foo ;
 } ;
 foo int ;
 func foo ( ) int . int . int { if - false - ! - ! ! 123 < ! ( "bar" & ! "bar" ( ) ) { var foo int . int . int = ! true . foo ^ - "bar" [ ! - ! - - ( ~ ~ false ( ! - "bar" + 123 << ~ false or true - 123 and - - ( ( 123 ) ) != false , 123 ( ! ! foo , true [ ! - "bar" and false [ ~ ~ true ] ] >> foo != foo and ! 123 ) ) ) ^ "bar" and ! - ( ! ~ 123 or ~ ! - ( 123 [ ~ ! foo [ ! ! - - 123 << false != - "bar" ] ] ) ) | ~ - - false . foo or ~ true | - - - ~ - true * - "bar" . foo ] ;
 } else { - ( true and ~ ! false ) [ ( ( foo ) [ ! ! ! ( foo ) ] ) or ( - false ) ] != true ^ foo ;
 } ;
 } ;
 } ;
 class foo { func foo ( ) int . int { val foo int = ! ! ! ! ( ~ false << 123 and true << "bar" ) or "bar" ( ! "bar" , false ) ;
 } ;
 foo int ;
 func foo ( foo int . int ) int { var foo int = - foo or 123 ;
 } ;
 func foo ( ) int { ! false * ~ false [ ~ - false and ~ ~ - - - true . foo ] >> 123 /= - - - ! "bar" . foo ;
 } ;
 func foo ( foo int . int . int ) int { val foo int = - true ( ) ;
 } ;
 foo int ;
 foo int ;
 foo int ;
 } ;
 func foo ( ) int { ! ~ 123 & ( false < true ( ) or foo [ 123 <= "bar" & ~ ( - ( ! false ) | "bar" ( ) * - 123 ) and - - - "bar" . foo << false [ ~ - false >= - ! ! ( ~ ( foo [ foo >> ~ foo or false ( ) and foo ] and "bar" . foo <= ~ ~ ~ 123 ) == false . foo * "bar" . foo ) / false and false or foo >= 123 . foo ] <= false ^ - ~ ! foo ] == ~ ( "bar" ) ) ++ ;
 } ;
 class foo { func foo ( ) int { true + 123 . foo % ! - - ( ~ true / ~ - ~ foo ( ) != ~ true ) [ - 123 ( ) ] <= ! ~ ( - foo or ~ true . foo and true ) ;
 } ;
 foo int ;
 foo int . int . int ;
 func foo ( foo int , foo int , foo int ) int . int . int { val foo int = - false ( ) - true [ 123 ] << 123 ;
 } ;
 foo int ;
 foo int ;
 func foo ( foo int ) int . int { if ( true [ ~ "bar" ( ( "bar" ( ~ false , ! foo ) ) * ~ - true ( ) , false [ ( foo - foo ( 123 == ! false , ( "bar" and - true ) or - - 123 ) ) or 123 ] ) >> ! - false | ~ foo != ~ ! ! true [ 123 != ( ~ true ) ] >> ~ false / 123 ] + ~ "bar" . foo ) ( ) { var foo int = foo ;
 } else { 123 ;
 } ;
 } ;
 } ;
 var foo int = "bar" != "bar" [ ! ~ ~ false ] ;
 func foo ( foo int , foo int ) int . int . int { for var foo int . int = - ( false & - ~ ! ! "bar" ) ( - - foo or ! - ~ ( false . foo >= - - ( ( ~ foo ( ) ) ) . foo << foo != - ! - 123 ) . foo , "bar" . foo or ! ! ( ! 123 ) . foo * - - "bar" . foo <= true / - ! false != 123 ( ) ) ;
 123 and 123 ;
 ! ( "bar" >= 123 ) >= ~ - - foo or - ( false & foo | ( ! ( 123 ) [ 123 ( false >= ~ "bar" or ~ true . foo , ! "bar" ) < ~ ~ ( 123 << - "bar" ) and - 123 [ ~ - ( ( 123 / ! ! ( true or ( foo & 123 ( ) >> foo ^ 123 ) ) << ~ ~ foo ) << ~ 123 [ - - ~ ( ( "bar" ( foo / ( - false and ~ - ! 123 | ~ ( ( "bar" ( ~ foo ( - ~ false or foo , - false [ 123 and ( true ( 123 , "bar" != 123 ) >= ~ 123 ( 123 [ 123 ] , ~ ~ ~ true + ( - foo . foo / ! false ( foo , ( "bar" != true ) [ - foo . foo and - true ] and - 123 >> ~ foo or ~ foo ) ) ) ) ] >> - false ) , ! 123 >> ! - - 123 [ - ~ ~ ! - ( false [ ! ! 123 / ~ ! ~ ! ~ - ( - ( ( true << foo or "bar" << ! false ) ) ( ) ) <= "bar" ] == ! ~ ! foo ) [ 123 . foo ] and ! "bar" ] ) or ! ! false ( ) ) ( ~ true >> - true , ~ - ~ ~ foo ( ! - - - - ( "bar" < true and - ! - ! 123 . foo | ( foo ( ) ) ) , ( false . foo << false ( 123 , "bar" . foo / false ) ) == true and ! ~ foo + "bar" ) + ! ( ~ ~ ( - - "bar" [ "bar" [ ~ ! true ] < "bar" and true ] ) [ ~ foo ] and ~ - ~ ( false ( true ( ~ "bar" and - ~ ! ! foo , ( foo ) <= ! true . foo ) , ! - - ! true [ "bar" . foo ] ) < - foo ) ) [ 123 ] ) % - "bar" or true [ ( foo ) . foo << 123 ] ) & - ! - 123 or - - - ( ~ ~ 123 ) and false - 123 ) and foo , ~ "bar" and foo == ! - false >= false ) >> ( ! - - ( ~ ! ( false / ! ( "bar" ( ! false [ 123 ( ~ foo == "bar" , "bar" ) > ( false >> 123 ) / ~ ~ foo ] , foo < ! false ) ) ) ) . foo ) != ! true / ! 123 . foo or ~ - - ( - false <= - ! foo [ true ] != ~ true ( ) ) ) ( ) ) ] ) != foo ] ] ) ) *= ! ~ - 123 [ - ! true ] >> true [ ~ true + ! "bar" ( ) & - false != ( true & ! 123 ( - foo . foo , 123 ) ) ] { var foo int = "bar" ;
 } ;
 } ;
 var foo int . int = ~ ! ! ! - false / foo ( ~ - ( ! - ~ ! - ! ! - - false ) == true , false ( ) ) ;
 class foo { func foo ( ) int . int { val foo int . int . int = ! - ~ - "bar" . foo and false ;
 } ;
 func foo ( foo int . int . int , foo int , foo int . int . int ) int { if - ~ foo . foo % ~ 123 << ! ~ foo { for var foo int = - true . foo ;
 foo ;
 ( false ( false , ~ true and 123 [ "bar" ^ 123 << "bar" [ true . foo ] + ( ~ foo + ~ ( true [ ! - - 123 [ ( - foo and ! true ) ] ] ) and true [ ~ ( true . foo ) ( ) ] or ( ! "bar" . foo ) [ - "bar" / "bar" | foo ] ) [ ! - ! ! ! foo ] ] ) * - ~ ! ! - - true - - ! ! foo or ! - - true ( ) > ! false == - ! - ! ! foo ( ) << false * 123 and ! 123 [ - foo ] ) [ ( foo + ~ foo and "bar" [ ! ~ true . foo + ( - ~ - ! false . foo ) [ ! ! ! foo | "bar" or ( true ( ) or 123 ) [ "bar" ] ] & ( ( ~ foo <= 123 % true ) / ( false or foo ) . foo and ~ true / ~ ~ ~ true or ! ( - ! - false ) ) [ ( 123 / false [ 123 | - ! true ] and ! "bar" ) | foo and "bar" ^ false ] ] ) ^ 123 ] { - ~ "bar" >> - ~ false ( ) ;
 } ;
 } else { true << "bar" -- ;
 } ;
 } ;
 foo int ;
 foo int . int ;
 func foo ( ) int { ! "bar" ++ ;
 } ;
 func foo ( ) int { true ;
 } ;
 } ;
 var foo int . int = - false != "bar" ;
 func foo ( ) int . int . int { "bar" += 123 ;
 } ;
 class foo { foo int ;
 foo int ;
 func foo ( foo int . int . int , foo int , foo int , foo int . int , foo int ) int { 123 [ ! ~ - ~ - ! ! ! - foo [ foo ] or false ] ;
 } ;
 func foo ( foo int . int . int , foo int . int . int ) int { var foo int . int = ! foo ;
 } ;
 func foo ( foo int . int ) int { if true [ false ] { var foo int . int = false ;
 } else { - - ! ! - ( - - foo << true [ false [ - 123 | ! false ] ] ) * foo and ~ true & false -- ;
 } ;
 } ;
 func foo ( ) int { ( ! true . foo and ~ - ~ false != ! ( ~ false and - ! - - true [ ~ ( ( ! ~ ! foo ^ ( ! "bar" ) or "bar" ) >> ~ "bar" or - ~ ( true [ false ] ) [ "bar" ( ) == ! ! ~ "bar" ] * false ( ) ) . foo != ( - 123 [ ! ! ~ ! true ( ) >> 123 . foo - ! ! false ] ) ] or ! false and - false ) ) >> ! "bar" ++ ;
 } ;
 func foo ( foo int , foo int ) int { val foo int . int = - ~ ! false [ ~ ~ "bar" ] > foo ;
 } ;
 func foo ( foo int , foo int , foo int . int ) int { val foo int . int = ! 123 >> - - ( ! - - false ) ;
 } ;
 func foo ( ) int { var foo int = false ;
 } ;
 func foo ( foo int . int , foo int , foo int ) int { var foo int . int = ! ~ true ;
 } ;
 } ;
 func foo ( ) int { var foo int = foo . foo and ( - false or ~ foo ) ;
 } ;
 class foo { func foo ( ) int { val foo int . int . int = ! - ! - - - true ;
 } ;
 foo int ;
 } ;
 func foo ( ) int { if ~ 123 [ ( ! ~ false [ - ! - false * - ~ ( - ! true ) . foo ] == ~ true >> ~ foo / ~ - foo ) . foo ] % ! ! foo [ "bar" or ! ( 123 ) | ( ~ ( ( - false ) or - ( ! ~ - ~ "bar" [ ~ foo . foo ] << true ( ~ "bar" , foo != true ) ) / ( ~ 123 >= true and ~ - - 123 ( ( ~ ( ~ ( true ) . foo % 123 ) or false ) , ( - ! true <= ( ! - ! ( true ) >> - ~ ~ ~ ~ false or foo ) . foo ) >> ~ 123 or true . foo ) or ~ foo . foo ) ) ) >= ! ( - true | ! false ) ] { val foo int . int = ( - - 123 . foo ) ;
 } else { - - - ! false . foo ;
 } ;
 } ;
 var foo int = ( ! - false . foo ) . foo ;
 class foo { func foo ( ) int { if ! - ! - "bar" [ foo ] { var foo int . int . int = ! foo % ( true ) ;
 } else { if - ~ 123 ( ) { true += foo ;
 } else { for var foo int = - false ( false , true / ! ! 123 ) * - ! ! ! - ~ - 123 . foo | ~ ( ~ true [ foo ] * ! ! - ! true ( ) or "bar" > - ~ foo [ ! true ] ) or 123 . foo != 123 > ! foo / true ;
 ~ - "bar" . foo ;
 ~ 123 . foo != true [ ( ~ ! ~ ~ foo and false ( ) ) or - "bar" % ~ 123 and - ~ ! ! - ~ - true * ~ ! ( false ( 123 != ~ ~ true , - ! - false ^ ! ~ foo > - ~ true or ( ! foo < true ) ) / ( ~ foo - ( 123 * false [ ! foo != - 123 > foo or 123 ] and "bar" ) and ! true . foo > ! ( ( foo or ~ - ! ! - 123 ) ) ( false ( ) , "bar" == "bar" [ "bar" ] ) ^ false ) ( ~ true ( ! "bar" , - false ) , ~ true and 123 ( ) or ! true << - ( ( 123 and ! ! - - - - ~ - false [ - ! false ] + false / false . foo ) ) ) ) ] += ! - ! - false { for var foo int = ~ true ;
 - true ;
 true -= ( ( 123 ) ) / ~ false { for var foo int . int . int = ! true ;
 ~ foo ;
 - "bar" += ~ ( ! ~ ~ ! ( ~ ~ ( 123 and ! ( ( ~ true & ~ false ) >> ! false ) ) or 123 ) or "bar" & true ) { if - false [ true & - "bar" and false ( 123 [ ( 123 and - ~ ! false ( ) != ( ~ foo . foo > false ) ^ ~ ~ ~ - ~ true << "bar" ) ] or ~ 123 , ! foo ( ) ) | false ] { "bar" ;
 } else { 123 [ - true << ( ! ~ - "bar" ) ( ! foo and false % false << ! 123 , foo != "bar" ( ) * "bar" ) ] * ! foo [ - ! 123 ] += ( ! ~ - foo or - - ~ ! ~ - ! ~ foo % foo ) ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 func foo ( ) int { for val foo int = foo [ ( 123 ) or - ( false ) >= false << "bar" . foo and - ! foo ( ) > ~ "bar" ( ) * true ] >> - foo [ ( - ! ( foo . foo ) != "bar" ) [ ! 123 ] ] ;
 false == false ;
 ~ ~ "bar" ++ { if - - false { var foo int . int . int = ! false >> - ! "bar" ;
 } else { val foo int = ! ! ! false [ ~ ~ foo ] - true [ ! false or ~ - "bar" != ( foo . foo ) ( ) << ~ "bar" ] ;
 } ;
 } ;
 } ;
 func foo ( foo int ) int { 123 . foo | ! ! ! true . foo *= foo and ~ false or "bar" ( "bar" ( ) , false . foo == - ( foo . foo % ( "bar" . foo >= - ! ( 123 and true & ~ false . foo ) . foo != ~ 123 and ~ foo ) [ "bar" ] and ~ ! ! ! - - ! - 123 >> - ( "bar" and true ( "bar" - ! "bar" and ! 123 + true < - true ^ false or ! ~ foo . foo , false ( ) ) ) ( ! foo , "bar" ) or ~ - - ! ! "bar" ( true or ! - ( foo << ! ~ ~ ~ - foo ) , ! - false ( ! ~ ~ ! 123 / - ( foo . foo ) < - ! ~ foo , ~ ! foo [ - ! - "bar" >> 123 ( false != ( - - foo and true ) [ ! - true ( ~ "bar" , false % - ( 123 != ! "bar" ) [ ~ ~ ( ( - - ( ! foo << false or ~ - ~ - ( - - - - ! ~ - true ) % false ( ) ) . foo ) & ! ! ~ ( foo . foo - false [ ! true >> - "bar" ( ( ~ ( ~ ! true ) or ! foo ) ( ( foo ) - "bar" == false ( ) and - "bar" , ~ foo ) , true ) ] ) [ - ! foo <= true and ! foo ] == foo >= - ~ ~ false or ( ! 123 < ~ ~ 123 ( ~ - ~ true == ! ~ ! ~ ! false , ~ ! ! ~ true ) >> foo ) ) * false ^ ! true ] ) <= ~ ~ ( ~ ! ! ~ - true ) == 123 ] and ( - - ( ! ~ ! ~ true ) [ ~ ~ - "bar" ] >> 123 or true ) or - ~ - ~ foo and false ^ ! ~ false , true ) != ~ 123 ] ) ) & ( foo ) ) ) << ~ foo ;
 } ;
 func foo ( ) int { if ! foo { 123 ++ ;
 } else { for var foo int = true . foo != ! ! - false ;
 ~ false ;
 - ! - - foo ( ) { var foo int . int . int = - 123 ;
 } ;
 } ;
 } ;
 func foo ( foo int ) int . int { val foo int = "bar" >> - "bar" ;
 } ;
 func foo ( ) int . int { if ~ "bar" - - true { if ~ ( "bar" [ foo . foo or 123 - ~ 123 ( ) / 123 [ false << 123 ] and 123 ( 123 and ( foo . foo ) . foo != - foo . foo , ~ false . foo ) | 123 ( ) ] * 123 ) == ! "bar" + "bar" { for var foo int = ~ foo != true ( ) ;
 ~ ~ ! "bar" [ ~ "bar" . foo ] and - ~ - ~ ! true ;
 123 >> true . foo -- { ~ - ~ foo ^ - 123 < "bar" ( - true . foo * - - ( - ~ ! foo . foo << "bar" . foo != ~ ~ ( ~ ! "bar" ( ~ ! foo , true ) ) ) >= - ( false ( - - true ( ) , ! 123 or foo and foo <= 123 ) or ~ false > ~ 123 ) , false ( false and false [ - 123 ^ - false and ( ( 123 and ~ "bar" ) ) >= ( foo ) == - ~ true ( "bar" . foo - - ! false , ~ ! ! ! "bar" and - true >> ~ ! - "bar" ) / ~ ( - "bar" != false ) >> ! ~ true ] , false . foo & false ) ) and ~ ( ~ ~ ~ ! - 123 % foo ) * ! true [ ! false ( ) or true ( ) << - foo ( ! false , ~ ! true ) and ( foo ) == ~ foo [ false and foo | ~ true or ( - "bar" ) != false [ false . foo != ~ 123 ] * false [ true [ ~ ! ~ - ! 123 or ~ - ~ ( - false ) ^ ~ ( true ( ) >> true ) ] and ! foo or 123 [ false % - ~ ! - foo != false and ( ~ "bar" ) [ ~ ! ! true or ~ ( ~ 123 ) ] ] * ! ! - - 123 << "bar" ] << "bar" ] ] >> ~ ~ ! - 123 * ! "bar" [ ! ! "bar" and ! false ] -- ;
 } ;
 } else { var foo int . int = ~ "bar" ;
 } ;
 } else { val foo int = false ;
 } ;
 } ;
 } ;
 func foo ( ) int . int { ( ( ~ "bar" . foo << ~ ! ( foo [ ! "bar" . foo + 123 / "bar" [ - - - "bar" . foo << false ] ] * 123 ( ) << true or ( true % "bar" | ! true ( true and - ~ true ( ~ ~ - ~ ~ true != ~ true ( ) , ! true [ false <= ~ false ] ) , ! - ! ~ true and true ) > foo % ~ ! false ) ) & - - ~ ( ! ~ 123 and ! ! ~ ~ - 123 . foo + "bar" ) . foo == - "bar" or true ) ( ! ~ ~ ! ! - - - "bar" and - ! false , foo or "bar" ) == ( ~ ! 123 ( ! ~ false [ foo != ! ~ - - - - false ] , "bar" and ! - ( ! ! ~ foo << "bar" ) ) ) ) & false != true [ false ] and "bar" or ~ ( true and ~ - 123 ) / ( foo ) += - 123 ;
 } ;
 func foo ( foo int . int , foo int , foo int , foo int , foo int , foo int ) int { var foo int = ~ ~ ~ "bar" > ~ ! ~ 123 & foo [ ~ foo + ( ! - true [ - - - ! ( - ( "bar" + ~ ( ~ false ) ) ) and ~ ~ true ] | 123 ) [ ~ true / "bar" <= ! - ! foo ] ] == ( ~ ! true ) or - true ( ) > 123 ;
 } ;
 var foo int = "bar" << true ;
 func foo ( foo int ) int { ! ( 123 ) << - - ~ ~ ! ( ! - 123 [ ~ ~ ! ! ! ( 123 >> ~ 123 . foo ) >> foo ] * - ! - 123 or ( ~ ! 123 ( "bar" ( ( "bar" and ! ! ! true or - false ) . foo , - ! ! - foo . foo % ! foo ) >> foo [ true ] == ( - - - ~ ~ ~ ! - "bar" ) , true [ false . foo ] == ~ ! ( true [ "bar" < ~ ( - ~ ~ ~ ! foo ) ( ~ 123 , true ) != true <= - false & ~ ( ! ! 123 [ 123 >= - ( foo and ! ( ( foo . foo + false >> false [ true or - ~ false ( ) ] ) and true ) / foo . foo ) ] and 123 ) ] and ~ "bar" or "bar" <= - 123 ) + - true . foo or - - foo ) ) . foo and - ~ ! false ) == ~ foo * 123 %= - foo ;
 } ;
 class foo { foo int ;
 } ;
 val foo int . int = - ! 123 [ ( ! foo [ - 123 | ( 123 > foo [ 123 ( true ( false << foo , ~ - ( ( foo . foo >> ! - false ( 123 + foo ( ) >= "bar" , ! ( "bar" < ~ "bar" >> false ) != true ( "bar" >> ~ - ~ ( - 123 [ foo != - ( 123 - - true ) >> "bar" ] >> false and ~ false ) [ 123 % ! ( ( false [ ~ ~ - ( 123 ) ] & "bar" <= false ) ) and ! 123 - ( ~ foo ) ] or foo < ~ - - - true , ~ ! ~ ~ 123 . foo ) ^ 123 % ! - false ) ) ( ) ) == ! - - foo . foo ) <= 123 >> ! ( ( ! "bar" - ( ! false . foo ) <= - foo ) or ~ ! - false ) , - ! ( false == ~ - ! ~ 123 . foo ) - ~ ( ~ - ! ~ ( ! - ! ~ ! ~ - - ~ ( ~ ! "bar" ^ ( ! false and ! ~ false [ true [ "bar" and false [ "bar" [ ~ - - ~ - 123 % ! ! ~ false ( ~ ~ ! false and false >> "bar" > - - ~ - ! ! true [ 123 << ~ ( foo == false . foo % ~ ~ - ~ - - ~ ! ~ ~ ~ false ) ] , "bar" > "bar" ) ^ ~ - 123 ] | ( - ! ! ~ foo ( false ( ) and ( "bar" / false ) , ~ "bar" ) == true . foo ) ] ] > ~ ! foo != ~ true ( foo , "bar" ) ] ) ) ) [ ! 123 ] << ! - - - false ) and ! true or ! true ) ] ) ( ) * ( ! ~ - ! - ~ "bar" ) and ! - ! 123 or ( - - foo and - true % 123 . foo ) [ false and ~ false ] ] ^ true [ 123 | false ] == false ) % - ! ( ~ false == - "bar" or - ! - ! - ! ! ! ~ - ! 123 ) | - ! false != 123 ( ) & foo ] ;
 class foo { foo int ;
 foo int . int ;
 } ;
 class foo { foo int . int . int ;
 } ;
 var foo int = - - 123 [ foo >= ~ - - 123 << ! - "bar" & "bar" ] ^ ! ! foo ;
 val foo int . int = ! ( ~ 123 ) ^ ! - foo == ( - ~ ! true ) - true * "bar" ;
 func foo ( ) int { for val foo int = true ;
 - "bar" . foo < 123 . foo ;
 ! ! true . foo { for val foo int = - ! true ;
 true >> 123 ;
 - 123 <= foo != ! true & true { val foo int . int = ( ~ false - 123 ) and ! true | 123 % false ;
 } ;
 } ;
 } ;
 class foo { foo int ;
 foo int . int . int ;
 func foo ( foo int . int , foo int , foo int , foo int . int ) int { if - "bar" . foo % - foo { val foo int = foo ;
 } else { for var foo int . int = false ( ) % false ;
 ~ foo == "bar" . foo and ~ - "bar" != foo ;
 ~ foo + true << foo . foo -- { var foo int = - - ~ ~ ! 123 * "bar" ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int ) int . int { if ( - true [ foo >> - 123 ] ) [ - true . foo ] { val foo int = ! foo > - false ;
 } else { true >= true >> ! ( "bar" ) - - true *= ~ - ( ! ! ! "bar" . foo ^ foo [ ! 123 < ! ! ~ - "bar" ] >= ~ - ! ~ true . foo ) >> ! true . foo != ! - true [ 123 >= false == ! ( ~ 123 == ! "bar" . foo ) ] ;
 } ;
 } ;
 foo int ;
 } ;
 val foo int = ( ! false and ! - foo or - - ~ ~ - ! ! foo [ - false ( 123 ( ( ! foo ) * ~ ~ true - "bar" . foo << true . foo , 123 ) > - - false and - ! ! - ! false [ ( - - ! - ! ~ ~ ! ! "bar" ( ) & - ! ~ - "bar" ) ( ) << ~ ( ~ ! foo & foo and ! 123 ) > ( true [ ~ true ] ) [ "bar" and ~ true ] & foo ( - ~ ! false [ ~ false or foo ] / - - foo [ ~ ~ true ] , ! ! 123 . foo ) + true . foo & - - foo ] , - ~ true [ - ~ false ] ) < ! - true != "bar" % ! 123 ] << "bar" [ ( foo + ~ false ) ] and ! ~ - ~ - ! - foo ) . foo % ! true . foo and "bar" ;
 var foo int . int . int = ( ~ - false / ( - foo . foo ) ) . foo ;
 func foo ( ) int { var foo int . int . int = true ;
 } ;
 func foo ( foo int . int , foo int . int , foo int , foo int . int . int ) int { var foo int = ( false ) ;
 } ;
 func foo ( foo int . int , foo int . int . int , foo int ) int { true . foo **= foo and "bar" >= foo ;
 } ;
 class foo { foo int ;
 foo int ;
 func foo ( ) int { for val foo int = ( ! ~ ! - ! false ) + - false and 123 . foo or true ;
 ~ false ;
 ( foo [ true ] and - ! foo / false or - ! "bar" and - "bar" ) >= ( ! foo != false ( ! ~ ( ( true / ( foo ) ) ) + "bar" , false >> - "bar" ) ) /= true ( ) | 123 ( ) { val foo int . int = ! 123 == "bar" ;
 } ;
 } ;
 foo int . int . int ;
 foo int ;
 foo int . int . int ;
 func foo ( ) int { val foo int . int . int = ~ ( true << ~ - "bar" ) ;
 } ;
 } ;
 class foo { func foo ( ) int . int . int { val foo int = ~ ~ ~ 123 % foo << "bar" [ ~ ( - "bar" ) [ "bar" ] % 123 - "bar" ] / false and ( ( ( true % ! ~ true ) * 123 [ ~ ( 123 ) [ foo ( ) / "bar" or false ] ] ) [ ~ foo and ! 123 ( ) ] << true ) * - foo [ 123 . foo == ! ( 123 ) + 123 > ! false [ - - ! 123 . foo ] or false and ~ ~ - ~ 123 ] + "bar" . foo ;
 } ;
 } ;
 func foo ( ) int . int { if ~ ( ( ~ "bar" ^ ! ~ ! 123 ) ) % 123 { 123 [ true * - true ^ - false >= - ! - ~ - foo . foo ] and ! 123 >> ~ ~ ( ( - ! "bar" ) [ true ^ true [ ~ true . foo ] ] == - ! ~ "bar" | ~ ! "bar" or "bar" ) ;
 } else { var foo int = ! ! false | foo & foo ;
 } ;
 } ;
 var foo int = - ! false << ~ ! ~ ! ~ ~ - ( - false ) ;
 var foo int = - ~ ~ "bar" ;
 val foo int = false / ! 123 . foo or true . foo and ( false . foo / - ( ! false % ~ ( ! ~ true ) ) . foo ) ;
 func foo ( foo int , foo int , foo int ) int { var foo int = ! ~ true ( ) >> 123 ;
 } ;
 class foo { foo int ;
 foo int ;
 foo int . int . int ;
 foo int . int ;
 func foo ( ) int { true & 123 /= false << 123 and ! 123 [ ! - ! ( - - ( ! 123 / ~ ~ ~ true and ! ~ - true [ ~ 123 >> ~ 123 [ - "bar" & true ] ] == ~ 123 . foo << true / ~ ! false ) ) ( ( ! ! ~ - ! ! foo < ( - false ( ) >= - ! ~ foo - false . foo ) . foo == true ( ) and false ( - false [ ~ ! "bar" >> 123 . foo ] , - ! - ~ false / ~ false ) ) , ! - ! ! foo [ ~ ! false or - ! ! - "bar" != false ( ( ~ true * ! - - 123 ) , false ( - ( true ) << false > foo , - foo ( ) ) / foo ) ^ foo ( 123 [ ( ~ ( "bar" or 123 ) ) ] and "bar" * ( ~ ! ! ! 123 ( ) ) != ( ! - ~ "bar" ) ( ! false and ~ ! - 123 , true ) , ~ foo ( ) / 123 and ~ false ( ) % foo ) * foo and - foo ( ~ false , false ( ) ) ] ) >= false [ ! true | foo == - - ! ( ( ! true ( - - ~ 123 and ~ true < ! foo , "bar" . foo < ! false ) ^ ( foo ) and ! true or ( 123 ) ( ) == ~ - true < ! false ) ( ! "bar" * false << ! ( ( ! foo . foo and ! - ( ! ! ~ "bar" ) . foo ) and ! - ~ ~ false or "bar" ) , ! - ~ true ) and ~ ~ - "bar" ( ) ) < - 123 - ~ true and 123 ] ] >> foo [ false [ ! - false [ "bar" < foo ( - - ~ - ~ ! 123 . foo == - 123 & ~ false or "bar" / ~ false , ~ false and true - ~ - - foo * - ( ! ! 123 != ~ ~ ~ - ! 123 ) ) ] and ( ( ~ false ) or foo ) ] | - false ] ;
 } ;
 } ;
 var foo int . int . int = ! ~ false ;
 
