module foo ;
 foo : : ~ foo ;
 class foo { func foo ( ) int { } ;
 } ;
 func foo ( ) int . int . int { for foo : : "bar" or ( [ ] ( ) == false % "bar" ) ;
 - - "bar" ;
 - - - ! "bar" ( ! ! - [ ] >= 123 , ~ 123 [ false ] , "bar" ) -= ! foo { "bar" += ! ~ - false ;
 } ;
 } ;
 func foo ( foo int , foo int . int , foo int , foo int ) int { } ;
 func foo ( ) int . int . int { ~ ~ ~ false [ "bar" [ - false != [ foo [ ~ "bar" != ! - - true [ ( ~ foo [ [ ( ! ~ [ ( ! ~ ! ~ [ ] ) , - - ! true and ~ ~ ! ( ~ ( false ) [ - ! "bar" * ! foo ] ) , [ ] ] ) [ ~ [ ] ] or - ~ ( foo == [ [ ] ( true - ! ! ~ false , ~ ! ~ ! ~ ! 123 ) ] ( - ! ~ - [ 123 , [ ( ~ [ ] ) , foo ] and "bar" or true < - foo % [ ] and [ ] ( - 123 and ! ~ 123 , 123 , ! ! - - "bar" | ( ~ - ~ 123 ) and [ - ~ ( ~ foo - ( ! 123 ) and ~ ! ~ 123 ) [ ! [ ] / ~ ! ! "bar" ] , false ] , ( ! false != ! 123 ) and ! ~ ( ~ ! ! 123 ) , false [ ~ ( ! true and "bar" ( ) or ~ [ ] - ! [ [ ~ ! ~ "bar" [ [ ] ] , - ! - false , "bar" , foo ( ) - - - 123 ] , false , ( ! ( ! 123 ) != true . foo ) , ! ~ ~ ! ! ~ 123 << 123 , ~ ( - ! - 123 ) , ( - [ ] ) >= ! - 123 ( ! 123 , ( ! ~ - "bar" ) . foo <= foo ( ~ foo , - ! - ! - ( [ ] and ! [ ~ "bar" , [ ] , false . foo & ~ ! ( ( ! [ ] ) == ! - [ true [ ! ! ! ! 123 / ( - true << true [ foo >= ! "bar" and [ ! ! foo [ [ ] [ [ ] ( true , - - ! true , ! ! foo or ! ! false . foo ) ] >> false ] and ( - 123 ( foo , - ~ true << true , [ ] , ! ~ ! [ ] . foo , true ) ) or - foo ( [ ! - ~ ( ! ~ "bar" ) and [ ] , [ ] and ! ( [ ] ) , ( ~ "bar" or ~ - ~ ~ true ) , false and foo , - - ~ foo or 123 , true ] , ~ foo [ foo != ! true ] & [ ] != - false >> ! ~ ~ foo or false >= 123 ) and foo , ! ! ( false . foo ) , true , ~ ! [ ] ] ] ) ] , false ( ! ! ~ [ ~ "bar" or ~ ~ ~ [ - true != foo and - - ! ~ - "bar" ( ) , true <= - - ~ 123 ] , - 123 , "bar" and ! "bar" , true , "bar" , ~ ~ - ( - - ~ ~ true ) ] , 123 ) + - ! - true >= ! "bar" ] or foo ) . foo ] ) , ~ - ~ ~ - "bar" ) , "bar" ^ ~ foo << - 123 , false , - - - - - ( - [ foo ] ) and [ ] & ~ - ! - 123 , foo ) << false / - - ( - - ( ! ~ ( 123 ( ) == - 123 ) ) ) ] . foo != ! "bar" ) & "bar" and true ] , ~ 123 [ 123 ] > 123 ( ( true and ! ( "bar" > ( ! 123 ) ) ) , [ ] << false ) == ( ( false ) & - 123 ) ) , - foo , ( ~ ! false . foo >> true ) , ~ "bar" ] , "bar" , ~ - ~ ! 123 . foo ) ) != foo >> ! "bar" ] == ( ! 123 >= false ) [ ( "bar" ( ) or - [ ] ) ] ] ) << ~ 123 ( [ ] [ 123 ] + true , true < - ( ! foo - "bar" ) , false , false . foo or ! "bar" ) ] ] , ! false or true and - [ ] , - ! ! 123 == true + "bar" , ~ ! 123 * ! 123 , ! "bar" , - "bar" ] . foo and ~ [ ~ false , ~ false , false , "bar" >= ~ ~ [ ~ true << ( 123 > ! ( true ) == 123 ) [ ~ ( ! false [ false / 123 ] or false ) ] or ( ! ~ ( false [ false ] ) . foo ) [ [ - [ - ! ~ 123 [ true ] & - ! ! true [ [ ~ ~ ! - ~ ! - foo [ ~ "bar" ] ] . foo ] ] , ~ foo [ true ] , "bar" ] ] & - - [ ~ [ false [ - ~ "bar" + 123 ( ~ true ) << ! ~ ( true ) ] ] , ! false , ~ "bar" ( ) , foo ( ~ ! true and foo , - 123 , foo , ! false and - false , true and ! "bar" ) << ~ ~ [ ~ 123 | - true or 123 , ~ ~ false [ - ~ true ] >= "bar" . foo , 123 - - true , "bar" , ! - "bar" [ 123 and ~ ! - foo [ ~ ! ! true == ~ 123 and foo [ true ] or - true ] ] != ! ~ ! - true , ! 123 ] and ( 123 or - ! ~ 123 . foo ) ] ( true [ "bar" ] >> false , true . foo ) << ( "bar" ) . foo , - - "bar" < - - ~ ! true == ! foo , ~ false ( ) , true ] , ! 123 ] ] and [ ] or "bar" ] ;
 } ;
 func foo ( ) int . int . int { - ~ ! ! true ;
 } ;
 class foo { } ;
 class foo { } ;
 class foo { foo int ;
 } ;
 class foo { func foo ( foo int , foo int . int . int ) int . int . int { foo : int : ~ 123 . foo ;
 } ;
 foo int ;
 foo int . int ;
 foo int . int . int ;
 } ;
 func foo ( ) int . int { } ;
 func foo ( foo int . int . int , foo int , foo int . int . int , foo int , foo int , foo int ) int . int . int { for foo : int : ! ~ ! ~ - [ ] % 123 ;
 - - 123 ;
 123 [ - ! false ] -- { ~ [ false , ( ( true ) ) . foo , false ] == ~ false = ~ ( ~ [ foo and ~ ! - false . foo , - ! foo != [ ] << - ! ! ! - false , ~ 123 , [ ] , true ] ) > - "bar" ( [ 123 , [ ! - - ! ! ! 123 + false , - ~ foo ] , ! ~ "bar" , ! ~ ! "bar" , ! - ( "bar" ) [ foo . foo ] & - ! - 123 ] , ~ ! ! ~ ~ - [ false , foo , ~ false << foo , - ~ ! false * [ ] , ( false ) [ - ~ ! false / [ ! true , true , - "bar" >= 123 , 123 , ! - ! - "bar" ] [ ! false & ~ "bar" ] ] ^ - ( ~ ~ foo or 123 ) , ! ( - ! - ! - ~ - 123 [ "bar" ] <= ! [ ] ) or ~ "bar" . foo ] , 123 ( [ ~ - false or ! ~ 123 . foo ] [ foo - ! ~ true * foo ] , false ) , - false ) or [ 123 > ! 123 . foo , ~ - ~ ! 123 [ ~ - "bar" and - - ! false ] , foo / ! ~ [ ] , "bar" . foo >> - - foo [ "bar" ] ] ;
 } ;
 } ;
 class foo { } ;
 func foo ( foo int , foo int , foo int , foo int . int , foo int . int . int ) int { for foo : : ~ "bar" / true | [ ] or "bar" ;
 foo ;
 - "bar" & 123 - ! 123 { } ;
 } ;
 class foo { } ;
 func foo ( ) int { foo : int . int : [ true + 123 , ~ ! ! ( "bar" ) . foo , [ ] , ~ ! 123 ( ~ true , true >> - 123 , false , false , - ! true - false and "bar" , ! ( false ) ) , 123 ( ) or foo / - - false , true ] ;
 } ;
 func foo ( foo int . int . int , foo int , foo int , foo int , foo int ) int . int . int { foo : int : false ;
 } ;
 class foo { func foo ( foo int , foo int ) int { foo : = foo [ ! ~ true ] ;
 } ;
 func foo ( foo int ) int { } ;
 } ;
 foo : int . int : - ~ ~ "bar" . foo ;
 foo : int : - false [ ! ~ foo ] ;
 foo : int = ! ! ( false ) ;
 foo : int . int : ( ~ ( - "bar" | [ [ 123 ( ~ "bar" , ~ foo , true , [ ] , true [ true <= - foo [ ! [ 123 , ( ~ ( ! - ! false or - false | true ) ) , ! ! "bar" ] ] ] or ! - - - ( true ) , 123 . foo ) , ! ! true , [ ] [ - - - ~ ~ ( - [ - - [ ( ! - [ ] ) , true and false . foo , - ! - ~ ! [ ] . foo , - ~ "bar" . foo ] [ ~ [ - foo , - ( ( ! "bar" ) != ~ ( 123 [ foo ] ) . foo ) and - false , - ~ "bar" / ! ( false << 123 == true >> - true or - "bar" and [ ] ) ] ( ) ] , "bar" ( ) , - [ - [ false >= ! 123 , ! ~ false ] ] ( - 123 [ ~ - ( true ) < ( ~ "bar" ) ] , ( true ) or true , false != ~ false . foo >> foo [ true * "bar" ] or ~ ! ~ false , - [ ] ^ ~ foo , ~ - ! - [ - ! ~ foo | false , ! foo , 123 , - false , - 123 & [ ] , ! ( 123 ) [ [ [ ] << ~ [ 123 [ "bar" ] , ! ~ true [ - ! ! foo or - [ [ - "bar" , 123 ( ) , "bar" [ foo ] >= - 123 , ! - ( ( ! 123 ) ) , ( - "bar" - ~ ! "bar" >= ~ ~ ! - ! foo ) - true ] ] >= ! - 123 ] ] , - ~ 123 , true , [ ~ "bar" ] ] ] ] . foo - ! - ( ~ ( "bar" ) | 123 ) ) , 123 + ! - true , - ~ ! true ( ) , ~ ! ~ true ] ) <= ! [ ! false % [ ] [ ( false != ~ true ( ) ) ] , 123 , ~ "bar" , ( ! ~ foo ) ( 123 , foo + "bar" , ~ foo , ( 123 or [ true , ~ - ! ! [ 123 . foo , ~ 123 , - ~ - ~ ( - 123 ) and ~ ! 123 << ~ ( ! "bar" ) , ~ 123 , ! ~ [ foo , "bar" , [ [ 123 , 123 ] , ( ! "bar" ) and - foo . foo ] >> - 123 [ false ] ] > - false ] , ! foo , - ( - - - ! "bar" . foo | 123 [ ~ [ ] << ( 123 ) ] ) , false & ( ( ! 123 . foo ) ) ] ) / ~ [ ~ ! [ ~ [ - ! "bar" ] , true , foo >> ~ foo or ~ false , [ ] ( ~ ~ ! foo and ( ! ! 123 ^ true [ "bar" ] ) == - ~ false , [ - ! ~ false or ( foo ) , foo and true , - ~ ~ "bar" ( ) - ! foo , - - "bar" , [ ~ true * ( ~ - foo . foo or [ ] ) , "bar" ] , "bar" ] << ~ ~ ~ ~ "bar" , 123 , false ) or ~ ~ foo and "bar" , ! foo / "bar" and ( ~ 123 ) ] . foo / ( ~ ! - ! ~ [ ~ - ~ 123 , - ! ! ~ - false , false , foo , ! true , [ ] ] != - ~ ~ "bar" ) ( ! - foo ( ) , - false ) , - foo , ~ ( ~ ~ ~ false ) and true [ ! true ] , [ ] [ "bar" ] , - "bar" or foo != ~ false < ! true ( ) ] ) , - ! foo [ ! - ~ true ( true - ! false , ~ [ [ ] . foo >> - ~ [ ] or ~ ~ false != ! true , false or foo , ~ 123 ] >> ( ~ - false ) , ~ 123 , ( ( ~ - - ! ! - ~ - "bar" - 123 & ! - ! ! - "bar" ) and ~ 123 + ! ~ - - 123 or "bar" [ - ~ - - ( foo [ - ! true [ foo >= "bar" ] << "bar" or ~ ! ~ - 123 ] ^ [ ] << [ [ ] , ( 123 ( ! - - - [ - true , 123 , ! ( ~ "bar" ( ) ) << [ ] ( ) < ! true . foo / ( - ! ! false == - 123 > ~ - ~ ~ foo ) [ - - ~ ( foo ) or false ] , true , - - - false ( ) or ! false , ( - - - ~ - ~ ! 123 ) ] ) ) , - "bar" != ~ ( ~ ~ ( false ) >> [ ] ) or - true , - "bar" or true , ( ! [ [ ] , ! ! true , false ] ) ] [ foo . foo ] != ~ ~ ~ ! ~ - ! - true [ ! true ] and foo or ! - false >> - ~ ~ - ! "bar" ) ( "bar" , false >= true or ~ [ ] , - 123 ) >= [ ] ] ) , [ ! ! ! - - ~ foo or "bar" , foo or false . foo and ( ~ ~ ! ~ - ~ false . foo ) [ - 123 ] ] , "bar" ) + 123 ] or ~ - 123 , - ! false > ! - ~ ! ~ ! "bar" ( ) ] % foo ] << ! false [ - "bar" ] and ! foo , true > ~ true , false , - ! "bar" ( 123 , 123 and foo ) ] . foo | true != ! ~ foo , ! "bar" , ~ [ foo ( ) ] or "bar" and foo ( ) << 123 , ! foo [ ! false ] >= "bar" or foo ( ~ true ( "bar" , [ ] , ! - 123 and ~ false , ~ false ) , ~ true and [ ] or [ ] , ~ ! [ ! ~ ~ [ true ( ) , ~ ! ! - - ~ ~ - ! [ ( ~ ~ 123 . foo ) , foo , ~ ~ "bar" , ~ ( ~ ( ! - foo ) >> ( - 123 ) ) or [ ! ! ! ! foo , false or - - false ] [ 123 ( ~ ! false ( ) == false . foo , ! 123 * false ) or - "bar" and ( "bar" ) ] <= - ( foo ) and "bar" , ! "bar" and - false . foo ] and ! ! ! ~ 123 . foo ] , - false , true >> true , false and ! ~ ! ! ! ~ "bar" or ! ( false ) and 123 ] and 123 >> ! ~ ! ~ 123 , ! - ~ ~ - ! - - 123 . foo , ~ false or foo ) ] ( ! ! ~ - true , ~ false or true , ( 123 ) >> false & ~ false ) ) >> ! [ ] ( ) ) or ! true ;
 
