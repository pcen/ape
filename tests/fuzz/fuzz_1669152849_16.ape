module foo ;
 func foo ( foo int , foo int , foo int . int , foo int . int . int , foo int . int ) int { if ~ ~ true + ~ foo == ! 123 { if "bar" { ( ( ! foo [ "bar" . foo >= 123 ] ) ) = ~ ~ ~ "bar" ;
 } else { ~ - ( true . foo ) ;
 } ;
 } else { - ~ foo & true ;
 } ;
 } ;
 class foo { if true . foo / ( 123 [ true . foo ] ) [ ( "bar" . foo ) * 123 ] { if 123 ( ) & foo [ ~ ~ false ] { if - - - 123 / ! ( - ~ 123 [ foo ] ) { for val foo int = - - false / ! ~ ! true ;
 true [ - "bar" ] - - - foo ;
 "bar" ( ( "bar" [ ! ~ 123 & - ~ 123 . foo ] - 123 >= 123 != true & ! "bar" >= - 123 ) , false [ ( 123 ) ] != false ) -- { if true { "bar" *= ! - "bar" - - ! - ~ ! - true ;
 } else { ~ 123 [ ! - "bar" ] -- ;
 } ;
 } ;
 } else { ~ "bar" ;
 } ;
 } else { for val foo int . int = ~ ~ ! ! ~ false ;
 false ;
 ~ true . foo != true { ! foo ;
 } ;
 } ;
 } else { if foo { for var foo int = - "bar" & ~ foo ;
 true | ( ! foo == true ) ;
 false . foo -- { for val foo int . int = ( - false . foo ) ;
 - ~ ! ~ ! ~ ~ true ;
 foo *= - ( - ! foo ( ) / - - false ) . foo != false [ - ! ~ ~ false [ - foo ( ~ 123 / "bar" . foo , ( - ! - ! ! true ^ 123 [ - - - "bar" / ( - foo . foo ^ ! - ~ 123 ) ] ) [ ! - - ! foo <= ~ - 123 ] ) ] ] { for val foo int = ~ true [ true ] / "bar" ;
 ( ~ false <= ( - "bar" [ - ( - ( "bar" . foo ) ) ] <= false ( ) & - ~ ~ foo ( ! ~ ~ true , 123 ) ) ) ( false , ( "bar" ) ) ;
 ( foo ) { ( foo ) * 123 [ - - foo ( "bar" , - ! ! false ( false != false , foo [ ~ ~ "bar" <= ~ foo / 123 ] ) ) * ( foo ( ) ) ] -- ;
 } ;
 } ;
 } ;
 } else { foo * false *= ~ ! ( ( ~ true [ 123 . foo ] ) . foo ) != ! true ;
 } ;
 } ;
 } ;
 func foo ( ) int { ~ foo ;
 } ;
 class foo { "bar" ( ) *= ! - false [ ~ "bar" . foo != false * 123 ] ;
 } ;
 val foo int . int = 123 / - 123 ;
 var foo int = 123 >= 123 ( ) ;
 func foo ( ) int . int . int { 123 / ~ 123 ( ) = "bar" & ! - 123 ;
 } ;
 val foo int = 123 > - ! ~ true . foo / ! "bar" | false ;
 var foo int = ! - ( 123 ^ ~ ( false < - 123 . foo ) / 123 ) ;
 class foo { "bar" ;
 } ;
 func foo ( ) int { for var foo int = 123 ;
 123 [ ~ "bar" ( ) ] ;
 foo -- { if foo { for var foo int . int = ~ - true <= ~ ~ ~ 123 . foo ;
 - ( 123 == ! - ~ ~ ! ! - true . foo ) ;
 ! ! ! 123 != ~ false /= ~ true { ~ - ! true > ( "bar" + false ) ++ ;
 } ;
 } else { 123 >= "bar" != 123 -- ;
 } ;
 } ;
 } ;
 class foo { ~ ! true ( "bar" . foo , "bar" / false - false ) ;
 } ;
 val foo int = "bar" == "bar" ;
 func foo ( ) int { for var foo int = ! ! foo ;
 ! - - ! true . foo ;
 "bar" <= "bar" . foo *= ~ true . foo { - ! ! ~ "bar" * true ( ) ;
 } ;
 } ;
 var foo int = foo ;
 class foo { ~ foo ( ) *= ~ ! - ! - ~ - ~ ! ~ ( - false ) ;
 } ;
 class foo { if ~ "bar" + ! ( true [ ~ "bar" ] ) { - false -= ~ ~ ( ~ ! foo ) ;
 } else { ( - - true ( ) ) -- ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int , foo int ) int . int { for var foo int . int = - 123 [ - ~ ( ~ ~ - ( false ) [ false > - 123 [ ! "bar" ] ] ) ] ;
 - foo < ( ! ~ ! ~ ~ ~ ~ ( ( true ) + 123 ) ( ~ "bar" ( true , ! false | - ! false ) >= ( ( foo - ( "bar" ^ - ! 123 ) ) . foo / ! ~ - - false ) . foo , 123 [ ( ! ~ 123 ) ] ) ) ( ! ! ! - ( ( ~ ~ ! ! "bar" [ 123 ( ) ] ) ) , 123 ) ;
 ! foo [ ~ foo ] += - ~ 123 & 123 <= ~ ! ! ~ ( false ) { foo ( ) -- ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int ) int { for var foo int . int = ~ ~ foo ;
 - "bar" ;
 ( 123 / false . foo ) **= ! true ^ ~ ( ( ! ( 123 ) ) ) ( 123 , "bar" [ false . foo ] ) { for val foo int = "bar" / ~ false ;
 true != foo ;
 - true += - ( - foo . foo ) + ~ ! 123 { for val foo int = "bar" ;
 true ;
 ~ ( ! ! ! - ! ~ true [ foo . foo / - foo ] & foo ) { for val foo int = ! ! foo ;
 - foo ;
 ! foo == - ~ ~ ! "bar" -- { ~ foo ;
 } ;
 } ;
 } ;
 } ;
 } ;
 val foo int . int . int = ! ~ 123 ;
 class foo { 123 ( ) > 123 . foo == foo ( false [ true ( ) ] - false [ ~ 123 > ! false ( ! 123 , foo + ! foo ) ] , foo [ "bar" - - - "bar" ] != foo . foo | 123 ) ++ ;
 } ;
 var foo int . int . int = false . foo ;
 func foo ( ) int { for val foo int . int = ! true <= true ;
 ~ - false ;
 - foo [ foo ] > - false { if 123 + foo { if ~ 123 - - "bar" [ ! ~ false ] { for var foo int = - true * ( ! "bar" ) ;
 ! - "bar" ;
 - - ( foo ) -= 123 [ ! - ( 123 ) [ ~ - 123 ] ] { if - false ( ) + 123 <= "bar" { for val foo int = 123 ;
 true . foo > foo ( - false , ( ~ - ( ~ ~ true ( - 123 , ( ~ false & ! 123 | ~ - ! - ! true ) ( ) ) ) ) / "bar" ) ;
 - ~ - 123 { if ~ - ! true == - - 123 . foo { for val foo int = true ;
 true ;
 ~ - - ( ~ ( ( "bar" ) ( "bar" , - - ! false ) ) <= ! ! foo ( ) ) **= - 123 ( ) { false **= - ( - 123 ( 123 , false ) >= ( - true != 123 | true ) [ "bar" ] | 123 ) ( ) & true ;
 } ;
 } else { ! - foo *= ! "bar" ;
 } ;
 } ;
 } else { for var foo int = ~ true ;
 - ! foo * false ;
 ( "bar" ) /= ! false { for var foo int = - - foo ;
 - - ! ! true ;
 false { ! "bar" ;
 } ;
 } ;
 } ;
 } ;
 } else { foo == true -- ;
 } ;
 } else { ! ! ! ( ! - ( 123 ) & ( false ) [ ! ~ ~ false ] ) /= true < - - - - - - "bar" | true ;
 } ;
 } ;
 } ;
 func foo ( ) int { if ~ false ( ~ - false < foo & ! ! foo != ! - ~ - "bar" , ~ ( - ~ 123 ) ) { if - ~ true . foo { for var foo int = foo ;
 ~ 123 . foo != 123 ;
 ~ foo ( ) * ~ 123 { if ! true != foo ^ ( ! ! "bar" ( foo , false ) + ( ( ~ ! ! ! - 123 / ~ "bar" ) ( ~ ~ ! ~ false [ - ! ! ! 123 * - - false > ! - true == - 123 ] != 123 , ! - true & foo ) ) . foo ) { if "bar" { for val foo int = ! - foo ;
 ! ( true ) ;
 - true { for var foo int = ~ true . foo ^ 123 ;
 ~ "bar" + ! false ;
 foo { ( foo [ - false == - foo - "bar" ] ) [ "bar" ( - true , ~ ~ 123 != - ! foo . foo < - ~ ~ ! - true | ! false ) ] = - - foo + true ;
 } ;
 } ;
 } else { if - false { - ! - foo ( ) ++ ;
 } else { - true . foo ;
 } ;
 } ;
 } else { for var foo int = - "bar" [ ! - false ] * - ~ - true [ - foo & true . foo ] ;
 false . foo ;
 foo ( ) = ~ foo [ ! false [ - ~ foo ] == ( foo . foo ) ] { ! true + "bar" < true . foo | - ~ true -= "bar" ( ) - ~ - foo ;
 } ;
 } ;
 } ;
 } else { ! - 123 ;
 } ;
 } else { ~ - ~ ! false ( ( "bar" ) , ~ ! ~ - true / ~ ! ! 123 == - - ! 123 > false ) *= ( true ) <= - false ;
 } ;
 } ;
 func foo ( ) int { for var foo int = true != foo / ~ ~ - ( ( false . foo ) ( ) ) . foo ;
 true . foo ;
 ! foo ( ~ "bar" , true & ~ ! ~ 123 | false ( ( ~ ( ! "bar" [ ! true [ "bar" == - true . foo ] == - - true . foo > - ~ - ! - 123 / false . foo ] ) ) , - 123 ) * ~ - ( ~ ! - ! ( ! - ( foo ) ( 123 , ! foo + ! ! true < ! foo ) ) ) . foo ) -- { - ( 123 ) / ~ 123 ( ( - ~ 123 ) <= false & "bar" - 123 / ! - - ~ false , - - - foo . foo + - 123 / true <= "bar" . foo / true ) ;
 } ;
 } ;
 val foo int = true ;
 class foo { if ~ ( foo != ~ true & ! - foo ) { - false **= "bar" [ false / - - true . foo ] ;
 } else { for var foo int . int = ~ ( - 123 ( ~ 123 , ! ! ~ false ) ) ( ) ;
 ~ - ! true [ ~ ~ ( "bar" ) . foo ] ;
 ~ 123 = "bar" [ ! - ~ - false [ ! ( 123 == ~ - ( false / ( true == ! false ) ) ) ] ] { for var foo int = ! foo / foo ;
 123 ;
 "bar" { for val foo int = ~ true ;
 foo ;
 ! - ! ! true { for val foo int = ! ~ false ( "bar" ( ) - - "bar" [ ~ foo == ~ - - ( 123 ) ] , - 123 ^ ! ! ( ~ 123 ) ( foo , foo ) & ~ false ) ;
 ! ~ foo / ! ! ! ! true ( false ( ! true != ( foo ( ) < ! ~ "bar" [ ! - - - 123 ] ) / - - ! - ! 123 , - - ! 123 ( foo ( ) , ! - ! ! - ~ 123 == ! 123 ( ) | - ! - ~ - - ! ~ true ) ) , ( foo ) [ - - ! false ] ) | - true ;
 - ~ ~ ( ~ ! ( foo ) ( ) + ! ( ! "bar" [ false ] ) ) **= false { ~ - "bar" * - "bar" + foo ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 func foo ( ) int { if ~ ! foo { for var foo int . int = ~ ~ ~ foo ( ) | ! false ;
 foo ;
 true * ! 123 ( ) { if "bar" ^ ! "bar" { ~ ! - ~ ~ false . foo -= ~ false . foo ;
 } else { ~ ( ~ - - ! true ) ( true ^ ! true != foo , true >= 123 ) -- ;
 } ;
 } ;
 } else { if ~ - 123 ( true . foo , foo - false [ foo ] ) & ~ ! - "bar" ( ) { if ! false { for var foo int = 123 ;
 ! ( ( 123 ) & foo ) ;
 foo /= false . foo + ! false { ~ true / ( - true [ ! ! ( ! ( - true . foo ) [ true ] <= ( false [ - - ~ true ] ^ ~ ~ 123 ) ) < - false ] ) -= ! ! false ;
 } ;
 } else { ~ true **= 123 ;
 } ;
 } else { for val foo int = "bar" [ ! - ~ ( ! ! ~ ! false == "bar" . foo ) [ ! ~ "bar" < ! "bar" . foo ] * - ! ~ - ! foo > ~ false ] ;
 ~ ~ true / ! ! ! foo ;
 - true [ 123 ] *= foo { "bar" . foo = - - "bar" & ~ - 123 ;
 } ;
 } ;
 } ;
 } ;
 class foo { for val foo int . int = ! - true ;
 ! ~ false - true ;
 false **= "bar" < ~ false { for val foo int = foo != "bar" ;
 true . foo ;
 123 & - ( ~ ~ - 123 . foo + - ! ! ~ foo ) -- { for var foo int . int = false <= 123 ;
 true ;
 foo [ - true ] == foo ++ { ! foo ( ) ++ ;
 } ;
 } ;
 } ;
 } ;
 class foo { - ~ ! ~ ! ( ! - - ! ~ - ~ foo == ~ 123 ) *= ! 123 ;
 } ;
 class foo { for var foo int = "bar" - foo ( ) ;
 true ( ! - - foo , "bar" [ - - - ~ ( ! ~ ( true [ ( true ) > ( ~ true != true ) ] < "bar" ) ) > - ( true ) ] * ~ foo ) ;
 ! false -- { if "bar" ( ) { false /= "bar" ;
 } else { true ( ) + ( ! foo [ - ! ~ - - false ] ) [ ~ false ] += foo ;
 } ;
 } ;
 } ;
 val foo int = 123 ;
 var foo int = true . foo ;
 class foo { 123 . foo | ( ~ ! true ) [ - false ] / 123 < ~ ~ "bar" ;
 } ;
 
