module foo ;
 func foo ( ) int { ( ! 123 ) [ - true >= ( - ~ ~ - - true >> ~ ~ - ! true and - "bar" ( ! - ! foo ( true [ - ! foo and ( ( false ) ( ~ "bar" ) ) . foo ] , foo % 123 , "bar" ( true [ - ( true [ true ] ) ] , [ ] , ( ~ - ! - 123 ) , - false , - ( false & "bar" ) , ! ! ~ true ) , ~ ! "bar" , ~ [ 123 , true + 123 ] ) ) ) ] %= ( ! ~ 123 . foo ) ( ~ "bar" | [ ] ( ) >> ! - 123 . foo , ~ 123 . foo or ~ "bar" / foo , ~ true , - ! true >= foo , - true ) ;
 } ;
 class foo { func foo ( foo int , foo int . int ) int . int { } ;
 } ;
 foo : int = ~ ! - [ ] % 123 ;
 class foo { foo int ;
 } ;
 func foo ( foo int , foo int . int , foo int ) int . int . int { if foo { if - ( ! foo ) & ~ ! 123 { ~ 123 or ~ ! "bar" ;
 } else { ! ! ~ 123 ( ) ;
 } ;
 } else { foo : int . int = true [ true . foo ] ;
 } ;
 } ;
 foo : = ! "bar" or ! ~ ! ! ( ( 123 ) << [ ] or ! "bar" % ~ ~ - "bar" [ 123 ] != ! 123 [ ( - ! ~ - [ ] . foo * - ! - ~ false ) ( ~ ! false or ~ ~ ( foo ) , ~ ~ ! ! [ ! foo or - - ~ - "bar" ^ - - false , ~ [ true , ! foo . foo and foo ] + ! - "bar" [ - - ! true << - ( ~ - ! "bar" . foo ) . foo < ! false ] , - ! - - 123 << foo , - "bar" , ~ - - true ] , false , [ ( ! - ! ~ ( ~ [ true << ~ true , ! foo , true ( ~ ~ true , ( ! ~ 123 and 123 or - ~ ~ false [ "bar" ] ) ) ] ) and ( true and ! ~ 123 or "bar" ) ) >= - ~ ~ true , ~ - "bar" . foo , 123 , [ - - - true , 123 , "bar" >= false == - - ! ! - foo << - - ~ [ ~ "bar" , - ~ - "bar" , ! ~ false , ( false | false ) . foo , false , foo ] , foo , ~ - ! ~ foo * false and foo ] , "bar" << - ! ! ( - ! ! ~ "bar" >> ! ! - ! false ) [ ( [ ] ) [ ! ! true ( ) ] % false + ! [ ! false and ~ 123 ] ] ] , [ ] >= - ! - [ ] & ~ ~ ~ 123 , ! ~ false ) ] ) ( ) ;
 foo : int . int . int : foo ;
 class foo { func foo ( foo int , foo int , foo int , foo int ) int { "bar" ++ ;
 } ;
 } ;
 foo : int : ! ! true ;
 foo : int : foo ;
 class foo { func foo ( foo int ) int { foo : int = false or 123 and false ;
 } ;
 } ;
 foo : = "bar" ^ foo [ ( [ ] ) ] ;
 class foo { foo int ;
 func foo ( ) int . int { } ;
 func foo ( foo int . int . int , foo int ) int { } ;
 func foo ( foo int , foo int , foo int ) int { ( ! ! ! - "bar" / ! ~ ( "bar" - foo ) . foo and ~ 123 ) ;
 } ;
 } ;
 class foo { func foo ( ) int { foo : int . int . int = ! ~ ~ ! ! 123 << true ;
 } ;
 } ;
 func foo ( foo int . int , foo int . int , foo int , foo int , foo int , foo int . int ) int { foo : int : "bar" ;
 } ;
 func foo ( ) int . int { [ ! - ( - false ) and false , ! true , ! 123 , 123 ] >> "bar" -- ;
 } ;
 func foo ( foo int ) int { true ( ~ true , ! ! ! ~ foo [ ~ - - foo * ~ - - ~ false and foo ] ^ - false [ foo != ~ ~ false * ~ 123 ] or true | ~ ! true , "bar" , ~ 123 or - [ ] <= - ! [ ] , ( 123 ) ( ~ foo and - 123 , ! true & ~ - ~ ( ~ false ) , ~ true , ( ! true or foo ) ( true ^ 123 ( ~ [ - - ( - ! ~ ~ ~ ! ( foo ) and false or - ~ foo ) and ( ! ( - true ) ) . foo ] , false , ~ "bar" ( ! [ ] , true ( ) <= ~ ~ - false , [ ~ ~ ~ foo and ! - true , true , "bar" and ~ false - foo , ! [ ] ] , - ! foo [ foo ] , [ ] ) ) , - ! false ) ) ) ++ ;
 } ;
 func foo ( ) int { } ;
 foo : int . int : "bar" ;
 class foo { func foo ( foo int . int . int , foo int , foo int , foo int . int . int ) int { foo : int : - true ;
 } ;
 foo int ;
 foo int ;
 func foo ( foo int ) int . int . int { } ;
 } ;
 func foo ( foo int , foo int , foo int ) int { REVERSE ;
 } ;
 class foo { foo int . int . int ;
 foo int ;
 } ;
 
