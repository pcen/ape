module foo ;
 func foo ( ) int { for var foo int . int = "bar" ;
 - ! foo ;
 ! 123 [ ~ ( - foo ) or - - ~ "bar" != foo ] %= foo { for var foo int . int . int = 123 << foo ;
 ~ ! ~ 123 ;
 false ++ { } ;
 } ;
 } ;
 func foo ( ) int . int . int { true [ ! 123 ( ) ] += 123 or ~ - false ;
 } ;
 var foo int = "bar" ;
 class foo { } ;
 val foo int . int . int = false ;
 var foo int = ~ ! true ;
 var foo int = [ false . foo >> ! 123 , ( ~ [ - "bar" [ ~ "bar" ( [ ] , ~ - ~ ~ [ ! ! [ ] , "bar" , ~ ~ 123 , [ - ~ false , foo , true [ ! - ~ foo ] ] - ! [ ] % ~ ~ ~ ! ( - false ) , ! foo , ~ ( foo ) ] , ~ ! "bar" ) >> ~ - 123 ] , false , "bar" [ ( ! false ) [ true [ - 123 ] | [ foo << 123 ] * true ] < [ - - foo >> true or - [ - - ! ( - - - ! "bar" ) == foo and ! 123 , - ! [ false , false , ~ ! ! [ ] and [ 123 , ~ ! - "bar" + true ] ] . foo , - 123 , ! ( ( 123 == false [ ! false or - ( ( 123 ) ( "bar" | foo or false << ! ~ - ~ ~ true > ~ ~ true , ! ( "bar" ) << ( ~ - [ - ~ 123 or - ! ~ ( ( - - 123 >> [ - ( false [ ! 123 == ! "bar" ] * ! ( ! - foo ) and true ) % ~ - false << 123 and true , false , - - [ ] ] ) ) ( ) , 123 , "bar" > [ ] , ! "bar" % ~ ! - [ false [ "bar" ^ - ( false & "bar" ) == false ] % true , ! - "bar" ] != "bar" ( ) ] or ! - ! true > 123 ) , false , "bar" ) or ( ~ ~ ~ ! ~ true and - foo ) . foo ) < true and - [ 123 ] ] and foo ) . foo & ! - ! ~ - ~ - false [ true . foo ] and [ ~ false ( ) + ~ ( false ) ] ) , false and foo ] == - - foo , ! 123 , foo ] ] , ! [ ] , ! false ] ( ) ) , - "bar" | ~ - true > "bar" , - ~ ! ~ ! [ ] ( ) , ! [ foo . foo & true and ~ [ ( [ true [ "bar" < ~ 123 ] or false [ false != [ ] ] , - - 123 , - 123 , - - ! foo , ! - false , - false ] == ( 123 ) . foo + false * 123 . foo ) == 123 , - true ] <= - ~ - ~ ( [ ] ) == "bar" < "bar" . foo , false , ~ true ] . foo & ( ~ - ~ - ! - "bar" ) or foo . foo ] and ~ ! true ;
 func foo ( ) int { } ;
 func foo ( foo int . int . int , foo int . int ) int { } ;
 var foo int . int . int = ( foo [ false ] ) ;
 var foo int = true ;
 class foo { foo int ;
 func foo ( foo int , foo int , foo int . int , foo int , foo int . int . int ) int . int { val foo int = ( - - "bar" ) ;
 } ;
 func foo ( ) int . int { [ ~ - ( false ) , ~ false , false [ - ! 123 or 123 ] , [ ] ] << foo == - - 123 >> ! ! - - ! ! foo [ true / ~ foo ] = - [ ] . foo ;
 } ;
 foo int . int ;
 func foo ( foo int ) int . int . int { ( ! false ) ;
 } ;
 } ;
 val foo int . int = "bar" [ ~ ! true ] and false ;
 func foo ( ) int { var foo int = - ( ! - false and "bar" . foo >> 123 ) + true ;
 } ;
 var foo int = true and foo ;
 val foo int = false or ! foo ;
 func foo ( ) int { } ;
 class foo { func foo ( ) int . int { for var foo int = true . foo ;
 ~ foo or ! true == ! - ! - "bar" . foo ;
 ~ [ ] . foo or - "bar" ( ! ( false ( true ( ( true > ~ ~ true ) % ~ ! - - foo and ~ - ! "bar" , [ ] & 123 , ~ - ~ [ false ] [ foo ] , ~ false << - 123 % - 123 , false and [ ] + ~ ( [ 123 [ ~ ~ 123 or ~ ! - [ ! [ ! ~ "bar" , true and ! ( ~ true ) [ [ false [ ~ ~ foo << - ( ( ~ ~ ~ ( - "bar" ) ) ) ] and true % ! false [ foo | - - 123 or foo and false ] >= - [ ] , ~ ~ ~ false != 123 / [ - ~ foo , - true , true ] , [ ~ - "bar" ] , - ~ false ( ) >= [ ] + ~ - ! ~ ~ ~ - foo & foo , 123 , ( false ) and 123 ] <= [ ] ] , - ( ~ - foo or ! 123 ( 123 , false , foo , ! [ false * ( foo / ~ ~ ! ~ - ~ false . foo ) >> - 123 >= - foo ( - ( false [ ! - "bar" + ( - true / "bar" ) ] ) == foo < "bar" , [ false or 123 , ~ [ ! ! true [ ( false - foo ) ] , ~ false - ~ - 123 , ! - true , - ! ~ [ ] , ! ~ ~ ~ ! true , ( true >> "bar" ) ] , [ - true , - ~ ! true [ - ! ! [ ~ ! - "bar" , ( [ ] . foo ) == ! "bar" * - foo . foo or ~ ( "bar" | - ! 123 and "bar" ) , false , ~ false . foo ] ] ^ ! ! false , ~ ! ~ "bar" . foo ] . foo , [ ~ ! [ ] , - 123 [ - ( [ - ( ! - ( - ! ( false ) or [ ( ! ~ false << [ ( "bar" ) . foo , ! true , false ] ) ] ) ) , "bar" < ~ ! [ ! ( ~ false ) ^ ~ ( ! 123 ( "bar" | ! ! - false ( ( true and 123 ) << - false , - ~ "bar" & ( - true == - ~ - true or ( - ( foo . foo ) and true ) << ! ( ! 123 ) ( foo ) ) , ~ ! ( - ~ ~ false & ! - [ ] [ ~ foo ] | ! foo ) [ foo [ ! ~ - ~ [ ( foo ) , ~ ! ~ true ( false ( ) , ! [ ~ ( - false ) , "bar" , 123 ( ) , ! - ! false or "bar" , "bar" < ( foo >> [ ] ( ) ) , false [ ~ ! - - - false [ 123 ] ] ] % foo > "bar" >> ! - ! 123 , - ! ~ - ~ ! - ~ true , ! - true [ 123 < 123 ] ) & false ^ ~ ! ( ~ "bar" ) != [ [ [ ] , - false , false , ! [ ~ foo , [ ] ] , foo and ~ ! ! ~ foo ] , foo >> false , "bar" , ! true , - ~ ~ - ! ( ~ [ ] and foo or ( ! ( ! foo ) or - - - ! 123 << ! ( false ) ) ) or true * ~ "bar" ] . foo & - ~ - ( false ) and "bar" <= ! ! [ ] , ! [ 123 | ! foo [ ! "bar" ] , - ~ - 123 [ ~ ( true ) ] and ! "bar" , ( [ ! true , ! foo , [ - ! "bar" and true , - ( ( ! ( foo != 123 ) ( ) != true < true ( ) or true ) or foo ) ] , false ( ! ~ - ( true . foo ) , ~ ! ! [ ] ) and - - ~ ~ ! - ! ~ ~ false , [ 123 ^ ~ 123 , true , - ~ ( ! ~ false ( ) % - ( - "bar" ) ( false ) ) and ! - - foo , - ( [ ] . foo ) , ~ ! [ ~ ( true + - ! - 123 ) , foo >> ~ [ ] ] ] ( foo , ( "bar" ) , true , - "bar" , "bar" or false ) ] ) ( ) , [ ] , foo ] >= "bar" ] ] ] , ~ "bar" [ false [ - true ] ] , ~ - foo ) ) ) , ! "bar" ] . foo << 123 , false ] ) / [ ] [ - ! ~ - ( true != ~ ( "bar" ) ) ] and ( foo ) ] or - ~ ~ true . foo , true != ( foo ) , - ! ! false [ "bar" . foo ] and ~ ( ! foo ) , ~ "bar" ] , true . foo , - - ! ! - - ! - - ! - - false ] | - 123 , ! ( ~ ~ true ) . foo and ! false , true , ~ ( "bar" ^ [ ! 123 . foo != ~ - - [ foo or foo [ ( ~ true ) >= ~ false ] == ! ! "bar" , [ ] . foo and ! ~ 123 , 123 ( ) , [ ] or - ~ ~ ! ! - ~ true , ~ "bar" ] [ "bar" ] ] ) != - foo ( ) ) , foo , ! 123 , [ true , ( "bar" ) [ ! ! [ true [ ! - 123 ] , - - ~ ! ~ ! - - - ~ ! ~ false != foo [ [ - ! ~ false >> ! ~ - - [ ] , - - foo , ( true ) . foo , "bar" ] and ! 123 ] , "bar" , ! false ( - 123 , [ ] or ( foo ) , false , true [ true ] , ! 123 , ! foo ) and foo , 123 , foo ] ] , false > ( ! ! ! - false or false . foo and foo . foo ) , foo ] , foo << ! ! 123 ] ) ) or ~ 123 ] ] / false . foo == - false ] , ! - foo , 123 [ [ ] & 123 ] , true and - foo , ! 123 , ~ false or ~ - - - - ( true ) << ( false ) ] [ true ] ) , [ ! ~ ~ ~ false [ 123 ] , ( - foo ) . foo and ~ ~ 123 [ "bar" != ! ( false ) ] , ~ "bar" and "bar" / - ! 123 , ~ [ ] << - [ ] ] != foo ) != false ) ) and "bar" >> ~ - - ! ~ ! [ ] or ( 123 ( ) * - ! ~ 123 . foo or 123 < - [ ~ ~ ( ( ( foo <= - true . foo != true ) ) ) [ - ~ ~ true >> "bar" . foo and 123 ] or ! - ! - true , 123 - ! foo % - true , false and [ ] , [ ] ] ) , 123 , - - false , ~ ! 123 , foo / ! ! ~ "bar" <= - ! ( foo > false == true ) [ true ] and ~ ! ! ~ ( true ) ) -= foo { } ;
 } ;
 func foo ( ) int { } ;
 } ;
 class foo { foo int ;
 } ;
 func foo ( foo int , foo int , foo int . int . int , foo int , foo int . int . int , foo int ) int { } ;
 func foo ( ) int { } ;
 func foo ( ) int { var foo int = - false . foo > [ ] / ( foo ) . foo ;
 } ;
 val foo int . int = false ;
 var foo int = ~ ! ! ~ ! ( ! 123 [ - false ] ) ;
 var foo int . int = ! ! ~ ! true ;
 class foo { foo int . int ;
 } ;
 val foo int = 123 * ! ! - 123 ;
 func foo ( foo int , foo int . int . int , foo int . int . int , foo int , foo int . int ) int { val foo int = - "bar" ( ) ;
 } ;
 func foo ( ) int { } ;
 var foo int = ~ ! 123 ;
 class foo { } ;
 val foo int = ( true ) ( ) ;
 class foo { func foo ( ) int { var foo int . int . int = foo ( ) ;
 } ;
 foo int ;
 func foo ( ) int { for var foo int = ( ~ [ ] * ~ foo or ~ ! - - - [ ] [ - ( ! ! ~ [ ] >> 123 ) != - ~ - ! false ] ) ;
 ~ ~ - ( - "bar" / "bar" ) ^ false / ( ! ! - - ! ~ - ! 123 ) < foo ;
 "bar" [ ! false ] { } ;
 } ;
 foo int ;
 func foo ( foo int ) int { val foo int = ~ ! ~ ( - false ) ;
 } ;
 } ;
 class foo { func foo ( foo int . int , foo int , foo int . int ) int . int . int { } ;
 foo int ;
 foo int ;
 func foo ( foo int ) int { [ ] and - ~ true ;
 } ;
 } ;
 var foo int = 123 ;
 val foo int = ! false [ "bar" <= - - - ! false ( "bar" , ~ ~ ~ - foo ) ] ;
 
