module foo ;
 var foo int = 123 ( - ! true , foo != ! ! false ) * ! ! ( false ( ~ - ~ ! foo . foo - 123 . foo , 123 ) <= ( ! "bar" == - ( true ( ~ - ! true , "bar" ) ) <= ~ ! - - false [ ! ! - ~ ! - true ] ) ) | ( 123 ) ;
 func foo ( foo int ) { false > "bar" /= ! ~ ( ( "bar" ) ( ( ( - foo [ ( true . foo ) ] ) . foo ) , ( ! 123 . foo ) ) >= - ! foo ) . foo * false . foo ;
 } ;
 func foo ( foo int , foo int , foo int ) { if false / ~ ~ ~ - ( ! foo != - foo ) { for val foo int = ! ( ! ~ false ( "bar" , foo ) <= - ( false ( - "bar" , foo == - 123 ) ) ) . foo * 123 ;
 - "bar" ^ - foo ;
 ! foo - - ~ 123 { ( ( 123 ) / - ! true ) [ - ~ ( foo - true ) . foo ] ;
 } ;
 } else { if - ! "bar" . foo { if ~ - ! ( ! foo [ ~ - ~ - ( ! true ) . foo ] | "bar" ) < ~ ~ ! ! - 123 { ! false ;
 } else { if "bar" [ false [ - ~ ! ! true ] ] { foo . foo & false ( true . foo < ! false , false ( ( foo [ ! - ! false < ! - "bar" ( "bar" , ( true ( foo , - ~ false >= - "bar" != ! ! "bar" ) ^ ~ ~ - ! - ( ! - ~ 123 + ! ! ! ! "bar" ) <= ! foo != - foo ) ) ] ) [ "bar" ] + "bar" . foo , ! false ) ) /= foo ;
 } else { for val foo int = - - foo . foo ;
 - "bar" ;
 ! ~ - - - ! true . foo **= ~ ! ! foo { ! ( "bar" != - true ) *= 123 / - 123 ;
 } ;
 } ;
 } ;
 } else { if ~ foo < ( ! - ! ( ~ ~ ! foo ( ! - 123 . foo , - ! "bar" & ~ false [ ~ ~ foo ( false , "bar" . foo ) * ~ 123 . foo ] ) * - true < 123 ) ^ 123 ( ( "bar" . foo + ! 123 ) , "bar" ) ) == - true + "bar" ( foo , ! ( 123 ) ( ! foo , ~ true ) ) { false -= foo < false ;
 } else { if false { for var foo int = "bar" / "bar" ;
 ! 123 ;
 ! ~ ~ ~ 123 -- { if 123 { for var foo int = - ! foo & 123 . foo != ! - true ( true , ! true / ( ~ true ) [ ~ true ] ) ;
 ~ ~ - 123 ;
 - ! false ( - foo != 123 . foo , ( - ~ ( - ! "bar" ( ~ false [ "bar" ( ! ! true , - ! ( "bar" ( 123 , ! ! false . foo ^ ! 123 . foo > ! - - - "bar" . foo ) ) ) * true ] , ~ 123 ) / - "bar" == ~ true [ true ] ) ) ) -- { - foo ( 123 [ - true <= ~ foo & - - 123 ] , - "bar" ) ;
 } ;
 } else { ~ - - - "bar" ++ ;
 } ;
 } ;
 } else { for val foo int = - - foo ;
 ~ ! foo ;
 ! true < 123 / ~ - ! - ( 123 . foo ) . foo += "bar" [ ! - true ( true , foo . foo ) <= "bar" . foo ] * - ! - "bar" < - - ~ ! ( foo ) { for var foo int = ( foo ) / ! ( ! ( true == foo ) ) ;
 ! 123 ;
 "bar" /= ~ 123 * - - false [ ( 123 ) >= ! - ~ "bar" ] - false [ ! ! ~ true . foo ] { for val foo int = "bar" [ ~ ~ true [ ( ! ~ ! - false ) . foo | ~ - ! true >= false ( ~ - ( "bar" > ( ! ! ( - ! true & ~ ! ~ ~ ! true + foo ) + false ) & ~ - - ! foo ) , - - - "bar" == foo ) & ! ~ "bar" ] ] > ! "bar" ;
 false ( ~ true == ( ~ true ) > ( true ) , false != - "bar" <= - false ) ;
 "bar" { for val foo int = 123 ( ( ( true . foo ^ false ) | ( foo - ! - ! foo [ foo . foo ] ) . foo ) , ~ false . foo ) < ! ~ ! - ! "bar" ;
 ! ~ ~ ( false ) . foo * ! ~ ~ 123 ;
 true **= ~ ~ ~ true { if ~ "bar" ( false & ~ true [ ( false ) | "bar" ] , ( ! "bar" ) ) { for val foo int = ~ false ( ~ ~ ! ~ ! ( - foo ) & 123 - ! - ! ~ - "bar" , false [ ~ ~ - ~ true == ~ ( ~ ( ~ ~ 123 ) . foo ) <= ~ ! ( ( true >= ( ( ~ true ) > false [ ~ - ~ "bar" + 123 ] ) ) ) ] & - ! ~ ~ ( foo & - ~ - foo ) ) ;
 ( foo ) ( 123 / - ~ foo . foo , true ) + ! foo . foo ;
 ! ! - true [ 123 ( ~ ( foo / 123 ) ( "bar" & ! foo [ ! - foo [ 123 ] ] , "bar" . foo / ( ! ( 123 ) ) . foo ) , - ~ "bar" ) ] { - ~ true * foo - "bar" [ - - - ~ - ! false ( ! ~ ~ ( false == true [ - ~ 123 . foo & true > false [ false ] ] < true ) < ( false ) , ~ "bar" ) ] == ! ~ foo ;
 } ;
 } else { "bar" + ~ true [ ~ ! 123 ] & ! - ! - 123 -= - false ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 val foo int = foo ;
 var foo int = - ~ - 123 ( ! ( ~ false ) . foo < - ! ! ! - 123 [ ~ ~ - - "bar" == ! ~ true ] * foo , - "bar" ) == ~ ( - foo . foo < foo ) ;
 class foo { ! foo ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) { if - ! "bar" { if ! ~ ( "bar" . foo ) { true != - 123 = 123 . foo ;
 } else { "bar" -- ;
 } ;
 } else { if ~ foo { true [ ( ( 123 != ~ - false ( ~ - ~ 123 , ~ ( true <= ! ! foo ) ) ) ) ] ;
 } else { for val foo int = 123 < ( ( 123 != - true ) . foo ) [ true < "bar" [ - ( ( ! ( - ~ true . foo ) ( ~ true , 123 ) - ! ~ ! foo ) ) ( false . foo , ( - foo / ( foo ) . foo ) [ ~ ! - true . foo ] ) & ! foo ] ] | - ! true ( false >= ! 123 - false . foo , 123 ( ! ( 123 ( ! - ( false ^ true ) , ! ! foo ) ) != false ( ~ false [ false ] == foo , "bar" < ! - ( ! - false ( ! - foo != - ~ "bar" , false & ( - false ) ( ~ foo - 123 [ - ~ ! ! true >= ~ ~ ~ ~ foo . foo ] , - ~ - - ! true [ "bar" ] ) ) + ~ ! 123 ) & - "bar" ) + false > foo , ( ~ foo [ ! foo != "bar" ] ) ) ) ;
 123 >= ~ true ;
 - ~ 123 [ ~ ! false ] == "bar" ( - ( ( ( true ) . foo ) ) + ~ false , ~ foo ) = ( "bar" ) + ( true . foo ) { ( true ) | true -- ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int ) { ~ - ! ! ~ foo ;
 } ;
 class foo { for val foo int = false [ ( - false < ~ foo ^ - true ) == 123 [ false ( ! false , - true ) + "bar" [ - ~ foo ] ] & ( true ) >= ! ~ ! - "bar" [ true ( - - true == false , - - - true [ ! - foo ] ) ] ] ;
 123 ;
 "bar" | foo { 123 [ - foo ] + foo -- ;
 } ;
 } ;
 class foo { - "bar" /= ! ~ ( ! ~ ~ 123 > - - "bar" . foo ) & ( ~ - - ! "bar" ) [ 123 ] ;
 } ;
 func foo ( foo int , foo int ) { 123 -= ( - 123 & ( true & - ~ 123 ) ) ^ ~ ! ! ~ - "bar" . foo ;
 } ;
 func foo ( foo int , foo int ) { for val foo int = ( ~ - 123 [ ~ - - 123 ] / ! - false [ ! ! - false ] ) ;
 false ;
 foo == 123 -- { ! ( 123 != ~ ! 123 ) == ! ~ "bar" [ ! 123 [ foo [ false & 123 < ! ~ ( ! ~ ~ true ) ] ^ - "bar" . foo ] ] -- ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int ) { if ( ~ false ( ~ ! ~ true < ~ ! 123 ( - false , ~ ~ foo ) , true & false ) ) { ~ ( ! ! ! - false / ! - 123 ) [ - ! ( false . foo ) ] * ~ foo + foo . foo ;
 } else { if foo { "bar" * "bar" -- ;
 } else { for var foo int = 123 ;
 - - 123 & 123 ;
 - false + - - "bar" += - ~ - - - "bar" { for val foo int = - "bar" ;
 ! ~ ! "bar" - ( ~ true > ~ ! ~ foo ) & 123 ;
 true [ ~ - ! - "bar" ] { for var foo int = false ( ! false ( ( 123 ) ( true , true == true ( ~ 123 , - ( ( true ) ) ) ) + false , ! ~ ! ~ ( 123 | ! ! false ( ! - foo != foo . foo / "bar" , foo ) & foo < ~ 123 ( - ~ - false , ~ ! ~ false < - ! ( ( ~ true ( - true . foo * foo . foo , false [ true ] <= "bar" ) & false ) ) ( ! - 123 & - "bar" . foo , true * true ) ) ) ( ! ! ! "bar" ( - - ! 123 . foo , - true ) , true ) < 123 [ 123 ] ) > ~ ! ~ ! foo [ 123 ( false > 123 , ~ ~ ~ true [ ! 123 ( ~ 123 != - ( foo . foo ) [ ( ! ! "bar" ) [ - "bar" ( "bar" / "bar" , - false ) ] == - ~ - ( 123 ) ] , - ! - false | "bar" / ! ~ "bar" . foo ) ] > ~ ( ~ foo ) != ( - ( false ) [ ~ true ] ) ( foo ( ! ~ ( "bar" [ ! ( ! true ( ~ - "bar" , ( - false & ! false ) ) ) >= true ] ) , foo ^ false ) + ! ! false , 123 ) ) ] / ~ ~ "bar" [ - ! true ] , - ! 123 ) ;
 123 ;
 - - ( ~ ~ ( ~ false | false ( - - 123 [ ! ~ ~ ( - 123 * ~ "bar" ) . foo ] , foo ( ! ! 123 < ! foo . foo , ~ ( foo . foo ) ( foo [ true ] & ~ ! - - false <= false ( ~ - ( true ) . foo , - - ~ ! "bar" . foo ) & ! 123 , ( false ) ( false ^ true , "bar" ) ) != ! ( ! - ! foo . foo ) ) ) ) ( ~ foo ( - true >= ! foo , ~ foo [ false ] ) , ~ true / ! ( - ! ! - "bar" & - false ) < ~ false ) ^ "bar" ) [ true / "bar" > ~ ~ ! - ~ foo [ ( ~ true - - ! foo ) . foo ] ] { 123 ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 val foo int = foo | true ;
 class foo { if ! ! foo { for val foo int = ! ~ ( false ) ( - - ~ - - false [ ~ ! "bar" ] , 123 ) ;
 - ~ true ;
 ! ! ~ foo != false **= ! true ^ - foo & 123 . foo <= false { if ( false ) [ true != 123 ] { if - ( true [ true >= "bar" ] ) ( - - "bar" , 123 . foo ) { ! - ! ! ( - - ( - foo ( ~ ~ - - "bar" , foo | ! "bar" ) ) ) ( ~ ! "bar" , foo ) & - - false . foo = foo ;
 } else { if ! ~ - - - ! ~ - - ! foo . foo > "bar" [ ! "bar" ] { - "bar" ++ ;
 } else { - ( 123 [ false ] ) == - foo ( false [ 123 [ "bar" ] ] - ( "bar" ) ( ! 123 . foo / ~ ~ - ! "bar" , ! false ) , ~ - ~ ~ - - foo <= ! ~ foo ) += ~ ~ "bar" ;
 } ;
 } ;
 } else { ! "bar" ( true . foo , false ) -= false ;
 } ;
 } ;
 } else { for val foo int = ~ true ;
 ~ foo ;
 - true + foo { if ( ~ 123 ) { for var foo int = 123 - true ;
 ~ ~ "bar" ( ~ - ~ 123 , true / ( foo ) ) ^ "bar" > 123 ;
 ~ false /= ! foo { ! ! - true ( ! ! 123 ( - ! ! ~ foo , ~ true & "bar" ) - ~ - ~ ! ! "bar" == foo [ false ] , ! ~ ! "bar" > foo ) <= ! ~ true ( ! "bar" . foo | 123 , ~ ~ ~ ~ "bar" ) == ( false . foo & - foo < "bar" & false ( ! foo , - 123 . foo + true == 123 . foo ) ) ( ( - ~ - ~ ( ! "bar" >= "bar" | ! ( 123 | "bar" ) ) ) , ! "bar" & ! false . foo ) -- ;
 } ;
 } else { if false { 123 + false ;
 } else { if "bar" { false ;
 } else { 123 ^ ! foo & ! ~ ~ foo /= - ! - ! "bar" ( ~ ~ - true , 123 & ! "bar" ) ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 val foo int = ( foo == - ~ ! foo ) . foo ;
 func foo ( foo int , foo int , foo int , foo int ) { if ! - ! - false != true { if "bar" >= - ( 123 ( ~ ~ ( - ( 123 ) . foo ) , foo [ foo . foo <= ~ ( ~ false ^ true == ~ 123 ) [ false ( ( false ) , "bar" [ false ] != - 123 - ~ foo . foo ) < - ( - - foo [ 123 ( true , "bar" . foo ) * false ] ) ] ] ) ) . foo == false ( ~ ~ - ! foo , ! 123 ) ^ "bar" { for var foo int = "bar" ;
 foo / ~ ~ - ! ! foo [ ~ "bar" ] | - - ! false / foo < ( ~ - ( ~ ! ( "bar" ) ) ( ~ false , - ( - 123 + ! "bar" ) ) ) * ! ( ! ~ false . foo | ~ foo ) ;
 ~ ! ~ "bar" **= true > false { ~ "bar" /= true >= ( - ! ~ ( foo ) == true ) ;
 } ;
 } else { - "bar" & ( ! ( "bar" / 123 ) <= foo ) == 123 ++ ;
 } ;
 } else { if foo | 123 & ~ - ! - ! foo { for var foo int = ~ - ! ! foo ;
 false / 123 ;
 ! foo . foo >= - false { - - false + ~ - "bar" += ! ! - foo ;
 } ;
 } else { - - ~ "bar" [ foo ] ++ ;
 } ;
 } ;
 } ;
 class foo { true & - - false == - - ~ "bar" -- ;
 } ;
 class foo { true ;
 } ;
 func foo ( foo int , foo int , foo int , foo int ) { - true + ( false ) ;
 } ;
 func foo ( foo int , foo int , foo int , foo int ) { for val foo int = ! ! - ! 123 ;
 - - - true ( - ! ~ true | ! ~ ! ~ 123 ( true , false ) , false ( "bar" , ! true ) ) < - "bar" ( ! foo . foo , - ( "bar" ( ! ( 123 ) , ! true == foo ) / ( - ~ - foo [ 123 ] ) > - ~ - ! "bar" ) ) ;
 foo { ~ - false -- ;
 } ;
 } ;
 
