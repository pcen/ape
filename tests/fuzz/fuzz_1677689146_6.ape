module foo ;
 foo : int : [ ] ;
 class foo { func foo ( ) int . int { } ;
 foo int ;
 foo int . int ;
 foo int . int . int ;
 } ;
 foo : = ~ - - ~ false [ - ! ~ 123 ] ;
 foo : int = ~ ~ ~ ( ! ~ ! ~ [ ] or foo ) and ~ foo - false * ! ~ 123 ;
 class foo { func foo ( ) int { false %= false ;
 } ;
 foo int . int ;
 } ;
 class foo { foo int . int ;
 foo int ;
 func foo ( foo int . int . int , foo int , foo int ) int { } ;
 } ;
 func foo ( ) int { } ;
 foo : : ! ! ! ! 123 and [ 123 . foo % [ [ ] [ false ] <= false . foo , "bar" == true > foo . foo * ! false , [ ] , 123 <= - - ! 123 , ~ [ [ ] , - ! - ~ ( [ ] or ! - - ! 123 ) >> "bar" >= ! ( ~ true << ! ! ! ! ( ~ - ! ! ! false ) ( - - ~ "bar" , - - - ~ true , ~ - "bar" , ( ! ~ [ ] ( ) << "bar" ) ( ) , ! ! ~ ! ~ "bar" . foo == ! ( - - [ ] - ( [ ] . foo and ! false > ~ - ~ ! false ) [ ( "bar" ) + - ~ [ - "bar" [ ~ - 123 ] , [ ] [ 123 ] | foo , [ - ! foo and false . foo ] or ! foo ] ] ) [ ! ! - [ ] ] > false , false [ ! true ] ) ) . foo >> "bar" ] [ ~ "bar" ] , ! false ] ] ;
 foo : = 123 ( ) ;
 class foo { foo int . int ;
 } ;
 func foo ( ) int { SKIP { { if ~ false { SKIP { { for foo : : "bar" [ true != ! ! false or foo [ false [ "bar" << [ ] ^ foo ] ] ] ;
 "bar" [ false ] == ~ - - [ ] ( ! ! ~ ! [ ] , ~ ~ ( "bar" and ~ false ) , false , ! false , - "bar" ) <= ! 123 ( 123 ( ) & ~ - ~ ~ ~ - ( "bar" ) , [ true , - - ~ ! - - foo , ~ ! - foo , ! ~ ~ 123 , true , 123 ] , ~ foo , 123 != false ( ) ) ;
 REVERSE ;
 { } ;
 } } SEIZE ( ~ [ ! foo , 123 , false or false [ true ] ] ) { { foo : = false < ! ( - "bar" == ~ "bar" ( ) ^ ! ~ false [ - [ ] ] ) ( foo , ~ true [ [ ! false , foo << true ( - foo , ! ~ ~ [ ] , - - ~ "bar" >> ~ ! ~ false and ( ! - - true ^ - - false ) + 123 or ~ ! foo . foo , ! foo | [ - ~ - "bar" [ ! "bar" ] >> ! [ ~ ~ [ ~ 123 . foo ] , "bar" , [ ] - - ! - ~ foo , - ! ( true ) , true ] and ! - - foo ] and "bar" == 123 + ~ foo / - ! ~ "bar" ) , ! foo , ( "bar" . foo != ~ foo ( ) ) , ! "bar" == 123 >> ! true ] % foo ] ^ ~ ! ! [ [ - ~ - ! ! false or true , - ~ true and - ( - ~ ! false ) , ! ( [ ( - - ~ - ~ [ ] ) >> false , foo ] % - - - [ ] ^ 123 and ~ [ false , ( ( 123 ) [ foo << - true ] ) ] == ( ! - ~ ! false and 123 ) [ "bar" ] ) and ( ( foo ) ) ] , [ true , - 123 , ~ false <= - ! ! false / false , 123 or - [ ] % - ~ false , true >= - [ ] [ foo ] ^ ! ~ false ( ! ! true , ~ 123 , - - "bar" , - true and "bar" or ~ false * ~ "bar" , ~ false [ ~ ! ! ! - "bar" ] ) or ~ "bar" ( false , ! - false [ [ ! true , ! - foo , - ! - ! ~ - foo < ! ( ~ "bar" or ~ false ( ) ) . foo , ( ~ ! ~ "bar" ) and - - ( "bar" or - ~ [ ~ true ] ) , ! ( - ! ~ true ) . foo ] ] % 123 ) ] != ~ ~ ~ - ~ ( 123 ( "bar" , true ^ ~ ~ ! ! ~ ! - ~ - ~ - foo ( ) and ~ ! ! ~ foo >> ~ false ( false , ~ - ! - ! - ! ! ~ "bar" , ! true , - ! ! - - 123 [ foo . foo * [ ] ] , ~ ! true ( - ~ true ( - ! [ [ "bar" ] , - ! ! ! ! "bar" << ! ~ false [ 123 ] * - - "bar" [ - ~ ~ foo or ! ~ foo . foo ] and true or ! false , ! true , ! ~ - - ~ ~ ~ ~ "bar" , - - ~ - ~ "bar" ] , ! foo . foo , ( - ~ ( ! 123 ) . foo ) or ! [ ] , foo , [ ~ "bar" , ~ false ( ! - - true , "bar" | ! "bar" . foo and "bar" * "bar" ) <= false ( ) - ~ 123 , ! ( ! 123 ) ( ! - ~ true , ( 123 ) or - true , [ 123 ( ( [ foo - ~ true [ ! - foo ] , foo , - "bar" and foo [ foo ] , ( ( - ~ 123 and "bar" ) < ~ "bar" . foo and ~ [ - ~ [ 123 , ~ [ ~ ~ ! foo , "bar" . foo != false [ false . foo == ~ - - false ] , "bar" << - [ 123 and - 123 , "bar" , ~ - "bar" , [ ] [ 123 ] and - foo , "bar" ] , "bar" , - ~ true ] . foo , foo , ! - true , - [ ] ] ] ) + - - - ~ [ ! ~ ! [ ] ] ] ) , "bar" , [ ] ) and "bar" or "bar" , foo , true ( false , - ! ! ~ - ( true ( ) and - false ) . foo & foo , "bar" . foo , [ ] , ! - ! true , - ( ~ false ) ) or 123 , ! ~ ! true . foo < ! true , true , ~ ( false or ! false ) [ [ ] ] ] ( 123 , true ) ^ [ ! ~ ~ ~ true ( ) , foo . foo , "bar" and - - - false ] , false , [ ~ ! - "bar" and ~ foo ( - ! - - "bar" and 123 + true * 123 , - - ( ! - - 123 == ! - ! ~ 123 ) and ( true and false [ "bar" and ~ ( - - - ~ ~ ( "bar" ) <= - "bar" ) or ~ - - "bar" ] ) ) & 123 ( ! true ) , 123 ] ) , 123 , ~ true ] , ! foo ) , ~ ~ ~ ! "bar" + 123 and - - [ 123 , - ! ! false , ~ ( true ) , 123 or - [ ] ] , - true ) ) , ! - "bar" , [ ~ 123 << "bar" ( ) , true , [ ! ! [ - ! "bar" ] , ( "bar" > foo [ ~ ~ true ] ^ [ - ( ! true ) ] ) , 123 or ! "bar" ( false [ ! - true % - false or "bar" ] , true [ ! "bar" >= ! - ( ~ [ ] ^ foo ) ] , true , 123 , - "bar" and ! 123 ) , ( ( ! 123 ) ) [ ~ ! false and - [ ] ] , "bar" ( [ ( ~ [ ~ ! true , - true and - - ! ! - foo , [ ! foo or - false and ~ ( ( - ~ ! ~ ! ~ [ ] ) ) % - "bar" . foo , "bar" , "bar" [ ! ~ [ ! - ( - ! - true and 123 . foo > ! - - foo . foo >> ! ! foo ) . foo , 123 [ true . foo ] or [ - - ~ - - ~ foo , - ! [ ! false or - - ~ ~ ~ false . foo and 123 ^ [ [ [ ] , - foo ( ) / - ~ ~ - ~ ~ ( "bar" ) ] , ! "bar" , ~ - ! [ ~ "bar" == ~ ( "bar" ) or ~ true ] [ "bar" <= 123 ] and - foo or - ! false ( ) , foo ] , - "bar" , foo , true ( ) ] / ~ ( ! 123 and true [ false - "bar" ] ) or ( ~ true . foo ) [ 123 >> 123 ] and ~ ~ ! "bar" ( - - true * 123 , - [ ~ ~ false and ! foo ( ) ^ "bar" ( ) , - - "bar" , ~ 123 . foo , ! [ ] and [ ] [ true and ~ true ( ) + - ~ false ] >= [ ] + - false , - - true , ! ( - foo . foo == ( ! "bar" ) ) . foo != [ ] ] , ~ ! 123 ) , ~ false , true [ [ ] % - ~ - ~ - - false >> foo or false [ - - - ! 123 or 123 ] and - foo ( ) << false & - - - foo == true . foo ] , ( ~ ~ [ ] >= ~ true or ! "bar" ) , ! ~ "bar" and false . foo ] , 123 , - [ ] ] and ~ - ~ - 123 ] , 123 , 123 , - - ! ! 123 ] * - ( "bar" ) and - - ~ ( "bar" - 123 ) , "bar" , - foo - "bar" ] ( ( ( "bar" or 123 ) ) , ( foo % - 123 ( ) ) >= ! ! ~ - true % ( ! "bar" ) ( ) or - 123 and ! "bar" [ [ "bar" , [ ] ( "bar" % [ ~ true | "bar" , 123 , false . foo and "bar" ] ) - "bar" << ( [ ] >> ! ( - [ ] [ "bar" ( ! false >= ~ false [ ( - ~ ! ~ ~ ( "bar" and - - "bar" ) >> - false ) ] , ! ~ [ ( - 123 / ( ( true == foo . foo ) % foo [ 123 << ! ~ ~ ! true ] ) ) ] * [ - [ true , foo ( ) or - ! true . foo >> ( 123 ) , false , 123 , [ ] . foo and - ( - - "bar" ) ( ~ ( ( ~ ~ - true ) ) . foo << "bar" , ~ ! ! [ - - ! ~ true . foo <= ! 123 / - ! false , ~ ! ! - ! ( ! true ) , true % true , - [ ] . foo >> ~ ( true >= ( false or [ ! ~ ~ ! - ! true != foo , "bar" . foo & [ [ ] . foo and - ~ true [ ( ( ( ! false ) ) ) & 123 > ( ~ true ) ] , - "bar" , ~ ~ false ] ] >= foo != 123 ) ) , 123 . foo ] , ! ~ false - false , - "bar" , ! ( ~ true ) , foo & - - - false ) ] , [ - - ! ! foo , foo . foo , - - ! 123 , false ( ! 123 , false , ~ [ ] . foo >> ! ( - false . foo ) . foo - true , true . foo and ~ ~ ! ! ( ~ ~ ~ [ ] ) ) , ! 123 ] ^ ( ! ( "bar" . foo ) ) , false or true , true . foo , "bar" ] , ~ ( 123 and - [ ] ) , ! false , ~ [ foo , foo [ ! foo ] ] ) ] >> ! ( false ) / foo ) ) , ~ ! ( - "bar" ) - false , ! [ foo >= true or true ] , - ( "bar" ) ( ) , "bar" ] ] ) and ! true >= - true ) << true and - 123 ] % - true , 123 ) ] , 123 , ! - foo , foo >= - [ ] . foo ] * foo , true , ! ! - false == false [ ~ ! false and [ ] [ ~ 123 ] >> foo ] ) ) - ~ [ ] [ - [ ] ] ] ) ;
 } } SEIZE ( ! ( [ foo , - true << 123 & true - 123 , "bar" and ( [ ] and - ~ false ) [ [ foo ] ] ] ) ) { { } } ;
 } else { } ;
 } } SEIZE { { } } SEIZE { { if 123 { } else { } ;
 } } ;
 } ;
 func foo ( ) int { if - ~ "bar" { } else { } ;
 } ;
 class foo { func foo ( foo int , foo int , foo int . int , foo int , foo int ) int { foo : : false ;
 } ;
 func foo ( foo int ) int . int { } ;
 foo int ;
 } ;
 foo : int = 123 != false + ( "bar" ( - ( - ~ - ! ! ~ "bar" ) or ~ - ( ! ( 123 ^ foo or ~ "bar" < ( true [ ~ ~ ~ 123 [ 123 ] ] ) / - false ) ) , ~ false , foo , ! ! ~ foo , ! 123 ) == "bar" ) & ! false and 123 or "bar" ;
 func foo ( ) int { } ;
 class foo { func foo ( foo int ) int { foo : = ~ - - true . foo << [ ! [ 123 , - ( foo ( ) ) ] and 123 . foo == ! foo , ~ ! [ ~ true , "bar" , true , - ( [ ] . foo >= "bar" [ [ ] == [ - ( ( [ ! 123 ] ) ) , ~ "bar" , ~ foo [ 123 ] or ! true , foo , ( ~ foo % ( ! ~ ~ ~ ! foo ) ) or ! foo ] ] ) . foo / foo >> ( "bar" or ! [ "bar" [ ( ~ - - - - foo ) ] and "bar" , "bar" ^ ( - ~ ~ 123 . foo <= false ) [ 123 and - ~ - ! - true or foo and true ] , ! [ ] , 123 , ~ - false and ~ - - - [ ] != "bar" , - 123 ( ! foo , - - true , [ ] & false and foo , "bar" , 123 , "bar" - ( false ) and ~ ~ false >> - - "bar" ) ] [ ~ foo - ~ [ ] ] | ! 123 ) ] or false ( ! ! - - ~ ~ foo , 123 ) <= - 123 ( ! ~ [ ] [ - ~ true ] , "bar" , false or 123 and [ ] <= ! true [ false ] >> ~ ! ( ! ( "bar" or ! - ( - foo ) ) ) , 123 ( ) ) , false ] and [ ] ;
 } ;
 func foo ( ) int { foo : int = true < ( true . foo ) ;
 } ;
 func foo ( foo int , foo int . int . int , foo int , foo int , foo int . int . int ) int { } ;
 func foo ( ) int { foo : int : - - [ false [ "bar" ] , [ ] , ! ( ! 123 ( "bar" , - ! ! "bar" and false , ! - ( foo ) . foo % ( "bar" or - - ( [ ] >> - ~ ~ false [ ~ ~ foo - 123 ] ) ) , ~ foo + ( ! ! 123 [ false ] ) ) % foo < 123 [ - ~ true . foo / ( [ - foo , ( - ~ true ) , ( - false . foo ) ] ) . foo > - ! ~ "bar" ] and ! 123 ) , - - - - false ] ;
 } ;
 foo int ;
 } ;
 func foo ( ) int . int . int { } ;
 foo : int : 123 or ~ - true % - foo == ! "bar" ;
 func foo ( foo int , foo int . int . int , foo int ) int { } ;
 foo : = ! foo ;
 class foo { foo int ;
 func foo ( foo int , foo int , foo int , foo int ) int . int . int { } ;
 } ;
 func foo ( foo int , foo int . int , foo int , foo int . int ) int { ~ [ ] ;
 } ;
 class foo { foo int . int . int ;
 func foo ( foo int , foo int , foo int , foo int , foo int , foo int ) int { } ;
 } ;
 foo : = ~ 123 == "bar" [ 123 ] ;
 func foo ( ) int . int . int { } ;
 func foo ( ) int . int . int { } ;
 func foo ( foo int , foo int , foo int . int , foo int ) int { foo : int = [ ] ;
 } ;
 class foo { foo int ;
 func foo ( ) int { if [ ] { REVERSE foo ;
 ;
 } else { foo : : ~ - - "bar" ;
 } ;
 } ;
 foo int ;
 } ;
 foo : int = ~ - ~ 123 or "bar" < [ ~ - ( ! ~ 123 [ "bar" & ! ~ 123 ] ) , foo and [ ~ true , ! ! ~ ( ! ! true ) ( ~ - ! 123 ) , - ! ~ "bar" < "bar" , false [ - - ( true + true ) ] , ! ~ ~ true , [ ] ] , 123 , false | ! ! ! 123 ] ( [ ] , ~ - [ ] or ~ [ ] and - ~ ! - foo , ~ false >> "bar" , true , ! ! ! ! "bar" or - 123 , - ~ 123 . foo and 123 ( ! "bar" , true ( - [ ] and ( true ) [ ! ~ ( false ) or - - false ] <= ! 123 , [ - ~ 123 << foo <= false , - ! foo , - false != ~ "bar" ] != true , [ ] , 123 ) and ! ~ foo , ~ ( "bar" ) , true , ! ~ ~ - false >> false . foo or ~ 123 ) ) == - foo ;
 func foo ( foo int . int , foo int , foo int ) int { foo : int = ! ~ ~ 123 . foo != [ - "bar" ( 123 , [ ! ! [ ] , ! true ( ) > ( ! ( foo [ foo ] ) [ 123 ] >= ( 123 ) ) , ! ! false [ ~ 123 ] % true < ( - "bar" ) and foo [ - [ ] + - "bar" ] , false ] , false or ! - false ) , true ^ - ! ~ ! ! ~ "bar" <= - false , ( [ ] ) | ~ - - [ ! true or ~ - - - - - [ "bar" . foo , - - ! ! foo - ! - ~ [ "bar" , - - false , true % ( foo ) or true ] ] , false < ! "bar" , ! [ ~ foo ] , foo ] ( ) >> - ~ false , ! ! false % - - ! [ ] , - foo , true ] ;
 } ;
 func foo ( ) int . int { } ;
 func foo ( ) int { } ;
 class foo { foo int ;
 func foo ( ) int . int { if 123 { "bar" * ~ [ ] %= - false ;
 } else { } ;
 } ;
 foo int ;
 } ;
 class foo { func foo ( ) int . int . int { foo : : - - ~ false ;
 } ;
 } ;
 func foo ( ) int { for foo : = ~ false . foo % ~ ( ( - ! ( - ~ true ) ) [ ! true ] ) ;
 [ - - false > ! 123 or false , ~ true , false , foo / ( - ! ! ! "bar" ) <= foo + [ true ] ] << ! [ ~ ! ! ( ! ! ! foo [ ! - ~ foo ] ) , ~ ~ - "bar" [ ~ ( - foo ) ] == ! - ! false << false | - "bar" , foo ^ ! [ ] ( ) , foo , ! ( ! - ( true ) ) >> [ foo and true * - false or [ ! ! false , [ ] , false > - ~ ~ - ! - ! - ! ! [ - - ! - false . foo , true ( - ! [ foo , "bar" ] , - ~ ( ! 123 ) , ! ! ! ! ! 123 , ! - ( - - "bar" ) , true ) , ! foo , 123 ( 123 ( ( ~ "bar" <= foo and ~ foo ) * ! ! 123 ) * true , false and "bar" , "bar" , ! foo ) * ( ~ ! ~ - ~ foo ) , - false and false ] ( 123 ) >> 123 ( false | foo , ~ ( ! foo ) , - [ ~ - ( - ~ false . foo ) , ! - 123 ( ) , 123 and - ~ - - "bar" ] , - true [ foo and ( foo ) ( ) ] , false , 123 ) , [ ( 123 ) , true >> ! ~ foo ] ] . foo and ( foo ) , ~ foo , ~ ! false + 123 ] . foo ] [ ! foo or - ! ( ~ ! ~ ~ [ foo + ! 123 , false ] ) ] ;
 "bar" += ~ ~ ~ [ ] ^ - [ 123 , foo & true or [ [ [ ] . foo % ~ ! false . foo , false . foo , - foo and ( true ) & ~ "bar" ( ) ^ - true ] , ! ( ! ~ 123 ) , ! ( false ) . foo + - true % ! true , ~ ! ~ [ true ] or - false . foo , ! - ~ 123 ] , - foo == - foo ] { } ;
 } ;
 foo : int . int . int = false ( ~ ! 123 , ~ ~ ~ ! [ ] or foo , ( foo >> "bar" ) , - - ! ~ [ ! ! false , ! "bar" [ ~ ! "bar" > true ( ) ] ] , ~ false ) and [ ] . foo ;
 
