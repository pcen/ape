module foo ;
 val foo int = ~ ! foo . foo * - "bar" and foo ;
 class foo { foo int ;
 foo int ;
 } ;
 var foo int = - ( - foo ) ;
 func foo ( foo int , foo int , foo int , foo int ) int { if - true << foo % foo { ! true >= ! "bar" | true ;
 } else { val foo int = foo and foo ( ! ! ( ( "bar" < - true ) == ! 123 . foo ) and ( ! ! ! - ( "bar" . foo ) ) , ! - - foo ) ;
 } ;
 } ;
 func foo ( ) int . int { false + ! true /= true << ~ ! ~ ~ ~ ! ~ ( - ! ! true >> - ! "bar" ) | "bar" ;
 } ;
 func foo ( ) int { ! false / foo < - false **= foo ( ) | true ;
 } ;
 var foo int . int . int = - "bar" ;
 class foo { func foo ( ) int { val foo int = ! 123 ( 123 ( ) < true , "bar" ) ;
 } ;
 func foo ( ) int { ! ! ~ ~ false ( ) << foo or ~ 123 ( ) & false ;
 } ;
 } ;
 class foo { } ;
 class foo { } ;
 func foo ( ) int . int . int { if ~ foo { ~ ( "bar" [ false and ! "bar" ( ( foo . foo ) ( "bar" <= - - ! - "bar" [ ( ~ ! true or ! 123 . foo ) ] and ! foo ( ~ "bar" , ~ foo . foo * - false ) , ~ false and 123 . foo > true ( ) ) , ! - ~ ~ ~ ! - "bar" % - - ~ 123 [ false ] >> ~ - 123 == - ! - ! 123 and ( false ) ( - - false >> ! ~ - 123 , true . foo ) ) ] or ~ ( true & "bar" . foo ) ) / 123 != true and ( "bar" ) ;
 } else { 123 == ! foo [ ~ ! ! ~ ~ - ( 123 or - foo [ ~ "bar" [ 123 . foo ] + "bar" [ foo ( ) & ! ~ ~ false ( ) ] >> ! ~ - "bar" * ~ ! true == ~ true ( false , 123 or ( ( ~ "bar" << foo and foo == true ) / ( 123 ) [ ! ! ~ ! ( ! ! 123 [ false == ~ 123 ] & foo . foo ) ] ^ ! false . foo & - ~ ! - ( ~ 123 or - ! - ! ( "bar" and - false >> 123 ) ) ) and ! ! false [ - - foo ] ) ] ) ] >> ~ ~ ( foo . foo % true ( ) and false / - ~ ! ( 123 ) ) -- ;
 } ;
 } ;
 class foo { func foo ( ) int . int . int { ( ! 123 ( ) ) and foo ( ) * foo . foo -- ;
 } ;
 foo int . int . int ;
 foo int ;
 } ;
 class foo { } ;
 val foo int = - ~ "bar" >> ! foo != foo - - ~ ( true / ( false << true ) or ~ false [ false [ true ] ] ) >= "bar" ;
 class foo { foo int ;
 func foo ( foo int , foo int . int , foo int , foo int . int , foo int . int . int ) int { var foo int = foo . foo ;
 } ;
 foo int . int ;
 func foo ( ) int { ! ! true %= "bar" and ~ false ;
 } ;
 func foo ( foo int . int . int , foo int , foo int . int ) int . int { - ~ "bar" . foo == true * false and ! - true >> - true ;
 } ;
 foo int ;
 foo int ;
 func foo ( foo int , foo int ) int { var foo int = 123 ;
 } ;
 } ;
 func foo ( ) int . int . int { val foo int = ~ ~ ! foo [ false == true [ ~ 123 and true ] + - ~ ! - ~ ! ( false | ~ ~ false ( "bar" == ~ - - ! true or - ~ - true >> ( foo ) , ! foo [ true . foo >> 123 or false > false ] ) ) ] << - ! ! true ;
 } ;
 var foo int = foo ;
 func foo ( ) int . int { for var foo int = foo ;
 true . foo ;
 - "bar" and 123 -= - 123 { - - ( "bar" == ! ~ - "bar" ( - 123 , ! ! - ~ "bar" [ 123 or - ( 123 ( ! ! ! ~ ~ ~ false - ~ ! ~ ( foo ) == - 123 , - ! ( - - "bar" ) ) or ! false != ( - - "bar" - false [ "bar" ] and "bar" ) & ( - true ^ - ~ ~ true ) ) << false ] ) or false == ! true ) . foo ++ ;
 } ;
 } ;
 var foo int = ! - 123 ;
 func foo ( foo int , foo int ) int { for var foo int . int . int = - ( ! ! foo and ( ~ ! true . foo ) - false . foo ) [ ! 123 ] << - - ! - true - false . foo % ~ - - ! ~ 123 [ ( ~ true ( ) ) & true . foo == foo ( - ( - ! true [ - "bar" ] and foo [ "bar" . foo ] ) * false ( true , "bar" ( ) ) or true and - ( foo ) << - ! - foo [ foo ] , ~ ! ! - ~ "bar" [ true >> ( "bar" . foo + true or 123 / true ) ] - true ) ] ;
 ( ! ! true ^ true ) ;
 - ! - ! ( foo ( "bar" >> ~ ! - - true / foo ( ~ true or foo , "bar" . foo >= foo [ ! true ] ) , "bar" ) == - true . foo ) ( ! ! ! ( false ) and foo , - ( - ! ! ! 123 == "bar" [ ! "bar" << ~ ~ - ! true ] or ! foo >= ~ - false ) < foo and ( ( true ) ) ) % ! foo ( - 123 [ ! ( foo ( ! - ! 123 , - ~ "bar" & false . foo ) ) != ( - "bar" <= ~ ~ ! ~ ~ "bar" ) > ~ ! false ] * ( ! - ( foo [ - foo and ! true ] & ~ ! "bar" << "bar" ) . foo & "bar" ( ) == true [ ( 123 % 123 <= ! ~ false and ! true ) ] and ~ ! 123 ( - "bar" , ! true [ true [ ! ( - - ( ~ ( true or ( ! ~ ! ( ! - ! "bar" | 123 and false > "bar" ) == ~ ( - false ) ) . foo ) ) ( ! - 123 * "bar" and false . foo == 123 % ~ ~ ! ! foo [ ~ "bar" ] >> false . foo , true ) + false or ~ false and false ) ] != ~ "bar" ] and - ~ 123 ( ) or ( - 123 << - ~ 123 or false . foo >= foo ( ) * ~ ~ ~ ~ "bar" ) ) ) , false ( ) < - ! - "bar" [ ! ~ ( "bar" * - "bar" ) ] != - false ) << foo %= true <= - 123 . foo and - - 123 < - ~ - ~ 123 ( ) >> ! 123 ( "bar" <= ( false [ - ! - - true and foo ] ) != ( ( - ~ foo == foo >= foo . foo / ~ ~ - ! 123 and - ~ ~ "bar" ) . foo | ( ( - foo == 123 ) or ! ( 123 % false ) ) ) , true ) & - ! 123 ( ! true ( true [ foo [ "bar" << ( ~ ~ false ( ) ) ] ] , ! ! "bar" [ ~ ~ - 123 ( ) ] ) , 123 [ 123 >> foo ] or foo - 123 != true ) or - - ! - ~ true / foo . foo { val foo int = foo ;
 } ;
 } ;
 class foo { foo int ;
 func foo ( ) int { if foo ( ) { for var foo int = false . foo ;
 true ;
 "bar" { var foo int = ! ~ foo ;
 } ;
 } else { true or foo ++ ;
 } ;
 } ;
 foo int ;
 } ;
 class foo { foo int ;
 foo int ;
 foo int ;
 func foo ( foo int , foo int . int , foo int , foo int . int , foo int ) int { for var foo int = true [ - ~ - false [ ( false | ! - 123 [ ( 123 >= foo ( ) ) and 123 / - ! - - foo . foo ] & - - foo != ~ 123 [ ~ ~ true ] ) and - true ] ] ;
 ! "bar" ;
 ! 123 -- { ~ - false < ! ! ~ ! ! ! true [ ! - - foo * - ~ ( ~ true ) ] ;
 } ;
 } ;
 } ;
 val foo int = 123 [ ! - false >= ! true ] ;
 func foo ( foo int . int , foo int . int . int , foo int . int , foo int , foo int , foo int . int ) int . int . int { var foo int = ! ! ! foo ;
 } ;
 class foo { } ;
 func foo ( ) int { val foo int = foo ( ) ;
 } ;
 class foo { foo int ;
 func foo ( foo int . int , foo int . int ) int { if false { if ! - true { ! ~ - ( "bar" % ( ~ ~ ~ ~ 123 [ ! ~ "bar" ] ) [ - foo ( ! - false . foo == ! ( false ) ( ( - ! 123 ) ( ) > ( ( ~ foo [ ~ foo [ ( foo ) ] or ~ 123 ] ) ( ) ) / "bar" | "bar" . foo , foo & ! ~ ~ true ) , true ) + ( foo != ~ ! false / foo ) ] | ~ true ) [ ~ ~ ! ~ ! ! ~ ! true >> true and - "bar" >> - 123 ] ++ ;
 } else { val foo int = 123 << true . foo ;
 } ;
 } else { foo [ true == ~ ~ ~ ~ foo and ! false ] ;
 } ;
 } ;
 foo int ;
 foo int . int ;
 foo int ;
 func foo ( ) int { val foo int = false << ! - false and ! - ! "bar" == - false [ 123 . foo ] or ! - ! false . foo * false ( ) ^ ( ~ false [ false ( ! - "bar" >> ! - ! ~ ! foo , ~ - foo . foo and - true ) ] or true ) ;
 } ;
 foo int ;
 foo int . int . int ;
 func foo ( foo int , foo int . int , foo int , foo int . int . int , foo int , foo int . int . int ) int { ~ ( true ) >> 123 ;
 } ;
 foo int . int . int ;
 } ;
 class foo { foo int ;
 func foo ( ) int . int { for var foo int = "bar" ;
 ! - ! - 123 ;
 false [ foo ] { var foo int . int = ! - false ;
 } ;
 } ;
 func foo ( ) int . int . int { - ! 123 % ~ ( ! "bar" . foo ) ;
 } ;
 foo int ;
 func foo ( ) int { val foo int = ( ! false ) ;
 } ;
 func foo ( foo int . int , foo int . int , foo int . int . int , foo int , foo int , foo int ) int { ! false . foo %= ! ! - 123 ;
 } ;
 foo int . int ;
 foo int ;
 func foo ( ) int { val foo int = - ( false % foo + ~ foo ) and true ;
 } ;
 } ;
 class foo { foo int ;
 func foo ( ) int { val foo int = true != - - true ;
 } ;
 func foo ( ) int { ~ ! true << foo or ( true ) [ 123 ] << ( ~ ~ true or foo ( - false . foo / false >= ! true ( foo [ - - ~ false ] % - ! true ( ) or "bar" > false , foo ) >> ~ "bar" , ~ "bar" < 123 ) ) & ~ ~ ~ 123 **= false != ( foo ) . foo and ! ~ ! ( ! 123 * - - ( "bar" ^ ~ ~ false or ! ( ( - ! ~ true and 123 ( ~ false , - ~ 123 ) ) ) ) [ ! ! 123 or false | ! ~ ( ~ false ) [ ( false - ~ ! foo ) ] ] ) != ! 123 or ! ( ! - "bar" ^ ! ( ! "bar" . foo ) ) ;
 } ;
 func foo ( ) int { false -= - - false . foo >= 123 ;
 } ;
 func foo ( foo int . int . int , foo int ) int . int . int { "bar" >> ! ~ ~ true ++ ;
 } ;
 foo int ;
 func foo ( foo int , foo int , foo int . int . int , foo int ) int . int { for val foo int = ! ( ! ~ - ~ foo + true ) & "bar" [ ! - ! ! ! ( - ( foo ) ) == - ! - true + - ! foo [ true [ foo [ "bar" ( ) ] ] ] ] << 123 or ~ ( true >> - false ) ( ) & - "bar" . foo ;
 ( ~ "bar" != ! - - false ( ) or foo . foo | - - foo > false . foo ) / - ~ ~ "bar" ;
 ! false -- { - - foo < ~ ! - ! true >> ( true ) ^ ~ ( false <= ~ 123 . foo ) and ( ~ ! ( ~ false and - "bar" / "bar" . foo == ( false ) ( ) ) ( ) > ( ! ~ 123 ) [ 123 [ ~ foo ( ) != false ] or ~ foo [ ( ! - "bar" . foo - ! 123 . foo ) ] << - ! false % "bar" >= - ~ ~ foo ] ) >= ! "bar" & - - true << ! 123 or ! false . foo >= foo += - - ! - false . foo ^ - ( - ~ "bar" != ~ ! true and - ( ( - - 123 + foo ) == foo and ~ foo ) ( - true , - ! 123 [ false ( ) >> ~ "bar" or foo <= "bar" and ! ( ~ ~ ~ ~ ( - - "bar" and ~ foo ) ( ) ) * ! "bar" + - "bar" ( ) == ( ! ! - ! foo . foo > "bar" ( - 123 and ~ false , true and true or - ~ true + false ) ) >= ~ "bar" ] or - ! foo ( 123 & ~ true [ ! ! ( ! - - true ^ true == - true <= "bar" + ( "bar" ) and false . foo & true ) != true ] , - ~ ! ~ "bar" == false [ ! false . foo >> - - - ! ! ~ ! ~ ( ! - true ) ] ) ) or - foo . foo ) ;
 } ;
 } ;
 foo int ;
 } ;
 var foo int = ( ! "bar" ) [ - ~ foo ] & 123 > ( 123 ) [ ~ ( ~ ( - - ~ ~ false . foo and - - false ( ) ) ) and - ~ foo ( 123 , false * true | foo ) >> - "bar" ( - ~ ( - - 123 != foo ) , ~ - true and - - - ~ "bar" ) ] and "bar" ;
 
