module foo ;
 class foo { } ;
 func foo ( foo int . int . int , foo int , foo int , foo int ) int { for foo : int = false and foo ;
 - ~ - false ;
 true { } ;
 } ;
 foo : int = ~ ~ true << - ~ - ! - [ ] ;
 func foo ( foo int , foo int . int ) int { } ;
 func foo ( ) int . int { ~ foo ++ ;
 } ;
 foo : : ~ ( ! ! foo ) ;
 foo : int : ! - "bar" < ~ false ( ) >> "bar" ;
 foo : int = ~ ( - ! "bar" - ! true > ( ! - ~ - ( [ ] ) == 123 ) % 123 ) [ ~ false [ ! [ ] ] ] or true ;
 foo : = true >> - true ;
 foo : int . int . int = - ! false and ( - ~ ! ! "bar" ( [ ] ) ) or "bar" ;
 class foo { func foo ( ) int { } ;
 func foo ( ) int . int . int { } ;
 func foo ( foo int , foo int , foo int , foo int , foo int , foo int . int . int ) int . int { foo : int = ! [ ] ;
 } ;
 func foo ( ) int { } ;
 foo int ;
 } ;
 func foo ( ) int . int . int { } ;
 func foo ( foo int . int . int , foo int . int , foo int , foo int ) int { ! "bar" ++ ;
 } ;
 func foo ( ) int { for foo : int : ~ 123 . foo ;
 foo or ! foo ;
 "bar" { } ;
 } ;
 class foo { foo int ;
 func foo ( foo int , foo int . int . int ) int { } ;
 foo int ;
 } ;
 foo : = 123 ;
 class foo { func foo ( ) int { if [ - ( "bar" ) or true and ! ! 123 ( true , false ( - false , ~ - - ! ( ! "bar" [ [ ! true ] ] ) ( - "bar" or "bar" [ ! - ! ~ ! [ ~ - ( "bar" << 123 . foo ) , - false , [ false or 123 , foo , - ! ( foo | ! "bar" ) ^ - ~ ~ ~ true [ ! ~ ! true ] , 123 ] == ~ true [ ( ! - ! ~ - - - - ! - ~ [ ] ) ] , ! ( ~ 123 ) , ~ "bar" ( ) ] ] ) , false / ~ ~ ~ foo , ! - ! false >= ~ ! - ~ foo , - "bar" ) , ~ ~ ( ! ~ [ ] ) [ true ] or ~ ! false [ ~ - ~ "bar" and false ] ) , true ] { } else { } ;
 } ;
 func foo ( ) int { } ;
 foo int . int ;
 func foo ( foo int , foo int , foo int , foo int , foo int , foo int ) int { } ;
 } ;
 class foo { } ;
 foo : : foo ( false , "bar" * foo , ( ( - ( ~ [ true or ! 123 [ true ] , - ! "bar" and ! [ ( ~ - foo . foo & - ( - - [ ] / - ! - ~ - false ) - - 123 ) ( foo , ~ ~ "bar" , ~ "bar" < - - foo ) , - - ~ false , ! ( 123 or - ~ true | false ( ~ ! ~ ! - true , ! ! false ( ) , ! ! ~ - foo ) ) ( true , ! - "bar" , ! ~ "bar" % ! foo , ~ ! "bar" ) , false ( "bar" > ! [ foo , - true ] << ~ - - ! ~ "bar" [ ~ ( ! false ) [ - ~ - true ] ] and ! 123 ) , ~ - - 123 [ ( "bar" ) ] + ! foo , foo ] ( false , [ ] [ - true - - - true . foo != - ~ "bar" . foo + true ] ) + ~ [ ! - false ] , "bar" ] ) and - - ! foo ( [ foo , - 123 * ! true [ ! - - false [ - - ! [ - ! ! false ( - ! "bar" % - "bar" or ! false . foo , true , ( ~ true . foo ) ) , ~ "bar" , [ ] [ ~ 123 ] , ( "bar" ) , - ! [ ] , ( false ) ] ] == ! [ ] . foo ] , "bar" and true ( - - true ^ ~ [ false ] , foo != false [ ~ ! true + "bar" / - ! ! - [ ] ( ) ] or - false , - true , [ ] ) , - - true , - ~ ( ~ ! 123 ) >= ( - ! "bar" ) * "bar" ] , ~ - "bar" or [ ! false <= ~ foo , ~ - true , ! true ] . foo , true > ~ foo ( ~ ~ foo != ( ( ~ ~ - foo ) ) , ( foo and foo [ false ] ) ( - ! [ ( true ) . foo ] ( ! - 123 or ~ ~ true , - ( ! false - true ) >> [ ] , - ~ "bar" , "bar" ( false [ true ^ [ - ~ false ( ) , "bar" , ~ "bar" + ! ( - ~ - false [ ! foo . foo ] >> ! ! true . foo or ! foo . foo ) or ! ~ "bar" < foo ] or ( ! - ( ! ( ! true ) ) and foo ) ] , true ) ) and - 123 [ true ] , ~ ! 123 and foo , ~ ! ~ 123 ) , ~ foo != true , "bar" or - ~ - [ ! - ~ - false >> 123 / - ! ! ( [ ] ) , true or - [ ] and - ! - [ ! false , ( - ( [ false , ! ! - [ ] and foo . foo , [ "bar" , ! ( ! - ! false ( 123 ( ( - true % false ) > ! ~ ! 123 , ~ false , 123 ) , - ! 123 * ~ - - "bar" >= - ~ "bar" , [ ] ( ) or 123 [ foo ] , "bar" , - "bar" [ - ( ! - - "bar" ( - false , - ( false ) , - - ~ false ) ) ] ) ) and ~ ! 123 << "bar" , - 123 or false , 123 . foo << ! ! ~ ! true or - - ! "bar" and foo , [ ] << - ! ~ ! ~ ~ ( false >> ~ - false ) ] , ~ ~ ! - false , "bar" or ~ ~ ~ ~ 123 <= foo , ~ false [ true [ ~ ( ~ false ) ] ] ] ) ) & - foo , ~ "bar" . foo , - - - ~ true , ~ false ] > true ] , - ~ ~ ! ( "bar" ) or false [ true ] ) or [ ] , ! ~ ! 123 , - ! - false , ~ 123 and - false + ! ! - [ ~ 123 , foo , 123 and ! - ! [ ] ( ~ 123 , ~ - ! false or "bar" [ - 123 ( ) | "bar" and foo ] | "bar" , ~ ~ [ - 123 , ! [ ] , - ! ~ ~ ~ ~ ~ 123 . foo , true and [ ] <= ~ ( true and ~ foo ) ( - ! - ~ ( ! ! - "bar" . foo > ~ ! true . foo >> true . foo and ~ ! ( ~ - 123 and ( false ( ( ( 123 ) and 123 ) , [ ] , 123 , true [ - ~ "bar" ] ) ) ) ) [ ( ! false ) >= - ! ! - ! - 123 ] + - 123 , ! 123 , ( ! foo and ~ 123 ) or - false [ - 123 ] , - ~ ~ - - 123 ) ] [ 123 ] ) , "bar" and ! ( ( 123 ) ) , foo + - false ] ) ) or ~ foo ) > 123 ) == 123 ;
 func foo ( foo int , foo int , foo int , foo int , foo int , foo int ) int . int . int { for foo : int . int . int : 123 ;
 [ "bar" ] ;
 123 ( ( - ! ! 123 ) == foo ^ ~ foo , ( true [ true != 123 ] ) or - "bar" ( ) == foo , false or false [ ~ true << [ ~ true , "bar" , true , true , ! ~ ! true , - [ ! ! ~ ( foo [ "bar" ] ) . foo - ~ ! ! - ~ ( ! 123 ) , "bar" and foo or ~ ! 123 and [ ] ( - ! 123 [ ( foo ) > ! ! false and ( ! - ~ ( [ ] . foo ) ) >= true != foo ] , ~ ! ( [ ] < ( "bar" or ~ ! 123 ) ) , ! ! - "bar" / true == true , [ ] or false ^ - ( ( false and foo ) [ false or "bar" ] / false - 123 and ~ - ~ 123 | [ ] ( true [ false ] , ~ false and foo >= - false ( ) , 123 , ! ~ ~ - false . foo or "bar" ) ) , true >= ( true or 123 ) and - ! true >= "bar" ) ] ] ] , ~ true , ! - foo ) or ! - ~ ~ "bar" **= ! - ( ( ! ( ! 123 % 123 ) ) >> ! foo ) . foo { } ;
 } ;
 foo : int : ~ foo ;
 foo : int = ! - 123 or - 123 ;
 class foo { foo int ;
 } ;
 foo : = ~ ~ - ~ - [ ] ;
 foo : int . int = [ ] ;
 
