module foo ;
 class foo { } ;
 class foo { foo int ;
 foo int ;
 func foo ( foo int , foo int , foo int . int , foo int , foo int . int . int ) int { } ;
 func foo ( ) int { } ;
 } ;
 foo : int = ~ - ! foo or 123 and ! ! [ "bar" == - ~ ! - false , ~ foo , false , ! - "bar" or - ! ~ ! - ! foo / ( ~ false ( true , ~ ~ false == ! - [ ] ( foo , false , 123 [ - ~ ! "bar" ] - foo , ! false ) >> ~ true , foo , [ ( ! ~ - true == - ! false and ~ ! ~ [ ] ) ] , ! foo , - ~ foo and 123 ( ) ) ) < foo << [ ] , ~ ( 123 ) ] ;
 func foo ( ) int { for foo : : ~ - - - false << "bar" ^ ~ - [ ] ;
 - ! foo ;
 ! ! true & ! "bar" *= foo ( ! ~ ! ~ ~ - "bar" ) { } ;
 } ;
 foo : = [ ] ( ) ;
 class foo { func foo ( foo int . int ) int { } ;
 func foo ( ) int . int { } ;
 func foo ( ) int { foo : : ~ - ( foo != ! ~ [ ] ) ( "bar" , ~ ~ ~ ! false , "bar" , ~ - 123 , ! 123 ) and true ;
 } ;
 func foo ( ) int . int { - ! false and - ! - "bar" - - ( ( 123 ) . foo or "bar" ) ;
 } ;
 func foo ( foo int , foo int , foo int . int . int ) int { for foo : int = ! ~ 123 ( ! - ! ! ( "bar" [ ( ~ foo ) ] ) , ! ~ 123 [ ! false [ true ] or ( foo [ ~ ~ ! - true ] | ! - - - ( foo ) >> ~ - ~ ( 123 ) ) . foo ] == ~ ~ ~ false , false [ true ( [ ] and ~ false , - - foo < false [ ! ( "bar" ) ] , false ) ] / 123 . foo , [ true >> [ - ! "bar" ] > - - - false , ! false , ~ ! - ! "bar" , "bar" or ~ ! ~ ! false != ! "bar" , true ( ) << - "bar" [ ~ ~ ( true ) ] ] or - - false , ~ "bar" and - foo + - false ) ;
 ! - ! [ ] << "bar" ;
 123 *= ~ 123 { } ;
 } ;
 } ;
 foo : int . int : ~ ~ ~ - false ;
 func foo ( ) int { } ;
 class foo { } ;
 class foo { foo int . int ;
 foo int ;
 func foo ( ) int . int . int { ~ ! false ;
 } ;
 foo int ;
 } ;
 func foo ( ) int { ! ~ 123 . foo ^ true ;
 } ;
 func foo ( foo int , foo int . int . int , foo int . int . int , foo int . int . int ) int { - - true %= true ;
 } ;
 class foo { } ;
 class foo { foo int ;
 foo int ;
 foo int . int ;
 foo int . int . int ;
 } ;
 foo : int . int . int = ~ [ ] ;
 class foo { func foo ( foo int . int , foo int ) int . int . int { if ! true { } else { } ;
 } ;
 func foo ( foo int ) int { } ;
 foo int . int ;
 foo int . int ;
 } ;
 foo : int = ~ "bar" or ( "bar" ( - true [ ~ - ! ! "bar" ] >> ! ( ! foo [ "bar" ( ) and ~ - ~ - ! ! [ ! ! - ! [ ] ] ] ) , ~ - ~ ~ foo , - [ [ false and false , - foo , ! ! ~ ~ - true and ( ( ~ - - true ^ 123 and foo >> ~ foo [ ( true ) ] ) >> [ ] ) , - false , ~ ! - ~ foo and ! foo . foo % ~ "bar" , foo % - true [ 123 or - 123 [ - - - foo ] ] ] , false / false , - ! - ! false and true , ~ [ ] == ~ foo , ! true . foo , - ( 123 == ( - ~ - ~ ! ! ~ [ false , - - ( ~ ~ "bar" ) , true , foo ( ) , ! false , ~ true ] ) ) and - ( "bar" + ( - ! ( ! ( false ) ) . foo ) ( "bar" ) ) ] , - "bar" or ! ~ [ - "bar" / - "bar" and ~ 123 ] , false & [ 123 . foo & ~ true [ - ! ~ ( - false ) ] , ( ~ - ! ~ 123 or [ ] ) , "bar" != ~ - 123 , [ ] >> false . foo ] == ~ - false | - false . foo , ~ [ ( ! true ) . foo - ! ( ! ~ - "bar" ) ( ) , ( ! false | ! 123 or ( - ! ( ~ "bar" ( ) and ! ( ~ ! - true ( 123 , 123 , ~ ~ "bar" and [ ( - false ) [ ~ - ! false ] or - ~ ~ [ true < - ! [ ] or ~ ! [ ] , ~ ~ 123 and false << foo == foo [ - ! ! ! false <= "bar" ] , "bar" and ( ! - ! "bar" ) % ! ~ true ] > "bar" , - - [ ] , ! ~ "bar" , - - 123 ] , ( ! ! ~ false ) , ! foo == true ) ) <= ~ false [ "bar" == 123 and ! 123 ( - [ ] , ~ "bar" , true == ! false , false and foo ^ - 123 ) ] ) ) . foo & "bar" ) & "bar" [ ! 123 ] , 123 or foo * "bar" ( ~ [ - true / false , - ~ foo % ( ~ - "bar" . foo ) , "bar" and 123 ] . foo ^ ~ ! ~ ( foo ) , - ~ true & - - ~ ( ! ! false ) ( ) and [ ] ) , "bar" , true or foo and "bar" , ~ - ( ~ - true ) ] ) ) >> - - "bar" ;
 foo : int : ! ! false <= false == 123 ;
 class foo { func foo ( ) int . int . int { true += ! [ ] [ ! foo . foo and ! ~ ( - ~ ~ ~ "bar" and false ) ] ;
 } ;
 } ;
 func foo ( ) int . int { } ;
 class foo { func foo ( ) int { } ;
 } ;
 class foo { foo int ;
 } ;
 func foo ( foo int ) int . int . int { if - ( [ foo ] ) { } else { } ;
 } ;
 class foo { func foo ( ) int { } ;
 func foo ( foo int . int . int ) int { } ;
 func foo ( ) int { } ;
 func foo ( foo int , foo int . int . int , foo int ) int . int { true . foo <= ! ~ ~ ( ! - ! [ ] ) [ - [ ] ( ) ] ;
 } ;
 foo int . int . int ;
 } ;
 foo : = false . foo ;
 func foo ( foo int , foo int . int . int , foo int . int . int , foo int , foo int ) int { ~ - ! 123 << ! "bar" -- ;
 } ;
 
