module foo ;
 func foo ( foo int , foo int . int . int , foo int . int , foo int , foo int , foo int . int ) int . int { ! true ++ ;
 } ;
 func foo ( ) int . int . int { for val foo int = foo ;
 ~ foo ;
 ! ! ! ! ! "bar" != 123 [ - ( true ) > "bar" ] { for val foo int . int = false ( ( ( 123 + "bar" [ ~ ! ! ! - ( ~ foo . foo + ( true ) ) > true ] != - - ( false ) ) & false ) , ~ ! true ) - ( - 123 - ( - ~ false >= true != ~ ~ ! "bar" ) ) ;
 foo ( ) ;
 ~ "bar" . foo -- { if - 123 + true != true - - ~ true . foo { ~ ~ ( ( ~ ( - ~ ! ! 123 != ! ( 123 ) ) . foo ) ) ;
 } else { 123 * - ( "bar" ) . foo ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int . int ) int . int { false ( ) = ( - ! ! "bar" >= true ) ;
 } ;
 func foo ( foo int ) int . int { true != true ( ) -- ;
 } ;
 func foo ( ) int { if ! false { ! ~ true ( ) **= ! ( - ! - false ) ( ) ;
 } else { if 123 ( ) { foo > false . foo ++ ;
 } else { for val foo int = ( "bar" + true ) [ ~ foo ] & ! "bar" < 123 ;
 - - ! - "bar" ;
 false -- { - 123 . foo | ! true = - ! foo != ~ ! ~ - true ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) int { if false / - 123 { if - ! ! ~ ( ~ ~ true | ! - foo ) . foo { - - true . foo ^ "bar" [ ~ true ] ;
 } else { ! true -- ;
 } ;
 } else { - ~ 123 ( ) -= ! ~ true ;
 } ;
 } ;
 func foo ( ) int { if - foo { foo ;
 } else { for val foo int = "bar" [ foo . foo ] & ~ - 123 ;
 ( ~ ! 123 ) ( ) ;
 ( - ( 123 [ ( ! - ~ ! 123 ) ( 123 , - foo * foo ) ] ) ) * false { for var foo int = ! ! ~ "bar" ;
 123 <= 123 [ - - "bar" ] ;
 true . foo **= 123 { for val foo int = ~ foo ;
 ( - ( - false ) ) ;
 ( - true ) . foo { "bar" - ! true += - - - ! ( false ) ;
 } ;
 } ;
 } ;
 } ;
 } ;
 class foo { for val foo int . int = ~ ~ 123 != false ;
 ! ! ( - - - ! ( ~ ! - ! false [ ~ ~ ( "bar" & - ( ! "bar" ) ) ] ) ) < ~ foo . foo ;
 foo ( ) -- { if false { 123 ;
 } else { if - foo . foo ^ foo { ~ "bar" ++ ;
 } else { if "bar" != 123 { for var foo int = ~ "bar" ( - "bar" , ! ~ false ( ~ 123 != ! false , ~ - false ( ) == false - ~ ~ ( ~ ~ 123 & false ( ) != - false ) ) + false ) | ! ~ ~ - - "bar" [ foo ] ;
 ! ~ foo ;
 true ++ { if ! - false { for var foo int = ! ( 123 . foo ) ;
 ~ false . foo ;
 "bar" -= ! foo / ! ~ "bar" [ foo == foo * - false > ! ~ ~ ( ( ~ foo ) + true / true ) [ true ] ] { if 123 { for val foo int = 123 ;
 false ;
 ~ 123 ( false . foo | ~ ( ! - false ) , "bar" . foo ) >= ~ false & ! foo - 123 -- { for var foo int = false & "bar" + false ;
 true * ~ false > ( - true ) == ! ! - ! - "bar" [ ! - - 123 [ foo ] ] ;
 foo -- { if ! ( true [ true ] ) [ true / ! ! ! ~ true [ "bar" == ! false ] ] { if ( true ) { foo + ( foo . foo ) -= foo ;
 } else { foo & ( ! false & ( "bar" & 123 ) ) ++ ;
 } ;
 } else { ~ ! ~ ~ - "bar" [ - - ~ true * ! ( ! ! ~ true / false . foo < - ! ( ! "bar" ) ) ] -- ;
 } ;
 } ;
 } ;
 } else { ! ( false [ "bar" == ( true ) ( ) ] ) ;
 } ;
 } ;
 } else { if true [ 123 ] { if ~ ~ - false ( ) { if ! "bar" { ~ ~ foo == false ;
 } else { for val foo int = ~ ~ ( 123 . foo ) . foo ;
 ~ ! ~ ( foo . foo ) ;
 ! "bar" != ~ ! ~ ! ( "bar" ) { ( ~ true ) ;
 } ;
 } ;
 } else { ! ( true ) **= true . foo | ~ "bar" ;
 } ;
 } else { 123 . foo ;
 } ;
 } ;
 } ;
 } else { ~ - ~ "bar" [ 123 [ ~ true + ~ "bar" ( ~ foo , - true > foo ( ) ) != ! ! ! 123 >= false ] ] += ( - ! foo ( ) ) ;
 } ;
 } ;
 } ;
 } ;
 } ;
 class foo { foo ;
 } ;
 func foo ( ) int . int . int { ! ! true != ( ! ( false ) ) ;
 } ;
 func foo ( foo int , foo int . int , foo int , foo int ) int . int . int { if ! ~ ~ ~ ! 123 { for var foo int . int = ~ ( ! - ( true ) < true ) [ - 123 > 123 / ! foo ] ;
 foo - - true . foo ;
 ! foo + ~ ! "bar" == false { ! "bar" ;
 } ;
 } else { ~ - - false * ( ~ - ! ~ ! false | "bar" ) [ ~ ! false . foo ] - foo ++ ;
 } ;
 } ;
 
