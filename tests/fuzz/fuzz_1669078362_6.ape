module foo ;
 func foo ( foo int , foo int ) { for var foo int = ! ~ foo ;
 - 123 [ 123 ] > - - ~ - ~ ~ false ;
 - "bar" * false **= ( ~ "bar" >= foo ) { if ( ~ false ) [ ! "bar" ] { - true == - true = - ( - - foo ) ;
 } else { if - ! ! false . foo & ! false [ ! false + 123 / true ] { for val foo int = ( ~ ~ foo + ! foo [ foo + 123 >= - ( ~ ! "bar" ^ true != ! ! ~ ! ! ~ ~ ~ ( ( foo ) == - ( ~ 123 ) . foo ) [ - ~ ! true - foo ] ) ] ) - false . foo <= foo - false ;
 ~ ! foo [ ~ 123 != "bar" ] ;
 123 [ - - 123 ] -- { for var foo int = - ! false ;
 123 ;
 ! - - false < false { - true < 123 ( true , ! ! foo ) ;
 } ;
 } ;
 } else { - "bar" -- ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int ) { - "bar" ++ ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int , foo int ) { if "bar" { 123 . foo = true [ false . foo ] ^ ! ! - foo * ( 123 . foo ) == - true . foo ^ ( ! ~ - 123 [ "bar" ] ) . foo ;
 } else { if true < true == - ~ ~ "bar" { 123 ++ ;
 } else { - false ;
 } ;
 } ;
 } ;
 var foo int = true . foo ;
 func foo ( foo int , foo int , foo int ) { 123 . foo ;
 } ;
 class foo { false = 123 [ ! ~ - - false ] ;
 } ;
 func foo ( foo int ) { "bar" -- ;
 } ;
 func foo ( foo int , foo int , foo int ) { ! ( true - 123 . foo == ! ! 123 ) - 123 & ( true . foo ) . foo ;
 } ;
 class foo { false ++ ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) { foo ( true , ~ false ) != "bar" ++ ;
 } ;
 func foo ( foo int , foo int , foo int , foo int ) { for val foo int = false ( false ( foo ( 123 , ( "bar" ) . foo ) != ~ - - ~ ~ ! false [ ! false == ~ - ~ true ] , true ) - - true . foo , foo | ! ~ false ) ;
 ! "bar" ;
 ~ ! true . foo > false . foo ^ "bar" ( - "bar" ( ( ( ~ 123 ) ) - false ( ~ ( false [ true ] ) [ ! - ( ( "bar" . foo ) ( foo . foo & true , ~ - - false [ foo | - ! "bar" ] ^ - true ) >= 123 ) ( - ~ - ! - false , true < false . foo ) ] , foo ) , 123 ) , ( ~ ! 123 ) ) == - true { true = true ( foo [ ! - 123 ] , foo ) * false ;
 } ;
 } ;
 class foo { if 123 . foo + ~ - - 123 { "bar" / "bar" [ ! ( ( true ) ) ] -= "bar" ;
 } else { for val foo int = ~ "bar" * "bar" ( ! 123 , ~ ( ! 123 ) ) < 123 [ "bar" ] ;
 123 ;
 123 / false -= "bar" . foo { ( 123 ( true > ~ 123 , - "bar" ) ) -- ;
 } ;
 } ;
 } ;
 func foo ( foo int ) { 123 ;
 } ;
 func foo ( foo int , foo int ) { ( false . foo >= - "bar" ) == ! ! false ( foo [ true ] , - ~ ! "bar" ) >= ~ true ++ ;
 } ;
 val foo int = 123 ;
 
