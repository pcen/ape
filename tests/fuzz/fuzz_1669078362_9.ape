module foo ;
 func foo ( foo int , foo int , foo int ) { if - ( ! false ( ~ ! foo , ~ true ) * - foo ) ( ! - ~ true | ( ~ ! - "bar" [ ( 123 * ! 123 ) ] ) / ~ - "bar" >= - "bar" [ ! - - "bar" == ~ ! - - ( ( - "bar" ) ) ^ "bar" ] , "bar" ) & ! ! ! ~ - true { for var foo int = true ;
 ! ~ ~ ~ ( 123 [ ! ! true [ "bar" . foo != true [ foo ] ] * 123 ( ! - ! true - ~ ~ ~ false , ~ foo [ ! - 123 ] ) ] ) ;
 foo -- { ! - ! ~ - ~ 123 ;
 } ;
 } else { if true + ( true ) { if false { ~ - false ( ~ ! ! - ~ - ~ ! foo , foo . foo * foo - foo ) ;
 } else { ! true ++ ;
 } ;
 } else { for val foo int = 123 ;
 ~ - 123 . foo / - - "bar" ;
 123 { for var foo int = ( ~ ! ( ! ( ~ ! true [ - ( true ) >= 123 == ~ ! - ! ~ ~ ~ false ] >= ~ ~ ~ false ) < - ! ~ ~ 123 [ ~ ! "bar" ] ) ) ( - ! false , ~ - false ) ;
 ( ! ( foo [ ( 123 [ ~ ~ foo ] ) [ 123 ^ ! ~ false & foo ] ^ 123 < 123 . foo ] < true ) - - - - false [ - 123 [ - ~ ~ ~ ~ - ! ~ "bar" ] ] ) . foo ;
 ! false **= - - ~ ~ ~ false { if - - "bar" { for var foo int = ! false ;
 123 ( ! 123 < ~ ( - - 123 <= false . foo == true . foo ) , ! ~ "bar" ) ;
 "bar" != ! true = false / foo { for val foo int = - ! true ;
 foo ( ~ - - - ~ false & ~ true , - foo ( foo ( 123 == foo / - false . foo , ! ! foo ) & - true == true , ! ( - 123 ) . foo ) / - ~ true | foo [ false ] >= false ) ;
 "bar" /= ( ~ ( 123 ) == 123 ) { ( - foo >= foo ) *= ! ! false ;
 } ;
 } ;
 } else { if ! false { for val foo int = ! ! ~ 123 ;
 ( false & ! - ! true | foo ) + ~ ! - ! ~ 123 ;
 ( ~ false ) = false { for val foo int = true < "bar" ;
 ~ foo | false < ~ ! 123 ^ - true ;
 123 -= ( ~ ( ( - ! ! foo ( foo >= false [ "bar" < true ] , ~ true ) ^ ~ - "bar" ) [ - 123 ] ) ) . foo { 123 ( ~ ~ "bar" . foo , - ! foo [ ! ! - true . foo ] ) == ( true ) | ~ false . foo ;
 } ;
 } ;
 } else { ~ ~ "bar" . foo /= ! ! ! true != - ! true [ "bar" ] ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int ) { ~ ~ false . foo ;
 } ;
 class foo { for val foo int = ! "bar" [ 123 [ ! ~ - false ( true * ( ! foo ) ( "bar" . foo / ! ( "bar" ) , ~ - ( - - - false != ~ ! ~ false * 123 + - - ! true ) == ~ foo ) , "bar" . foo != ~ ~ 123 ) == foo ] != - ! false ] ;
 - ~ ! - ( ! 123 == ! false ^ ~ false [ - foo . foo == ! true ( - ! false == ! "bar" [ false ] , false [ 123 ] == - foo ^ ( true . foo ) ) * true [ ! - ! foo ( ~ ! ! "bar" . foo >= "bar" , - ! ~ "bar" . foo ) ] ] ) ;
 foo . foo { ~ ~ ~ false -- ;
 } ;
 } ;
 val foo int = "bar" ;
 class foo { for val foo int = ~ ! ~ foo < ~ ( ~ "bar" ( ~ true , ( "bar" [ ~ ~ 123 - ~ 123 ( - false , false / ~ ! true ) ] ) ) + - "bar" . foo ) [ true ( foo , foo ) / ! ! foo ] ;
 ( foo == 123 ( - ( - ! ! 123 . foo ) * 123 [ ~ true ] , true [ ! true ] - - ( true + 123 == 123 ) == ~ foo ) ) | ( ~ false ) [ - - "bar" & ! 123 ] / ~ false ;
 "bar" . foo -= ~ foo . foo { if true + - ~ ( false . foo ) . foo >= "bar" { "bar" ;
 } else { if 123 ( ( - false ( 123 , - true ) ) . foo | ~ foo ( ! foo < ~ - - ( - - ~ ~ - ~ false ) , false ) , - ~ true [ 123 | ~ ! ~ ( ! ! true [ ( 123 ) == ( false ) ( ~ foo ( - "bar" , - foo . foo ) , 123 ) ] ) ] ) { for val foo int = false ( ! ~ "bar" . foo <= ~ true , ! foo ) ;
 false ;
 "bar" { for val foo int = false ;
 ~ ~ ! 123 ;
 ( ( - false ( ( ~ true . foo ^ "bar" [ - true . foo ] != false ) . foo , ! "bar" ) ) [ ( ! false ) ] * foo != - "bar" [ ~ ( 123 ( ! "bar" . foo , 123 ) != ! true [ ( false ) / ! ! ~ foo ] ) / true ] ) [ false - 123 ] -- { ! - true [ ( true . foo ) [ - - - ! 123 ] ] ++ ;
 } ;
 } ;
 } else { ~ 123 & true ++ ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int ) { for val foo int = - - ( true - "bar" ) [ ~ true ] ;
 "bar" == foo [ - - true [ false - "bar" ] < ~ foo / "bar" ] ;
 ~ true ++ { ~ false ++ ;
 } ;
 } ;
 class foo { - ( - false != 123 [ true ( ~ ~ 123 , "bar" ) ] ) -- ;
 } ;
 val foo int = ~ ! true ;
 func foo ( foo int , foo int ) { for var foo int = true [ "bar" [ ( ~ ~ true ) ( ~ - - true / - ~ false . foo < "bar" , 123 ) ] ] + foo ( ! foo == ! ! ~ - - true , - ~ true ) < ~ ~ "bar" == ~ ~ true ;
 - foo ;
 ! ~ - - - ! ~ - 123 ^ false { if ~ ! "bar" <= true . foo { ! ( foo ) /= - true & false ;
 } else { ! "bar" / ( ~ ~ ! false & - 123 == "bar" ) ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int , foo int ) { - ( foo . foo ) /= ~ - foo [ true . foo ] & ( ! "bar" ( 123 ( - ( - ! false ) , ! ( foo ) ) , ! ( ! ~ true ) >= ! - "bar" . foo * ! 123 ) ) ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int , foo int ) { ~ 123 ( ~ false & ! ( - true ) , ~ ! - - ( ! foo [ ! ~ ! ~ foo ] ) ( "bar" , - - ~ ~ - ! 123 & false . foo >= ~ ~ 123 - 123 ) ) ++ ;
 } ;
 var foo int = ! ! ! false [ ~ ! - ! foo . foo ] > - ( foo ) ;
 class foo { for var foo int = true ;
 ! ~ ! ( ! true [ foo [ - true & ~ ! ~ "bar" . foo ] ] / ! ! true [ ~ true & 123 == - ! false [ ( true [ - ~ ! ( ! "bar" [ 123 . foo / ( ( ~ ~ - false ( 123 <= 123 ( true ( ( false ) , ! ( true * ! false [ 123 [ "bar" . foo ] / false == ! ( "bar" ) ] ) - 123 [ ( - ~ "bar" ) ] <= ! - false ) , foo ( - ~ foo , - "bar" ) ) * 123 , ~ ~ ( foo ) ) ) / ! ( ! ( 123 ) . foo ) [ "bar" == ~ false ] ) ] > ~ false ^ 123 != foo * - 123 ) [ ( 123 <= "bar" . foo != false / "bar" ) ( ~ true , foo ( ! true . foo , true * foo ) * foo ( foo . foo < foo . foo , ( ! true . foo ) ) ) * - true ] ^ - false ] ) ] ] ) ;
 ~ false / 123 . foo += true > 123 ^ foo . foo { for var foo int = - false ^ false ;
 "bar" ;
 ~ 123 { if false { ( 123 ) **= ~ ~ ~ true == "bar" ( false , ~ ~ ! - foo ) ;
 } else { ~ 123 * ~ false + ~ "bar" . foo -- ;
 } ;
 } ;
 } ;
 } ;
 var foo int = foo ( - foo ( true * - ~ - - "bar" ( ! false , foo ) , "bar" == ! ! 123 / ! ~ ~ false ( - "bar" / - - "bar" [ ! - true ( foo [ - 123 ] < "bar" . foo , ( "bar" ( 123 , "bar" != foo [ ! "bar" > ! ( ~ ~ - false == 123 ) != 123 ] >= "bar" [ foo ] & ! 123 ( false > foo , ~ foo * ! true ) ) ) ^ ~ false < ! ! ! false ) ] , 123 ) ) != - foo , - ~ ( ( ( ~ ~ false ( "bar" [ ~ ( foo > foo ( false . foo , - ! - ! ~ ~ true ) / - ! ( 123 [ ( ! ! ( ~ - "bar" ^ ~ foo ( ~ ~ "bar" & foo . foo , ~ foo == ! ( "bar" ( 123 >= ~ - foo , - 123 . foo - true ) - 123 ) [ ~ ( - true ) ] ) ) . foo * "bar" . foo ) ] ) [ ( 123 ) | - - ~ - ~ true [ 123 ] <= ! false ^ 123 . foo ] ) . foo ] * ( foo [ 123 [ ! ! - ! "bar" ( true , ! 123 ) ] ] ) , - ~ - ~ ~ - 123 ) ) != 123 ) ) + false ( 123 * "bar" , "bar" ( ~ true * ! - ! foo != - ! ! ~ ! "bar" , - 123 ) ) ) & false ;
 class foo { if - 123 ( ( false [ "bar" == false . foo ] | ( - "bar" ( ( true ) , false / ! ( false ) ) < ~ "bar" ) ) ( - ! - 123 , ! ! ! true . foo ) , ( - 123 == - - ~ "bar" ) / true . foo ) < - false * ! ~ false { ! ! ! false = - - ! true >= ! "bar" ;
 } else { for var foo int = "bar" . foo ;
 ~ true ;
 - true **= ! ( - ( - 123 ( "bar" , ! ( "bar" ( - false . foo , ! ~ - foo ) ) <= - 123 - - ( - "bar" - foo ) == ! true ) / true . foo ) ) ( "bar" ( ! ( ~ - 123 ) , ~ true ) , ! ! ! "bar" >= 123 ) { for var foo int = - ! ( ! ~ - true ) ;
 "bar" ;
 ! ~ 123 ( "bar" [ "bar" - false ( - ! - false , ( - ~ "bar" . foo ) ) ] != "bar" . foo , - ( true / ~ ( "bar" ) ( ~ ! ~ ! ! - - - - ! ! ~ - ~ - - - ! ! ~ ( foo ) [ - foo >= "bar" - ( true ^ ~ - ~ "bar" == ! foo ( false , ! ! ~ ~ ~ false & ( "bar" / true == true ) ) ) == ( - ! ( ! false ( 123 . foo , 123 . foo ) ) > ~ true * "bar" ) ] , - "bar" . foo ) ) & true ) <= ! ~ ! ( - - - false ) == false ++ { if 123 [ ! ~ true ] { ( ! ! ! foo ) ++ ;
 } else { false ( false - "bar" >= 123 ( "bar" + ~ false , foo | foo ( ! ! ! ! ! 123 ( foo , 123 <= - - false ) & - - ( "bar" ) , ( - 123 [ foo . foo ] ) ) <= ! ~ ! ! - "bar" ( false ^ ~ ! false , ! "bar" ) ^ foo ( - ! ~ foo | ~ false [ ~ foo ] != ( ! false ( ! foo , ( ! "bar" ( - ( ( - false ) ) [ ~ ~ true ] & ~ 123 , 123 ) ) ( ! - ! ~ foo / ~ - "bar" , ~ ~ ( - ! foo ^ ~ ~ - false [ - - ~ false [ foo / - ~ ~ foo . foo ] ] * ( ( true >= foo . foo | ~ false ( ( foo ) , ! ( ~ ~ ~ ! ( "bar" ) . foo / foo . foo ) | ! 123 ) ) < foo ) ) ) ) ) , foo & "bar" == 123 . foo ) ) , false [ foo ] ^ ~ ~ ! "bar" ) *= ~ ~ ~ false ;
 } ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int , foo int ) { if - ! ! 123 . foo != "bar" | - ~ ( ~ ( foo ) ( ! foo / true , - ~ 123 . foo ) ) { if foo ^ - "bar" * foo { false + 123 == false + ( foo + - true ) ;
 } else { ! ! ~ ~ foo + ! ! ~ ! ! ( foo - - - false ) ++ ;
 } ;
 } else { if "bar" { for val foo int = ( "bar" . foo + ! false [ 123 ( "bar" != true , ~ ! ! ! false ) ^ "bar" [ ~ ! ~ ! ~ false ( "bar" != ~ 123 & 123 , ~ foo ( ~ foo [ ~ ~ ! foo . foo ] , foo . foo * false != ~ - "bar" ) ) ] ] ) . foo < true . foo ;
 ! ! true ;
 123 { - - false . foo **= - ~ ~ ! "bar" ;
 } ;
 } else { ! - foo > false [ ( ~ foo * "bar" [ ! "bar" != 123 [ - ( 123 ) ] ] - foo ) != ~ false ] ;
 } ;
 } ;
 } ;
 val foo int = false ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) { if ~ true + ~ "bar" { for var foo int = 123 >= foo ;
 ( ~ ~ - - - ~ foo [ "bar" > ( ( ! "bar" . foo ) ) ( ~ true , foo ) ] ) ;
 - ~ foo { for val foo int = false . foo ;
 - ( - true ) * foo ^ 123 ;
 false ( foo - true > ! - ! - foo [ ~ ( ~ ~ - ~ ! ~ 123 ) ^ - ( "bar" <= true . foo ) / - ! ( ~ - ~ - ( false * ! ( foo ) ) . foo ) ] , "bar" == "bar" [ - "bar" > - ( true ) ] ) == 123 = ! foo . foo | - ! ( 123 ( foo , - foo ) ) { - - ! ( false * "bar" ( - foo [ "bar" . foo != ( - ! ( ~ - "bar" . foo <= - ! true ) ) . foo ] | false , ~ - ~ "bar" [ ~ ! false ( - foo / ! ~ ! true , - ( "bar" | foo * true . foo ) . foo ) == ( ( ~ false ) ( true . foo , - false . foo ) > foo ) ] ^ false ( ~ ! "bar" , ~ ~ foo | ! ~ "bar" ( ~ - ! foo ( ~ ~ ( ~ ! "bar" . foo / foo ( ! - 123 , ! - - ~ ( true ) | - ~ - 123 ) ) , - ( ~ ~ true . foo & - true ) ) * ( - false [ - ! ~ false ] ) , - true . foo ) / - - ! 123 ) ) ) . foo + ! ~ true & - 123 ( foo ^ - ! true , ! ~ true ) -- ;
 } ;
 } ;
 } else { false [ ! 123 ( - foo ( "bar" , false [ false ] ) , ( ( ~ ~ ( true == ! - "bar" [ - - foo ( ~ "bar" == - "bar" . foo , foo [ foo ] + - ! foo ) ] < - false ) ) ) ) ] * - foo *= - foo & - ! false [ ! - 123 ] ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int ) { true ;
 } ;
 class foo { for val foo int = ! ( ! - foo ( foo / ~ "bar" , 123 ) ) [ ! ( ( foo ( true , ! ! ~ - ~ 123 [ ~ ! false ] / ! - - - 123 ( ( - false . foo ) , ~ ~ ! ! - foo ) ) ) ) & "bar" ] + foo ;
 123 ;
 ~ - true -- { if ~ foo ( foo , "bar" ) != 123 . foo - ~ ~ - - ( true ) { "bar" | false / ~ 123 ( - - - true . foo , ( "bar" . foo ) [ ~ false ] ) -- ;
 } else { ! 123 ;
 } ;
 } ;
 } ;
 val foo int = - "bar" [ ~ - foo + - "bar" . foo ] ;
 var foo int = "bar" & ~ foo ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) { if foo { true ;
 } else { if ( ( ~ false . foo == ~ - - true ) ) [ foo ] { for val foo int = false ;
 "bar" . foo ;
 false { for var foo int = false > "bar" [ "bar" / - 123 ] ;
 "bar" ;
 ! foo ( ! "bar" , false ) ^ true /= ! ! ( foo ) { ~ - ~ 123 ( - - false , ~ 123 ( - false , true . foo ^ - false ( - true > false ( foo [ true ] - ! ~ false ( ! - ~ true , 123 ) , "bar" ) , ~ - ( - true < - - true . foo ) & ! foo + 123 ) ) ) >= ( ! true ) ^ foo [ ! ! foo [ - ! true ] ] ;
 } ;
 } ;
 } else { ( 123 ) ;
 } ;
 } ;
 } ;
 class foo { for val foo int = false ;
 123 . foo ;
 123 . foo | "bar" != false * false >= ( ( true ) [ ! foo != foo ] ) { if ! ( foo [ - true | true ] ) + true { false . foo ;
 } else { - ~ ( ~ true ) != true **= ! ( "bar" . foo ) != ~ "bar" ;
 } ;
 } ;
 } ;
 val foo int = ~ - "bar" [ ( true . foo ) != "bar" . foo < ~ ! ! true ] ;
 func foo ( foo int , foo int , foo int , foo int ) { ! - false ;
 } ;
 func foo ( foo int , foo int ) { true -- ;
 } ;
 func foo ( foo int , foo int , foo int ) { if false [ false . foo ] { if ( ! ~ foo ) { foo += ~ foo ;
 } else { for var foo int = foo . foo & false [ ~ false ] ;
 false ;
 foo . foo -- { if ~ true { "bar" -- ;
 } else { "bar" /= ! foo | ~ 123 ;
 } ;
 } ;
 } ;
 } else { for var foo int = 123 * - false ;
 - false ;
 ! foo -- { foo -- ;
 } ;
 } ;
 } ;
 var foo int = ~ - ~ ( - ! - - ~ ( - ~ - ~ - - - ~ true ) != ! 123 . foo ) ;
 class foo { ~ foo += true [ ~ true ] ;
 } ;
 val foo int = ~ - foo [ true [ ~ 123 ] ] ;
 class foo { for var foo int = true ;
 ~ 123 ;
 123 * true ( ! ! ! false - ~ ~ ! false , foo | ~ 123 ) { - false ;
 } ;
 } ;
 val foo int = - 123 ;
 func foo ( foo int , foo int , foo int , foo int , foo int , foo int ) { if - ( - true / true ( foo [ ! foo . foo & 123 ] == ! ! 123 [ ! false . foo ] , false ) ) + 123 { "bar" == ~ "bar" ;
 } else { ~ foo . foo -- ;
 } ;
 } ;
 
