module foo ;
 class foo { if - ! ( ! - ! 123 . foo ) . foo { ! ! ( - ~ true [ - ! foo ] ) & - foo *= foo ;
 } else { - ! ~ false . foo *= ! 123 ;
 } ;
 } ;
 val foo int = - false & "bar" ;
 var foo int = ~ ~ ( false ) < 123 ;
 class foo { ! - false ++ ;
 } ;
 class foo { for val foo int = false ;
 ! foo ;
 true -- { - - ~ 123 * ( ~ ! true . foo >= "bar" / - foo ) + ( - 123 [ 123 <= false ] ) **= ! ~ ~ false <= ~ foo [ - true * true ] / - "bar" . foo ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) { if ~ - ! ( - true == ! - true [ ~ - 123 > - ~ false - ! false ] ) { if false { for val foo int = ~ ! false [ "bar" == - - false ] ;
 ! ! false ( ~ "bar" [ 123 != ! ~ ~ ~ false <= - foo ] , ! ! foo [ ! - ~ ~ "bar" . foo < ~ ~ ~ true & true ] == ! ~ 123 ) ;
 true >= true { 123 . foo == - ! ! - ! ! foo / foo ;
 } ;
 } else { if foo [ ~ ( "bar" ( - "bar" , true ( ( ! ~ ( "bar" ) ) , - - - ! true . foo ) ) == - 123 ) & ! ( 123 ) ] | ~ false { ! - - true ( "bar" , 123 ) -= true [ ~ ~ ~ - ( - ! - foo ) [ ~ "bar" ] ] ;
 } else { true >= "bar" -- ;
 } ;
 } ;
 } else { for var foo int = "bar" < - ! false ;
 true / ! false ;
 false { 123 ;
 } ;
 } ;
 } ;
 class foo { ~ "bar" ( 123 , ! - ~ ! 123 ) ;
 } ;
 func foo ( foo int , foo int , foo int ) { false <= 123 ( - ! - false [ - ~ true ] , - ! 123 ) ;
 } ;
 var foo int = "bar" ;
 var foo int = ~ false ;
 var foo int = true != - ! true ( true ^ 123 , - ! ! ( ( 123 . foo == ! foo ) ) ) ;
 val foo int = - ! - - "bar" == false < ~ ~ foo ;
 func foo ( foo int ) { for val foo int = ( ~ foo . foo ) ( ! foo . foo , ~ ( ~ false + ! - ~ ( 123 ) & false . foo > ~ false ^ ~ 123 ) [ "bar" ] <= true . foo ) < - false ;
 - ( true [ ~ "bar" [ ! - false ] * ( - 123 == - true ) ] ) [ ~ false ] != false ^ ~ ! - false . foo ;
 ! ( false ) { if - ! ( ~ "bar" ) ( ~ ~ "bar" ( ! "bar" , true . foo ) != "bar" [ - "bar" . foo ] <= ~ false ( "bar" , foo ) , "bar" == ~ foo . foo ) { for var foo int = ! - ~ true ;
 - ( 123 ) . foo ;
 "bar" { for val foo int = - - - ~ "bar" + - ! ~ true ;
 ( ( 123 ) < ~ ( foo ) + foo ) ;
 ! ~ - ! - true <= false ++ { for var foo int = ! true ;
 ! - - ( false * "bar" ) ;
 ~ ~ true -- { ! - ! - 123 [ ( 123 ) ] ++ ;
 } ;
 } ;
 } ;
 } else { if foo . foo * - ~ ! true { for var foo int = ! "bar" ;
 ! ~ false / "bar" | ~ ( ~ foo & ( ( ~ ( "bar" & - 123 ) [ 123 != false / false ] ) ^ - "bar" ) - true ) ;
 ~ ! ~ ! - ! ! ~ ~ ( ~ ! ~ ~ ~ ~ ~ - "bar" ) [ "bar" / ~ false ( ! - ! ! foo , - 123 ) ] != true -- { ( ( ! false ) [ - - "bar" + - true * foo ] ) / false >= ~ - "bar" . foo /= ~ "bar" - ~ ~ foo ;
 } ;
 } else { for var foo int = ( - ! ! ~ ! ( "bar" ( ! ! ( foo ) > ~ ! - false , ~ foo / true == false . foo ) ) != ~ ! ~ - ! ! "bar" ) ;
 ( - ~ "bar" ( true [ "bar" ] , - "bar" ( false , "bar" - false ) ) < 123 ) ;
 false **= ( ~ - ~ - 123 ) . foo { for val foo int = - ~ 123 [ - ( false == - false ) [ ~ false ] + false ] ;
 "bar" ;
 foo = - ~ false . foo { false <= ~ false *= ! "bar" [ - "bar" ] ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int ) { if ~ ! ~ ~ true . foo != 123 [ foo ] { foo ( "bar" , foo ) -- ;
 } else { - - "bar" . foo <= ( - - ! ~ true ) ++ ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) { for val foo int = ! ( foo - "bar" ) > true ( ! - ~ ! ! "bar" [ "bar" ] + ! ~ true , - "bar" * false == foo ) | ( ( foo ) - 123 ) ;
 - "bar" ( ~ ! ~ ( "bar" ) [ ~ ( false ( "bar" == ( 123 ) ( - foo - ! false & ( 123 [ - false ] * foo ( ~ "bar" , "bar" . foo ) ) != "bar" [ ! "bar" [ "bar" + ! - - foo ] & false ] , false + ! - foo ) , 123 . foo ) == true ) [ ~ false [ ! true [ - ~ ! ~ ! ~ - ! ( - ( false ) ) ] == ~ ~ - - foo ] ] / ! true [ ~ ! - 123 . foo ] ] * 123 , - - 123 ) ;
 foo != "bar" [ "bar" . foo ] >= ( ( ! ! true . foo * ! - - true ) ) + ~ - 123 -= ! ~ foo { ~ foo ( - "bar" , false ) ++ ;
 } ;
 } ;
 var foo int = ! ! - false != 123 ;
 class foo { if ( foo ^ false != foo & false ) { ~ ~ ~ ( foo ) [ 123 ] / - - - foo [ 123 - false ] ;
 } else { ! ( ( - "bar" ) ) . foo -- ;
 } ;
 } ;
 val foo int = - "bar" / false ( ! ! - - - 123 [ ~ ~ ! 123 & ! false ( false , - ~ - false == ~ - ~ ~ 123 * false ) ] , true ) != false | ! - ~ foo . foo / true ;
 func foo ( foo int , foo int , foo int , foo int , foo int , foo int ) { if ~ false ( ~ foo - ~ ! 123 * - - 123 == false . foo , - ~ ! - false ( true ^ - ( ! - - true >= ~ foo == true ) , ~ ( - ! foo ) [ true ^ ( ~ ! ~ foo ) . foo ] ) ) & ! ! ( ! - ~ 123 [ ~ ~ foo <= - ( ! ! ! ( ~ ! true ) ) ] ) { for val foo int = false ;
 ~ ~ ! true ;
 false [ foo ] <= - foo ^ ! foo { for val foo int = ~ 123 [ 123 > - true ] ;
 ( true ) [ ! 123 ] ;
 ( ! true >= - ~ - - ~ 123 ) { if ! ! ! ~ foo != - false { for val foo int = true ;
 ~ - - 123 ;
 ( "bar" == ~ "bar" ( ! - ~ - ~ - false ^ ! 123 ( ! ( "bar" ( false ( ( - "bar" & 123 ) . foo | ~ 123 / ! true , ~ 123 ) / - false , ! - foo + ! ~ ( - true ^ ! false ( "bar" . foo , false [ ~ ! false [ foo [ ! ~ true ] & foo ] ] ) ) ) ) <= foo , true [ false ] ) , true ) ) . foo { if ~ - ~ ( ! ! ( ! false ( ~ - ! true ( ! - ~ false , ~ ( "bar" * ! true ( ( true ) , ( true ) ) ) [ ~ ~ foo ] ) ^ ( ! - - ! - - ~ false ) , false ) ) ^ foo * ! foo <= foo ) / - ~ 123 { if true { for val foo int = "bar" + true ;
 ( ~ - ~ 123 != 123 ) ;
 ! ~ 123 ++ { for var foo int = "bar" . foo ;
 ! 123 ;
 false ( ~ false , ! ( "bar" . foo * foo ( ~ ~ - true , ! ! - "bar" [ - - "bar" [ "bar" ] ] ) ) ) -= ( - 123 ) + ~ ~ 123 [ ! false <= ~ ( foo ) . foo ] >= - ! - "bar" { "bar" ( ! ~ true , ~ ! ( ~ ~ false ) ( "bar" [ ~ ! true [ false [ ! ~ "bar" ( foo , ! ! "bar" ) | "bar" ] ] / ! "bar" ] , false * ! 123 ) * true ( false , ! ! ( ( true [ foo ] ) [ foo == ! ! ! false <= 123 ] / ~ false ^ ( foo ) . foo ) ) ) -- ;
 } ;
 } ;
 } else { for var foo int = - ~ true > true . foo ;
 ! 123 ;
 - ~ true [ ! "bar" & - true ] < foo . foo / - - "bar" [ true [ - - "bar" ] + true ] = ~ - "bar" [ ~ foo ] { if false [ foo != ! - ( ! - ( - ~ true ) . foo ) [ true * true != ~ ( ! ( - - ~ ~ ! false * ~ foo ) ) . foo ] ] { if - ! ! - foo { if - false ^ true & 123 { if ! ! false { "bar" ( false . foo < - ! - "bar" , ~ - ( - true ) <= foo [ - ! false * ! - - - ~ ~ - 123 <= true ] ) -- ;
 } else { for var foo int = 123 ;
 ! "bar" ( true , 123 ) != true [ foo [ - ~ ( - ~ "bar" >= ! - - - ~ false ) ( - ~ - true , ! ( true ( 123 [ false [ false ] != - - - false ] , ( true ) ^ "bar" ( ~ ( "bar" ) ( - "bar" , ( false != ( "bar" ) ) . foo & false ) / ~ - - ! - "bar" [ ! ~ - true [ 123 ] ] == ~ - 123 ( 123 , - foo . foo & "bar" ) , foo ) ) * true [ false * ~ false ] ) ) != ! ! "bar" + ~ - - "bar" [ "bar" < true / ( true / "bar" ) ^ ~ "bar" ] ] ] ;
 - true ( false ( false > ~ ~ foo [ ~ ( ! ( ~ 123 ) + ~ true [ - 123 ] ) >= ~ false * foo ] , ~ 123 [ true ] ) , true . foo ) { for val foo int = "bar" ;
 ! ( false ) ;
 false != "bar" ++ { for val foo int = ~ 123 > ! true ;
 123 | 123 ;
 ~ "bar" ( true , ! - true ) -- { ! "bar" += "bar" ;
 } ;
 } ;
 } ;
 } ;
 } else { if ~ 123 <= ~ ( ! ~ - foo * "bar" >= "bar" | ~ ! ~ 123 [ true [ "bar" ] + ! 123 ] ) { if ! - - "bar" { - true | "bar" . foo *= - foo ;
 } else { "bar" += foo ;
 } ;
 } else { for val foo int = ( false ( ~ ~ false & true , ( ( - ~ ! ! ! - ! false ) ) ) ^ ~ ~ ~ true > foo ) | ~ ! 123 ( ~ true - true , ! 123 ) & 123 ;
 true ;
 ( ( ! "bar" ) ( ! foo . foo & 123 ( - 123 [ foo / foo ] , ~ ~ - true ) , - foo ( - ~ foo * 123 <= foo , ( ! ~ ( - - false / 123 > ~ ~ foo [ - ~ ! ! - ! "bar" ] ) [ 123 ] ) != ! - false & ! ! ~ true ( - ~ ! ~ ( - ! ~ ~ ~ - false ) , - ~ ( ~ "bar" ( ~ false < ! ! ! - false , ~ ~ "bar" ) ) . foo ) ) & false ) ) ^ ~ - - ~ - 123 . foo < ! ~ ~ ! false -- { if 123 != - false ( foo , 123 ) < foo { if ! ! "bar" { - ~ foo **= true <= ! ( true . foo * ~ true ) ( ! "bar" . foo / - ( - ~ "bar" . foo ) ( - "bar" , ! - ~ ! 123 == ( ~ 123 != foo ) > true ( - 123 & ~ ! true , "bar" ) ) ^ ~ ( ! ~ ( true ) ) , ( foo ) . foo / 123 ) / ( "bar" ) ;
 } else { if ! ~ false ^ - - ( ! ~ "bar" != ( "bar" + ! ~ false ) < - ~ ~ 123 ) { if - ! - foo >= ! ! ~ ( ~ true . foo >= ~ - - ( - ~ ~ "bar" ( "bar" / "bar" , ! ~ ~ 123 == "bar" ) ) . foo ) & ! true { if ~ - - "bar" { for var foo int = ~ ! "bar" ;
 ! ! foo ;
 123 < true & ~ - "bar" /= "bar" ^ foo != "bar" . foo { for var foo int = false & ! ~ "bar" == ! ! "bar" >= - ( ~ foo != true ) - false ;
 foo == true ;
 ~ - "bar" ( ! ~ ! 123 - ~ - ( - ! true ) , "bar" < foo . foo ) *= ~ - 123 { if - true > 123 [ ( ~ foo ) ] { ~ ~ "bar" != 123 ++ ;
 } else { if 123 { for val foo int = ( "bar" ) [ ! ~ "bar" ] ;
 ~ true & - false [ - - ( ~ foo ) ] ;
 ~ 123 [ - ! foo - foo ] == - true . foo -- { for var foo int = false . foo ;
 ! true ( - ! - 123 ( 123 > true . foo * true , - 123 ( ! true , true [ ! 123 [ ~ ! ! "bar" <= - 123 ( ~ - "bar" , ~ false != ! ~ ~ "bar" ) ] ] ) ) / ~ - true [ "bar" ] + - ( false ) , ! ! ~ foo [ ~ true == "bar" | ~ ~ ~ ~ ! ! - foo ] == false ) ;
 ~ - ! ( foo != ! ~ "bar" ) { ! ~ ~ false & ~ ~ 123 ;
 } ;
 } ;
 } else { ! "bar" ;
 } ;
 } ;
 } ;
 } ;
 } else { ! "bar" ++ ;
 } ;
 } else { if ~ "bar" [ false ] { if ~ ! ! 123 { for var foo int = ! ( false ) ( foo ( foo , false [ ! ( false ) ( "bar" . foo , - true == - false . foo + ( ( - ! 123 . foo ) < false ) * ( ! false ) ) ] * ( ! true [ ! ~ ~ ( false [ false [ ~ true + ~ foo ] ] ) ] ) ) & ~ ~ - ! ~ - ~ ( ( 123 ) . foo ) , ~ - ( 123 ) . foo <= true ^ foo == false ) ;
 foo >= foo ;
 foo ( ! ~ true , foo ) >= foo * ( ( - - ! foo [ ~ 123 + - ! ! false ] <= foo ( - 123 ( ! - ! ! false , 123 >= ~ ~ ~ 123 . foo ) , 123 ) ) ) { - ( true ) ;
 } ;
 } else { for var foo int = foo ;
 123 * ! "bar" . foo ;
 ! ~ 123 ( false . foo != ~ - - false , - false ) /= ~ true { for val foo int = ~ true ;
 foo > "bar" ;
 ! ! ! ~ ! ~ ~ - ! ~ - false += false * false >= false [ - - ~ "bar" ] == "bar" | true . foo { ~ true **= ~ false . foo ;
 } ;
 } ;
 } ;
 } else { for val foo int = 123 ;
 ! - ~ ! - foo . foo ;
 ! 123 [ ! true ( false [ - foo ] , ~ 123 ) ] & "bar" [ ~ ! true ( true / "bar" ( - - ! 123 == ( true != ~ 123 <= - ! true - 123 ( ( ~ ( false == ~ "bar" . foo ^ ~ ! true ) ) | "bar" [ foo . foo ^ ! ! ~ 123 ] * ! ( foo ) , ( true ) ) ) , ( ~ ( ( true [ ! - 123 [ false ] ] ) ) ^ 123 ) ) != false . foo , "bar" < ~ 123 ) ] ++ { if ! ~ ! - - ( true - false ) { "bar" * 123 = true >= 123 ;
 } else { if ! "bar" { if ( foo | foo ) ( false ( - foo , foo ( ( ~ ! ! - ! ~ - ( - ( true ) ) * true ( foo , ~ - ( true ( ! foo , ~ - "bar" [ - "bar" ] ) < foo ) | false ) == - ~ "bar" ( ! ( - true ) , ( "bar" ( foo , - ( foo ) . foo ) ) ) ) , ! false [ - ! - ( 123 >= ! 123 ) . foo & ! ~ true ] ) ) , ~ false ( ~ - 123 , true ( ~ ~ - ~ ! ! "bar" , ~ 123 ) ) * false | foo [ "bar" == ~ 123 [ - ( foo . foo ) ( true >= - - "bar" != foo [ foo ] + ! true , - true ( true [ ! - ! ~ ! ( "bar" ( - true * - true , "bar" ) ) ] , "bar" ) ) ] ] * - ! foo ) { ! "bar" -- ;
 } else { if ! ! true >= ! true & "bar" { ! - ~ - ! ~ ( - 123 ) + ~ ~ "bar" ;
 } else { 123 ( "bar" , ~ ~ ( "bar" ( true . foo , "bar" / ~ true [ ( ~ ! ~ ~ foo ) * ~ ! false ] ) ) ) -- ;
 } ;
 } ;
 } else { if ( ! foo / "bar" == true . foo ) != false . foo + foo & ! - - ~ ( - true ) { for val foo int = "bar" * foo [ ! 123 ] ;
 "bar" & ~ - ~ - "bar" != ! ~ ~ 123 ;
 ! "bar" ++ { for var foo int = "bar" ;
 foo ( true , false [ ~ - ~ true . foo ] | ~ 123 ) ;
 123 ^ foo -- { for val foo int = ~ ~ ~ ~ foo ( ~ ~ "bar" [ foo ] , - ~ ! ~ - foo ) - true ( 123 ^ "bar" , ~ ~ ( true >= ( - 123 [ ! "bar" == 123 ] ) [ "bar" + 123 ] ) ( ! 123 ^ "bar" ( 123 ( "bar" , - false ) , ! true . foo >= ! 123 ) , ( ! false ) . foo ) == ( ~ ~ true >= - ( ~ ! true ) [ - "bar" - false ] ) . foo <= ~ ~ ! - "bar" ) ;
 "bar" | ! 123 / ! ! foo ;
 true { ! - - ( - ~ 123 ) /= - "bar" / ( false ) . foo ;
 } ;
 } ;
 } ;
 } else { if ~ ( ! false & - - true < ( ~ 123 ) ) < ! false { ( false ) . foo - ~ 123 != ~ false ++ ;
 } else { foo ( foo ( false [ ! false . foo ] , "bar" ) , ! ~ - ~ "bar" . foo ) == ! ! foo - "bar" ++ ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { if false > ( - ~ ( ~ - false + 123 . foo * foo . foo ) ) [ 123 ] { foo -= "bar" ;
 } else { if ! 123 == true { "bar" ( - ~ "bar" , ! ! ~ "bar" ) ;
 } else { if - - "bar" { "bar" ;
 } else { if "bar" / ~ - ~ - ~ ! - ~ "bar" ( - ( ~ foo ( true , ~ - true * ! true != ( - ! - 123 ) ( ~ ( - false | - 123 ) > ! - false . foo , ~ - "bar" ) ) + ! ~ ! ~ true * foo ) >= ( ~ ! ~ ~ ~ true . foo ) [ - ! foo ] , "bar" > ! true ( true , false ) ) { 123 + ! ! false ( foo >= false . foo , ~ - "bar" . foo ) -- ;
 } else { for val foo int = ! ! ! 123 == - 123 ;
 ! false < 123 ;
 ~ ( 123 ) [ ! false * "bar" ] **= 123 ( ~ false ( ~ 123 , ! ~ false ) , - ! ~ true ) { for var foo int = ! 123 [ false * true ( ~ ! ! ! ~ - ~ "bar" [ - - true [ ! ( foo ( ( ( ~ true [ false . foo ] ) [ true ] >= ~ ~ "bar" ) [ - - ! - "bar" . foo ] , foo ) ) ] == - ! false ] , - false ) ] ;
 - ! ~ ( foo [ ~ true . foo ] >= ! 123 ) . foo < ~ ! ! - ~ foo ( ! ~ ! false , ! false . foo ) ;
 ( ! foo . foo ) . foo { for var foo int = ~ "bar" ( ~ false , ! 123 ) ;
 foo ;
 ( ( ! ( foo ) ) | 123 ) { ~ ( ( "bar" [ ~ ~ "bar" ( ~ ! ~ ! ~ ~ - "bar" ( "bar" , - ! "bar" ) ^ - ( - ~ false ) . foo , - ( ! ~ "bar" ) - ( false [ 123 ( foo , - ! false ) > "bar" ] ) [ - ~ "bar" ( ~ "bar" , ! ( foo >= ! ( ~ foo <= ~ ~ true ( ~ - "bar" , ( ( ( 123 > foo . foo ) [ true ] ) . foo ) . foo <= ( foo ) ( "bar" , true [ "bar" ] ) - ~ ~ ! ~ foo ) + - ~ "bar" [ ~ ( "bar" ) . foo ] ) ) ( ! ( false [ foo ] ) , ! "bar" ( ~ ! - - foo , ~ foo ) == foo ) & ! - ~ ! ~ ~ 123 > ~ ( foo > ! "bar" ) - 123 ) ] >= 123 [ false * "bar" ( 123 [ false == ~ foo ] , ! false ) ] ) ] ) ( 123 , 123 ( ~ foo , - ~ ~ 123 | false ) | "bar" [ ( ! ! ! 123 ) & false ( "bar" . foo , ! "bar" < foo - false ( "bar" , false ( "bar" . foo != "bar" ( "bar" ( ! false , foo ( foo ^ ! ! ~ false , ( 123 [ - ~ - "bar" ] >= ! ~ 123 ) ) ) , "bar" ) * - true , ~ foo ( - ~ false & 123 . foo == 123 * ! ~ - foo , "bar" ( ~ false . foo , - - ~ - foo ) ) ) & "bar" ( - 123 * true [ 123 + foo ] , 123 ) ) != 123 [ ( ! ~ 123 ( ( ! foo ) , foo ) < true [ ! foo ] ) ] ) - - ~ 123 != foo ] ) ) ( - ! ! ~ - ~ ~ - true , 123 . foo ) >= foo . foo -- ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { ! foo [ ! ! ! ~ - ! - - "bar" - ~ "bar" ] ;
 } ;
 } ;
 } ;
 } ;
 } else { true ;
 } ;
 } else { for var foo int = false ( - true / "bar" , ! ! ( - ( - ~ ! - true [ 123 == false ( - - - ! ( foo ( ~ false , "bar" ) ^ ( true ) [ ~ true [ foo ] ^ ! 123 != ( true == ! ( 123 <= ! ~ ! true ^ ~ ~ ! true [ false ] ) [ ! - foo ] ) ] ) > - true ( ~ - true <= 123 , ( "bar" ) . foo / - false ) & ~ ( ~ ! 123 ) , ! ~ ! 123 ( foo . foo != 123 * 123 , true | false ) ) ] & ! ~ - ! ~ "bar" ) ) != 123 ) ;
 foo ;
 ( true ) { ~ ~ true [ foo ] ;
 } ;
 } ;
 } ;
 } ;
 } else { if ! "bar" { true -- ;
 } else { for val foo int = 123 . foo ;
 - ~ ~ foo [ ! true < false ] - - false ;
 ! ~ ( ~ ~ ~ - true ) -= 123 < - true . foo { "bar" ;
 } ;
 } ;
 } ;
 } ;
 } else { for val foo int = ! ~ ( 123 ) ;
 - ! ! false < false == ! ! ( ! ~ "bar" ( - ( ! ( - ! ~ "bar" - ( false & true ) ( - - ! ~ ! ~ "bar" , - foo ) / ~ ~ false ) ) ( ( ! ( true ) & true != - ( foo == ( - 123 ) ) ) , true ) , ( ~ ~ foo ( ~ - ~ - false , "bar" / - 123 ) ) ) ) . foo ;
 "bar" -- { foo ( false , ~ - foo ) ;
 } ;
 } ;
 } ;
 } ;
 } else { for val foo int = "bar" ( foo ( - foo [ ! ! foo ] ^ ( "bar" ) & "bar" ( ! "bar" . foo , false ) , "bar" ) , true ( - - true . foo , false . foo ) <= ( ( ~ "bar" [ - - false . foo != - 123 ] ) ( 123 , false . foo <= - ! 123 . foo ) / foo ) ) ;
 foo ;
 - "bar" >= 123 . foo *= - - false != foo { for val foo int = true . foo ;
 false / ( - 123 . foo ) . foo < - true * - ~ - ! 123 ;
 ! ! ~ ( - ~ false ) = foo . foo { if - ! ( ! ( - ! "bar" ) * ~ ~ ( "bar" + - true [ ! true . foo ] ) . foo ) { foo *= ~ - foo ;
 } else { for var foo int = "bar" ;
 ! false ;
 true . foo { true >= true [ ~ true ] **= ~ false ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int ) { if false { if ( false ) > 123 { true ( true < ~ ! ~ "bar" . foo , ! 123 ) + false ++ ;
 } else { if ~ - ! ! ~ true { ~ false -- ;
 } else { ! ! ~ ~ ~ ! foo - 123 [ foo | "bar" ] / "bar" . foo *= ~ foo ;
 } ;
 } ;
 } else { if ( 123 ) { if 123 ( - true >= ~ - foo ( ~ foo / - "bar" ( ~ ! ! foo ( ~ - 123 ^ true , ~ ~ ~ false ) , foo * ( ! true . foo ) . foo | - - ~ - - ( foo * "bar" ) ) < true . foo , ~ - ! ! true . foo ) , - ~ ! 123 - - ( foo ) ) { if ! "bar" { - ~ ~ "bar" /= false ;
 } else { if ~ 123 . foo { "bar" -= "bar" ;
 } else { for var foo int = foo > ~ ~ ~ - ~ ! ( ~ ! true ) ;
 true < "bar" ;
 - "bar" ( true , ~ - ~ 123 / ~ ~ ~ "bar" . foo ) { for var foo int = "bar" ;
 ( ! ! ~ - ! ! "bar" ) . foo == - ~ ( false ( 123 < 123 , false ( ! ! - ( ~ false ) , - - - - ~ false ) & foo ) ) + ~ false ;
 - - ! ! foo != ~ "bar" < ! foo . foo * ! ! ~ - true ++ { for val foo int = - ! 123 ;
 ( false ) ;
 ~ "bar" { false ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { for val foo int = foo & 123 ;
 - foo ;
 ~ ( - ! ~ ~ 123 > ! "bar" ( foo / - ! 123 ( foo , 123 [ ! false ] / ! ( - 123 [ true ] ) - - 123 ) , - ! false & foo ^ ~ ~ ! - ( - 123 & foo . foo ) [ 123 [ - "bar" ] ] ) ) ( ~ ! ! - 123 . foo & ( foo [ - "bar" . foo ] ) , ! ! "bar" . foo ) / false . foo < true ( foo [ ! ~ - 123 ( ~ foo [ false > "bar" ] == foo , false ) ] , ~ ( - true ^ true ) [ "bar" ] ) { for var foo int = "bar" ;
 ~ ! - ! ! - - ! ! "bar" . foo ;
 ! false -- { if ( - - ! - false ) ( ( ~ ! true ^ foo . foo ) , 123 ) | - foo { ! ~ true ^ ~ foo ( true , - "bar" ^ ~ ~ ~ "bar" ) *= - false [ true ] ;
 } else { for var foo int = 123 [ 123 ] ;
 "bar" ;
 ! - ! true . foo & - ! foo -- { for var foo int = ( "bar" & foo ) [ ~ ( true != "bar" [ "bar" [ false [ - ( ! ! foo * "bar" ) != ! - - ~ 123 [ true ^ - true ] ] ] * ~ ~ - foo ( - true < "bar" , ( "bar" . foo ) ) | 123 ( 123 / ! "bar" , ~ false ( 123 ( false - ~ ! ~ ! foo . foo , 123 . foo / false ) / foo [ foo ] ^ 123 [ 123 > ! foo ] & ~ foo , ~ true ) / 123 ) ] ) . foo ] ;
 ~ ( ~ ~ false ) [ "bar" ] ;
 - ~ - ! false ++ { for var foo int = 123 ;
 123 [ - ( - "bar" ) . foo + 123 != - true ] ;
 ~ ( - foo [ ! - ~ ( - ! - ! ! true ) ] ) += ~ - false { - - "bar" += true ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { for var foo int = ~ 123 | ! "bar" ;
 ( ! foo . foo | ! - foo ) ;
 - - true - ! ~ foo { for val foo int = - - false ;
 - ! ( - ~ ~ - true ( foo , true - 123 . foo ) & 123 . foo ) & ! ~ true . foo == true ;
 - ! - true { "bar" ;
 } ;
 } ;
 } ;
 } ;
 } ;
 class foo { for var foo int = false < ~ ~ false . foo ^ 123 ;
 - "bar" ;
 ~ true *= true . foo { 123 | - ~ ~ ~ ! true / "bar" += true ;
 } ;
 } ;
 class foo { ~ ! ! "bar" ;
 } ;
 func foo ( foo int , foo int , foo int ) { - false ^ ( ! "bar" ) -= ~ ~ ~ ! ( - "bar" [ ~ "bar" ( false , ~ - ! - 123 [ "bar" ] == ~ - false ( true <= ! - - true ( ! "bar" , ~ ~ ( ( ( false ) * false ) ) ( - ~ - 123 ( ~ 123 ( 123 | false , 123 ) , ! false - "bar" <= - 123 ) / true , true - ~ ! 123 ) ) , ! false ) / - false ) ] ) ;
 } ;
 class foo { 123 ;
 } ;
 class foo { if false { if false ( ( "bar" < ! false [ - ~ ~ ! ~ ( "bar" ) ] ) , 123 ( - foo , - - ~ - true [ - true ] * false ) ) { 123 ;
 } else { if - ! ~ foo . foo { ~ false *= ( ! "bar" [ foo ] ) ;
 } else { for val foo int = - ~ 123 ;
 ( ~ ( "bar" != - "bar" ( 123 <= true != 123 . foo , foo [ - foo ] < 123 ) + true ) ) ;
 - 123 . foo - ~ ~ foo . foo { - false ( ( ! false ) , ~ true ) += ~ 123 ( - ( false ) < ( "bar" ) [ ! ! 123 ] , "bar" ) ;
 } ;
 } ;
 } ;
 } else { for val foo int = - foo > false ;
 ! "bar" != ! false . foo >= ! true [ 123 [ ( ~ ~ ! ! ! ~ false ) ( foo . foo , true & ! false [ ~ "bar" ] ) < - true ( ~ ~ true [ ~ ! - false ] , 123 ) ] ] ;
 ! false [ true ] >= true ++ { foo [ 123 - ~ true ( - ! ~ ! ! - 123 , ( ! foo [ "bar" [ foo ( 123 [ ( 123 . foo ) ] , foo >= ~ - ~ ~ ~ "bar" ) ] ] > ~ - 123 ) == 123 ) ] == "bar" . foo ++ ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) { foo ;
 } ;
 func foo ( foo int ) { for var foo int = false ( ~ ~ ( foo > ~ - ~ ( false & false ) ) . foo , "bar" >= foo ) ;
 true ;
 ! 123 [ ( - false <= ! true ( false , - ~ false ( ! true [ - true ( ! ( - ! true ) , true ) & ! true ] , - - - ! false ( - - "bar" | ( ~ - - ! - 123 & ~ ~ - 123 ( ! true , ~ ! 123 ) ) , true > ~ - ( 123 ) ) == ~ "bar" ) ) ^ 123 ) [ - "bar" ] ] ++ { if ! 123 { if false { ! ! - ( "bar" - ( ( ! ( true & foo >= ! ! foo [ true ] ) ) ) ) /= - foo ;
 } else { if ! - ~ false [ - false [ - foo ] ] { if 123 . foo { for var foo int = false ;
 ! true [ foo >= foo ] ;
 false -= "bar" { if true [ ! - "bar" [ false [ ! ! true ] ] == "bar" ] { for val foo int = 123 ;
 ( true ( 123 [ "bar" ] , foo [ ~ foo ] != - ~ true ) ) / foo <= ! - ! ~ true . foo ;
 foo . foo { for val foo int = ( true [ ! foo <= ( - - - foo . foo ) ] ) ;
 123 ;
 123 . foo * - ( ~ ~ false ) -= ! "bar" { for var foo int = - ( ~ 123 ) & ~ - ! foo . foo ;
 ~ ! ! ! ! foo . foo >= true ( ! ! false , foo [ - foo [ ~ ! ~ - ~ 123 ] ] ) ;
 ( ~ false + - ! foo [ ! ! "bar" ] & - ( ~ ~ ( 123 ) / ~ - 123 | ! "bar" ) ) ( ( 123 + ~ true ) , - ! - ( "bar" . foo ) ) | 123 ( ~ ( false != false >= ~ "bar" ) [ ! true ] , ! false ( - ~ true [ true ] * true ( - - ! foo , 123 <= ( false ) == ! true ) < ~ true ( ! ( ! ~ ! "bar" ) , - ! ! - "bar" ) , true ) ) += "bar" { "bar" == ~ ( ! foo . foo ) [ ~ true ] + - true -- ;
 } ;
 } ;
 } ;
 } else { for var foo int = ! false < ~ ( foo ( ! true ( ( ( true ( true , - true ) != foo ) * "bar" < - ~ ( foo > true ) ) , 123 ) * ~ 123 , foo ) != false < ~ 123 [ true & 123 . foo > "bar" & ~ - foo ] ) . foo ;
 ! ! - ( ( - - - - ! "bar" ) . foo != ( ~ ~ ~ foo ( true , ! ! ~ false / true [ foo [ - foo ] ] + "bar" ) ) ) ;
 ~ true / ~ "bar" = - true - - - false { - - ! true -- ;
 } ;
 } ;
 } ;
 } else { for val foo int = false * ~ true [ ~ foo . foo ^ true * ~ ! ( 123 . foo ) ( ! - ( ( - foo ) ( ( ~ foo ^ - - ~ ! foo & ! - "bar" ) , foo * ! false ) ) / 123 < - false / - true . foo , 123 ) ] ;
 ! ! true ;
 ~ ~ true { ( "bar" ( ~ ! true & ~ 123 . foo , ~ ~ - ! ( 123 ) ) & ~ - false + ! - ~ ! ~ ! ( foo ( ~ - true , ( ! ~ ~ ( ~ ~ false ) ) ) > - "bar" ) . foo ) ;
 } ;
 } ;
 } else { foo == ! foo ^ ~ ~ ~ 123 & foo = 123 / ! - true . foo ^ ~ ~ true * ( false * 123 ) ;
 } ;
 } ;
 } else { if - true { foo ;
 } else { if 123 != 123 ( ! 123 ( "bar" , ~ true ) , 123 != ( ! true ) . foo ) - 123 <= ~ 123 { if - true ( true . foo , ~ true ) { foo ( ~ false . foo , "bar" [ true . foo <= - "bar" ] & ( - ! ( "bar" ) ( foo , true ) ) ( foo . foo , ~ - ! ( - false . foo ) ) - - true ) / ~ - ! - foo ++ ;
 } else { ~ 123 **= - "bar" ( ~ - 123 , 123 ) ;
 } ;
 } else { - true /= 123 ;
 } ;
 } ;
 } ;
 } ;
 } ;
 var foo int = ! ! true ;
 func foo ( foo int , foo int ) { "bar" == foo | foo *= true ;
 } ;
 var foo int = ( ~ foo ( ( ~ true . foo != ~ ( "bar" ) ) ( foo & ~ foo [ "bar" - - true ] , ! ( ! ! ~ true ( ~ 123 [ 123 ] , - - false ) ) [ ( ! 123 ( 123 [ 123 ] , ~ true ) ) ] * - foo == false ) , 123 ) ) ;
 class foo { for var foo int = ~ ! ~ ! "bar" [ foo ] / ~ foo ;
 - foo > true ( foo , true ) ;
 true -= true { if "bar" [ ! - foo ] { if ! true == - ~ ( foo [ true ] ) { false ( ! ! ! - foo . foo , ! - ! ~ ~ - - ~ foo == true . foo ) ;
 } else { - ! ~ ( ! ~ - foo ) *= ! true . foo ;
 } ;
 } else { true & "bar" -= - ~ ~ ( true ) ;
 } ;
 } ;
 } ;
 class foo { ~ "bar" ( ~ true , ( ~ 123 ) >= - ( "bar" ) ) > false ++ ;
 } ;
 class foo { if ! "bar" { if 123 { 123 * - - ! foo **= 123 + ~ ~ ! ~ ~ ! foo ;
 } else { for val foo int = - false == - true . foo - false ;
 "bar" ;
 ! ( foo ) [ foo <= ! false == - foo ] { for var foo int = ( ~ - ! - ( - ! ! ~ 123 / "bar" ) . foo ) ;
 "bar" . foo ;
 ! ( 123 ) [ false ] += 123 { 123 | ~ - foo += - "bar" ;
 } ;
 } ;
 } ;
 } else { - ~ true ( false & foo , ~ ~ 123 ) - true < - - ~ foo . foo ++ ;
 } ;
 } ;
 func foo ( foo int , foo int ) { if true { - ~ ! ~ ! 123 -- ;
 } else { false ( ! true & ~ ! ( ( ~ "bar" ) < ! foo ) ( ! true [ 123 [ "bar" ] ] , true ) ^ ( ( ( - ! ~ "bar" ( ! 123 / 123 | ~ ! ~ false , foo == ! true ( ~ ! ( false ) [ ! true ] , ( ! true [ - ~ true ] ) > ~ - ~ ~ "bar" [ - 123 ] ) >= foo ) != false ) ) [ "bar" ] == false ) , true ) * - - - "bar" **= - "bar" ;
 } ;
 } ;
 
