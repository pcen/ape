module foo ;
 func foo ( ) int { if false { ! ~ true ;
 } else { ! true -- ;
 } ;
 } ;
 func foo ( foo int , foo int . int ) int . int { - ! ~ - "bar" == false ;
 } ;
 class foo { func foo ( ) int { for val foo int = ! ( - 123 < 123 ) ;
 foo ;
 ! ( - ( ~ false [ ~ ( 123 ) ( foo ( ) <= - "bar" [ 123 ] , 123 ) ] ) & foo ) { - ! true . foo -- ;
 } ;
 } ;
 func foo ( foo int . int , foo int , foo int ) int . int { for val foo int = 123 < foo ;
 ! ! ! ! 123 . foo ;
 - ! ( 123 ) != ( foo [ ! ~ ( foo + 123 ) / 123 ] ) | 123 { for var foo int = foo == "bar" ;
 ! ! - - false ;
 ! true ++ { true . foo += - foo ;
 } ;
 } ;
 } ;
 func foo ( foo int . int . int , foo int , foo int . int , foo int ) int { for val foo int = - ! foo . foo ;
 ~ ~ foo * "bar" ;
 ~ true ++ { ! ~ ~ - foo > ! ! "bar" *= - ( ! ~ ~ false ) ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int . int . int , foo int ) int . int { ~ ! ! 123 ;
 } ;
 func foo ( ) int { for var foo int = ~ - ( ( foo ) | true ) ;
 ( true [ foo ( false , ! false . foo ) ] ) & ~ - ! - ~ - false ( ) ;
 "bar" [ foo ] -- { 123 [ ~ - ! "bar" ] ++ ;
 } ;
 } ;
 func foo ( foo int . int , foo int , foo int ) int { ! foo >= false [ ! true >= true - ~ "bar" == ! "bar" ^ foo [ true ( - foo , true . foo ) & true ] ] & - - ! ~ "bar" *= "bar" * - ! "bar" ( ~ ! - ~ "bar" [ ~ true ] , - "bar" ) ;
 } ;
 foo int ;
 func foo ( ) int . int { ! foo **= ( ( 123 ( ) >= false + ! - "bar" . foo ) [ false != ! true [ foo > true ] ] ) . foo ;
 } ;
 foo int ;
 } ;
 val foo int = false . foo > foo . foo ;
 class foo { foo int ;
 foo int ;
 } ;
 class foo { foo int ;
 func foo ( ) int { 123 ( ) -- ;
 } ;
 func foo ( ) int . int . int { for var foo int = true . foo >= ! ~ 123 ( ! ! ! ~ 123 * - ! ! true ( 123 ^ 123 , ! foo ) >= ~ ( 123 ( - ~ ~ - ~ ~ - false , foo & - false . foo ) ) , - 123 + false ) == false / ! true ;
 - ( false + ~ false [ ~ - ~ true ( 123 , - true [ - ! ~ - ( foo | ~ ! ~ ! ~ ! - true ) ] ) ] ) . foo ;
 - ( ~ "bar" [ ! 123 ] < foo ) ++ { ! ~ false | - ! false ++ ;
 } ;
 } ;
 foo int ;
 foo int ;
 foo int . int . int ;
 func foo ( ) int . int . int { ~ "bar" [ true >= ~ false [ 123 ] ] > ( 123 ) . foo == ! ~ ! foo + false ;
 } ;
 foo int ;
 foo int . int ;
 } ;
 class foo { func foo ( ) int . int . int { if ( - ( ! ~ ! 123 ) [ - ~ "bar" | ! ~ "bar" ] & 123 == ! - ! false ) == foo / - ( - 123 ) { "bar" . foo ;
 } else { if ! "bar" ( 123 ( ) , ~ ! ~ foo != ! 123 / - ~ true ) { for var foo int = true ;
 ( ~ ~ ~ ~ false / false ) <= ! ~ 123 == ! ! ! "bar" . foo / ~ ~ ~ foo ;
 - - ~ false [ 123 == ( 123 ) [ foo ] + - ( foo == true ) [ ( ( ~ true ( ! "bar" [ ~ ( 123 ) <= "bar" ( ) ] * "bar" . foo >= true , - - ! - - - ~ - ~ 123 ) & - "bar" ) - foo . foo ) == ( "bar" ) ] ] -- { - false + - - foo -= - ~ ( true ( ) ) * foo ;
 } ;
 } else { if false { ! ( true == ~ false [ ! - ~ ! foo * ! ( false ) ] / 123 [ foo ] ^ ~ 123 ) -- ;
 } else { ~ 123 ;
 } ;
 } ;
 } ;
 } ;
 foo int ;
 foo int ;
 foo int ;
 } ;
 class foo { func foo ( ) int { for val foo int . int = "bar" ;
 ( ~ true ) >= ( true ) ;
 ! 123 ( ) >= ~ ~ - ~ - true { for val foo int = ~ - false ;
 - ~ ~ false ;
 ~ "bar" . foo /= ~ ! 123 [ ~ false ] { for var foo int . int = - foo . foo == 123 - ~ foo ;
 ~ ~ - ! - "bar" ;
 true -- { false . foo *= ! true ;
 } ;
 } ;
 } ;
 } ;
 foo int ;
 func foo ( ) int { ~ "bar" . foo ;
 } ;
 foo int . int ;
 func foo ( ) int . int . int { if false ( ) { false /= true | - true ;
 } else { for var foo int = ~ "bar" ( ) ;
 "bar" ^ true ;
 foo = ! ~ ! foo ^ ~ ! ( 123 + ~ - foo ) { if ! ~ true . foo { ( ~ ~ foo - ~ ~ 123 ) ++ ;
 } else { for val foo int = ( ~ ! true ) ;
 ! true ;
 ~ 123 **= 123 { "bar" ++ ;
 } ;
 } ;
 } ;
 } ;
 } ;
 foo int ;
 foo int ;
 } ;
 var foo int = true ;
 func foo ( foo int , foo int , foo int . int , foo int ) int . int . int { if - false ( ) { true /= ~ 123 ;
 } else { for val foo int . int . int = ! ! ~ 123 [ 123 ] ;
 ~ false ( ) ;
 ! foo - true <= ! true != ~ foo < ! 123 { for var foo int = ! ! 123 ;
 ! ( "bar" == foo ) . foo <= - ! false ;
 ! ! - 123 ( ) **= - false { for var foo int = true ;
 ! ~ "bar" & 123 ;
 ! - - - ! foo -= ! true { ~ 123 ( ) ^ ! - false ;
 } ;
 } ;
 } ;
 } ;
 } ;
 var foo int = ~ foo ;
 val foo int = foo ( foo == ~ ~ ~ ! - foo [ ! "bar" ] , true . foo ) ;
 var foo int . int . int = "bar" [ - - ( ~ true > ~ true ) . foo ] ;
 class foo { func foo ( foo int , foo int ) int . int . int { if ~ - ! false { 123 . foo -- ;
 } else { for val foo int . int . int = ! true ;
 - "bar" != "bar" >= - ! "bar" ;
 ~ "bar" > 123 -= ~ - false { for val foo int = ~ ~ true ;
 - "bar" ;
 ~ ! foo { for var foo int = foo <= ! - ! - 123 != ! ( true ) < false ;
 - - ~ ~ ! ~ ( ! ~ ! false ) ;
 foo -= true < foo { for val foo int . int . int = true ;
 ! ( ! true ) & ~ ~ false ;
 ( ~ foo ) - "bar" ++ { if ~ - ! 123 >= 123 . foo { if - - foo { for val foo int = - ( - 123 ) ( ) > - "bar" ;
 ~ ! - true ;
 ! - ( "bar" ) ++ { if ! true ( foo [ foo [ - 123 ] ] , - "bar" ) { for val foo int = ! "bar" ;
 - ~ ~ ~ false ( ) ;
 ! false . foo -- { "bar" -- ;
 } ;
 } else { ~ ! ~ false ^ 123 [ - 123 ] ++ ;
 } ;
 } ;
 } else { for val foo int = true ;
 "bar" != - ! foo ;
 - ~ ! ~ true != false + false . foo ++ { if ! ~ ! true { if ( ~ - false [ 123 ^ - "bar" ( - - ~ true / - - ( foo ) + ( 123 ) , true & - ~ ( - ~ - 123 . foo * ( - ~ ! true [ - ~ ( - foo ) ] ) [ ( foo & ~ ~ - ! true <= "bar" [ 123 > ! ~ 123 == ! false >= ~ - ! ! ~ true ] ) ] ) ) ] == ( foo [ - 123 | ( - 123 / 123 . foo ) ] ) ) { for val foo int = "bar" ( true , ! "bar" ) != foo . foo ;
 - - "bar" != - true ;
 ! ~ - ~ ~ ! ! - true { if true { for val foo int = - 123 - ! foo ;
 ! - false [ - - - "bar" ( true , - ~ ~ 123 * ( ! "bar" [ true / ~ true != foo ] == ~ ~ ! false ) ) * ! ~ ! ! 123 ] ;
 true ( ) + false [ - ( ~ ( ! ~ - ! true ( - - "bar" [ 123 ] & foo , ! true ) ) . foo ) ( ) + false [ ~ ! "bar" [ ! ! ~ false [ "bar" . foo ] == true [ ~ ! - "bar" . foo ] > ( ( ~ false [ 123 ] ) ) ] >= "bar" ] ] < false { - 123 != - ! ~ - ! foo . foo > "bar" . foo **= ! ~ false ( false . foo , ~ ! ! ~ ~ ~ ~ - - - false ) ;
 } ;
 } else { foo **= 123 ;
 } ;
 } ;
 } else { - ( ( ! true ( ~ false , ! ! true ( ~ 123 ( ) , true ( ( - "bar" ( ) > foo ) [ ~ - "bar" [ "bar" <= 123 != "bar" ( "bar" , ~ - ~ ! ~ - false ) < ! - ! false ] >= true [ false != ! foo ] ] , ! ~ ~ ~ "bar" ( - foo * - - ! "bar" , ! ~ - false ( ) ) ^ false >= ! ( ( - 123 ) ) ) * ~ - "bar" . foo ) + - ~ ! - ~ ~ foo > ( - false [ ! true ] ) ) ) ) ++ ;
 } ;
 } else { ~ true & ! - false **= ! foo . foo < 123 ;
 } ;
 } ;
 } ;
 } else { ( ! true ( ) ) -- ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 foo int . int . int ;
 func foo ( ) int { "bar" = false ;
 } ;
 foo int ;
 func foo ( foo int , foo int , foo int , foo int , foo int . int , foo int ) int { foo ++ ;
 } ;
 func foo ( ) int { for var foo int . int = true ;
 - - ~ ~ "bar" ;
 123 <= true /= ! ! foo { ~ ! ! 123 ;
 } ;
 } ;
 func foo ( ) int . int . int { ~ "bar" += ! 123 ;
 } ;
 } ;
 class foo { foo int . int . int ;
 func foo ( foo int , foo int . int , foo int , foo int . int , foo int . int . int ) int . int { for var foo int = - ~ - false ^ 123 >= "bar" / "bar" + ~ ~ 123 . foo ;
 ~ 123 ;
 - ! foo **= ( false ) ( ~ false [ ~ ! - ( foo ) ( - ( - ( ( "bar" ) ) ) [ ! - ( - ~ ! ! ~ 123 [ 123 . foo ] & ( ~ 123 / ~ "bar" ) | ~ "bar" != 123 ) + ! "bar" ] , foo [ ( ! - true ) != foo ] ) > ! foo . foo ] ^ ! ! ~ - ~ false ( ) / - - true , false . foo ) / foo < ~ ~ "bar" { true ( ) -- ;
 } ;
 } ;
 func foo ( ) int { false /= ! ! ! 123 ;
 } ;
 foo int ;
 } ;
 func foo ( ) int { foo -- ;
 } ;
 
