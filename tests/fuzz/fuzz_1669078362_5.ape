module foo ;
 class foo { for val foo int = ~ ( ~ "bar" ) [ "bar" ] | - ( - ~ 123 != ~ - false . foo ) >= ~ - 123 | false . foo ;
 ~ - ! foo ;
 true [ - false [ ! ( ~ 123 ) ( 123 , - ! false != ( "bar" ) / false ) ] ] * - ! false ( true [ ! "bar" . foo ] , - ~ ! - ~ "bar" ) { if ~ foo >= foo [ ! ~ ~ "bar" ( 123 [ true ] , - - "bar" & ! 123 ) == ! foo ] | ! ~ ~ ~ 123 { false ++ ;
 } else { ~ ~ ! ( foo ) ( true [ foo - true ] <= ! "bar" , ~ ! ! true . foo ) ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int , foo int ) { if ! 123 ( ~ 123 [ - false == ( true ) ( ( false ) <= true , 123 ) ] >= - ! ~ 123 , - "bar" ( false , ( - false - - foo ) ) ^ false . foo == - ! ! 123 & ~ 123 ) | foo { if ~ ! - false & false { if ! ~ "bar" { if 123 { for var foo int = ! - - ! ~ ! ~ - ( false ) ;
 "bar" != - - "bar" ( true * - foo ( ! "bar" , ! false ) <= ~ false . foo , 123 * - true <= - ~ ! ! ~ true . foo ) ;
 true . foo >= false [ ! - "bar" * ( ~ - "bar" | 123 [ ( ( false [ ! foo ( - ~ "bar" . foo , foo ( true ( false >= "bar" != - ! "bar" , ! ! true ) , - foo ) - ( ~ true ) ) ] ) <= - - - ! ! ! ! foo ) ] < ( ! ~ "bar" ) [ 123 ( 123 , ! "bar" ( 123 ( ~ false , ( 123 / ! ( ~ "bar" ) ( ! ! foo & "bar" < "bar" + 123 . foo , ! "bar" ) ) ) + "bar" , ~ 123 ) ) != true * ( ! false ) ] ) ( false + ~ ! false [ - - false ] , ! false >= ~ foo ) ] / ( - ! - ( true [ false ] < ~ true ) - ! true ( ! "bar" , ~ ! false ) ) - false { if ( true ^ ( ~ ! ( ! ~ ( false ) ) ) < false ( true , ( ( ! true . foo * 123 == true ) ) & ~ ~ false ) ) { if ~ - foo / true [ foo ] != foo [ true . foo ] | foo { ! - false -- ;
 } else { if false { - false . foo * - "bar" > "bar" /= ~ false ;
 } else { for val foo int = foo ;
 - "bar" - ( foo ( true > ! false [ "bar" + 123 ] , ( foo ) ) <= true ) [ ! ! - false ] != ! false ;
 false [ "bar" ( true , ! ~ ~ ! true . foo >= "bar" ( "bar" , foo [ - true <= true ] * - ~ ~ ! 123 [ true ] ) != true ) ] **= ! "bar" . foo { if 123 . foo { if - ( 123 ( - ~ "bar" [ ~ ~ false == ~ ! ~ foo ] , true * "bar" ) ) { if ~ "bar" { 123 . foo ;
 } else { ! ! true - true . foo ++ ;
 } ;
 } else { if false . foo * ! foo [ ! - true ^ ~ "bar" ] { for val foo int = ! ~ false ^ false [ ( foo > "bar" ) ( 123 , true != ~ ~ true . foo & - 123 ) & "bar" . foo ] & true ;
 - ~ - foo ;
 false { ! - 123 [ - foo . foo ] >= ~ true ;
 } ;
 } else { true ( false ( true , false - 123 ) - true , - foo ) -- ;
 } ;
 } ;
 } else { - - ~ - ! ~ foo **= "bar" & ~ ~ ! false ;
 } ;
 } ;
 } ;
 } ;
 } else { - - ! ! 123 ;
 } ;
 } ;
 } else { foo -- ;
 } ;
 } else { for val foo int = true [ ~ ( - ~ - "bar" ) ] ;
 ( "bar" ) . foo ;
 true . foo -- { 123 . foo **= foo . foo * - ! - ~ foo [ 123 ] ;
 } ;
 } ;
 } else { ~ ( ( ~ - - true [ ! ! ~ ! 123 ] ) / - true ) . foo /= "bar" ;
 } ;
 } else { ~ ! - false ++ ;
 } ;
 } ;
 class foo { ( ! 123 ) *= ~ - ! ! false [ ~ "bar" / foo [ 123 >= false ] ] ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) { for var foo int = foo ;
 ~ true == ! ! ! ! false [ ( "bar" ) ( "bar" , ~ - - ~ ! false / ~ ~ "bar" ) & 123 [ false [ ! ( false - ( ~ 123 ) * foo ) ] ] ] >= - ! foo ;
 ~ - ! 123 ( - ~ 123 , ! ! ~ "bar" . foo ) < - false [ true ] { "bar" ;
 } ;
 } ;
 func foo ( foo int , foo int ) { if ! "bar" { for val foo int = 123 ;
 false == - ~ true ;
 - ! ( 123 ) { - - ! "bar" ;
 } ;
 } else { if ~ foo { if foo . foo { ( ! true [ true ( - ! 123 [ false ] , ! true ) ] * ( 123 & 123 ) ) -- ;
 } else { if true { for var foo int = "bar" ;
 ( 123 ) ;
 ~ ! ! ( 123 / ( ~ false [ - foo == - true ] ^ 123 ) ) ( foo . foo , false . foo / "bar" . foo ) ++ { if - - - foo { if true ( ! - true , ~ ( "bar" != ~ - ~ ! - ! ( ~ ! "bar" - true [ ! ~ ~ ! ! - ! - 123 ] & - 123 ) ( true ( false [ ! ! ( true ) + 123 . foo ] ^ ~ ! ~ foo . foo , - 123 ) , true ) - "bar" ( ! "bar" [ ! ! ~ ! ! 123 | - foo ] , true . foo ) ) ^ false != ~ ~ - - 123 . foo ) { if - 123 / - - 123 { for val foo int = "bar" ;
 ! ! true [ ~ true ] ;
 ! ! false { for var foo int = true [ false ] ;
 foo ;
 false [ 123 ] | "bar" * ! ! "bar" ++ { for val foo int = ~ true ;
 false ( ! - foo , "bar" ) ;
 ( 123 . foo < false ) [ true > ! true ( ! 123 + - ~ - foo ( "bar" , false ) , "bar" - ~ ! - ~ ! true ) ] = ~ ~ ~ false { if "bar" { ( 123 ^ ( ( ~ ! true != - 123 ) [ ~ "bar" ] * true == ( "bar" >= true . foo != - foo / ~ ! "bar" ) [ ! true . foo ] ) . foo ) *= 123 < ! "bar" ;
 } else { 123 ;
 } ;
 } ;
 } ;
 } ;
 } else { for val foo int = true ;
 - foo [ - foo != ! ! 123 ( 123 , true != true < true + ~ ( false . foo != ! ( ~ "bar" ) ) ) ] >= ! ! ~ ~ true ;
 false ^ true { if 123 <= ~ ~ foo ^ ( 123 ) { for val foo int = true ;
 - ! ~ "bar" [ - ( - false / ( "bar" . foo <= - 123 != foo ) . foo ) ( "bar" + ~ ( foo ) , ( ~ "bar" ) == ! true [ ~ ~ ~ ~ foo | true [ - false ] ] > ! foo [ ( foo ) != - 123 . foo ] ) ] ;
 foo { ! - - true ++ ;
 } ;
 } else { - - ~ "bar" ++ ;
 } ;
 } ;
 } ;
 } else { ~ - true -- ;
 } ;
 } else { "bar" ( ~ - 123 . foo , foo . foo ) >= foo [ ( foo ) ] - false += ! - ~ false ;
 } ;
 } ;
 } else { for var foo int = 123 ;
 true ;
 true -- { for var foo int = - ~ "bar" == true ( - ~ ~ foo / ! false ^ ~ ! true . foo / 123 . foo , ~ 123 . foo ) ;
 false >= ~ "bar" ;
 - ( - ! ~ foo ) < ! 123 + ! ! "bar" & - "bar" ( - ~ ~ 123 , - "bar" [ foo [ 123 [ - foo ] ] >= ~ ! ! true | ( true . foo ) ] ) { for val foo int = 123 & ! false ;
 ~ ~ ! ( - 123 ) & - "bar" ;
 foo != foo . foo -- { for var foo int = true ;
 123 - ~ ~ ! - 123 ;
 ~ ~ - ! true -- { for val foo int = 123 ;
 "bar" ;
 ! - foo . foo { if foo & foo { if ! foo <= - true . foo { if ! ( ( - ! ( ~ ~ ~ - "bar" ) ) ) { ~ true | "bar" . foo ;
 } else { for var foo int = foo * ~ ! "bar" - ~ "bar" == ! ~ "bar" >= "bar" [ ( false ( 123 , - foo ) * ~ false - true ( - false , true & 123 ) >= - false [ ~ false ^ true [ ! false ] ] ) ] ^ ! ! ~ - ~ ~ ! true ;
 "bar" . foo >= ~ "bar" ;
 true & 123 { if foo { if true ( foo , true >= ! 123 ) < ( true [ true ] ) [ ( 123 [ ! - ( false ) [ ~ ( - false + ! 123 ) . foo ] != - ~ ! ~ ~ foo ] ) ( ! true , ! - foo * true <= ! ! - foo + ! false ) < ! - foo ] { foo & ( - ! ~ true ) == "bar" **= true [ ! true ] == true + ~ - ( ~ true ^ foo [ 123 == ! foo ] ) ( ~ false * true [ - ! false * ! - ~ 123 != false ] , ! ~ foo ( 123 [ ~ true == ! ( ~ "bar" [ false ( - ( foo ) , ~ "bar" ( foo , true ) ) / false ( - 123 - false >= foo & ! 123 , ~ ! foo ( "bar" [ ~ ~ "bar" ( ~ - true , "bar" == - 123 ( "bar" . foo , 123 ) ) ] + 123 [ - ( foo ) > ! false ] , "bar" ) ) >= ~ foo ] ) . foo ] , 123 ( true , true . foo == foo ) ) ) ;
 } else { for var foo int = foo ;
 ~ true ;
 foo & ! false { for var foo int = ! ~ - false ;
 false . foo ;
 ( ~ 123 [ true == 123 [ true < "bar" ( true , ~ ( 123 ) ) ] ] / "bar" ) { ! ~ false ;
 } ;
 } ;
 } ;
 } else { ( "bar" ( ! ( ( true [ - ( ! - ! foo ) * false ] + "bar" ( ( 123 ) , ! ! ( ! ( ( ! ~ false ( foo ( 123 - ! ! "bar" . foo , "bar" ) < false . foo , - foo ) ) * false ) ) == true ) ) ( ~ - "bar" [ foo ( "bar" ( ! true + 123 [ - true > 123 ] < ~ ( - ! ~ true ( - 123 . foo , 123 ) ) [ ! foo ] , - ~ ! - true - ~ "bar" ) , "bar" ) ] - false , ! ! - ( - - ~ - ~ - true ) <= false ) ) , 123 [ - - ~ ~ - ! ~ 123 & ! "bar" ] / ~ 123 . foo ) > "bar" [ - foo ] == ! ~ ! ( 123 [ ! ~ - ( ~ - foo [ ! true ] ) >= ~ "bar" [ true ] ] >= ( ! - ~ - "bar" [ ~ 123 ] ) . foo & ! ! foo - 123 ) ) != - 123 /= - - 123 ;
 } ;
 } ;
 } ;
 } else { for val foo int = 123 ;
 "bar" ;
 - false ++ { for val foo int = - ~ - - true ;
 "bar" ( ( - ! ~ ( true . foo ) . foo ) [ foo . foo ^ "bar" . foo ] , false . foo ) ;
 true { ~ foo . foo | foo -- ;
 } ;
 } ;
 } ;
 } else { for val foo int = 123 [ ~ 123 != 123 . foo ] ;
 123 == ! foo ;
 false [ false [ "bar" ] ] { ! ! ~ - ! ! - ! true [ ~ false ] -- ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { for val foo int = true / ! "bar" [ true & false ] ;
 ( - ! - - true ) [ ! ~ ~ - ! true / ( ! ~ ~ - "bar" * ~ ~ "bar" . foo != - foo ) > true ] | ~ false == ! false ( ( ! true ) , ! 123 > "bar" ) & ~ "bar" ;
 ~ foo & ! 123 != - ~ false * true { foo [ "bar" ] == 123 ( ~ true , ! ( ! ( - "bar" <= foo ) . foo ) [ - ~ ( foo ) . foo - - "bar" ] ) / 123 ++ ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int ) { ! - ! ! ~ ! ( foo == 123 . foo * true ) > false -- ;
 } ;
 class foo { if foo [ ( - foo ) != true ] { true ( ! ! - "bar" , "bar" ) <= false / ! foo ;
 } else { for var foo int = foo ;
 123 ;
 ~ 123 * foo <= ~ ! ( - true ) . foo = foo ( true [ "bar" ] , true ) { - ( ~ ! ! false ( ! ! ~ - - ! ! ! ! - ~ ! - ! - true , 123 ) <= ~ true ) -- ;
 } ;
 } ;
 } ;
 val foo int = foo [ foo ] / - true ;
 var foo int = ( foo + 123 ) ;
 var foo int = ! 123 ;
 val foo int = - ! true != foo ;
 func foo ( foo int , foo int ) { for val foo int = false ;
 ~ true . foo < - foo ;
 ( - ! ! false ) -- { if 123 { ( ( ! ! - true ( 123 , ~ 123 . foo ) >= false * ! ~ 123 - ! ! foo ) ) ;
 } else { for var foo int = ~ 123 == foo ;
 foo [ ~ true ] ;
 foo == foo + "bar" = ~ ! ( ! 123 ) ( ~ ! "bar" , true ( - true [ ! ~ ~ false ] * ! ~ "bar" [ ! ! 123 . foo ] , - ! foo . foo - true . foo / ! foo [ ~ "bar" . foo ] ) ) { 123 ;
 } ;
 } ;
 } ;
 } ;
 var foo int = false / ( ~ ~ ! ! false * false ) ;
 class foo { for var foo int = ! "bar" != - 123 ;
 ~ ! "bar" ;
 "bar" ++ { ~ "bar" > ! ! - ! "bar" [ "bar" / ( ! ! ! - foo . foo ) ] /= - ~ "bar" != false [ ( 123 ) - - ( ~ "bar" ) ( - ( "bar" [ "bar" ] ) [ ~ 123 ] , ~ "bar" ) ] ;
 } ;
 } ;
 class foo { if true ( - ! ( ( foo ) ) | "bar" [ ~ "bar" ] , true ) { false . foo **= false ;
 } else { for val foo int = 123 [ - ! foo ] ;
 false ;
 true > - foo /= true > true ( ~ 123 [ ~ foo ] , false * ! true [ - - ! - true < ! - true ] ) / false == ~ ( - false <= - "bar" | ! ~ ! foo ( true [ - false [ ! "bar" ] == ~ ~ 123 ] , - "bar" ) ) { if ~ - ~ - ! foo { true -- ;
 } else { false **= true + - ! ! - ! - foo / true . foo ;
 } ;
 } ;
 } ;
 } ;
 class foo { foo [ ! "bar" ] = ! ! false ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int , foo int ) { ~ ! ~ "bar" ( ( ! foo [ ( true ) ] <= "bar" ) , ~ "bar" . foo ) = "bar" ;
 } ;
 val foo int = ~ ~ "bar" + - foo ;
 var foo int = false . foo * - "bar" ;
 class foo { if - ~ foo { if ! ! "bar" . foo { ( - ~ 123 ) ;
 } else { if true { ! "bar" = ~ - ! ! - 123 [ "bar" == "bar" ^ ~ ( - 123 . foo ) ] | foo . foo ;
 } else { - false != 123 -- ;
 } ;
 } ;
 } else { for val foo int = ~ 123 ;
 ! ~ "bar" / false ;
 true [ ~ ( "bar" > 123 ) ] != false ++ { for val foo int = 123 / ! ! ! ~ ~ ( true ( ~ ( - 123 ) ( ! false , - false ) , 123 ) ) ;
 ! ! ~ false ;
 ! "bar" -= foo { ( ! true ) + foo ++ ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) { for val foo int = - 123 ;
 123 >= - ~ - - ~ ! - ! false ;
 "bar" ^ ( ~ ~ "bar" [ false ] | ! ( ~ ! ~ false / - ~ - ! "bar" ) ( true ^ "bar" & ~ ~ ( false ) , "bar" . foo ) == ( true != "bar" . foo ) ) *= ~ ( foo != "bar" ) . foo <= 123 { if ! ~ ( - "bar" . foo ) { ~ - 123 **= foo . foo ;
 } else { for val foo int = - ~ ! ( false [ false ] ) [ 123 + ~ ! 123 ( ! - - - 123 ( foo , ~ ! ! true ) , false ) ] != ~ foo ( ~ - ~ - "bar" , ~ ! ! "bar" < - ~ ! "bar" . foo + ~ 123 ) ;
 - ! - ~ 123 != ( foo == ~ "bar" + foo / foo . foo ) ;
 ( ( ! ~ - - ! - ~ ! foo ) ) [ false - false . foo ] == ! ~ ~ true ( ! ( ( - - ~ foo [ - ~ ~ ~ "bar" ] ) . foo ) [ foo <= ~ 123 ] , ! ! foo | ( 123 ) . foo ) *= ! ~ ! ~ ! true [ ! ~ ! "bar" [ "bar" == ! - ( ! - false ) [ ! false ] ] - foo . foo ] | foo { - ! foo -- ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int ) { for var foo int = ! "bar" ( ~ "bar" & "bar" . foo , ~ "bar" ) ;
 ( 123 ) ;
 false += true * 123 { for var foo int = false ;
 foo >= foo ;
 123 [ - 123 ( ! ( 123 ) , - - - - ! - false ) ] -- { false ;
 } ;
 } ;
 } ;
 class foo { ( ~ ( - foo ) ) < - 123 ++ ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) { ! "bar" ++ ;
 } ;
 func foo ( foo int , foo int , foo int ) { if - false { "bar" * ~ ~ - ! ! ~ foo ;
 } else { if ~ ~ "bar" < true { for val foo int = foo ;
 - ~ ! foo ;
 ( ~ ~ - 123 | foo != ~ ( ~ ( true & ! ! false ) [ "bar" . foo >= ( ~ ! - foo ( - ~ false ^ false , true ) | false ) [ ! - ( 123 [ true . foo & ~ true ] ) == foo ] ] ) [ ~ - foo ] > foo ) /= - ~ ~ ! 123 * "bar" < ! ! false [ "bar" <= - false ] { if - ! ~ "bar" { true ;
 } else { ( ~ - false ( foo [ ! false >= false | ( false & - ! true ) ] , ! ~ - 123 ( ! ( ! true ) . foo , ! ~ ! 123 ) ) ) /= ! true [ ~ "bar" < ~ - "bar" ] ;
 } ;
 } ;
 } else { false = - "bar" ( 123 [ ~ ~ ! ~ ! true . foo >= false ] , ( true . foo ) ) + false & false [ ! foo ] ;
 } ;
 } ;
 } ;
 class foo { if false { if false ( - ! foo [ foo - ~ "bar" ( ~ ( ( ~ ! ~ "bar" ) ) [ - ~ ! foo <= ( "bar" ) == foo * false ] , - ~ - - foo ) * ! ~ ! - ( ! ! foo ) ] == ~ ! "bar" , foo ( ~ foo ( ~ ~ ! false , - true & false . foo ) , ~ foo ( ! "bar" , ! foo ) ) ) > ! true == "bar" | foo [ ~ ( foo != ! - - ( ( ( ! ! false ) * ! ~ 123 ) > false ) ) ] { for val foo int = true [ ! true ] ;
 "bar" & ~ foo ^ false / ~ ( true ) ( ! - - ~ - ~ foo , false == "bar" ) ;
 foo ( - ! ! ~ "bar" != - 123 | - true ( false ( ! 123 . foo + ( ! ! ! - false ) , "bar" > ~ ! ~ ! - ( "bar" ) . foo ) , false ) , "bar" ) * true . foo { ! ! ! ! true /= - - false ;
 } ;
 } else { if ~ ( - ! - - ~ ! - 123 ) . foo { for var foo int = ~ ~ - foo * ! ~ "bar" ( foo , "bar" ( ~ ( ! - ~ false ) , - foo ) ) ;
 123 ( ! ! true & 123 [ "bar" . foo ] , "bar" ) ;
 ~ ! false / ! ~ ~ "bar" -= - - 123 { ( 123 != - true ) / "bar" ^ ~ ~ ! - - "bar" ( foo , true ) -- ;
 } ;
 } else { if "bar" { 123 . foo >= ! ! - - - ! ! - - ! false / ~ - 123 *= ~ - 123 [ 123 . foo ] & ~ ! false ;
 } else { if false { for var foo int = 123 [ ! "bar" ] ;
 123 ;
 ~ 123 ( ! "bar" , ( ~ foo ) <= "bar" ) -- { true = - ! false ;
 } ;
 } else { for var foo int = ~ - ! true ( "bar" [ - ( 123 ( true . foo == ~ ! true , - "bar" | true * ! foo <= - 123 ) ) [ false ] > foo ] > ~ ~ - ~ - "bar" , false ) & ! ! - ~ ! ~ "bar" ;
 ~ - 123 ;
 foo **= ~ ~ "bar" ( ~ false != ! ! ~ foo ( ~ 123 , foo <= - "bar" ) , - false ) { ~ - - ! - ~ "bar" . foo = ~ ( - ( ~ ! ~ true ) ) [ true / "bar" . foo ] / true . foo ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { for val foo int = foo / 123 ;
 false [ ! - ! foo ( foo , foo [ ! ( - true . foo ) . foo ] ) != true ] ;
 true -- { if 123 / false { false ++ ;
 } else { 123 -- ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) { true += ! - ! - ! ~ ! ( - 123 ) ;
 } ;
 class foo { ~ ! false != ( false ) - ~ ! 123 >= ~ 123 [ ( ! - ! ~ true ) <= "bar" ] /= ! ~ - false >= true ;
 } ;
 var foo int = false ;
 class foo { - ( foo ) . foo *= ~ false ;
 } ;
 val foo int = "bar" . foo ;
 var foo int = - ! - 123 [ - - true ( ~ ~ true | 123 . foo , ! ~ foo ) + ~ foo ] ;
 class foo { ( ( "bar" ) ) ;
 } ;
 var foo int = ! "bar" ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) { ! ! ~ ! ( ! true . foo ) . foo -- ;
 } ;
 func foo ( foo int , foo int ) { for val foo int = - - ~ foo ;
 false < - false [ ( - ! ~ false * ( foo ) != "bar" ) + 123 [ ! - foo [ foo ] ] ] + true ;
 - ~ ~ ! - ! - foo -- { for var foo int = true . foo ;
 ~ ! false == 123 [ true <= true * true ( ! true , "bar" ) ] ;
 - false ( foo , - "bar" - ! false ( true , - "bar" ) < foo [ ! ~ ~ ~ ( true ) ( ! false , ~ - - ! "bar" ) ] ) != ! "bar" ( true , "bar" - true ) | true { - ~ 123 ( foo , ~ "bar" . foo ) | foo [ ! true != ( ! false ) ] += "bar" < ~ false ( ! 123 , - ~ false . foo ) ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int ) { true ;
 } ;
 class foo { "bar" [ "bar" ] == ~ "bar" ++ ;
 } ;
 
