module foo ;
 func foo ( ) int { for val foo int = ! true == foo [ ! true ] or - ! 123 ;
 foo / ! true ;
 ~ ~ "bar" ( ~ ~ - ! true or 123 . foo and ( false ) , - foo ) { if ( true ) >= foo ( true [ false << ~ ( 123 << true and ( ! 123 ) != "bar" ) ] , - 123 ) % foo { for var foo int = - ~ ! ( foo <= false != true [ false ] and ! foo ) >> foo [ foo ] * ( ! foo == true . foo or ! ! - "bar" . foo ) and ! - ! ( foo == "bar" < 123 ) [ foo ] == ~ foo ;
 ~ ( - "bar" / ~ ! true [ "bar" - ! "bar" ( ! foo . foo , ! - ~ ~ ! ! false >> "bar" and true . foo ) and ~ ( ~ false . foo ) != ( ! ! ~ false ) <= foo [ true ] ] or 123 ) ;
 - ~ - true <= - false / ~ 123 == "bar" or ! true ++ { if ~ false [ 123 or false >> ~ ~ ! "bar" ] { foo ;
 } else { val foo int . int . int = true or ! false ( ! ~ foo [ ! ~ ( ! - ~ "bar" ) ] , ~ - false ^ ~ ~ true ) * ~ - - - ~ ~ ! ~ ! false . foo and - "bar" ;
 } ;
 } ;
 } else { false - true . foo or ( ~ - 123 or ~ foo == ( ! - true . foo <= ! true % ( false > false & - ~ "bar" ) [ ~ true + - ~ ( "bar" ( "bar" or ~ ( ~ ~ true ( "bar" ( "bar" >= 123 [ ( true . foo ) or ! ~ 123 <= ! - ~ - ~ - true ] / true , - ! foo and - ~ ~ true ) < ~ - - foo . foo != ~ ~ ! true ( 123 ( ~ "bar" >> ! ~ ~ - ! ( ~ ~ "bar" or ~ false [ - false + - foo . foo ] ) or ! ( - 123 ) , - true <= foo << foo ) , false ) >= 123 , ( ! ~ ( ~ ! ( "bar" . foo ) ) ) ) / false >> ~ ! ~ ( false + ( false >> ~ ! ~ foo ) and false ) ( ) % ~ "bar" ) ( ) , - ~ ( ( false and - 123 >= ! - foo / ~ false . foo ) ) . foo <= ! - ( true ( ) ) or ! true ( ) != - foo << true . foo ) - foo < ! true ) ] ) ) . foo and ! - foo ;
 } ;
 } ;
 } ;
 var foo int = ~ ( ! true ( ) ) ;
 func foo ( foo int ) int . int . int { for val foo int = false ( ! 123 . foo != false , ! - true ) == ~ ~ 123 ;
 - ! ! ! - 123 ;
 ~ - ! true { ~ false <= ~ ~ ~ false != 123 ;
 } ;
 } ;
 func foo ( foo int , foo int . int . int ) int { ~ 123 == - - - ( ( ! - ( - ! foo . foo ) % ( "bar" % ~ true and - ! - ( true . foo != false ) ) << "bar" . foo ) - ! ! - ( foo . foo ) ) += ~ ~ - ( ~ 123 ( ( - ~ "bar" - ~ ! ( ( ! - "bar" * ( true ) << "bar" . foo and ! ~ "bar" ) & true ) ( true , ! ( foo and 123 [ foo . foo + ! ~ - 123 and foo [ foo != ( - ~ ! ! false or ~ ( ! ( ! 123 ) [ ~ false ( ( ! false ) , - false ) ] ) * ~ ! ~ ! ~ ~ false ) ] & ( foo ) ] ) ) >> 123 . foo ) ( ~ - "bar" % ~ ! ~ ! ! - ~ ( ~ foo ) , 123 ( ) ) ^ 123 , - - - 123 % foo and ! ! ( - foo ( ~ ! - - ( foo and ! - ~ ~ ( - ( ! "bar" >> 123 ) ) . foo ) . foo , - ~ 123 >> ! ~ - ! true . foo < 123 and ! 123 ) / ( ( true and "bar" ) ) [ - ! "bar" ( ) * ( ~ true ) . foo > ! "bar" . foo and "bar" ] ) [ ( 123 ) ] & ~ - false . foo ) or "bar" ) ( ) == true ;
 } ;
 class foo { } ;
 val foo int = true ( ) * ~ ( 123 / foo ) ( ) ;
 var foo int . int = ~ ! true or false ;
 var foo int = ! ! true ;
 var foo int = true . foo >> - false [ ! 123 ^ false [ - ~ ! - ~ ~ "bar" / ! true and foo or false . foo == ( false == ! ~ 123 < ~ ! ! ~ - ( false < - false ^ true or "bar" ) and ! false ) ] ] / "bar" == ~ 123 >> ! ! ( ~ 123 [ ( "bar" ) and - ~ - false ] ) . foo < - - ( - - - "bar" ( ) & ~ 123 . foo >> 123 == ! "bar" ) [ ! 123 . foo ] ;
 class foo { foo int ;
 func foo ( foo int . int . int , foo int . int . int , foo int , foo int , foo int ) int . int . int { if ( ~ ! 123 >= ! ( foo == ( foo [ ~ ! ~ - "bar" << ! - - false ] * true ( ( false ( - ! ~ ~ - 123 != true , ( - - ! - - ( - ~ ! ( - true or ( 123 ( - foo or "bar" , ! true & ! - ! true == 123 or foo [ foo or 123 ] ) ) . foo ) or ( "bar" or - ( true [ - "bar" or true ^ ! ~ ! - ! ! ( ~ ~ "bar" ) . foo ] ) and ! false ) . foo ) << foo < true ) ) ) << ! ! foo >= ! ( ~ - ! ~ foo and 123 ) , true == ( ! ! ! - - - ! 123 ) ( ) ) or true & ~ ! ! 123 ) [ 123 - - ( ~ 123 ) [ ( ~ ~ ~ ~ ~ ~ ! ~ ~ false ( "bar" , ~ ! ~ "bar" ( 123 or 123 >> foo . foo <= false . foo and false , ~ - false / ( ! ( ! ! true or ~ ~ 123 . foo ^ ~ "bar" [ true ] and false [ 123 ] ) ) . foo << false [ ! 123 != false ] and - true / ~ ! - foo . foo >> - ! true or 123 + false . foo % ~ ~ ~ - true ) and ! false ) ^ ! ~ true and ( ~ "bar" ) [ false [ ~ ! foo ] + ~ true == true or false [ ~ 123 ] and foo ] % ( "bar" | false [ ! "bar" <= foo ] or ! - ( - - ~ ~ ~ ~ true != ! - ~ ~ foo ) / - ~ false . foo < ~ - ! foo ) << ~ ( ~ "bar" ) ( ) ) [ 123 and 123 [ - - ! ! ! - "bar" ] % 123 [ ! ( "bar" > ~ "bar" and foo << ! false ( ) ) and ~ ! 123 ] ] * - - ~ 123 . foo ] or ! ! ~ ~ ~ ~ ! "bar" ] >> ( ! ( ! 123 > - ( "bar" < ~ foo . foo ) != foo ) ) or false . foo ) ) - ! true << ! true == true { var foo int = true and - 123 ;
 } else { for val foo int = ! ! ~ ! ! ! ! ~ ~ ! false ;
 true or false ( foo , ! ~ ! false ( ) / "bar" ) ;
 - false -- { var foo int = false and ( foo and "bar" ) / true ;
 } ;
 } ;
 } ;
 func foo ( foo int ) int { "bar" == foo [ true or ~ foo . foo ] & - ( foo - ~ "bar" [ - ~ ! true ] and ~ - "bar" ) ( ~ 123 % false and ! ! ! ( ~ ~ ( ( - true . foo ) [ - 123 & foo and "bar" ] ) ) , false ) - ! ~ true [ false ] <= ( ~ ~ false ) or ~ ! ~ "bar" + 123 & ! ( "bar" or false [ "bar" ] ) and - false = true >> ( - ( ~ foo . foo != ~ true | true ( ~ foo and 123 >= true , foo [ ~ 123 ] != ~ ! ! - ( ! - foo == ! ( ! "bar" [ - false ] ) ) & false > - ! ! ! foo ) and foo . foo ) and ! ~ false << ~ - ! "bar" ) or false ;
 } ;
 } ;
 class foo { func foo ( foo int ) int . int . int { ! - ! ( - ~ ! ! true ) ( ) and ! ! "bar" . foo ;
 } ;
 func foo ( ) int { if - ~ 123 [ ~ - "bar" ] != - - ~ "bar" { for val foo int = 123 ;
 ( true % ~ 123 ) . foo > ! ! ~ - ~ false [ - ~ "bar" . foo or false ( ) ] ;
 ! ~ ! true . foo & ! ~ true - foo *= ~ false { ~ - ( foo ) ;
 } ;
 } else { val foo int = ! ! ~ ! true or - foo >= false ( 123 > 123 , ~ "bar" == 123 ) ;
 } ;
 } ;
 foo int . int ;
 func foo ( foo int . int ) int . int { val foo int = ! ~ "bar" - ! foo ;
 } ;
 func foo ( ) int . int . int { var foo int . int . int = ( - ~ 123 ( true , ! ! ~ ! foo ) | - ~ 123 or ~ ! foo . foo % ! ! ~ ~ true > ! ~ 123 . foo ) ;
 } ;
 } ;
 class foo { foo int ;
 func foo ( ) int . int { val foo int = 123 << foo ^ ! - ( ~ ( ~ ( "bar" | ! ~ 123 > foo ) ) ) . foo ;
 } ;
 foo int . int ;
 foo int ;
 foo int . int ;
 foo int ;
 func foo ( ) int { false & - - false /= "bar" | ~ true ;
 } ;
 func foo ( foo int . int . int , foo int , foo int ) int { - foo or false += - - ( false and - ! ! 123 > foo [ - ~ - ! - "bar" . foo and "bar" ] >> ~ "bar" ) / - "bar" ( ) ;
 } ;
 func foo ( ) int . int { for var foo int . int = ~ - - ~ foo ;
 - ( ( ( - foo [ ! - ! ~ ! ! false ] ) << "bar" [ - - ! ( foo or - ~ false ) >> true ] ) ) ;
 ! ~ ! ~ ~ ! 123 . foo < ~ ~ ! "bar" ( ) ++ { ! ~ false = false ;
 } ;
 } ;
 foo int ;
 } ;
 func foo ( ) int . int . int { false ;
 } ;
 val foo int = ~ true ;
 val foo int . int . int = ! ! ! - ~ 123 ( ) << - ~ ! ! ~ true ;
 func foo ( ) int { val foo int . int . int = - true ( ) ;
 } ;
 var foo int = - ! ( ( ~ "bar" + true . foo and 123 ( ) or - - - foo << ~ foo ) <= - ~ ~ false >> true == "bar" % ~ false ) % foo ;
 func foo ( foo int . int . int ) int { for var foo int = "bar" ( ! - ~ - ~ 123 , ! "bar" ) or ! ( foo . foo ) + ! - - ( foo [ - foo or true ] >= ! ! foo ) / foo ;
 ~ ( - ! ~ - ~ foo * 123 != - ! ~ ! "bar" [ ~ ( true | false * ! ! - - - ~ - "bar" [ - ! ~ 123 ( false , ! 123 ) << true or foo ] ) ] ) . foo ;
 ! "bar" [ ~ true | ~ ! 123 & - ( ! - ( "bar" % "bar" or true and "bar" ( true , - true ) > ! ( - ~ ~ false [ ( ~ - true != ~ 123 ) ] > ~ "bar" ) ) ) ] { for val foo int . int . int = ~ foo ;
 - ~ true . foo - 123 ( ~ "bar" , true ( ) and foo + foo ) ;
 ! ~ 123 [ - ! - ~ 123 and 123 ( "bar" , "bar" ) > ( false ( 123 ( ! foo , foo ) << ~ 123 , - "bar" or - true << - ! ! foo ) ) / false ] < foo += foo + - ! ! - "bar" { for var foo int = true ;
 foo + ( 123 != - ! ! false ( - true < false , "bar" << false != ! ! ~ ! - ( ~ ( 123 == ! foo and ! - ! - true >> ~ false ) ) ) ) ( false or false , - ~ "bar" . foo ) >> ~ true - - ! ! ! - ! ! - foo ;
 ! 123 >= - 123 << ~ false or true = foo ( ! - ~ "bar" == ! - ~ "bar" and ~ true , ~ ~ - ! ~ foo ) > - ! "bar" . foo | ! foo { true ( ~ ! "bar" ( ) , - - false ) / ( "bar" and - - false ( true , ( foo ) or 123 ( "bar" , ! 123 ) > "bar" ) ^ "bar" ) %= false ;
 } ;
 } ;
 } ;
 } ;
 class foo { func foo ( foo int , foo int , foo int . int . int , foo int ) int . int { 123 ( ) and "bar" != false = "bar" . foo << false ;
 } ;
 } ;
 func foo ( ) int . int { "bar" [ ! ~ foo ] < 123 [ ~ - ~ ~ - - - ! ( - ! 123 . foo ) . foo ] ;
 } ;
 func foo ( ) int . int . int { var foo int = ~ ! ( - - ! ~ ~ true and true [ - ( ( false * 123 [ ~ ~ ~ - false ( ) * ~ true ( ) ] ) / ~ ~ - false | ~ ! - foo . foo % 123 ) ] ) or ~ - 123 ;
 } ;
 class foo { foo int ;
 func foo ( ) int . int . int { if ! - ( 123 ) { for val foo int = "bar" ;
 ! false ;
 - foo or false & false /= ! "bar" [ 123 ] ^ ! foo { var foo int = ! ( - "bar" != ! true . foo ) ;
 } ;
 } else { ! ! ( ~ true ( ) ) and ( foo ) ;
 } ;
 } ;
 foo int . int . int ;
 foo int ;
 foo int ;
 func foo ( foo int , foo int . int . int ) int { for val foo int = - ! false << ! "bar" ( ) == 123 ;
 false ^ ! ~ false ( 123 != - ~ ( true == foo ) , ! foo ) ;
 ~ ! - ! ! 123 . foo == 123 [ ~ true ( ~ - foo * foo , ( - true or ~ 123 ) ) or - foo ] *= - foo . foo { if - ! foo { ~ foo << ! - true | ! ( foo < ! - true . foo ) and foo ( ) % "bar" ++ ;
 } else { var foo int = ! ~ ( true . foo ) ;
 } ;
 } ;
 } ;
 func foo ( foo int . int , foo int , foo int , foo int ) int . int { var foo int = - "bar" ;
 } ;
 } ;
 func foo ( foo int ) int { for val foo int . int = ! - 123 != ~ false ;
 true ^ - ~ 123 ;
 123 % ! true { if ~ false { if false { if false { ~ false **= ~ ( ~ 123 ) or - 123 ;
 } else { if ( foo ( "bar" , "bar" ) ) { if foo { for val foo int = ~ foo . foo <= ~ - ! ( ! ~ ! false - foo / ( ~ - - true | ! false and ~ ~ 123 ( ) ) >> false ) . foo ;
 ! ~ ( ! "bar" + foo ( ~ ~ ~ - ~ ! 123 * foo - ( ~ "bar" ) . foo , - - - - 123 * - "bar" ) > ~ false ) . foo ;
 ! ! false - - true / - ! ~ ~ - ! ! false -- { val foo int . int . int = foo >> ~ ( - foo . foo ) != 123 | - true << - true ;
 } ;
 } else { ( false or false [ ! 123 and false ( ) * foo ] / ~ ( ~ "bar" and - ( false % ~ ! foo - ~ ~ false ) ( ~ 123 [ - - 123 ] == ~ "bar" , false [ ~ ! ! "bar" [ ! false and ~ foo == false [ ~ false ] ] or true [ ~ 123 and ~ ~ - true ] and ! false . foo - - ! ~ ! ( 123 ( ) ) ] ) ) [ "bar" . foo or - foo ] ) ( ) or foo ^ ( ~ - true or foo . foo ) . foo <= true >> - true -- ;
 } ;
 } else { for val foo int = - - ( ~ - false ( ~ ! 123 , true ) >> ! 123 ) ^ - ( 123 ) << foo or - 123 . foo ;
 ! ~ ! true or true and true <= 123 ;
 123 * true ^ false **= - ~ false == 123 >> - foo ( ) { ~ ~ foo . foo or ! "bar" << "bar" ;
 } ;
 } ;
 } ;
 } else { if ! foo { var foo int = 123 % - 123 or - ! ! false [ "bar" . foo - 123 [ - false & - - - true ] / "bar" ( ) >= ~ "bar" [ false + ~ "bar" . foo >> false [ ( true . foo ) . foo or ! - - 123 * true ] ] ] == - ~ ! ! false ;
 } else { ! foo | - foo ;
 } ;
 } ;
 } else { true << ~ - foo ( 123 >= false . foo , ~ ! - ! foo ) -- ;
 } ;
 } ;
 } ;
 class foo { foo int ;
 func foo ( ) int { for val foo int = ! ! foo [ ( "bar" ) [ foo and true ] + ! true ] ;
 ( true ) . foo ;
 false /= "bar" % - ~ - false { ~ ( ~ ~ 123 ) << foo % "bar" . foo or "bar" ;
 } ;
 } ;
 foo int . int . int ;
 } ;
 func foo ( foo int , foo int , foo int ) int { var foo int = - - foo >> false and foo ( foo , foo >> ~ - ~ - true <= ( true [ 123 | ! ~ ( 123 ) & ~ ~ foo << ~ - foo . foo / - 123 . foo ^ foo ( ) ] ) << false + - false ) ;
 } ;
 func foo ( ) int . int . int { var foo int = - "bar" << false or 123 . foo >> ! ( true or ~ ! "bar" . foo << ~ ~ ! foo + foo ) ;
 } ;
 val foo int . int . int = - - "bar" ;
 func foo ( ) int { if ! ( 123 and ( ! "bar" ) | - - ! - "bar" ) ^ true { ( ~ - - - foo << true . foo * ! ~ true ) ( ) == - ( foo ( "bar" , - "bar" and - - true . foo | 123 ) % ~ - false . foo ) . foo ;
 } else { var foo int . int = false . foo ;
 } ;
 } ;
 func foo ( foo int , foo int . int . int , foo int . int , foo int ) int { var foo int = "bar" == - ! "bar" or ~ false . foo & ~ - ( foo or 123 ) [ true | ! false . foo and - ( foo != ( ! "bar" | ( - false * true ) . foo & "bar" and ~ ~ ~ ( ! ( ! "bar" ) ( ) and ~ - ~ ! ~ "bar" < ! ~ - false ) != "bar" ( ) % false ) & - "bar" ) . foo or 123 < ~ ~ ! true * ~ 123 ^ - "bar" ] <= ! 123 ;
 } ;
 val foo int = ! ~ false & - 123 != ( "bar" or ( ! ! ( - ( ( ~ - 123 > false % 123 ) ) ) ^ ! ~ "bar" [ false and ! - 123 ] and foo ) + true % ! foo >= ! 123 % ! foo and "bar" << 123 [ ! - ! 123 [ ! true [ ~ "bar" . foo or ! - 123 ] ] and "bar" | false == ! true . foo ] + true ) ;
 var foo int = - ! - - false [ true ( ) and ( ! foo ) ] and - false ;
 class foo { foo int . int . int ;
 func foo ( foo int , foo int . int . int ) int . int { ! - 123 or - ~ ~ true /= "bar" ( ) / 123 ( ) >= - false ;
 } ;
 func foo ( ) int { val foo int = true ;
 } ;
 foo int ;
 foo int ;
 func foo ( ) int { val foo int = ( ( 123 == 123 . foo or true <= ! ! ! "bar" ) ( ~ ~ true / - ~ "bar" or ! true [ ~ ~ ! ~ - false . foo ] >> foo ( ! - ~ false and - foo < ~ - true , ~ - ( false . foo ) - - ( foo ( 123 [ - - 123 [ ~ - "bar" ( ) >> ! ( foo & - "bar" ) ] ] , ~ true [ 123 ( ) << - true ( 123 + foo , "bar" ) <= ! true ( ) != ( ! - - 123 ) ] % 123 << ! - "bar" ( ) or foo ) ^ ( - - ~ false ( ! 123 [ ! 123 ] and ( 123 ) [ - - - 123 and false ] >> true , - ~ ~ ~ ~ 123 % - 123 << ( - - ! "bar" ) . foo ) ) . foo or "bar" ( ) / ! ~ - foo ) < true [ ~ ~ 123 and ~ ! 123 ] ) ^ - ! false [ ~ ~ false ] and ~ true , "bar" ( ) or - ( - - ! 123 [ - false and ~ - 123 / ~ foo . foo >= ~ true ] % ! 123 | - false [ ( ~ foo & 123 ^ "bar" [ ! true ] >= ~ false [ true <= ( - foo . foo ) ] ) and ! ! ! - ~ - "bar" [ ~ true . foo ] ] % false or 123 [ - ~ ! ( true + ! ~ ~ 123 * 123 << ! - - foo + "bar" ( ! ( ( foo << ! true or - false . foo - ~ ~ ! ! ! - - - false >= ~ true >> ! "bar" ( foo or - foo , - foo [ ~ ~ ! ~ ~ 123 ] ^ ! ! ! false [ ! "bar" ] == ~ ( 123 . foo and foo [ ! foo ] ) | 123 ) ) [ ! false ( 123 , - ~ - ( "bar" [ ~ true % - ~ ~ ! - false and ! ~ - true ^ 123 ] ) ( foo , "bar" != - "bar" > ~ - - true ) <= "bar" ) ] ) . foo , ! false ( ) and ~ 123 ) ) ] * - false <= - foo ) ) or false ( ) ) [ 123 or ! - 123 & "bar" [ foo >= true ] ] >> ~ 123 or - ~ ! ! foo ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) int . int { for var foo int . int = ~ foo ( foo [ 123 ] <= - foo , ! ~ ~ ~ 123 / foo or ! "bar" [ true ] ) ^ foo * true and - ~ false ;
 ( foo <= false ^ "bar" ) ;
 ! - ! "bar" -- { for var foo int = - ! 123 ;
 123 [ ~ - ~ ~ ! foo % - ~ - "bar" and foo . foo ] ;
 "bar" / "bar" { val foo int = - ~ ~ ~ ~ ~ ~ foo * false [ ~ ! ~ ( 123 ) ] or ~ ~ foo - "bar" ;
 } ;
 } ;
 } ;
 class foo { foo int . int ;
 foo int . int ;
 func foo ( foo int . int . int , foo int , foo int . int . int , foo int ) int { var foo int = foo * foo [ - true ] ;
 } ;
 foo int . int . int ;
 func foo ( foo int , foo int , foo int ) int { val foo int = true . foo ;
 } ;
 func foo ( foo int ) int { for var foo int = 123 != true and foo ;
 false <= - ( 123 | ~ "bar" [ 123 == "bar" and 123 . foo ] ) & ( ( ~ - true [ - "bar" or ( ( true >> false ) [ ~ ! ! - true ] ) ] ) ) or ! false . foo ;
 ~ - ! "bar" % foo [ foo ] ++ { val foo int = ! ~ ~ "bar" ( ~ foo , ( - ! - - 123 >= ! ~ "bar" ) ) > foo ;
 } ;
 } ;
 foo int ;
 func foo ( ) int { for var foo int . int . int = 123 >= true ;
 ( 123 . foo and foo - ~ "bar" ) [ false . foo ] >> ( false or ~ ! ! true ) ;
 ~ ! foo -= ! ! ~ "bar" . foo { false ;
 } ;
 } ;
 func foo ( foo int , foo int . int . int , foo int . int , foo int . int , foo int . int ) int . int { ~ true >> - true and 123 ( ) != 123 ;
 } ;
 } ;
 func foo ( foo int , foo int . int . int , foo int , foo int . int . int , foo int ) int { ! true . foo or ( ! foo ) != - true >> - ! ~ 123 ;
 } ;
 class foo { foo int ;
 func foo ( foo int . int , foo int , foo int ) int { val foo int . int = ! ( foo ) ;
 } ;
 func foo ( foo int ) int { - - ( ~ - foo or ~ - - "bar" + - ! ( "bar" ) [ true == - 123 ( foo == 123 [ foo <= foo ^ - foo ( true ( foo . foo / false . foo , ( ~ ~ true and "bar" ) and ( 123 ) * ! ! foo or ~ "bar" [ "bar" ] ) >> - ~ 123 [ - ! - ~ foo . foo / ~ "bar" | ~ ~ - 123 <= "bar" >> false ( ) ] ^ true . foo % "bar" or true >> true & true . foo , ! ~ ( foo [ ! ( ~ "bar" ) . foo < ! ~ ! "bar" ] ) ( ) ) ] , ! true ) <= - ( ~ ! true or ( ! 123 ) ) + false ( ) or ! ! 123 ] ) ;
 } ;
 foo int ;
 func foo ( foo int , foo int . int , foo int ) int . int . int { ! ~ - ! false and ( false % - ~ ! ~ ~ foo - ( ! ! - ! - "bar" . foo or - foo + 123 ) ) >= foo . foo == foo ;
 } ;
 func foo ( ) int { true * "bar" ++ ;
 } ;
 func foo ( ) int { for val foo int = "bar" <= - - ( ( ( foo ) / foo ) [ ! ( foo >> foo or ~ ~ ! "bar" ) * 123 and ~ ~ ~ ! ~ foo >> - false ] >= foo ) ( false or ! ! true . foo - ~ "bar" [ "bar" != "bar" ] , 123 | ! - ( true ) or - - ! true ( - ! ~ "bar" , "bar" or - ! - ! - true ) ) and true ;
 ! true - - ~ false ( 123 . foo and foo . foo * 123 , foo ) % true [ foo ] << ! 123 ( - ! foo != ~ ~ false , false ) ;
 ~ ! ( ~ foo [ ! 123 . foo ^ - - ~ false [ foo [ - - - - ( false ( ( ~ ! ! foo ) , true == "bar" ) & - ! ~ ! ! false . foo ) . foo >> ~ "bar" ] ] ] <= ~ - foo == ! ! "bar" ) [ - false ( - false . foo , ~ - ~ "bar" != "bar" ) or true / - - "bar" + 123 ] = ~ ! - false { val foo int = true <= true ;
 } ;
 } ;
 foo int ;
 } ;
 var foo int . int = - ! - true != 123 . foo ;
 val foo int . int = false >> ( 123 ) ;
 val foo int = ~ ~ true . foo or true ;
 func foo ( ) int { if ~ ! ! - ~ ! ~ ! ~ false . foo { val foo int = ! false and ( ! "bar" ) ( ) / "bar" >> true or - false ( ~ false ( true , ! true >= false ) and false ( ~ - 123 [ ! ! ! foo and - ! foo ] , ! ( false ( ) ) & foo ) / ( foo % foo [ 123 and "bar" + "bar" . foo ] == - foo ^ - false ) ^ ~ foo , true or ~ false . foo == - - ( - ! 123 [ - true ] ) . foo ) ;
 } else { if - ! - ! - - - 123 { for val foo int . int . int = - ( - ~ "bar" . foo ) . foo >> - 123 or ! ~ false . foo ;
 ~ ~ - ~ - true . foo - ~ foo ( ) != ! "bar" and ( ( ! ~ foo ) ) >> ~ "bar" ;
 ! - ! true and false ( ) { var foo int = ! - 123 ( - true [ "bar" . foo << true ] , 123 . foo ) or 123 . foo and foo ;
 } ;
 } else { for val foo int = - ! true and true . foo ;
 - ! - ~ ! true . foo << true ;
 false & true < - 123 *= ~ "bar" ( ) { ! ~ foo or ! ( 123 ( ) ) - - - ! "bar" ;
 } ;
 } ;
 } ;
 } ;
 
