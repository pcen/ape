module foo ;
 class foo { foo int . int ;
 foo int ;
 } ;
 foo : : ~ foo [ ~ ~ ! false ( ~ ~ - [ true . foo ] + 123 and foo , - ! false , foo ( ~ - true . foo and - true != 123 , ! ( ( - "bar" << ~ [ 123 , ( - - foo & ! ! ( ~ 123 ) ( ! - ~ ~ ~ false . foo % ! ! 123 and [ ] ) ) or - ~ true [ ! true ] , foo ] * false ) ) % 123 , false ) , ~ - foo << - - ~ ~ false . foo , ! ~ foo == "bar" , - foo ) or foo ] >= foo ;
 class foo { foo int . int ;
 foo int ;
 foo int . int ;
 func foo ( ) int { 123 or ( 123 ) += ~ ~ 123 ( ~ - [ ] << true , ~ - ~ true , ~ 123 or [ ~ [ - - ! ( ~ true << - true ) , ! ~ ~ - "bar" , ~ ! ! 123 , true and ~ 123 ] , 123 , ~ - ! ! 123 , "bar" , "bar" or ! ! [ ~ true , ! ~ - true , true <= ~ ~ "bar" ] ] | 123 << ~ - - true , ! [ 123 > [ ~ ~ ~ ( false ) [ "bar" ( - foo , - ! true . foo ^ - - foo , - ~ - ( - - false ) , ( foo ) ( ) ) ] , ~ foo , ~ ! ! 123 , ! 123 >> ! 123 , ~ foo ] , ~ true or false and foo [ foo + - ~ false and - ! 123 ( ! 123 [ ! foo ] , - [ ] or foo ) ] , [ ] , - false % true , ~ ! ~ false , ! - - false <= - ! foo ] , - ~ - ! "bar" ) ;
 } ;
 } ;
 class foo { foo int . int . int ;
 foo int ;
 func foo ( ) int { foo : int = ! ! ! foo ;
 } ;
 func foo ( ) int { - false -- ;
 } ;
 } ;
 class foo { func foo ( ) int { ~ ! ~ ~ ~ ~ ~ [ ] and foo ++ ;
 } ;
 foo int ;
 foo int ;
 foo int . int . int ;
 } ;
 class foo { func foo ( foo int , foo int . int . int , foo int , foo int ) int { for foo : : ! - false ;
 foo / foo and ! ! ~ ! ~ foo == false >= ~ ( ( - true ) and - foo != "bar" ) ( false , ! "bar" , ~ 123 ) or "bar" ;
 - ~ - ( "bar" ) { } ;
 } ;
 func foo ( foo int . int , foo int , foo int , foo int ) int . int . int { } ;
 func foo ( ) int . int { ! ( - ! false ) ;
 } ;
 foo int ;
 } ;
 foo : : "bar" * ~ "bar" ;
 class foo { foo int . int . int ;
 foo int ;
 foo int . int ;
 foo int ;
 } ;
 foo : : "bar" ;
 func foo ( ) int { foo : = "bar" <= ~ "bar" ;
 } ;
 func foo ( foo int , foo int . int . int , foo int , foo int ) int . int { if ~ 123 ( ) { } else { if ~ true >> "bar" { } else { foo : int . int . int : foo ;
 } ;
 } ;
 } ;
 func foo ( ) int { } ;
 func foo ( ) int { } ;
 func foo ( ) int . int . int { } ;
 foo : int : [ ] ;
 foo : int . int . int = ~ ( ~ ~ ! 123 ) == [ ] or ~ ! ~ ~ ! ~ false != "bar" >> "bar" ;
 foo : : ! ! - false ;
 foo : : true ;
 class foo { foo int ;
 foo int . int . int ;
 foo int ;
 foo int . int . int ;
 func foo ( foo int , foo int . int , foo int , foo int . int . int , foo int ) int { if 123 & true { foo : int . int . int = "bar" ( ) or true ;
 } else { foo /= - - ~ true [ "bar" ] or foo ;
 } ;
 } ;
 } ;
 class foo { } ;
 foo : = ! true >> - ( - false [ - ~ - ( - 123 ) and false ] or - true ) ;
 class foo { foo int . int ;
 func foo ( foo int , foo int . int . int , foo int . int . int , foo int . int , foo int ) int { for foo : int = ~ 123 and ~ 123 ;
 ! ~ - "bar" ;
 foo = ( ! ! [ ] ) or - ( ~ false ) { foo : int = ! ~ "bar" < ~ foo or ~ false ;
 } ;
 } ;
 func foo ( ) int { } ;
 foo int . int . int ;
 foo int . int ;
 } ;
 class foo { func foo ( foo int , foo int . int , foo int . int , foo int , foo int ) int { } ;
 foo int ;
 func foo ( ) int . int . int { } ;
 foo int ;
 } ;
 class foo { func foo ( foo int , foo int , foo int , foo int , foo int ) int . int . int { foo : = foo ;
 } ;
 func foo ( ) int . int . int { } ;
 foo int ;
 func foo ( foo int , foo int , foo int . int . int , foo int , foo int . int . int ) int { ( ! - ~ false and ~ [ ] ( ) == 123 ) ;
 } ;
 func foo ( ) int . int . int { foo : = "bar" ;
 } ;
 } ;
 class foo { foo int ;
 foo int ;
 foo int ;
 foo int ;
 } ;
 func foo ( foo int , foo int , foo int . int . int , foo int , foo int ) int { for foo : : - - ( foo ) or 123 and ~ [ ] ;
 - 123 ;
 ! ! true and false %= foo { } ;
 } ;
 class foo { } ;
 class foo { func foo ( ) int . int { } ;
 foo int . int . int ;
 } ;
 class foo { } ;
 foo : : ~ ~ [ ! [ ~ false ( ) <= - ~ "bar" and ~ ~ ~ ! - ( 123 % false ) , "bar" , false , "bar" != true [ "bar" ] < true , - [ foo , ! true or ~ - ! 123 [ - ! 123 ] & ~ 123 [ ~ 123 ] ] == false or ( - - 123 ) ] . foo , foo or "bar" , [ ] , - ! false % foo , - true != ! ! foo [ ( "bar" > ! 123 * foo . foo ) and - false & false ] ^ [ [ ] << ~ [ ] , false & true , ! - true , ! ~ foo ] ] ;
 func foo ( ) int { ~ [ true . foo , ( ! ~ ~ - foo ) > ( true ) + 123 [ ~ ( ( false << - [ ~ true [ "bar" ] , "bar" + foo or 123 ] or ! [ ~ ~ ~ ! - ~ ( ! ~ false ) , ~ ~ - ! true , ~ ! ~ - ~ [ ] ] ) ) ] , - - ~ false < ~ "bar" . foo , ! - [ "bar" >> true , ! - ~ - ! - false , - - - - 123 ] , true or ~ [ ] . foo ] ;
 } ;
 
