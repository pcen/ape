module foo ;
 func foo ( ) int . int { for var foo int . int = ! false ;
 ( ~ ! "bar" ) ( ~ true <= ! "bar" ^ true , ! ! ! "bar" ) ;
 - "bar" { - foo *= - ~ ~ ( ! ! - - ~ foo - true ) + - foo ;
 } ;
 } ;
 class foo { func foo ( foo int . int . int , foo int , foo int , foo int . int ) int { ( - ! ! 123 ) ( ) -= - ! "bar" . foo ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) int { ! - - foo ( - false & ! ! 123 . foo , foo [ - 123 ] ) **= ! ( true ) / ( ~ ~ false ) ;
 } ;
 foo int ;
 func foo ( foo int . int . int , foo int , foo int . int . int , foo int . int . int , foo int , foo int ) int { 123 -- ;
 } ;
 foo int ;
 foo int ;
 func foo ( foo int , foo int . int . int , foo int , foo int , foo int . int , foo int . int . int ) int { 123 < false ++ ;
 } ;
 func foo ( foo int , foo int , foo int ) int { for val foo int = foo ^ false ;
 true ;
 ~ - "bar" - false . foo -- { 123 . foo -- ;
 } ;
 } ;
 func foo ( ) int . int { for val foo int = false ;
 ( "bar" [ ! ! ~ 123 ] ) ( - false == ! 123 / ~ ( ! ~ ! foo >= - ~ true ( 123 <= ~ ~ true . foo , ~ ~ ! ! false ) ) , ! - ~ 123 ) ;
 ~ false . foo { if ! foo [ - ( false ) ] != - ~ ~ ( false ) { "bar" . foo <= ~ - ~ - "bar" [ ~ ( true <= foo . foo ) ] += ~ "bar" ;
 } else { ! ! 123 . foo != 123 / ! false += true <= foo / ( ( "bar" ) . foo ) != ~ ~ "bar" ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int . int . int , foo int , foo int . int . int , foo int ) int { - false ++ ;
 } ;
 val foo int = ~ foo >= ! "bar" == ! ~ true ;
 var foo int = true ;
 var foo int = foo . foo ;
 func foo ( foo int , foo int . int . int , foo int . int . int , foo int ) int { - true [ false . foo | 123 ( 123 [ 123 & - foo ] / - ( ( "bar" [ 123 ] ) ) [ - true ] , true ( false ^ 123 & "bar" ( ) , foo [ true . foo ] & 123 + ! - ! ~ 123 ) ) ] *= ~ true . foo ;
 } ;
 class foo { func foo ( foo int . int . int , foo int . int . int , foo int , foo int , foo int ) int { ! ~ true . foo ++ ;
 } ;
 foo int . int ;
 foo int ;
 func foo ( ) int . int . int { foo ( - true , 123 - - ! ~ false ) * 123 ( foo ( ~ ( true + ! ! true ) , 123 . foo ) , ! - foo ) ;
 } ;
 } ;
 func foo ( ) int . int . int { ( "bar" ) ++ ;
 } ;
 val foo int . int = ! 123 ( ) ;
 class foo { foo int ;
 func foo ( ) int { ~ - - true -- ;
 } ;
 foo int ;
 func foo ( ) int { for var foo int = false ;
 ( ! "bar" [ 123 >= "bar" . foo ^ true ] == - 123 ) == ! ~ ! ~ ! - "bar" . foo ;
 ( ! ! ! 123 ) [ ~ ~ ! ( - ! 123 ) ] == "bar" -- { if "bar" . foo > foo { - true [ ! 123 . foo ] = 123 ;
 } else { for var foo int = true ;
 - foo [ - ! ! - ~ "bar" . foo ] > - ! "bar" / false . foo ;
 ~ false ^ "bar" [ 123 <= ! false & ~ ~ - - ! false ] **= ( ! ~ - foo ) [ - foo ] { ~ ! ( ( - ! - - true != ~ ( foo [ ~ ~ 123 > true == "bar" ] ) <= ~ ~ true + 123 ) . foo ) * ( ! - false ) ( ) = false ;
 } ;
 } ;
 } ;
 } ;
 func foo ( ) int { foo ++ ;
 } ;
 func foo ( foo int . int . int , foo int , foo int , foo int , foo int ) int . int { for val foo int = ! foo . foo ;
 - foo [ ! true ] ;
 foo ( ! "bar" | false , ! ( ! foo [ - ! true . foo ] ) ) += 123 & "bar" { 123 **= 123 ( 123 | - ( 123 * - 123 ( ) ) >= false / - foo , ~ - - ( ~ ~ true ) ( ) ) ;
 } ;
 } ;
 foo int . int ;
 func foo ( foo int , foo int , foo int . int , foo int , foo int . int . int ) int { for val foo int = ~ ( - ~ - "bar" ) ;
 - - - false >= - ( foo ) . foo ;
 ! true > ! 123 == ~ true ( ~ false == 123 [ "bar" ] , ( ! - ~ "bar" ) ( ) ) -= ! ~ "bar" >= "bar" ( ) { if ! ! 123 ^ ( "bar" ) { if true { if "bar" { for var foo int . int = - "bar" ;
 ! ( - ( ~ - - "bar" ) ) ;
 foo -- { for var foo int = ~ false * "bar" ( 123 , foo ) ;
 ! ! - true & ( ( 123 / ~ true ) [ - foo ( foo [ foo ( ) ] & ! - - ! - ! "bar" < ~ true , false ) ] ) ;
 ! "bar" += ~ true { ! ( 123 . foo ) & - 123 ++ ;
 } ;
 } ;
 } else { true < true ;
 } ;
 } else { for var foo int . int . int = ( ~ ~ 123 & 123 [ 123 ] ) ;
 true & true ;
 ~ true { - false | ~ ~ true *= ~ ! 123 ;
 } ;
 } ;
 } else { ~ false ;
 } ;
 } ;
 } ;
 } ;
 class foo { foo int . int . int ;
 foo int . int . int ;
 foo int ;
 foo int ;
 func foo ( foo int , foo int , foo int , foo int ) int . int . int { if "bar" [ ~ true ] { ! ( - - - - ~ - 123 ( ( - ~ true ( ) ) , ~ foo ^ ( false . foo ) ) ) - true ( ) ;
 } else { for var foo int . int . int = ~ - ~ ! ! - ( 123 < foo * "bar" [ false != ~ foo [ ~ ~ ~ ~ ~ ! foo ] <= "bar" / foo ] == - false . foo >= ~ ( ! true ) ( ) ) != foo [ ! 123 ] / - true . foo ;
 ( 123 ) ;
 - - ! - "bar" / - ~ - ( - ~ - ~ - foo ) ( ) { for var foo int = - - ~ foo ;
 - ~ ~ ~ - 123 [ ! foo == false ] * - true ;
 foo { if ! 123 == - ! true { ( true [ foo ] ) [ ( 123 . foo ) [ false ] ] ^ ~ ! ! false > - false ++ ;
 } else { ~ true . foo ++ ;
 } ;
 } ;
 } ;
 } ;
 } ;
 foo int ;
 foo int ;
 func foo ( ) int { false ( 123 ( - ~ false , ~ ~ false + ~ - foo ( foo . foo < - ( 123 [ true . foo ] * ~ - false ) [ false ] * ( ! - - true == "bar" ) , - false [ ! 123 ( ~ ~ true & ! - ~ - ! ! ~ 123 [ "bar" ] , ( ~ ! - true [ - false ] / ! ~ ! 123 . foo ) ) ] <= - ! ! ( "bar" ) [ ! ! ( ! false | ~ - ! ( true ) ) ] + - - foo ) ) , ! foo ( ~ 123 . foo , ~ false <= false ) ) -= "bar" ;
 } ;
 func foo ( foo int , foo int . int , foo int , foo int , foo int . int . int ) int . int . int { "bar" ++ ;
 } ;
 func foo ( ) int . int { ( - ( true ) ) ( ) ;
 } ;
 } ;
 class foo { foo int . int ;
 foo int . int ;
 func foo ( foo int , foo int , foo int . int ) int { 123 . foo ++ ;
 } ;
 func foo ( ) int { - - true *= foo ;
 } ;
 func foo ( ) int . int { false -- ;
 } ;
 func foo ( foo int . int , foo int . int . int ) int . int . int { if false - ! 123 { for var foo int = "bar" ;
 123 [ foo <= ~ true ( ) != - ! ~ 123 ] ;
 123 /= ! false != foo { for val foo int . int = ~ ! 123 * ! ( - - ( "bar" ) / - ! foo ) ;
 123 [ - - ! foo * - 123 ] ;
 ! ( ! - ! - - ! foo ) ++ { ! - ( foo [ ( - ! - "bar" ) [ ( true ^ ! ( 123 ) ) ( "bar" [ true ] , - ~ 123 == ! ! - ! ( "bar" . foo * false [ ~ "bar" ] ) ) ] / true ] ) -- ;
 } ;
 } ;
 } else { for var foo int = ~ ~ 123 ;
 - false / foo == ~ foo ^ ~ foo / ! ! ~ true ;
 false { ~ - false ;
 } ;
 } ;
 } ;
 foo int ;
 foo int . int ;
 } ;
 func foo ( ) int { false [ 123 ] != - ~ - true + ~ ! - 123 -- ;
 } ;
 func foo ( foo int ) int { false . foo == "bar" [ foo . foo & - ( false ) ] >= ( ( ~ true ) ) /= foo [ "bar" & ~ ( ( ! ~ ( 123 & - ! foo [ true & - ~ false ] ) ) ) ( ) ] == - ~ true < ~ ~ ~ ~ ! ( false ) ;
 } ;
 class foo { func foo ( foo int . int , foo int , foo int , foo int , foo int , foo int ) int { if - foo { for val foo int = ~ ! false ;
 true . foo ;
 ~ "bar" = - false { ! false = ~ foo ;
 } ;
 } else { for var foo int = ! ~ false != "bar" * ( false ) | ~ false [ 123 ] ;
 true ^ ( ! foo / "bar" . foo < ! ! "bar" ) . foo * - 123 ;
 "bar" * ~ - "bar" != ! - ! - "bar" -- { ( true ^ foo ) [ ~ ~ "bar" > ~ ! - ! ~ - ~ ~ ( ! ! ! true ) ( - true , ! - ! - "bar" [ ~ ~ "bar" ] == ~ foo ( ) ) ] & ~ ~ 123 = true ;
 } ;
 } ;
 } ;
 } ;
 val foo int = ( ( ( 123 & true . foo ) ( ! ! 123 / - "bar" , "bar" ( ! foo , - ( ~ true & ~ ~ true ) ) ) ) ) ;
 func foo ( foo int , foo int . int . int , foo int ) int { - - false ;
 } ;
 val foo int . int = ! - - foo ;
 func foo ( ) int { true . foo ;
 } ;
 func foo ( ) int . int { for var foo int . int . int = - ~ - ! "bar" ;
 ( true ( ) ) ( ) / "bar" ;
 - "bar" { foo != - ! true += ! ( ( - - ~ 123 - ~ ! 123 . foo ) ) == - ! ~ ~ true ;
 } ;
 } ;
 class foo { func foo ( foo int . int , foo int . int . int , foo int . int . int ) int . int { if false & "bar" ( - ! "bar" / "bar" . foo ^ foo != foo , ! 123 ) != ~ 123 { if ! ( ! false . foo ) & foo | ! ~ ~ ~ true { if - true { for var foo int = "bar" [ ( true ) / ! ( "bar" ) ] ;
 false [ - ~ 123 [ - false == 123 ] ] ;
 ! false ( ! true , ! foo > ( ~ false [ "bar" ] >= foo ( ) ) ) / true **= ~ ! "bar" . foo <= true ( ( ! 123 . foo ) , foo [ ~ - true ( 123 . foo < foo , - 123 ) ] ) / true { for var foo int . int = "bar" ;
 false ( ) ;
 foo < - - false ++ { ~ - true *= - ! - true ^ 123 ( ) ;
 } ;
 } ;
 } else { for var foo int . int . int = - ! false ;
 ~ "bar" ;
 ! ! false [ false [ ! ~ true <= true ] ] ++ { for var foo int = ~ - ~ ! ! - ~ ~ - false ;
 foo ;
 true -- { if 123 >= 123 ( ) { false . foo ++ ;
 } else { if - "bar" & - ! - - ! false { 123 ;
 } else { if false ( ) * ( foo ) [ ~ - ( ! - ~ foo ) ] | ~ foo { if true ^ ( false != false ) { ~ ( "bar" ) ++ ;
 } else { ~ foo [ ( true ) [ "bar" ] ] ++ ;
 } ;
 } else { ~ true -- ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { if - - - ~ "bar" ( ) { if foo { false = ! foo ;
 } else { ! true ;
 } ;
 } else { for val foo int = 123 < ~ ~ - 123 == ~ "bar" . foo ;
 123 . foo | - 123 ;
 ! - "bar" += ! foo [ ~ ! - ! foo ] { if ( ~ false ) [ false ] { if 123 | foo . foo != ( - ! "bar" & ! 123 ) { if ( foo . foo ) ( "bar" , - ~ true ( false [ ! 123 == ! - ~ false ( ) <= ! "bar" ( ) ] , ( 123 ( false & - 123 , ~ false ) ) < ( - foo [ true ] & 123 ) ) ) / - ~ ~ "bar" { if 123 { if 123 { ( "bar" & ~ - - foo ) ( ( foo > "bar" ( ) ) . foo , ~ ! ! ~ ~ ~ ! ~ ( 123 < ! - "bar" - ~ true [ false ] & foo ) ) ;
 } else { for var foo int = ( ! ! false + ~ ! ! false < ! true [ ~ ~ ! - ( ~ ~ ! ! - - ! - ( ( 123 [ ~ - - ! ! - "bar" . foo ] ) != ! ~ true < ! ~ 123 ) ) ] ) [ ! "bar" < - foo [ ~ ! false ] ] != ( ( ~ foo < ~ - ! false ) ) ;
 ~ ! ! ~ "bar" [ false ] ;
 ~ - ! ~ - ! true * - 123 { if 123 { for val foo int = true ;
 ! ~ true + ! true [ "bar" ( ) ] ;
 ! - ! ( - ( ( "bar" & ! false ) ) / - 123 ) { "bar" ( ) = foo ;
 } ;
 } else { if false { ! ~ 123 **= ~ - ~ ~ - foo ( ) == - ( true ) ;
 } else { for val foo int = "bar" [ 123 ] ;
 - 123 ;
 ~ "bar" -- { for var foo int = ! 123 ;
 - - - - "bar" ;
 - ! - ( foo ( "bar" ( ) > true , ( "bar" ) ( true [ ~ "bar" ] != "bar" , foo ) ) ) ( false / - false != ~ ! foo ^ ~ ~ foo ( - ~ foo , false [ - true & true . foo ] ) , ! ! - true == ~ ~ foo ) -- { true ^ 123 **= - false ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { ( ~ ~ ( ! - ( "bar" ) ) ) + ~ ~ "bar" += - "bar" ;
 } ;
 } else { "bar" . foo == ! ( foo ( true * foo - true , - ~ "bar" ) ) = false > false ;
 } ;
 } else { ! - ~ true <= ~ - ~ - "bar" ;
 } ;
 } else { - ~ foo ;
 } ;
 } ;
 } ;
 } ;
 } else { if ~ ~ "bar" - false { false ( ) -- ;
 } else { for val foo int = 123 ;
 ~ - ~ ! "bar" ;
 true [ ~ ! ( 123 ( ) < ( 123 . foo & "bar" ( true == 123 . foo > ~ ~ ~ "bar" ( - "bar" [ ~ ( ~ ! true . foo ) ] , - - foo [ ~ ~ ( false . foo ) != ~ false + ! 123 ] ) , - - 123 ) ) [ false [ ( foo ) ] ] ) ] ++ { ( - false ) -- ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int ) int { ! 123 -- ;
 } ;
 foo int ;
 foo int ;
 foo int ;
 } ;
 func foo ( foo int . int , foo int . int . int ) int { ! - - foo [ false ( ) ] -= ! ! ! "bar" ;
 } ;
 var foo int . int . int = - false ;
 class foo { func foo ( foo int . int . int , foo int , foo int , foo int , foo int . int , foo int ) int { ~ true = "bar" ;
 } ;
 foo int ;
 foo int ;
 foo int . int . int ;
 func foo ( foo int . int , foo int , foo int , foo int , foo int . int . int , foo int ) int . int . int { "bar" -- ;
 } ;
 } ;
 func foo ( ) int { if ~ ~ - ! ( - 123 | - ! false ) ( "bar" , ! ! "bar" ( ~ "bar" [ ! true [ ~ ~ - - ~ ~ - ~ ! - ! 123 ] ] , false ) ) / - ~ - ! false ( - "bar" [ ! false . foo ] , - "bar" ) { ( 123 ) += foo . foo ;
 } else { - false | "bar" /= true ( ~ ! ~ - 123 | 123 == - ~ ! false , true > foo ) ;
 } ;
 } ;
 class foo { foo int ;
 func foo ( foo int ) int . int { ( - ! "bar" . foo ) [ ! - ~ - "bar" ] ++ ;
 } ;
 foo int ;
 func foo ( foo int . int , foo int . int ) int . int . int { "bar" ( ) ++ ;
 } ;
 foo int ;
 func foo ( ) int { true [ foo ] ++ ;
 } ;
 } ;
 func foo ( ) int . int { false . foo **= "bar" ;
 } ;
 func foo ( ) int { ~ ! - ! ~ false != ! "bar" ;
 } ;
 func foo ( ) int { 123 [ false ] **= 123 * true . foo > ( false . foo ) ;
 } ;
 func foo ( foo int . int . int , foo int . int , foo int . int , foo int , foo int , foo int ) int { for var foo int = ~ ! - - true ;
 123 ;
 ! "bar" . foo = true == true { 123 != - false ( ( false ) ( ) != foo , foo [ true ] ^ ~ "bar" ) ;
 } ;
 } ;
 
