module foo ;
 val foo int . int = false and ! true ;
 var foo int = true - - ! false ;
 var foo int . int . int = false . foo >= ( ~ - ~ ! ~ 123 ) ;
 class foo { foo int ;
 } ;
 class foo { foo int . int ;
 foo int ;
 func foo ( foo int ) int { if ! - ( ~ - - ! - 123 ) { } else { } ;
 } ;
 func foo ( foo int , foo int , foo int . int , foo int ) int . int { for var foo int = ~ ~ ~ ! - foo <= foo << - [ ] ;
 ! "bar" ;
 ! ! ~ - [ ! - - foo [ foo >> - true ] & 123 , ! foo . foo , - ~ ! - foo , ~ false . foo ] -- { var foo int = ! "bar" ;
 } ;
 } ;
 func foo ( foo int , foo int . int . int ) int . int . int { var foo int . int . int = ! true [ ~ ! foo [ 123 [ ~ ( 123 ) ] ] ] == ~ ! true >> ~ ~ - ! - ! - ! "bar" [ ( - [ ] ) ] / false ^ - "bar" or "bar" [ "bar" ] ;
 } ;
 } ;
 func foo ( ) int { } ;
 func foo ( foo int ) int { } ;
 class foo { foo int . int . int ;
 foo int ;
 func foo ( foo int ) int { ~ ! [ - ( ! ! - ( [ - - - ~ ! ( ~ 123 != ~ true ( 123 , ! ~ foo , [ ! [ - ( - foo ) , "bar" , false , "bar" << foo , ~ ! - - ~ ~ false | foo , ! ~ true ] , ~ ! "bar" , ~ ~ ~ true . foo ] , ~ [ ~ false , ~ ( ( ! ! ( "bar" ) and true ) ) == "bar" , - "bar" << foo + - true [ - ~ ~ ~ ~ - true [ "bar" ] ] , foo ] , foo ) ) , ! true , 123 [ ~ ( ~ ~ ~ ( false ( ~ ~ ~ false , [ - ! - ! - ~ 123 , ! ! ~ ~ 123 , - ! ~ foo ] , 123 == foo , foo , - - [ ] ) ) ( ) > ~ foo ) ] + foo , ~ ! [ - false , true >> - true ] ] ) - - ~ true ) + ( ( "bar" ) != [ "bar" , false , 123 . foo , - false , - [ 123 / ( - - foo >> true ) and - ~ ~ ~ foo ( ) , - ! true | ~ [ ] ] , ~ foo [ ~ "bar" + 123 ] ] % ( false ) [ foo ( ) != ~ - ! 123 . foo ] ) and foo , ~ 123 [ - true ] == ~ true , ! false ( ) ] *= "bar" ^ ( foo >> - false ( ) ) ;
 } ;
 } ;
 func foo ( foo int . int . int ) int . int { var foo int . int = ~ ! - false ;
 } ;
 func foo ( foo int , foo int , foo int ) int . int { } ;
 func foo ( foo int , foo int . int , foo int . int . int , foo int ) int { } ;
 class foo { func foo ( ) int . int . int { [ "bar" + ( true and false - 123 ( foo or - - ! - ! - ~ true , [ ~ 123 and ~ [ ! "bar" ] , - ~ [ foo , false . foo > foo , ~ - true ] % - - ~ - true [ ~ [ ] ] , foo , "bar" or ! ! ( - ! "bar" or - ! "bar" ) [ ~ ! 123 > ! ( - ~ false ^ ~ ( ~ foo ) ) ] , ! true >> - foo , 123 == ( ! ! "bar" ) ] or - foo , ! 123 ) ) % true or [ ] ( ) , 123 or 123 | "bar" , - - ~ false ] / - true or - false ( ) >> ! "bar" ;
 } ;
 } ;
 class foo { foo int ;
 func foo ( foo int , foo int . int . int , foo int . int . int , foo int ) int . int . int { } ;
 func foo ( ) int { var foo int = ! true ;
 } ;
 } ;
 val foo int = - ! - ~ foo ;
 val foo int = - foo ;
 func foo ( ) int { } ;
 class foo { } ;
 func foo ( ) int . int . int { } ;
 func foo ( ) int { } ;
 val foo int . int = ~ true ( ! ~ ! 123 , ! - "bar" , ~ true , 123 and ~ 123 , foo ( ) , ~ false . foo ) ;
 func foo ( foo int . int ) int { ! false / false ++ ;
 } ;
 class foo { } ;
 val foo int = foo [ - 123 ] ;
 var foo int . int = ~ ( foo > ~ foo ) and - "bar" ;
 func foo ( foo int , foo int , foo int . int ) int . int { if ( false ) { ! "bar" . foo and ~ 123 or - - ~ 123 [ - false ] | ! ( - ! foo ) ;
 } else { val foo int . int = "bar" ;
 } ;
 } ;
 val foo int = 123 ;
 
