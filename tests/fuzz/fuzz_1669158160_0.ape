module foo ;

class foo {
	func foo ( ) int {
		~ - ~ - ~ ( foo . foo & - ( ~ 123 [ 123 ] / - - ~ - 123 ( ) ) == 123 <= foo ) != - ~ ! foo [ - - true ( - ! - 123 , true == ! "bar" ) ^ ! 123 ] & 123 | ( 123 . foo ) ( ! ~ ( ~ ( ! ! ~ ~ ! ~ - ( - - ! 123 ) / true ) ) ^ foo , ( ! - ! ~ ( - true ) [ foo . foo == ~ ! true . foo ] ) [ - ~ - "bar" + false ] ) **= "bar" | - true ( true , - ~ 123 ) ;
 	} ;
	func foo ( ) int {
		if ~ - "bar" [ ~ ! "bar" == ! - foo / 123 ] { ! ( false ) . foo | true ++ ;
 		} else {
			if true {
				if ( ~ 123 ) [ foo ] < - ~ true == true {
					- ! foo . foo ++ ;
 				} else {
					for val foo int = ~ - 123 ; foo ; 123 + "bar" == ! true { ! - 123 ++ ; } ;
 				} ;
 			} else {
				if "bar" != - - "bar" {
					if ( "bar" ) != ! true {
						for var foo int = ~ - - - ~ 123 ; ~ foo ; ~ ! - 123 == ~ 123 ++ { false / "bar" ; } ;
 					} else {
						true ;
					} ;
				} else {
					for var foo int = ~ ! 123 > true ; foo ; ~ - foo > 123 [ ~ foo ] & ! ! ! "bar" . foo { - ! - ~ ! - foo | ~ ! false . foo <= false ; } ;
 				} ;
 			} ;
 		} ;
	} ;
} ;

 class foo { foo int . int . int ;
 foo int ;
 foo int . int . int ;
 func foo ( ) int . int { for var foo int = foo ;
 ~ foo ( ) ;
 123 { true -= foo ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int . int . int , foo int , foo int ) int { false != ! true ++ ;
 } ;
 func foo ( ) int . int { if - false [ - true <= - ~ true == false / - ~ ( "bar" [ false ] ) ] + true { if - ! false { ! ! - - ~ ( 123 != true ) / true ;
 } else { for var foo int = ~ ! ! ! ~ true ;
 "bar" ;
 - foo == 123 ( foo [ true ( 123 - ! "bar" ( "bar" , ! foo ) * - 123 , ~ false ) - foo ] , ( ~ - ~ - true ) ) >= ! ! - foo -- { ~ ( - ! ( - - ! ~ ( ! foo . foo ) <= false & "bar" ) [ 123 ] ) [ foo ] ;
 } ;
 } ;
 } else { if ! true . foo { foo ++ ;
 } else { ~ 123 = ! true ;
 } ;
 } ;
 } ;
 func foo ( foo int ) int { for var foo int = - "bar" . foo * - ~ "bar" ( ) ;
 ! true [ false ] ;
 false { ( foo ( - ( ~ true ) , foo ) | foo . foo * ! ~ true ) = 123 ^ 123 [ 123 ] ;
 } ;
 } ;
 } ;
 class foo { foo int ;
 foo int ;
 } ;
 val foo int = true ( ~ ( foo > ( false [ ! ~ true ( ~ - - 123 ( true , ! ! foo . foo ) , - false > "bar" . foo ) ] == ! ! - ( ! true ) ) . foo ) ^ 123 ( 123 [ ! false | true ] <= "bar" [ ( ! - foo . foo ) . foo ] , ( ~ - ~ - ! true ) [ ! foo ] * ! false [ 123 [ "bar" ( ) / false ] ] ) < "bar" , - ! true > ! ~ ~ ( ! ! false ) ( ! true , ~ ~ ~ ~ ! foo ( ) ) ) * foo > false ;
 val foo int . int . int = - false [ ! foo ] == "bar" | - ! ( - ! true ^ false . foo / - ( false ( true , ! "bar" - 123 ) ) ) ;
 class foo { func foo ( ) int . int { 123 *= 123 ;
 } ;
 func foo ( ) int { for val foo int = 123 . foo ;
 ~ ~ ( ! true < - ~ "bar" ) ;
 true ( ) * - 123 . foo -- { if ~ foo { false [ ! true == "bar" & - "bar" . foo ] -= ! false ;
 } else { for var foo int = 123 ;
 ! ~ "bar" * false ( ) ;
 ~ false ( true / false , ~ ! - ! ( true [ - ~ ! true ] ) ( - 123 . foo , "bar" + foo ( ) ) ^ ! 123 ) { - ( ( foo & "bar" < true ) ) ( ~ ! foo , foo ) -- ;
 } ;
 } ;
 } ;
 } ;
 func foo ( ) int { ! "bar" = 123 ;
 } ;
 foo int ;
 func foo ( ) int { for val foo int = ~ ! ~ foo . foo ;
 - "bar" - ! "bar" [ ~ ( 123 ) - ~ ! - ~ 123 ] ;
 ! "bar" ++ { if true . foo { true [ - true ] ;
 } else { if ( ! ! ! ( "bar" ^ "bar" >= "bar" ) <= 123 & - ~ ~ true ) - ~ foo . foo { ( - ~ false . foo & ~ false [ ! - ! false [ false ] / ! true ( ) ] ^ 123 ( ) ) | 123 /= 123 . foo ;
 } else { false > foo *= ( "bar" ) ( true , foo != ! false ) ;
 } ;
 } ;
 } ;
 } ;
 func foo ( ) int { if ( - ! foo . foo != ( false ( ) ) ) { if ( foo ) { true = ~ false ( ) ;
 } else { - ~ - 123 **= foo >= ! ~ - ! 123 == 123 ( ) <= ! false ;
 } ;
 } else { if 123 | - false * 123 { ! - "bar" ;
 } else { foo ;
 } ;
 } ;
 } ;
 foo int ;
 } ;
 class foo { func foo ( ) int { 123 . foo >= - 123 . foo == false *= ( - ( - - - true ) ) ;
 } ;
 foo int ;
 func foo ( ) int . int { for val foo int . int . int = - foo == ~ ( ~ 123 ) ( ! "bar" , false . foo - foo . foo != - ~ "bar" ) >= ( ~ - ! - ( true & ~ ~ ! foo ) ) ;
 ( "bar" ) ;
 "bar" -- { for var foo int . int = ~ true ;
 false [ true ] ;
 false != ( ! 123 <= - true * - ~ 123 ) | ! ~ "bar" [ ! foo [ 123 ] ] * "bar" -- { - - ~ - true . foo <= foo + true *= - false ;
 } ;
 } ;
 } ;
 func foo ( ) int { ! ( true . foo == 123 <= ~ 123 ) ++ ;
 } ;
 foo int ;
 func foo ( ) int { if ~ foo / ~ foo . foo != - ~ 123 { for val foo int = ~ ( ~ "bar" . foo ^ ~ 123 == - - "bar" ) . foo ^ ! ! "bar" ;
 ~ false ( - false . foo , false ) ;
 foo * 123 ++ { ~ "bar" [ ( ! ! 123 [ ( ! - ( ~ ! ! - ~ ! ! ! - ~ - "bar" ( ) ) . foo ) ] / ( ~ ~ - foo - foo ) ) ] == ( ! true ( ~ ( - ( ~ true ( ! true , ( ~ ! false / - ! ! ~ false > ~ ~ 123 ) ) ) ) , foo != ! ! false ) ^ "bar" ) [ ( ! - foo ^ true ) [ 123 . foo & true ] ] | foo ;
 } ;
 } else { true ;
 } ;
 } ;
 func foo ( ) int { if ( ! ( ~ ~ ! ~ ~ - ! ( ~ ! - false ) ( "bar" ( ) < - ( - ~ 123 . foo & "bar" . foo ) , - ( foo * - true ) ) ) ) | - ( 123 ) { for val foo int = - - ! - ( ! foo <= 123 [ 123 ( "bar" , - 123 [ 123 - false ( ! ! "bar" [ foo ( ! - - ! ! foo . foo != 123 , true ) >= false [ true ] ^ ( ( 123 - false ) ) ] , ~ ~ foo ) ] ) ] ) ;
 foo != ~ "bar" >= "bar" & - ~ "bar" ;
 ( ~ - 123 ) ^ ( "bar" . foo != ~ - - 123 > ( - true ( ) ) [ "bar" ] ) { ( ! ~ "bar" ) ( ! foo . foo , ~ foo ) != 123 /= ! - - ( ~ ! - ~ ! - ~ ~ "bar" ) ;
 } ;
 } else { if ! true { ( false ) *= ! foo ;
 } else { - ~ - foo == ! false ( ) ;
 } ;
 } ;
 } ;
 foo int ;
 foo int ;
 func foo ( foo int , foo int , foo int , foo int , foo int . int . int , foo int ) int { false -- ;
 } ;
 } ;
 func foo ( ) int { if - true . foo { ( "bar" ) [ - ( "bar" * ! - "bar" > ~ 123 ) ] += true [ ( ! ( - foo ) ) ] ;
 } else { ! foo == true ( ) ++ ;
 } ;
 } ;
 class foo { func foo ( ) int . int { if ~ ! - "bar" * ( ! 123 [ 123 ] <= ( ~ ~ ~ ( - "bar" >= "bar" ( ! - foo , 123 ) ) [ ( ! ~ foo ) == "bar" [ - true > 123 ] ] & ( - foo != 123 ) - - "bar" / ! ~ 123 ) . foo ^ - foo [ foo ( ! ! ! "bar" , ~ 123 [ ! "bar" ] ) ] ) . foo { for val foo int . int . int = - ( false + ~ ! foo ) ^ 123 [ - "bar" & ~ "bar" [ true ] ] ;
 - - - ! 123 | 123 ;
 false != foo [ true ] { true . foo * "bar" -= - - ~ ( - true ) ( - ~ true . foo < false , ( ~ ! - ~ foo ) != foo ) ;
 } ;
 } else { for val foo int . int = ~ ( foo ( true , ! ~ - - ~ ~ ~ - - foo . foo ) ) ;
 ( - foo [ ! ~ foo . foo == foo & ! "bar" ( "bar" & foo , "bar" ) < 123 ] | false [ ~ foo ] <= false != true ) ;
 ! - ~ ~ "bar" /= - true [ ( ! ( ! ! ( ! ! false ) ) ) [ - false ] ] { ! ~ ~ 123 ++ ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int . int . int , foo int . int . int , foo int ) int . int { ~ true . foo -- ;
 } ;
 func foo ( foo int , foo int . int ) int { if false - ~ ~ ! ( true ) { ( foo ) ;
 } else { - 123 + ! ~ ~ - ( - - - ~ 123 ) ;
 } ;
 } ;
 func foo ( foo int . int , foo int . int . int , foo int , foo int . int ) int { for var foo int . int = ~ - ~ "bar" ;
 false == ( ! - true ( ) ) ;
 foo { for var foo int = - true / ! foo >= - ~ ( ~ true [ 123 ] - ~ ~ foo ) ;
 ~ ! ( ! ~ ! ! ! - - - 123 [ foo ( ) < - 123 ] ) ;
 ! "bar" [ - - - foo . foo ] = ! foo { if ( ( ( ~ "bar" ) ) [ ( true . foo ) * - false ] == ~ ~ - ( ! ~ ! 123 == ~ - - ! - ! ( ~ ! ! - ( - foo ) ^ ! ~ 123 / 123 . foo ) ) ) { - ! ! ! ~ ( ( ! "bar" == 123 ) * foo ) . foo -- ;
 } else { ~ ~ "bar" ;
 } ;
 } ;
 } ;
 } ;
 foo int ;
 foo int ;
 } ;
 func foo ( ) int . int { 123 ;
 } ;
 func foo ( ) int . int . int { 123 . foo ;
 } ;
 class foo { } ;
 func foo ( foo int , foo int , foo int , foo int , foo int . int . int , foo int ) int { ~ foo / 123 ;
 } ;
 var foo int = 123 ;
 func foo ( ) int { ! ! false ++ ;
 } ;
 var foo int = true ;
 func foo ( foo int , foo int . int , foo int . int , foo int ) int . int { - "bar" == ! ! ! false **= ! - "bar" ;
 } ;
 var foo int . int = false ( "bar" * ~ 123 , 123 ) ;
 val foo int . int = ~ 123 ;
 func foo ( ) int . int { ~ foo . foo /= ! ! ~ ~ ~ ~ ~ ~ ! ~ foo ;
 } ;
 var foo int = ! ~ ! true >= ( ~ ! ( ~ - foo ) == "bar" ) ;
 val foo int = foo ;
 func foo ( ) int . int . int { for val foo int . int = - 123 ( ) ;
 123 [ false * - 123 <= - - - false [ ! - - ~ false . foo + - true ( ) <= 123 + false . foo == ~ ! true [ - false ] ] ] ;
 foo -- { true ;
 } ;
 } ;
 func foo ( ) int . int { for var foo int = ~ ( - "bar" ) == false . foo ;
 ! false ( ) ;
 "bar" -= foo { if false { ( true / "bar" [ ! ( ~ foo <= 123 ) ] < ~ false ) ;
 } else { for val foo int = 123 ;
 ! - ! 123 ;
 ~ ~ foo . foo / ! false < "bar" * false . foo *= ( - ! foo [ - "bar" ^ true [ - ! - "bar" != ~ 123 ] > false . foo | - true ( true , true ( ( ( ( foo ) ( ) == foo ) [ ! ( false . foo ) ] ) ( ) , ~ "bar" ( ~ true , ! - "bar" ) ) ) ] ) >= ( ( ~ 123 . foo ) ) { if ~ ~ false . foo & - ( ( ! ~ 123 != ! ~ - foo ( ~ ( - "bar" ) [ true ] / 123 , ~ ( ! ! false ) + 123 ) ) != "bar" ) { 123 ( false * "bar" . foo ^ "bar" == ~ 123 [ "bar" ( "bar" , false ) ] | - ( ! ( ~ - ! false [ ! ! true + ~ ! false ] <= ( foo ) ( ) ) * "bar" . foo ) . foo , - "bar" - ~ false ) -- ;
 } else { if ! ~ ~ ! ! - foo . foo { if true { ( false | 123 ( - ~ ~ true [ ~ - false ] , ! - - foo <= 123 ) ) ;
 } else { "bar" **= - "bar" ( ) >= ~ ~ true + - - ~ ~ true [ false . foo ] ;
 } ;
 } else { for var foo int . int = "bar" ( ) ;
 foo ;
 ! false { ! 123 . foo -- ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 class foo { func foo ( ) int { - ~ "bar" + ! ! ( foo ) -- ;
 } ;
 } ;
 func foo ( ) int . int { - ! foo -= 123 ;
 } ;
 func foo ( ) int . int . int { for var foo int = true [ foo ( ! - - ~ ~ ! - false , true + "bar" != "bar" ) ] ;
 - - ! ( ( ! false . foo > 123 ) . foo * - foo ( ) ) | foo [ ~ ! true [ ! - - ~ ~ ( ( ~ foo . foo ) ) != true ] ] * true ( ! foo ^ "bar" * false , 123 >= ~ ~ "bar" ) ;
 true [ ! ~ 123 ] { - ( ! "bar" & "bar" ) ++ ;
 } ;
 } ;
 class foo { foo int ;
 func foo ( foo int , foo int , foo int , foo int ) int . int . int { for val foo int = ! ~ true ( ) ;
 ! false ( ) ;
 ~ false = ! - true ( - true , ! ~ ~ false ) { if - - - ~ true . foo + true [ ! ! - "bar" ^ ! ~ true ] != ~ 123 { ~ ~ 123 <= "bar" ;
 } else { if ( - ( true < ! 123 [ ! ( - ~ ~ false . foo != - - - ( 123 ) ) ] ) ) [ 123 - false ] { ~ ~ ~ false < 123 [ ! 123 ( ) & ~ "bar" [ ~ ( - true ( ) * - true ) ( false , ~ ( ( ~ foo ) ) ) * false [ true > - ! true ] ] == - ! ( ~ "bar" ) / ~ "bar" ] + true -- ;
 } else { for var foo int = - ! ! ~ ( ~ 123 - ~ - ! ( - ( 123 & ~ - - ! ( ~ - - ! ! - ! ! ~ foo [ true ] ) ) ) ( ! foo ^ "bar" . foo , ~ 123 * 123 ) == - ! ( 123 ) ) ;
 foo ;
 - - ( foo [ - - "bar" ] / 123 ) . foo { for var foo int . int = ! 123 ( ! ! ! ( false > ~ - ~ ! ( ( ! ~ - ( ~ - false < ( - false - "bar" ) ) ) . foo - "bar" ) ) , ( false ) & ~ ~ true ) * 123 <= "bar" ;
 ~ true [ foo ] | true ;
 ! ! "bar" ++ { for var foo int = 123 ( ) ;
 "bar" ;
 ! ~ ! - ! - 123 ^ false { if 123 { for val foo int = ! foo ;
 ( ! true ) ;
 123 = ~ true - ( ( true ^ - 123 . foo ) [ foo ] ) { ~ ~ ~ ! 123 == 123 ( foo . foo >= true | 123 , - ~ ( - 123 ) ) + true ;
 } ;
 } else { for val foo int . int = foo . foo ;
 true ;
 ! - "bar" / - "bar" . foo { if "bar" != ! ! ( foo >= false ) { 123 ( ) ;
 } else { if ! true { ( ~ ~ ~ - false ) ( ) ;
 } else { "bar" != - false / "bar" -- ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 func foo ( ) int . int { for var foo int = ! ~ 123 [ 123 <= 123 ] ;
 foo * - true ;
 ! - ~ 123 ( false , ~ ( - "bar" & - - ! ! ~ 123 ) ) * - foo [ - "bar" ] **= true ( ) { if true { for var foo int = ~ ( true ( ~ - - ( ~ ~ ( ~ - false ) . foo ) - false ( ) & ( ~ ! true ) <= ! ~ ! 123 , ( true ( ) - 123 ) / foo . foo ) / "bar" ^ 123 * ! 123 ) ( ~ ! true , true <= ~ - - true ( ! false != false , "bar" ) - - ~ ! - true [ - - "bar" - false ( ) ] ) ;
 "bar" ( ( ~ ! ~ 123 ) ^ - ! ! ~ ! ! 123 ( 123 , ! ( false ( foo , "bar" ) ) == ~ "bar" [ false ( ) ] >= ~ ( true ) ) , - ! ! ! - ! true ( ) ) ;
 false [ 123 >= 123 [ "bar" ( ) ] ] != true ++ { 123 ;
 } ;
 } else { - ( false ) -- ;
 } ;
 } ;
 } ;
 foo int . int ;
 func foo ( foo int , foo int , foo int ) int { - "bar" . foo ;
 } ;
 } ;
 class foo { foo int . int . int ;
 foo int ;
 func foo ( ) int . int { true [ - true - true ] != ~ ! ~ true / true | ~ true < - true ;
 } ;
 foo int ;
 } ;
 val foo int . int = - ( ! 123 != - "bar" ) ;
 class foo { } ;
 func foo ( ) int { ( false * ( true ( ) & foo != foo ) [ ~ ~ false ( foo ( - ~ false , - true & ( ! "bar" [ ! true != - "bar" ] & - ( ! 123 ) ( ( false [ 123 ] ^ foo != ! 123 ( ) ) , false ) ) ) , ~ - ~ false <= - ! ! ~ true ) != "bar" <= ! foo ] ) -= "bar" . foo ;
 } ;
 var foo int = ! ~ - - true >= false ;
 var foo int = 123 [ ! false > true ( ! - 123 , foo ) ] & ~ ! true ;
 func foo ( foo int , foo int . int , foo int , foo int ) int { if ( ! ! ~ ! false ) == foo { if "bar" ( ~ 123 ^ ! ~ 123 , 123 ) | ! - "bar" [ true ] { "bar" **= ! - true ;
 } else { ! ! ! foo /= ! ! ~ ( false / ( true [ "bar" ] ) ) ( ) ;
 } ;
 } else { 123 [ - "bar" ] **= ! ~ 123 - - "bar" ;
 } ;
 } ;
 val foo int = - 123 ;
 var foo int . int = false ;
 func foo ( foo int , foo int , foo int , foo int . int . int ) int { ! ! - foo ++ ;
 } ;
 func foo ( ) int . int { if ~ ( ! - ~ ( false ( ~ ~ ~ "bar" , ( ! ~ - "bar" ) [ ~ ( "bar" ) ( ~ ~ ~ false , - ~ false . foo < ( ~ foo ( ~ ~ false > "bar" [ ( - ~ - foo ) . foo + ~ ~ - - ~ false [ false ] == ! - ! ~ ( 123 ( ) ) [ ! - ( foo . foo ) ] ] * ! foo . foo , ( false ) ) ) ( 123 , ! foo ) ) | false ] ) > ~ "bar" ) ) != ~ foo >= ~ ! "bar" { - "bar" ;
 } else { if - "bar" ^ foo & 123 { 123 ( ) *= foo ;
 } else { for val foo int . int = "bar" . foo ;
 "bar" ;
 ~ foo **= foo { ! - ~ foo *= ( - ~ ( true ) / - ! 123 ) ;
 } ;
 } ;
 } ;
 } ;
 var foo int . int . int = ! ~ - ~ "bar" ( ! ! ( foo . foo != foo ) , ~ ~ ( "bar" ) ) ;
 func foo ( foo int . int . int ) int { foo **= 123 ;
 } ;
 val foo int = ( foo [ ~ 123 ] < 123 ( ! ( ! - "bar" [ ! foo . foo ] ) . foo - - - ! ~ - - ( ~ ! ! ! ! "bar" ) , false [ "bar" ] / 123 [ "bar" ( ) ] ) ) ;
 func foo ( ) int { false -- ;
 } ;
 val foo int = ~ ( "bar" ( ) ) ;
 var foo int = ~ ! "bar" . foo & ! - ! true != true ;
 var foo int = - ( foo ) | ( - false ) >= - - ~ ! true ;
 var foo int = ~ foo * 123 ( false < ~ - false , - ( 123 ^ foo & true [ foo ] ) . foo ) ;
 class foo { func foo ( foo int , foo int . int ) int . int . int { ( false ( ) ) > - ! ~ ( ! - - ! ! ! false ( ~ ! - ( ( false ) ) & ( ! - "bar" ) , "bar" ) ) ++ ;
 } ;
 foo int . int . int ;
 func foo ( foo int , foo int , foo int , foo int , foo int . int . int ) int { ( true ) **= ! ( true ) ;
 } ;
 foo int ;
 foo int ;
 foo int ;
 foo int ;
 foo int ;
 func foo ( ) int { if ! "bar" { ~ "bar" ^ "bar" . foo / - ~ foo [ false & ~ 123 | foo [ ( - - - true ) ] ] -= ! ~ foo [ ( true ) ] ;
 } else { for val foo int . int . int = ( ( ! ~ true ) . foo ) ;
 - true | false > foo ;
 false [ foo ] ++ { true ( ) -- ;
 } ;
 } ;
 } ;
 foo int ;
 } ;
 val foo int . int = foo > 123 ;
 val foo int . int = - 123 == false | ! "bar" . foo ;

