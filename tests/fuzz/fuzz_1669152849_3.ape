module foo ;
 class foo { - foo [ ! false ] ;
 } ;
 val foo int = - false ;
 class foo { if ~ ! ! false [ 123 [ true / - - ! 123 ( ) ] & "bar" ] { for val foo int = ~ ! ! ! - ~ - - ! foo != ~ ~ ! ( ! ! "bar" [ 123 * foo ] + ~ ! ! ~ true [ 123 [ foo ] ] <= ( false ) ) ;
 ! - ! ! "bar" ( ) ;
 foo *= "bar" . foo { ! - - ! true [ true ( true [ ( ( ! "bar" ) ) ( ( 123 [ foo ] ) <= false , ! "bar" ) ] , "bar" != ! 123 ) ] ;
 } ;
 } else { if ~ ~ ( 123 > ! ! foo & ( 123 ) ) { if ~ - "bar" { if ~ ! ~ ! "bar" { for var foo int . int = "bar" ;
 ! false ;
 false { for val foo int = ! ! "bar" ;
 foo ;
 false ++ { if - - false { 123 ( ) != 123 >= ~ - - foo ( ~ false , ! ~ "bar" . foo ) ;
 } else { for val foo int = true & ~ 123 != "bar" ;
 - ~ 123 ;
 ~ ( ~ "bar" > - ( - - false * true ) ) { ( - "bar" ) ++ ;
 } ;
 } ;
 } ;
 } ;
 } else { for val foo int = ! foo ;
 123 ;
 ( ( true ) > ~ 123 [ foo ] ) { "bar" -- ;
 } ;
 } ;
 } else { for var foo int = ( 123 ) ( ) + ~ foo . foo ;
 - true ;
 ! true . foo -= "bar" != 123 { if ! ~ ! - - 123 { if ! ! - - "bar" + - 123 { - ( ~ false ) <= - foo != - false [ true ] - - "bar" >= ~ 123 += true ^ foo ( ) < ~ ~ ~ ~ false ;
 } else { 123 ++ ;
 } ;
 } else { for var foo int . int . int = foo [ - "bar" ] == ( - - ~ "bar" / false | - ( true ) ) ;
 123 - true != - true [ ~ false . foo ] ^ ! - - ! ~ false ;
 "bar" [ ! foo ] **= ( true . foo ) != ( ( true ) . foo ) { for val foo int = foo ;
 foo ( false , ~ - - - ( false ) ( ) ) ;
 ! "bar" < "bar" = false ( ( ~ 123 [ ( ~ 123 ) ] ) , true [ ! - - ( ~ ! foo ) ] - ! false ( ) ) { if false . foo != false { ! "bar" [ ! false ] == ( ! ! ! - - "bar" ) - - "bar" ++ ;
 } else { ~ "bar" ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { 123 . foo ;
 } ;
 } ;
 } ;
 val foo int = "bar" ;
 var foo int = ( - 123 ( "bar" - - "bar" , ! - foo - 123 ( ) ) ) & "bar" ;
 val foo int = true ;
 func foo ( ) int { "bar" *= "bar" ;
 } ;
 func foo ( foo int . int , foo int ) int { if true * ~ false . foo { true ;
 } else { true = ! ~ - - - ! ! - "bar" ;
 } ;
 } ;
 val foo int = ( ! ~ "bar" ) ^ false ( ( ( ! ! 123 [ ! ! foo <= "bar" / 123 ( 123 , true ( ) == ! foo ) ] < - - foo [ - false <= false ] | - ( ( ~ - false . foo * true + ~ ( ( - true [ true >= ( "bar" ^ ( - ! - 123 != ~ ! ~ ! true . foo ) ( ) ) . foo ] / ! ! - "bar" [ ( ~ 123 ) > ! ~ "bar" & ~ 123 - - foo ] - false & ! false >= - foo . foo ) ) ) ) ) [ ~ - foo | ! "bar" & ! foo ] ) / true > ~ ( 123 [ 123 <= ~ - ~ ( - ( true ) [ ! ! false [ ! - true [ ! false <= ~ 123 ] ] ] ) ] - foo < ! true & ! "bar" ) , - ! false ) ;
 var foo int = ~ ( "bar" ) ;
 func foo ( ) int . int { ~ foo ;
 } ;
 var foo int . int = "bar" != ( ! ! 123 [ true <= ~ ! "bar" ( false , foo ) ] ) ;
 class foo { ! ( foo ) . foo -- ;
 } ;
 class foo { ~ ! - - - false - false [ ! 123 >= - foo ( ) ] ;
 } ;
 func foo ( ) int . int . int { if foo { if 123 / ! ( - foo . foo != - - - 123 ) . foo > ! ! ~ - foo { - true & true ;
 } else { for var foo int . int . int = ~ foo - ! 123 ( ) <= ! true [ ( "bar" . foo ) ] != false > ! ( "bar" ) . foo - false ;
 ~ ! "bar" ( ) ;
 ! - foo ++ { for var foo int = ( true & false [ ~ true & ! - true <= true ] ) . foo ;
 ~ ~ 123 [ "bar" ] ;
 ~ - false ( foo - true != 123 ^ ( 123 ) , - ( foo ) ( ) < ( ~ true >= ! - 123 ( ! foo [ ~ 123 [ "bar" ] ] - "bar" . foo , - ! true ) == ! ~ ~ true . foo * ( - ~ foo ) ) ) { ! ! true >= ~ - ( "bar" ) ;
 } ;
 } ;
 } ;
 } else { ( true [ 123 [ ! false . foo <= 123 [ true . foo ] ] + 123 . foo & ! ( ! ~ - true ) ] != - ! ! ( true ) ) * 123 ( ! true , foo == true ) <= - ~ "bar" . foo / 123 - - - - - ( false ) -- ;
 } ;
 } ;
 class foo { for val foo int = ~ false ;
 - - ! ! "bar" <= ~ 123 ;
 ~ ( ! true [ ! ( - true ( foo , ! ! false ) ) . foo ] ) ^ - ( - 123 ) { for val foo int = false . foo ;
 ! ~ false . foo ;
 false . foo & - - ~ 123 += - ( true == ~ "bar" ( ) >= "bar" ) { if false . foo { 123 **= ! foo ;
 } else { 123 > ~ true [ true ] ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int ) int { if ! ~ ! foo ^ ~ "bar" { for var foo int . int . int = true [ ! true ( ) ] ;
 ( foo ( ) != - ~ - ! "bar" ) ;
 - ! false [ true . foo / ~ false != true ( ) - ( - ! ( ! foo ) ) ] /= - true | - false >= - ! false { foo ++ ;
 } ;
 } else { ! ~ ~ - false ( - false . foo , foo ) ;
 } ;
 } ;
 var foo int . int . int = 123 ;
 func foo ( ) int { - ( foo ) / ( "bar" & ! 123 ) -- ;
 } ;
 func foo ( foo int , foo int , foo int . int . int ) int { ~ "bar" ( false , "bar" >= - false & 123 ) * 123 ++ ;
 } ;
 class foo { if ( ~ "bar" ) { false ;
 } else { for var foo int = - 123 ;
 ~ - ( ~ foo * "bar" ) >= ( - ! ! true >= foo ( ) ) & ~ ! ! 123 ( ) - - false ;
 ( true | "bar" ) { - ! true *= ( ( ! ~ ! false [ false & false ] | - ! 123 . foo <= "bar" . foo ) [ ~ - ~ false . foo < "bar" ] ) ;
 } ;
 } ;
 } ;
 class foo { if ! false . foo { for var foo int . int = - foo - ~ ( "bar" ( ( ( ( ~ ( ~ "bar" ) ) != ! 123 ) * "bar" ) , 123 ( - 123 == true , false * ~ - ! ~ ! 123 . foo == ~ ~ true ( ) + false [ ! false ] ) & 123 ) ) ;
 ~ - "bar" ;
 false { if true { if ! ~ - ~ false { ~ - 123 = false * foo ;
 } else { for var foo int = ! ~ ! - false [ ~ ~ "bar" / ! - ! ( foo ( ~ true , - - ! ~ false ( "bar" ( - ( foo . foo ) < false != true ( ) | ( foo ) ( ) >= 123 , ( ! foo . foo ) <= true ) , false | 123 [ - "bar" [ ~ "bar" ] ] ) ) ) [ ~ ( "bar" == false ) [ ~ foo . foo == ( ! - "bar" ) . foo ] ] ] ;
 ! ! - - - ! true ;
 true ( false [ ! - false . foo ] , - ~ false [ ! - false [ ~ ~ ! ~ ~ - ~ true ] ] ) -- { ~ 123 >= true ( ) ++ ;
 } ;
 } ;
 } else { for val foo int . int . int = ~ - "bar" <= 123 ;
 "bar" ;
 ( ~ ~ ( ~ "bar" ) < ! foo ^ false ) [ true < - ! true ] { if ~ ! false { for val foo int = ~ 123 ( ) ^ true ;
 123 ;
 ( ! 123 == ( 123 ) ( - ~ "bar" , ( ~ ! foo ) > "bar" ) - ( ( 123 [ foo ] ) ) ) + 123 . foo / ~ - ~ true == ~ - ~ - 123 ( ) = - "bar" . foo { if false . foo { foo = ! - foo ;
 } else { if foo { - - true = "bar" . foo ;
 } else { if 123 { if ! ( ! false <= - ~ - - ~ ! ~ ~ true ) . foo / 123 { for var foo int = ~ false ;
 foo ;
 ! ( ! 123 ) [ ~ - "bar" == ! ! ~ 123 ] *= 123 <= false [ foo ] - 123 ( ~ ! 123 , true . foo ) { if ( "bar" ) ( ) { if ! - ( 123 | false <= 123 ) { false ;
 } else { ! false / true ;
 } ;
 } else { if - 123 { 123 ( ) & - ~ ( ! ! ! ! "bar" != false ) -- ;
 } else { ~ false . foo != foo . foo / - - 123 [ ( false ( - "bar" , false ) | ! false ) ] *= ~ false - 123 < 123 ;
 } ;
 } ;
 } ;
 } else { for var foo int = - false - ( ~ ~ 123 . foo <= "bar" ) ;
 ! 123 ;
 ~ ! ! ( "bar" ^ ~ ~ true ) ( ) | - false -= 123 { if ~ 123 ( false . foo , true . foo ) { if ! ! "bar" ( false . foo , ~ ~ ! - - foo ) { if ( 123 < foo ) { if ! ( ~ - false ) { for var foo int = foo ;
 true ;
 false /= - false { if - ! ( "bar" [ false ] == ~ true . foo ) { if ~ 123 { true ( ) -- ;
 } else { - ( ! ! "bar" * - true ) *= foo ( foo . foo , ( - "bar" ) . foo * ! ~ foo ) ;
 } ;
 } else { ! ~ ! 123 . foo -- ;
 } ;
 } ;
 } else { for var foo int = false [ 123 . foo ] & ! ! ~ ! false ;
 "bar" ( 123 [ "bar" . foo ] , ( ~ false == "bar" ( "bar" ( ) , ~ ( "bar" [ 123 ] ) [ - ! ~ ~ ( true ) . foo != - "bar" ( ) ^ ~ ! 123 * - foo ( ) ] ) ) <= ~ 123 != ! false ( ) / ! foo ) ;
 "bar" -- { for var foo int = false * ! ! 123 ;
 123 ;
 - 123 [ ! false ^ ( ~ ~ ! foo ( ) ) ] { for val foo int = - true - ! 123 <= foo ;
 ! "bar" < false . foo ^ ! ! foo [ ~ - 123 . foo ] ;
 "bar" & 123 ( ~ ! ( ~ "bar" ) , - ( ! ! foo ) ^ "bar" ) { for var foo int = false ;
 ( ( ~ "bar" ) . foo ) ;
 ~ ! 123 ( - ! foo >= - foo . foo , ~ 123 . foo & false ( ! ( foo ) [ foo . foo ] > ~ 123 . foo / true , ! - - - foo ) ) **= ( false < "bar" ) . foo { foo . foo ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { - ( ( foo >= true . foo ) != foo + "bar" & - false ( ~ ~ ! ~ "bar" [ false ] , true ) ) [ true . foo == foo [ - ! ~ 123 ] ] >= - ~ ~ ~ 123 ( ~ - true [ "bar" ] , - foo / - false ) *= foo <= - ~ true [ "bar" * ~ 123 ] ;
 } ;
 } else { ! - true . foo * ! - ~ ~ ~ ~ 123 -- ;
 } ;
 } else { if - true [ ( - ~ - true ) . foo ] { ~ ~ "bar" >= - ~ foo - false [ true . foo ^ - true / ~ - - ~ ! ( ! ! foo ) ( ) ] ++ ;
 } else { - ~ ! - ~ foo == true . foo ;
 } ;
 } ;
 } ;
 } ;
 } else { ! foo [ - ! false >= 123 ^ ! "bar" ] -= true [ - false ] ;
 } ;
 } ;
 } ;
 } ;
 } else { ~ 123 ( foo >= - - ( - 123 ) , - 123 ) **= 123 ( ) ;
 } ;
 } ;
 } ;
 } ;
 } else { "bar" ++ ;
 } ;
 } ;
 class foo { ( ~ ( true & ! 123 [ ! ~ false ( ) ] ) ( ) ) **= false [ foo . foo | ~ ! true [ ~ ~ ( foo == "bar" ) ( ) ] ] ;
 } ;
 func foo ( ) int { for var foo int = foo [ ~ - ~ true ] ;
 ! - true ;
 - ! 123 & ~ ! true { for var foo int = 123 [ foo ] ;
 - ( 123 == ( ! ! "bar" ( ! - ~ "bar" / 123 . foo == "bar" , foo [ - - ~ ! - ( true [ ~ "bar" ( ~ true ( ) ^ foo , - ( true <= ( false ^ - - - ! ( ! "bar" ) == "bar" . foo - ( ~ 123 ) . foo ) . foo ) ) & ~ "bar" . foo ] ) ] ) ) [ - "bar" ] ) != ! - - ( ~ - ~ ~ ! false ) ;
 - 123 / ( ~ - true ( ! foo , foo ( ) ) < foo ) ( - ! ~ true , foo ) <= 123 { false [ true ] -- ;
 } ;
 } ;
 } ;
 class foo { ! foo = foo ;
 } ;
 class foo { false -= foo ;
 } ;
 class foo { for var foo int = false * ! - 123 | ( true * ~ - foo ) ;
 ~ 123 ( - ( ~ ! ( true ) ) , ! ~ - true . foo ) ;
 "bar" <= ~ - - ( true ( foo - true & true ( ) , ! "bar" ) ) + foo [ ~ ~ ~ foo ( - foo / ( ( - ! foo ) ) , ! ! ~ ( ~ ! foo ) [ ~ ~ false ( ) ] * "bar" ) ] -= false | ( ~ ( ~ - - "bar" ) ) { ~ ! ! ! "bar" ;
 } ;
 } ;
 class foo { if - foo { for var foo int . int . int = ( foo ) != ! false . foo + ~ ~ false ;
 true ;
 false ( ) -- { ! "bar" /= "bar" ;
 } ;
 } else { ~ 123 - - true ( 123 . foo , ! - ! ( "bar" ) [ ( 123 / true ) & ( - false ) >= ~ false ] ) & - 123 [ ~ false ] ;
 } ;
 } ;
 func foo ( foo int , foo int ) int { if - ! ~ - 123 ( false [ ~ ~ true ] , - ~ true ^ ( "bar" . foo ) ) <= ! - - ! - - ! ! - ~ "bar" [ true / false ^ ~ "bar" . foo != ~ true | ~ true ] { foo += ( ~ - ( ~ ( "bar" [ - ( "bar" ) | "bar" ] ) ) ) / 123 . foo ;
 } else { foo *= - foo ;
 } ;
 } ;
 class foo { foo ++ ;
 } ;
 class foo { false > foo [ ! ~ ~ ! ! false ( - 123 , false ( ) <= ! "bar" ( "bar" , false . foo ) != ( ( ( foo ) ) ) / ! false ) ] -- ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int , foo int ) int { for val foo int = "bar" != "bar" / false [ - ~ - ! ~ foo ] ;
 foo != foo ;
 ~ ( ~ true ) -- { ~ ! "bar" == true + ~ ( "bar" / - ~ ~ ( - ~ ~ ~ ~ false ) [ "bar" ] == ( ! false . foo & ~ "bar" ) & ( 123 >= "bar" . foo == - ~ ! true ) [ ~ 123 ] <= ~ ( ~ - ( foo [ ( "bar" ) . foo ^ true ] ) ) ) ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int ) int { if ~ ! foo { for var foo int = - foo * ( true ) ;
 ~ foo == ! false ;
 false { "bar" -- ;
 } ;
 } else { for val foo int . int . int = ~ false < 123 ( ) == false ;
 - ( - ~ ! ! ! - foo . foo ) ;
 ! - ! true & ! ! ! ( ! ! "bar" [ true ] ) { 123 -- ;
 } ;
 } ;
 } ;
 class foo { ( foo . foo ) **= 123 ;
 } ;
 var foo int = foo [ true ( ! foo ^ ( "bar" . foo ) , foo >= - 123 [ true [ true ] + - ~ - - ! ( ~ "bar" ) ] ) ] ;
 func foo ( foo int , foo int , foo int . int . int , foo int . int , foo int ) int { true ;
 } ;
 func foo ( foo int , foo int . int . int ) int { if 123 { ! foo [ "bar" ] *= "bar" ;
 } else { for val foo int = false ;
 foo / foo [ ( true != ! true ) . foo ] ;
 - - false [ ! 123 + foo ( ) ] -- { - "bar" ( ) & ~ false ++ ;
 } ;
 } ;
 } ;
 
