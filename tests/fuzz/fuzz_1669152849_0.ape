module foo ;
 func foo ( ) int { for val foo int = - ~ ~ ( ! ~ foo ) | ~ ( "bar" ) ( false [ ~ "bar" ] & 123 ( ) == "bar" , ~ ( "bar" ) [ foo ] ) ;
 true ;
 foo - ! foo { for var foo int = ~ false ( ) == 123 ;
 ~ 123 ;
 ~ ( 123 + 123 ) { for var foo int . int = foo . foo >= ( ~ true ( false . foo > foo , false ) ) ;
 ~ ! true . foo ;
 foo { - ! ( ! ~ ( false [ ~ - true . foo & - ~ - ~ foo ] ) ) [ true . foo ] = 123 ( - - ~ - 123 [ "bar" & "bar" == 123 + "bar" ] , ! ~ ( true ) != ! ( 123 < ~ ~ "bar" ) ) ;
 } ;
 } ;
 } ;
 } ;
 class foo { for val foo int = true ;
 - true [ ! false [ true ] ] ;
 ! ! ~ 123 [ ! ~ ~ - ( foo ) ( ) >= ~ 123 ( - - 123 , ~ ~ false ) ] - ! ! ! true -- { if - ! ( 123 ) . foo { ! foo = true / - - - ~ foo ( foo , 123 != false ) ;
 } else { ( ~ 123 ) ( ) = foo != 123 ;
 } ;
 } ;
 } ;
 var foo int = false ;
 func foo ( ) int { ! true < "bar" . foo -- ;
 } ;
 class foo { - ~ ~ false ++ ;
 } ;
 class foo { for var foo int = ! ~ - true & ! 123 == - 123 ;
 foo ;
 foo . foo -- { ! ( ! "bar" != false . foo ) = "bar" - - ~ false ;
 } ;
 } ;
 func foo ( foo int . int . int , foo int . int , foo int , foo int , foo int . int ) int { for var foo int = false ;
 ( ( ~ ~ ~ ~ 123 . foo != ! ! ! - ! true ) * ( ! false ) [ ! "bar" ] ) ( ) ;
 - ~ ! true += true { for var foo int = "bar" ;
 - ~ foo ;
 ~ ! true - - "bar" { for var foo int = false | ! foo & ! ! "bar" ;
 false & - ~ foo ;
 false -- { foo [ ! "bar" ( ) ] * - ( false . foo ) -= ~ "bar" == 123 ;
 } ;
 } ;
 } ;
 } ;
 val foo int . int . int = true >= ( - - ! true ) ( false == ( ! ~ - ! - true ) ^ ! foo , - "bar" [ ! - "bar" ] ) ;
 var foo int . int = ~ - false ;
 val foo int . int . int = ( - ~ 123 ) [ ! ~ 123 [ ~ false . foo ] == 123 [ "bar" * - foo < false ] - ! ! ~ ! ! false ] / "bar" ;
 func foo ( foo int , foo int , foo int . int . int , foo int . int . int ) int { foo ;
 } ;
 func foo ( foo int , foo int , foo int ) int { 123 ;
 } ;
 func foo ( foo int ) int { ! 123 ( ! ( true ) ( ) > ~ 123 . foo , ! true ) ;
 } ;
 func foo ( ) int { if foo { foo [ ~ - foo [ "bar" ] >= - ! "bar" ] /= ! ( ! - true . foo ) >= true ;
 } else { if 123 != - ( ~ ~ "bar" [ false ] / - ~ "bar" ) { for var foo int . int = ! ! ( "bar" [ - foo ] ) [ ( - true ( foo , ~ 123 ) ) ] ;
 "bar" ;
 - - foo -= ~ true [ ~ "bar" ] { foo ;
 } ;
 } else { "bar" == foo ( ) -- ;
 } ;
 } ;
 } ;
 func foo ( ) int { for var foo int = ( true ) ;
 - ( ! - - true ) != foo ;
 false & ~ 123 *= - false [ ! - true ] >= - ~ false { - false += true ;
 } ;
 } ;
 class foo { if false { ! ( 123 ) . foo == 123 /= - - ! 123 ( "bar" ( ) , ( "bar" > false ) [ ! 123 . foo ] + ( false * ! ! - ~ true . foo ) >= ~ ~ foo [ ( ! foo ( ) ) ] ) ;
 } else { if ~ false { for var foo int . int = ! - ~ ! ~ true [ ! ! 123 ] ;
 true ( ) ;
 ~ - ! foo *= - ! foo . foo { - "bar" ( 123 , ~ ~ foo ) *= - foo & ! ~ ~ false ;
 } ;
 } else { for val foo int = - ! false ;
 ! ~ ! 123 <= ! ~ false ;
 - ! - ( "bar" [ ~ ! - true ( ) ] ) ++ { false ( ) /= ~ ! "bar" [ "bar" ] ;
 } ;
 } ;
 } ;
 } ;
 func foo ( ) int . int . int { - true ++ ;
 } ;
 class foo { if true { ~ ~ false == ! ! ~ ! true ;
 } else { ( ! ! false . foo ) . foo -- ;
 } ;
 } ;
 val foo int = true ( ) ;
 func foo ( foo int . int . int , foo int , foo int . int . int ) int { for val foo int . int = foo ;
 false ;
 foo >= false ++ { for val foo int = ( false ) ;
 false ^ "bar" ;
 ~ - "bar" < "bar" | - foo / ~ ! ! true { foo -- ;
 } ;
 } ;
 } ;
 val foo int . int . int = ! ! - false ;
 class foo { - ! true ++ ;
 } ;
 class foo { "bar" ;
 } ;
 func foo ( ) int { for val foo int = - foo ( ) ;
 ~ "bar" ;
 ~ - ~ ! - "bar" { - 123 ( "bar" , ( foo ) / ! ! ! ~ ! ! false . foo ) != ! 123 += true ;
 } ;
 } ;
 class foo { for var foo int = ! ! foo >= - true ;
 "bar" . foo ;
 123 [ foo . foo ] ++ { for val foo int . int = foo ( ) ;
 ! foo [ "bar" - - ( 123 ) != false . foo ] ;
 - foo == ! foo >= foo **= false { - true [ ~ - ( true ) . foo ] /= false ( ) ;
 } ;
 } ;
 } ;
 class foo { for var foo int = false ;
 false ;
 123 . foo ^ 123 { if ! 123 { if ~ - - ! ~ ( "bar" ) <= false { if 123 . foo ^ "bar" . foo * true >= ( false ) { ! false [ "bar" . foo ] **= ! ~ 123 ;
 } else { ~ false ++ ;
 } ;
 } else { foo **= ( ( ~ ( foo [ true [ ! false ] ] | ~ ( true ( foo != "bar" [ - ~ false . foo ] , - foo * - ~ false ) ) ) . foo ) ) ;
 } ;
 } else { "bar" ;
 } ;
 } ;
 } ;
 val foo int = - ~ - true [ "bar" ( false ^ false . foo , 123 & "bar" ) ] ;
 func foo ( foo int . int . int , foo int , foo int ) int { for val foo int = 123 ;
 ~ ~ false ;
 true != ~ "bar" <= - - ~ ! foo = - - - ~ true [ 123 ( ) ] { if ! ! true . foo { - ( ~ "bar" / "bar" ) != foo & ! - ~ foo ;
 } else { false [ ( ! true . foo ) & "bar" [ ( ~ ! ! false ) ( ) ] ] > false * "bar" **= false ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int . int . int ) int { 123 == ~ false **= false < - false ( ) ;
 } ;
 class foo { for var foo int = ~ ! ~ true ( 123 ( ( ~ foo [ false . foo >= - ! false ] ) , ~ - - ~ ( true . foo ) ) , ( ! ! ( ~ ! 123 ^ ~ ~ true ) ) < ! foo ( - foo , ~ ( ~ - ! - - 123 . foo ) ( ! "bar" ( - true , ( true ( - - ! ! ! ! - foo , ( ! - ! ~ true ) ) ) . foo ) < "bar" , ! foo ( ) < ! ( - 123 ) . foo ) ) ) ;
 ! "bar" ;
 "bar" - foo . foo != true ++ { "bar" | ~ - ( ~ ~ ! ! ~ ( foo ( ) == ! ( ! ~ false * ( ! ! - false [ ~ false ] ) ( 123 . foo - true , 123 * 123 ) ) ) ) ++ ;
 } ;
 } ;
 func foo ( ) int { if - "bar" { ~ - ~ 123 ++ ;
 } else { foo ;
 } ;
 } ;
 class foo { for var foo int . int = ~ ! - ~ ! "bar" * ~ - ~ ! ! ! false [ 123 ] ;
 ( 123 ) . foo * "bar" ;
 - - ! ( false ) ++ { ! ~ ~ ~ - - false -- ;
 } ;
 } ;
 func foo ( ) int { if - ~ foo < ~ - "bar" { "bar" == 123 += ! ! foo ;
 } else { if "bar" ( ) { if false ( - false ( ! foo , 123 [ false ( ) != - - ! ~ ~ ~ ~ ~ foo ] ) , ! ! - 123 ) { if - - ~ ~ ! 123 [ ! false ( 123 , ( - ! ( true <= "bar" ) . foo ) ) ] { - foo ( ~ ~ ( ! ~ ~ foo ) & ( "bar" ) - - false [ true ] , ~ ~ ! false ) - ( - - foo & 123 [ ~ ! ! true ] - "bar" ) ++ ;
 } else { for val foo int . int . int = ~ - false . foo ;
 ! foo ;
 true [ - true ] != true [ foo ] <= "bar" -- { for val foo int . int = - 123 ;
 ! ( ! "bar" ) ;
 - ( ~ - ( 123 ) ^ - true == - - 123 + ~ ( 123 [ 123 . foo ] ) ) [ foo | - ~ ( ~ true ) ] **= ( ! ~ true ) <= 123 ( ) { "bar" ( ) ;
 } ;
 } ;
 } ;
 } else { for var foo int = ~ ! "bar" . foo ;
 ! foo * true == "bar" ;
 foo { false *= ~ - "bar" . foo | 123 ;
 } ;
 } ;
 } else { - ~ ( ~ "bar" ) -- ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int ) int { foo [ ~ - false ] < true ^ "bar" ++ ;
 } ;
 class foo { - ~ ! foo ;
 } ;
 class foo { ( ! ~ - ( false ) ( ! - ( ~ false . foo ) , - ~ ! false ) ) & - "bar" ++ ;
 } ;
 val foo int = ! "bar" < false ;
 class foo { if foo [ ! 123 ] { if ! ! ! "bar" { if foo { ( ! true ( true ( ) > "bar" , ~ 123 ) ) [ ! true ] ;
 } else { for var foo int = ( - "bar" . foo ) [ 123 ] ;
 ~ "bar" [ ( false . foo ) ] ;
 false *= ~ 123 { for var foo int = foo | "bar" [ - ~ "bar" ] / ( ( false ^ ! 123 ) == ! 123 ) ;
 - ( 123 ) != ( - ! - ~ - - 123 ) ;
 "bar" -- { if ~ 123 . foo { 123 [ - true ] ^ ( ( foo ( ) ) >= ~ ! - "bar" ) . foo ++ ;
 } else { foo [ foo - - foo ] ;
 } ;
 } ;
 } ;
 } ;
 } else { if - true . foo { - foo ++ ;
 } else { for var foo int . int . int = ~ "bar" ;
 ! ! true / ( - ( ~ ~ ! ( false ) ) [ ~ "bar" ( true , ~ foo ( false , ( ! true . foo ) ) != ~ 123 ) > foo | true ( ) ] ) ;
 ~ ~ "bar" | foo ++ { if false { for var foo int = foo ;
 foo ( ) ^ - 123 * ~ ! ~ ( true ( foo , ~ ! "bar" . foo == false ) ) ;
 ( foo ) . foo **= foo { 123 > foo . foo ;
 } ;
 } else { ( ! foo ( ~ 123 ( ) , - - ! 123 == false < ~ ( false ) | false ) ) < - ! 123 ( ) ;
 } ;
 } ;
 } ;
 } ;
 } else { "bar" ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int ) int { if ! - ! - ( false - false ) { if ! - "bar" [ false . foo ] { - ! 123 == "bar" / "bar" [ ~ true ( ) ] -= foo [ - ~ - ~ - false . foo == - ~ ! "bar" ] | - - true ;
 } else { - ~ ! ~ ( - true - ! - - ! true / ! foo == foo [ - - foo ] ) [ true ] ;
 } ;
 } else { for var foo int = true + false ;
 "bar" [ 123 <= ! ( - ~ false [ ~ true >= - ! ~ - foo ] ) + "bar" ] ;
 "bar" ++ { if - ~ ( "bar" ^ 123 ) ( ) - ! ! false { for val foo int = - "bar" ;
 foo ;
 ! true /= 123 { if ! true { - - foo + - ( false ) -- ;
 } else { for val foo int = true [ ! ~ ( 123 ( ) ) ] ;
 ( - ! foo [ foo ] ) [ ! ~ ( ~ 123 + true ) . foo + "bar" [ - ( ~ ! foo ) ] ] ;
 ! ( ! - ( ! ( true ) == ~ ( true [ ~ - "bar" ] ) ) ) ( ! false [ 123 * 123 == 123 + "bar" [ ~ ! - ( ! 123 ) & 123 ] ] , true & ! ~ ! - ~ ~ ~ - ! true ) **= ~ - ~ - true & ! ! "bar" { if true [ false * ! ( false [ ~ ~ - true . foo ] ) . foo ] { for val foo int = false . foo ;
 "bar" == true - foo ;
 "bar" < ! 123 ++ { for var foo int = ~ foo <= ~ ~ ~ ~ foo ;
 ~ 123 ;
 ~ 123 [ ! ! ! ! foo ] - ( foo ( false ( foo > ! ~ false [ true >= ~ ! foo ] , - false ) , ~ ~ ! false . foo ) > ~ 123 [ ( - true < ! foo ) . foo ] ) -- { false . foo & - 123 ++ ;
 } ;
 } ;
 } else { for val foo int = true != foo ;
 ( foo ) . foo ;
 ! ! - ! ! ~ ~ false ++ { for val foo int = 123 ;
 false ;
 true == ~ ~ true { false -- ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { for val foo int = 123 . foo ;
 123 ;
 foo = false [ ! foo ] - ~ ( foo / - - 123 - ( false [ true [ ~ ! ~ ~ true . foo ] ] ) ) & - true ( ~ - foo , ~ foo >= ! true [ - ~ - ( ~ ~ "bar" ) ] != - ! ! ! - 123 . foo - ! ! true . foo & true ( ! ! - ! ~ - - false , ! 123 != ! ! ~ ~ "bar" > ! ~ - ! false . foo - ( 123 ( ( "bar" . foo + false != ( "bar" [ "bar" ] + - "bar" ) ) * ! false , ( foo ) ) / ( ~ ( ~ true ) ) . foo ) ) ) { "bar" != "bar" ;
 } ;
 } ;
 } ;
 } ;
 } ;
 class foo { if ~ - ~ ! ! 123 * true { for val foo int . int = true ( "bar" , foo ) >= ( foo ( ) ) ;
 ( 123 ) != ~ ! ! foo ;
 ~ 123 == false /= ( false . foo ) <= ! ~ true { ( ! ~ true [ ~ foo ] ) == true ( foo . foo , ! ~ false ( ) < true ) ;
 } ;
 } else { if ! - - foo . foo { if "bar" + "bar" { if ! true > true { for var foo int . int = "bar" ;
 ! - - ~ false ;
 ( true ) { ~ ( ~ - ~ ( 123 ) [ - ~ - ~ 123 ] / - "bar" . foo ) ( ! ! ~ ~ ! ! ~ ( ( foo ) ^ - true ) , - - ! ~ "bar" | - ~ foo ( - foo [ - false ( ) != 123 ] , foo . foo ) >= ! "bar" ) /= ! - - true == - ! ~ - - 123 [ ( foo ( ( - - ~ ~ false . foo ) ( ) , foo . foo ) ) ] ;
 } ;
 } else { if 123 { true [ ! true ( ! foo , false ) ] | - ( true == - - "bar" [ ( false * foo [ ! ( ! 123 [ foo ] ) ( ) ] >= - ~ 123 ) * ! ( ~ true ) ] ) [ ! - - foo . foo * ( ( ! "bar" ) ( ~ ! "bar" . foo , - 123 ) ) . foo | - - true ] <= ! ~ "bar" ;
 } else { ! 123 + ! - ! true . foo >= ~ false ++ ;
 } ;
 } ;
 } else { - foo /= true != ( ! ~ ! foo ) ;
 } ;
 } else { ! 123 | - false ( ) != ( - true [ ~ ! - foo [ ! - ! ( false != ~ true & ! false > ( - 123 ) ) . foo ] | ! ( ( ~ false & ! true ) ) . foo ] | - true . foo ) > false . foo * - 123 . foo ^ ! ~ ( 123 ) ++ ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int . int , foo int ) int { false ;
 } ;
 func foo ( foo int , foo int . int . int , foo int , foo int , foo int ) int { if "bar" ( ) { if ( foo ) >= - "bar" [ - ! ( ~ - false ) . foo & 123 != ! ( foo & ~ ( ~ ! ! false ) . foo ) & ~ true ] { for val foo int = ! ! ! ! true ;
 true ;
 - - - ! ! ( - foo < - - ~ - - ~ ! foo [ foo >= "bar" [ true ] ] ) -= - foo . foo { if "bar" . foo { 123 -- ;
 } else { - foo ( 123 , true [ ! ( ! 123 ) ] ) != foo & ! ( ~ 123 ) ;
 } ;
 } ;
 } else { ~ "bar" ;
 } ;
 } else { for var foo int = ~ "bar" != ~ foo <= ! false [ - ( foo ) / true . foo ] ;
 ! - 123 ;
 ~ ! - ~ ~ false -- { - ( true ) ;
 } ;
 } ;
 } ;
 func foo ( foo int ) int { if - 123 * ~ 123 ( ) == foo | - ~ ! foo { ! "bar" ;
 } else { for val foo int = - foo . foo ;
 ! ! ! ! "bar" ;
 ! "bar" * ~ ~ ( "bar" / ~ ! foo ) ( - - - ! - foo ^ ! - ~ - ! ~ 123 , ! ! - ~ ~ true == ! ! ~ 123 . foo ^ - foo < true ) **= - true ( ) { if ~ foo { true += ! ! foo / "bar" ;
 } else { true ;
 } ;
 } ;
 } ;
 } ;
 
