module foo ;
 func foo ( ) int { ! ( "bar" ) ++ ;
 } ;
 func foo ( foo int . int , foo int , foo int ) int { if 123 { ! true -- ;
 } else { if foo { ! ! false -- ;
 } else { ! true * ! ( "bar" [ foo ] ) [ ! ! true . foo ^ - false ] ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int . int ) int { - foo . foo / foo ;
 } ;
 class foo { func foo ( ) int { for val foo int . int . int = - - foo ;
 ! true + ~ ~ ! 123 ;
 "bar" { for val foo int . int . int = ! ! ~ foo ;
 - ~ false ( ( - ~ ( true ) ) , foo [ ! ( ! ( ! ! ~ 123 ) [ ( ! ! "bar" ( foo , 123 ) ) ] ) ] & - ! ( false + true ( ( foo ) , ~ foo ) ) ) ;
 true [ "bar" ] < ( ! "bar" ) ++ { 123 [ ~ ! foo >= false ( ) & ~ false ( ) + "bar" [ ! ! - ~ - true ] ] - ( 123 [ false ( ) ] - "bar" / - ~ ~ "bar" [ ~ - foo [ foo & "bar" . foo ] > ! ~ ( true & ~ ~ true ( - foo , 123 ) != true ( foo / - true . foo , ~ ~ ~ foo >= - - true / ( foo ) ) ) [ "bar" ] ] ) -- ;
 } ;
 } ;
 } ;
 func foo ( ) int { ( "bar" ) . foo += ! false <= 123 - foo / ~ ! true ( ! "bar" ( ! ~ true , false * false ) , - false . foo ) ;
 } ;
 func foo ( ) int { ~ foo . foo >= ! ( - - true ) ;
 } ;
 foo int ;
 } ;
 class foo { foo int ;
 func foo ( ) int { ~ false ;
 } ;
 func foo ( ) int { for val foo int = true == ! ! "bar" ;
 - ( ! ! ~ false * false ) [ - - - ~ true . foo ] > foo ;
 ( "bar" ^ 123 ) -- { foo . foo + ~ true ;
 } ;
 } ;
 foo int . int . int ;
 foo int ;
 foo int . int ;
 } ;
 class foo { foo int ;
 foo int ;
 } ;
 func foo ( ) int . int { ( false ) < - false ( true <= ~ ! ~ false [ ~ false ( foo * "bar" , - "bar" ) ] != false > - "bar" , "bar" . foo ) ++ ;
 } ;
 var foo int = foo < false ;
 func foo ( foo int ) int . int . int { if ( - foo ( true . foo , ~ "bar" * ~ - "bar" ) != 123 [ - ! ! foo [ ~ ~ ~ ~ foo ] <= foo - - true ] / true ) { if ~ - ! 123 * 123 [ ~ - ! ~ "bar" ] { - ~ ~ "bar" ;
 } else { for var foo int . int = ( ~ - ~ false ) ;
 ~ - true ;
 ~ ~ - ~ ! 123 - ( ~ - ( - "bar" ) . foo ) <= foo ^ ! - - foo & ~ ! false . foo /= 123 { true /= foo ;
 } ;
 } ;
 } else { - ! foo != - ~ - - true / ! ! foo ++ ;
 } ;
 } ;
 var foo int = true . foo ;
 val foo int = foo ;
 val foo int = - - true ;
 func foo ( foo int , foo int ) int { ~ ~ ( ! 123 ) = ! ( true ) ;
 } ;
 val foo int = - ~ true . foo ;
 class foo { func foo ( foo int . int . int , foo int . int , foo int . int , foo int ) int { if ! foo | ~ - foo { ( false >= - 123 / true ) ;
 } else { ( ~ 123 [ 123 ( ) ] < ~ foo / foo [ false != foo & "bar" ] ) > "bar" ++ ;
 } ;
 } ;
 foo int ;
 } ;
 func foo ( foo int . int , foo int , foo int , foo int . int . int , foo int ) int . int { "bar" /= - 123 >= - - 123 ;
 } ;
 var foo int = true ;
 var foo int = ~ - 123 [ foo ] ;
 var foo int = false . foo ;
 class foo { foo int ;
 foo int ;
 foo int . int . int ;
 foo int . int ;
 foo int . int . int ;
 foo int . int . int ;
 } ;
 func foo ( foo int , foo int ) int { foo ++ ;
 } ;
 func foo ( ) int { ! ( - - ! ! foo [ "bar" > 123 [ false ] ] - ! ~ ~ foo ) . foo - 123 . foo += ! ! true ( ! 123 & true . foo , ~ ~ ~ true . foo & "bar" ( ) ) ;
 } ;
 func foo ( foo int , foo int , foo int . int . int , foo int . int . int ) int . int { if 123 { ! false /= - - false ;
 } else { ( foo ) ^ true & false -- ;
 } ;
 } ;
 var foo int = ~ ! ! ! foo ;
 class foo { foo int . int ;
 foo int . int ;
 foo int ;
 foo int ;
 foo int ;
 func foo ( ) int . int . int { - 123 -= ! ~ ~ ! ~ - - foo < true ;
 } ;
 func foo ( foo int . int , foo int , foo int . int . int , foo int . int , foo int . int . int , foo int ) int { if "bar" { ! "bar" ++ ;
 } else { "bar" + ~ ( ! foo == ( foo ( ) ) ) **= - - foo . foo ;
 } ;
 } ;
 foo int ;
 foo int ;
 } ;
 var foo int . int . int = ~ ! ! true . foo == ~ - ! false [ ( ! ~ ~ foo ) ] ;
 class foo { func foo ( foo int . int . int , foo int . int ) int { if true ( ) { ! false ++ ;
 } else { "bar" -- ;
 } ;
 } ;
 foo int ;
 func foo ( ) int { ~ ( ( - ! ~ "bar" [ 123 + ~ false ] <= foo [ ( 123 >= true [ ~ foo & "bar" ] ) [ "bar" ] ] ) ) -- ;
 } ;
 func foo ( foo int . int , foo int , foo int ) int { for var foo int = true [ true . foo / ( ( foo == - ( ! "bar" / foo [ ! - true ] ) ) ) [ ! - false ] ] ;
 123 * foo ;
 ~ ! ( foo ) ( 123 , - false [ 123 != ( false [ 123 ] ) ] ) >= ! ! foo . foo ++ { ~ "bar" [ true ] <= foo -- ;
 } ;
 } ;
 func foo ( ) int { 123 ;
 } ;
 foo int ;
 func foo ( ) int { - true ( ) **= "bar" . foo != ~ ! foo ;
 } ;
 foo int ;
 foo int ;
 foo int ;
 } ;
 val foo int . int . int = ( ! - "bar" ( true , true ) ) . foo ;
 class foo { foo int ;
 func foo ( ) int { for var foo int . int = - foo . foo ;
 - false != ! true ;
 ! true -= ! true [ ! foo ] != - ! ~ foo { if true { - false -= foo . foo ;
 } else { for var foo int . int . int = - true ;
 123 ;
 - "bar" > false -= false { for var foo int = - 123 / ! ( ( - ~ ! ~ false ) [ 123 ] ) ;
 ~ true . foo * ( ~ foo [ true ( true , "bar" ) / "bar" ] > true - ~ 123 ) ( ) ;
 - "bar" / 123 ++ { ( 123 ) /= - ~ ! ~ ! ! ! false ;
 } ;
 } ;
 } ;
 } ;
 } ;
 func foo ( ) int { if "bar" ( ) { ~ ~ ! ( true . foo ) < - ! ! ! true -= - true . foo / 123 [ ~ ! ( ( "bar" ) == - - true . foo ) | - false ] | - true [ - true ] <= foo [ "bar" ^ ! - - foo ] != false & true ;
 } else { if ! false >= ~ ( foo ) ( ~ "bar" , false . foo == false * "bar" ( - ( - false ) , true ( ) ) ) { "bar" & - ( - false ( ) ) *= ~ - - 123 > foo != ~ ! true ;
 } else { - - - ~ ! false . foo + 123 ;
 } ;
 } ;
 } ;
 foo int . int ;
 } ;
 class foo { foo int ;
 foo int ;
 foo int ;
 func foo ( foo int , foo int . int . int ) int . int . int { for var foo int = ! true ( ) ^ ! ~ 123 ;
 ! "bar" != ~ ~ ~ 123 ( ) ;
 ! ! ! ! "bar" { - ~ - ~ - ! foo < true += true ;
 } ;
 } ;
 func foo ( foo int . int , foo int , foo int , foo int . int . int ) int { for val foo int . int = "bar" ;
 - ! - - ! ! - - "bar" ( ) ;
 123 - 123 ( ) **= true ( ) { - true . foo / "bar" != ~ 123 -- ;
 } ;
 } ;
 foo int . int ;
 foo int . int . int ;
 foo int . int . int ;
 func foo ( foo int , foo int , foo int . int . int ) int { ~ ! "bar" ;
 } ;
 func foo ( foo int , foo int , foo int . int . int , foo int ) int { ! ( - "bar" == ! 123 ) ++ ;
 } ;
 } ;
 var foo int . int . int = true ;
 func foo ( ) int { for var foo int = 123 ( ) ;
 ! "bar" [ ( ! - - ~ false ) / 123 . foo ] & true < ~ "bar" == ~ true . foo ;
 - false { for val foo int = true ;
 false ;
 "bar" **= ~ 123 { for val foo int . int . int = ! false ;
 123 . foo == false [ - ~ foo . foo ] ;
 123 * ! "bar" . foo { "bar" ;
 } ;
 } ;
 } ;
 } ;
 val foo int = ~ ~ true ( - ~ ! ~ "bar" , true == ~ - ! true ) ;
 class foo { foo int ;
 foo int ;
 foo int ;
 foo int . int ;
 func foo ( foo int . int . int , foo int , foo int , foo int , foo int ) int { ( foo | - ~ false ) -- ;
 } ;
 } ;
 func foo ( ) int { ! ~ - ( ~ true ) . foo /= foo ;
 } ;
 class foo { func foo ( foo int , foo int . int , foo int , foo int , foo int . int , foo int . int . int ) int . int { 123 /= - true <= ( 123 . foo ) ;
 } ;
 func foo ( ) int . int { if "bar" { ( "bar" ) ( ) ;
 } else { for var foo int = ~ ! "bar" ;
 ! true . foo * foo [ ! 123 >= foo ( ) ] | ~ - - - ! - true != ! ~ - "bar" ;
 123 [ - ! "bar" ] -- { if ! ! - ~ - "bar" { foo ++ ;
 } else { if 123 . foo { if foo [ ! ~ - false | ! 123 ] & "bar" { if ~ ~ foo { ( ! ~ false ) -- ;
 } else { for val foo int = ! - ! foo ;
 ! - ! ~ "bar" & ! "bar" ;
 ! ! - - ( 123 > ! ~ - "bar" ) { for var foo int = foo ;
 123 [ ~ - ~ false ( ) ] ;
 ! - true [ true ] *= ! ! true { ~ ~ false = ( - "bar" ( ) ) < false ;
 } ;
 } ;
 } ;
 } else { if "bar" ( ~ - ( foo ) , ! ( true ( ) != ~ true . foo ) ) { for var foo int = "bar" ;
 ! ~ ! ~ true ;
 ( foo ) { if true >= false { 123 == ( ( ~ ~ ( 123 [ true ^ ! ~ ! "bar" ] ) + foo < "bar" [ "bar" . foo ] ) ) -- ;
 } else { for val foo int = ! ! 123 ;
 ( - - - ~ ( ( 123 * true ( ) ) . foo != foo >= ( "bar" ) ) ) ;
 - ! foo . foo >= ~ - - foo { ! 123 != 123 ( ) -- ;
 } ;
 } ;
 } ;
 } else { true = ~ ( ~ foo ( foo , foo ) ) ;
 } ;
 } ;
 } else { for val foo int . int = 123 ;
 "bar" ;
 ! ! ~ - ( ( ( foo ) [ false ] >= false ) ) ( ) | ( false . foo ) == ~ 123 { "bar" ++ ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 foo int ;
 foo int ;
 foo int ;
 func foo ( foo int . int ) int { for val foo int . int = foo [ ! ~ foo . foo ] & true ;
 - "bar" <= 123 ;
 ! ( foo ( ) != ! ~ - ~ ~ - ! foo <= ~ false ) | ~ ( ~ "bar" ) ( foo . foo > ! ( ( false ( 123 != ( false == - ~ "bar" ) , true ) ) ) , "bar" ) { ~ ~ false ( ! true == - ~ ~ ! ! foo . foo , ! ! - true ) ;
 } ;
 } ;
 foo int . int . int ;
 func foo ( ) int . int . int { foo ;
 } ;
 func foo ( ) int { if ! ( "bar" ) . foo { for val foo int = false ;
 ~ ~ 123 ;
 - ( 123 ( ) ) /= ~ ! - "bar" ( "bar" , ( - ~ foo ( ) ) ) { true **= - true & 123 ;
 } ;
 } else { ( ~ foo ( ! ( foo ) != foo , - "bar" > 123 ) ) ( 123 , false ) -- ;
 } ;
 } ;
 func foo ( ) int { if 123 { false == - false *= ! true ( ) ;
 } else { ~ false . foo += ! foo . foo ;
 } ;
 } ;
 } ;
 val foo int = foo ^ true & false ;
 val foo int . int . int = - true ;
 
