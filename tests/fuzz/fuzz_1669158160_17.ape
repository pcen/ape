module foo ;
 class foo { func foo ( ) int { if - true [ ~ - ! "bar" ] { ~ 123 / 123 ( ) ;
 } else { for val foo int = ~ ~ false ;
 - ~ ! ~ false ;
 ~ 123 += - foo . foo { - foo -- ;
 } ;
 } ;
 } ;
 func foo ( ) int { if "bar" != ! ! ! ! ! ~ ! - - ~ - ~ ( ~ ! ~ ! ~ - - ~ ! 123 ( 123 ( ) , "bar" [ false ] ) ) [ true ] { 123 ( ) ;
 } else { for var foo int = - ( ! true ) | ( true ( ( - ~ ! - ~ foo ) > ! ! true . foo , false ( ~ 123 , foo ) - 123 ) ) ;
 foo != ~ true ( ) ;
 - ( false ) { true ;
 } ;
 } ;
 } ;
 func foo ( foo int . int ) int { true ;
 } ;
 func foo ( foo int . int . int , foo int . int , foo int . int . int , foo int . int , foo int . int . int , foo int ) int . int { for val foo int = ~ ~ - ~ ! 123 == true ;
 ~ 123 ;
 - ~ - ! 123 += ! - "bar" . foo { if foo { - ( - ! ! - ! ! - foo ) ;
 } else { ( ! ( 123 ) ) / "bar" **= false == - ~ 123 > ! - ! ( foo ) ;
 } ;
 } ;
 } ;
 func foo ( ) int . int { if ~ true { for val foo int = false ;
 false [ - 123 [ foo == ~ ( true [ true / 123 ] ) ] ] ;
 ! ( false > ! false [ 123 ] != ! foo ) { for val foo int . int = ! ! - ~ "bar" != ( ! true ) . foo * ~ - ~ true ;
 ~ ~ ! 123 ;
 true -- { - ~ ~ false -- ;
 } ;
 } ;
 } else { ! false ;
 } ;
 } ;
 func foo ( foo int . int , foo int . int . int ) int { 123 [ ~ true | 123 < ~ false ( ) ] -- ;
 } ;
 foo int . int . int ;
 func foo ( ) int { for val foo int = "bar" [ foo & - ! ! ~ - - true [ ! 123 ] ] ;
 foo ;
 - - ~ ! - "bar" [ ~ ~ ! ! "bar" ( ) ] { for val foo int = ~ - 123 ;
 foo ( ) ;
 false . foo ++ { true & foo [ "bar" <= 123 ] ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int . int , foo int . int ) int { for val foo int = - foo ( ! false , ~ ! - ! 123 - false / ( ( ! foo ) ) ) ;
 - false [ true ] ;
 - false -- { for val foo int . int = "bar" [ foo ] ;
 - ~ true ;
 false **= foo [ ~ 123 [ "bar" [ ~ false ] == - false ] ] { if "bar" + ~ true [ 123 . foo ] == false { - "bar" != ! ~ ! ! ! false < false ;
 } else { - ~ ~ ! "bar" > - - false -- ;
 } ;
 } ;
 } ;
 } ;
 foo int ;
 } ;
 class foo { foo int ;
 foo int ;
 func foo ( ) int . int . int { for var foo int . int . int = - foo ;
 ! ! ( ~ false ( foo , - ~ ~ true ) ^ "bar" > ~ false . foo ) [ ~ - - 123 ] ;
 false [ ( ( true != 123 ) / ( ( ! ! ~ ! - false <= - - - foo [ true . foo ] == ( ~ - ~ "bar" ) . foo ) ( ! - - ( ! "bar" ) | true , ( - ! 123 ) ( "bar" . foo , true [ - foo <= - - ( true * false . foo ) [ ~ foo == false . foo ] ] <= ( ! true <= 123 [ foo / 123 == ! ! ~ ! false ] ) . foo * ~ ~ "bar" ) ) == ! ! "bar" ) + ! false ) != foo ] ++ { for val foo int = ! "bar" . foo ;
 ! ( - ~ false != ! foo ) ( ~ ! ~ 123 , ~ true != - true [ - ! 123 / - false . foo ] ) ;
 foo / ~ true /= ~ - ~ 123 . foo { for val foo int = foo ;
 "bar" ( ) ;
 123 [ - ! ( ~ - "bar" ) [ ! - - foo ] ] { for var foo int . int . int = "bar" / ! ~ 123 ;
 - ( false . foo ) ;
 ! - - ( true [ true ] ) . foo | "bar" /= true . foo { if true { true [ - 123 [ ~ false - 123 [ "bar" ] ] ] * ~ 123 -= ( true ) < ! "bar" . foo ;
 } else { for var foo int = ! 123 ;
 ~ "bar" ^ "bar" [ ! "bar" [ false ] ] ;
 - - - ~ ! true { if - 123 [ ~ 123 [ "bar" == false ] == - ! 123 . foo ] { if foo { - ~ ( false ) - true -= ! true >= false ;
 } else { if foo [ ~ false ( false [ ! "bar" ( ! 123 ( ~ ! ~ "bar" , - ( false / ~ ! ~ - 123 ) ) * ~ foo , ( - ( - ~ ~ false ) . foo != - false ) ) ] & true - foo ( - - foo [ false ] , - false ) <= - ( ~ foo / - - ( ! ( true ) ) == true ) , ! ( ! ! foo ) | ! - ! true . foo * ~ true ) >= - ! ( - - "bar" ) ] { for var foo int = ~ - ( "bar" ( ) / ~ foo [ - ! ~ true ] ) ;
 true ( ) * ( 123 & true ) == ! ~ "bar" ;
 "bar" { for var foo int = ! ~ false ;
 true ;
 ! ! false -= - ! "bar" == - - - false { "bar" -- ;
 } ;
 } ;
 } else { 123 > - - - false -= ~ ~ ( ~ - ~ ( "bar" ( ) > false . foo ) . foo ) ;
 } ;
 } ;
 } else { if - ! - ! ! true + true { if ~ ! false [ "bar" ] == - ! foo ^ ~ 123 / 123 { ~ ! 123 = - false ;
 } else { if 123 { for val foo int . int . int = - - ~ - - true ( ) ;
 ( false ) ;
 - ~ ( foo [ - ~ ( ~ false [ - 123 [ true ] ] ^ ( ! false / - ~ ~ ! false ( ! ! ( ( true ) ) . foo , "bar" ) ) ) + true ( - ~ ~ - ~ ~ - ( true ) [ ~ 123 < - foo ] == ~ 123 , ! false ) ] ) { ! ~ false ;
 } ;
 } else { for val foo int = ( ~ foo != ~ ! ~ ! ~ "bar" ) ;
 - ! true [ ~ foo ( ! ! - ! false / - ~ "bar" . foo + 123 != 123 , - foo ) ] ;
 "bar" { for val foo int . int . int = - "bar" ;
 "bar" [ 123 ] ;
 ~ ~ true **= ! ~ ! ( - false ) <= foo ( ) ^ true { ~ - ! ( 123 ) ;
 } ;
 } ;
 } ;
 } ;
 } else { - ! ! - ! ! ! 123 *= - "bar" ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 foo int ;
 foo int ;
 foo int ;
 func foo ( ) int { if - 123 { for var foo int = ~ false [ - - foo - true . foo ] ;
 "bar" ;
 ~ "bar" . foo { for var foo int . int = true ;
 false ;
 ( ( "bar" ) ) ++ { for val foo int = false ;
 true > - ~ ! ! true ;
 ! false ( ) += - ~ - ! - ( ! "bar" [ true ] ) * ( ~ foo . foo ) { foo . foo -- ;
 } ;
 } ;
 } ;
 } else { ! ( "bar" ) - ! true += - ~ ( - ! ~ ~ ! ( ~ false [ true . foo ] ) ) == foo + ! 123 / ! "bar" ( ( ( true ) [ 123 > ! ~ 123 ] ) . foo , true ) ;
 } ;
 } ;
 func foo ( ) int { "bar" [ true [ ! foo ] ] -= ! true ;
 } ;
 foo int ;
 func foo ( foo int , foo int . int . int , foo int . int , foo int , foo int , foo int . int . int ) int { false += false ;
 } ;
 } ;
 val foo int . int . int = - ~ - ! - ~ "bar" ;
 class foo { foo int . int . int ;
 func foo ( foo int ) int { for var foo int = foo [ true . foo ] ;
 foo ;
 ( ! ~ ~ false ( ) != ~ ! ( - ! false [ 123 ] ) ) ( - ~ ( ! ! 123 ) ( ( 123 . foo ) , true [ - ! foo ] ) , true ) { for var foo int = false ;
 ~ ~ "bar" / "bar" ;
 foo [ ! ! 123 ] { "bar" *= - ~ ! ! ! ( ! ! - - true ) >= - "bar" ;
 } ;
 } ;
 } ;
 func foo ( foo int . int , foo int . int . int , foo int . int , foo int . int ) int { 123 ++ ;
 } ;
 func foo ( ) int { for val foo int = ( ! - 123 ) ;
 false ;
 ! - 123 [ ~ 123 | - ~ - - 123 ] { ~ foo [ "bar" ] ;
 } ;
 } ;
 foo int . int ;
 foo int ;
 foo int ;
 func foo ( ) int { for val foo int = foo == ! ~ "bar" ;
 ~ ~ ( ( "bar" [ - "bar" <= - ~ ! 123 ] ) ( - ~ - foo , ! ~ - ! true [ 123 ] ) ) ;
 ~ - ~ - ~ ! ~ - ~ - true { if foo <= ~ ! ~ ! false { ! ! "bar" /= "bar" <= "bar" ;
 } else { ( foo ) -- ;
 } ;
 } ;
 } ;
 foo int . int ;
 func foo ( foo int , foo int . int , foo int . int . int , foo int ) int { for val foo int = ~ ! "bar" ;
 - ~ - ~ ~ 123 - - true != ! "bar" / foo ;
 false = 123 { if "bar" [ ~ - false - foo ] { for val foo int = ! false [ false - ! true ] != ! ! - 123 ;
 "bar" ;
 - ! ( false . foo ) [ - 123 ] != ( ! - - - 123 ) >= - "bar" { for var foo int = ~ true ;
 - "bar" ( ) ;
 foo [ 123 ] + - foo . foo { 123 & foo ;
 } ;
 } ;
 } else { if foo / 123 - foo [ 123 ] { for var foo int = - ! true ;
 "bar" ( ) ;
 "bar" . foo & 123 . foo -= ! false ( ) { if ~ - ! ~ - - false + true [ ~ ( ! ! ( ~ 123 ) ) ] { ~ ! ! ~ true ^ true ++ ;
 } else { - ! foo [ - ~ ~ foo ] /= 123 ;
 } ;
 } ;
 } else { if ( foo ( ) / - - true ) ( "bar" . foo , false ) { ! ! ! ! "bar" [ true ] ;
 } else { ! ~ ( - false <= - ! ~ ! - - ~ ~ - foo & ! foo ( ~ - true - ~ - "bar" >= - - "bar" , ~ foo [ - - ! 123 [ "bar" < - ! ~ - true [ false < ! false . foo ] ] >= ( true ( ( ! 123 & 123 [ ~ ~ "bar" . foo > - foo ] ) , - false ) == false ) & - ~ 123 . foo | foo ( ) == - foo ] ) ) *= ~ - 123 ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 var foo int = 123 ;
 func foo ( foo int , foo int ) int { foo | ! ~ - true += ~ - ~ ~ 123 ;
 } ;
 var foo int . int . int = ! false & ( false ( - ~ ! - ~ true , ! false ( "bar" , false ) ^ ~ - - "bar" ) ) ;
 var foo int = "bar" ;
 func foo ( ) int { true -- ;
 } ;
 class foo { foo int . int ;
 func foo ( ) int { for val foo int . int . int = foo ;
 ! ~ ~ 123 . foo / false ;
 foo [ foo ] | - ~ ~ ! "bar" [ ( - ! "bar" . foo != - true ) - ~ ! foo ] ++ { - ~ - "bar" ++ ;
 } ;
 } ;
 func foo ( ) int . int { for val foo int . int = ~ ! ! ~ 123 ( ! - ( ! 123 ) . foo , "bar" + ! false <= true . foo ) ;
 ~ ! ! foo . foo ;
 true { - "bar" > true != ! ! - ~ ( ( - true > - false ^ false ) ) [ - false ( ) ] -- ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int . int . int ) int { ~ - foo [ - "bar" ( true , - ~ ! - foo [ - ! ~ ( ( - ( ! false ( 123 , 123 ) ) <= foo ) ) . foo ] ) ] / true ;
 } ;
 foo int ;
 } ;
 class foo { func foo ( foo int . int ) int { for var foo int . int . int = 123 ;
 ~ ! foo ;
 ! ~ ~ foo -= foo != ! ! ~ "bar" { ~ - 123 += ! ( "bar" ) . foo ;
 } ;
 } ;
 func foo ( ) int . int { if false | 123 { if ~ ! ~ "bar" == 123 - true { for var foo int . int = - ! ~ "bar" ;
 false ;
 ~ - ( - false [ - ( ! ~ true ) != - "bar" ] > true ) *= - foo { if true ( true , ~ - ! - ! ~ false [ ~ ! "bar" ] / - ~ ( - ! ~ ! foo * - 123 ) ( ( ~ false ( ) ) ^ ! ~ true >= foo - "bar" , ! - true ) ) { ! ! ~ true [ ( ~ ~ "bar" ) ] **= ~ ~ 123 ;
 } else { ! ! foo /= false ;
 } ;
 } ;
 } else { ~ ~ foo * foo . foo -= ~ ! - ! 123 ;
 } ;
 } else { foo ;
 } ;
 } ;
 foo int ;
 func foo ( ) int { ! - false ( - 123 * ~ - - - foo , ( false ) < false / true ) *= true . foo ;
 } ;
 func foo ( ) int . int { ~ false ++ ;
 } ;
 foo int . int . int ;
 foo int ;
 foo int . int . int ;
 foo int ;
 func foo ( ) int { ! 123 ( ) ++ ;
 } ;
 } ;
 func foo ( foo int . int . int , foo int , foo int , foo int ) int { if false ( ) { ( true ) [ - - ( true ) ] ++ ;
 } else { for val foo int = ~ - 123 ^ ~ "bar" == ! ~ "bar" >= "bar" [ ! 123 ] ;
 ! 123 < false ;
 true { if ! - ~ ~ ( ~ true [ foo ] == true ) . foo & foo { if ! 123 { for var foo int . int . int = ~ ~ "bar" ;
 ~ - - false ;
 foo **= false [ ( true == "bar" ( ) / ! - ! ~ ~ - foo ) ] { if ( - - "bar" ) { for val foo int . int = - ! "bar" ;
 true ( - ~ false , "bar" ) ;
 ! ! 123 & foo . foo { for val foo int = false ( true / ~ - false , true . foo & foo ) * - true ;
 123 ( ) ;
 foo { false ;
 } ;
 } ;
 } else { if - ~ false { for val foo int = false / ( 123 ) != ! ~ - 123 ;
 ( ( - ! 123 . foo & true ( ~ 123 [ false ] , false | "bar" [ "bar" ] ) == true ( ) + foo ( ! ~ foo , true ) ) . foo ) ( ) ;
 true | ! ( - ! true ) ( ) -- { for val foo int = "bar" ;
 foo [ ! ( ! ~ - ~ ~ - - false ) + ~ - ~ ~ 123 ( ~ ! ~ foo , - true ) ] >= false ;
 - - false == ! "bar" -= ! - - false { for var foo int = ~ 123 ;
 false ;
 foo [ - ! false / false ] == foo ++ { - 123 ( ~ - 123 , ~ ~ - ! "bar" [ ! ! true <= - ( false <= 123 ( ( ! - ! false ) [ ! foo + ! - 123 ] , ~ ~ ! foo ) * "bar" ) == ( true . foo ) ] ) **= - 123 . foo ;
 } ;
 } ;
 } ;
 } else { ! ~ ~ "bar" ( ! false , ~ - ! ! ~ false ) ;
 } ;
 } ;
 } ;
 } else { if - true [ 123 ] { for val foo int = 123 ;
 true [ "bar" ] ;
 ~ ( 123 ) ( ! - foo , false ( ) ) * ( ! true [ - false ] / - - ! false <= foo ) { for var foo int = ( ~ ( ! ~ ~ ( true ) ) > ~ "bar" . foo * ~ "bar" ) ( ) == "bar" [ 123 ] ;
 false ;
 ~ 123 ( false > foo , ( - ! ! foo != ! ! 123 ( ) ) ( true . foo / ! 123 , ! foo ) ) { if foo { foo ;
 } else { ~ ~ ! foo ;
 } ;
 } ;
 } ;
 } else { 123 ;
 } ;
 } ;
 } else { 123 -- ;
 } ;
 } ;
 } ;
 } ;
 func foo ( ) int . int { ~ "bar" ++ ;
 } ;
 val foo int = ! "bar" ( true , "bar" ) ;
 class foo { func foo ( ) int { for var foo int = false ;
 ~ - true ;
 ( false <= ! true + - ! ~ "bar" ) *= true * ~ 123 [ true ] { true ;
 } ;
 } ;
 foo int ;
 func foo ( foo int . int , foo int , foo int , foo int . int . int ) int { ~ true **= false ;
 } ;
 func foo ( foo int . int ) int { "bar" ( ) ;
 } ;
 func foo ( ) int { for val foo int . int . int = - 123 . foo ;
 ( - - 123 ( - - "bar" , - true ( ) ) ) / ~ - ~ ! 123 ;
 ! ~ 123 [ foo [ foo ] ] { for var foo int = "bar" ^ foo == "bar" . foo ;
 ! ! ~ "bar" - "bar" . foo ;
 123 . foo >= false { for val foo int = ~ - ! - 123 ;
 foo ( 123 , ~ false [ - ! ! ! - ! true ] ) + ! true ;
 - foo + 123 { for var foo int . int . int = 123 <= ! 123 ( true , false ) ;
 "bar" ;
 ! ! ~ foo . foo & true ^ ! foo *= ~ true ( ) { ! ! ~ "bar" **= ~ ~ ! ! ~ 123 ( ( ! - - "bar" != "bar" * ! ~ "bar" ( ) ) , false ) ;
 } ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int . int . int ) int { true ( false & - "bar" , ! true . foo ) ++ ;
 } ;
 func foo ( ) int . int { if 123 { if 123 { for val foo int = ! "bar" ( true - - foo . foo * ~ true , 123 [ ! ! true . foo ] ) ;
 123 <= true & ! "bar" ;
 true = "bar" [ 123 ( ) ] { - - "bar" ++ ;
 } ;
 } else { ! 123 [ ~ false ] ;
 } ;
 } else { - false ;
 } ;
 } ;
 foo int ;
 } ;
 val foo int . int . int = 123 [ - ( ! false ( ) + ~ ! ~ ~ 123 != 123 < ~ false ) . foo ] ;
 val foo int . int = ~ foo ;
 val foo int . int = ~ - - true ;
 val foo int = true ;
 func foo ( ) int { ~ ~ 123 -= ( - ! ! ! ~ "bar" ) ( ) ;
 } ;
 class foo { foo int ;
 foo int ;
 foo int . int . int ;
 func foo ( foo int , foo int , foo int ) int { foo ;
 } ;
 } ;
 val foo int = false ;
 class foo { } ;
 class foo { func foo ( ) int { for val foo int = ~ ~ true . foo ;
 "bar" * ( false [ "bar" >= ( ! 123 ( ) / ! ~ ( ! ( ~ true ) ) ) ] ) ;
 ! 123 . foo - 123 += ( true ) >= 123 { true / - - - - false != - foo ++ ;
 } ;
 } ;
 foo int ;
 } ;
 func foo ( ) int { ~ - ! false /= ~ - 123 > 123 / "bar" ;
 } ;
 val foo int = ~ - 123 ;
 class foo { } ;
 func foo ( ) int . int { ~ true ;
 } ;
 val foo int . int . int = false ( ) ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) int { 123 = foo ;
 } ;
 func foo ( ) int . int { if false { for val foo int = "bar" [ ! ~ 123 . foo ] ;
 ~ ~ - - ~ - "bar" . foo ;
 - - foo [ false ] * 123 ++ { ! ~ ! "bar" ;
 } ;
 } else { ~ 123 ;
 } ;
 } ;
 class foo { foo int ;
 foo int ;
 func foo ( foo int . int , foo int . int . int , foo int . int . int , foo int ) int . int . int { if true / ~ ! ~ - true { ~ foo ( ) -- ;
 } else { ( - true ) > ~ ( ! false ( ) ) -- ;
 } ;
 } ;
 func foo ( foo int . int . int , foo int . int ) int { ! true * ~ ~ - ~ - - foo < true ;
 } ;
 func foo ( ) int { "bar" [ - ~ ! foo ] == ! - ! 123 ++ ;
 } ;
 foo int ;
 foo int ;
 foo int ;
 } ;
 var foo int = ~ "bar" ;
 func foo ( foo int . int . int , foo int , foo int ) int . int . int { for var foo int = "bar" ;
 123 ;
 123 = ~ ! ! foo { ( ~ 123 ) [ - ! ! ! 123 ] | ( ~ ( "bar" [ - true . foo ] ) ) -- ;
 } ;
 } ;
 func foo ( ) int . int . int { for var foo int = "bar" & - - foo ;
 - "bar" . foo ;
 123 [ "bar" [ ~ "bar" != - ( ! foo ) ] * ~ ~ "bar" ] { foo ++ ;
 } ;
 } ;
 class foo { func foo ( foo int . int , foo int . int . int , foo int ) int . int { for var foo int = ~ true ;
 ! true [ ~ ! ! ! "bar" ( "bar" , true [ - "bar" ] & ! foo ( ~ 123 [ ( "bar" ) [ - - ~ "bar" ] != ( "bar" ) / - - - 123 . foo ] + false ( 123 ( true , false ) , - ~ 123 [ "bar" . foo > ( ~ foo ) ( "bar" ( false , - ! foo ) , true ) ] * 123 ) , ~ ~ ! ~ ! ~ ! ! ( true < - ~ ! ~ ~ ( ( false ) ( ( false ) ( ) == foo ( ) < ~ ~ ~ "bar" , false [ ~ ( "bar" ) [ ! ! ( ( false . foo ) ) ^ - ! - true ] ] ) != "bar" ) . foo ) ) - foo ) ] ;
 123 { for val foo int . int = ! ~ ~ - ~ foo ( ) ;
 ! true ;
 ( foo ) { for val foo int . int . int = - foo . foo ;
 foo <= - foo ;
 ( 123 ) -- { for val foo int = ! ! - 123 ;
 ! foo ;
 true += - "bar" { false & "bar" [ true ( ) ] ;
 } ;
 } ;
 } ;
 } ;
 } ;
 foo int ;
 func foo ( ) int { for val foo int = ! false ;
 foo ;
 ~ foo [ ( - true * ! ~ true | 123 ) [ "bar" * false - - - ~ ~ ~ ( 123 ) ] > 123 ] -- { "bar" [ "bar" ] ;
 } ;
 } ;
 foo int ;
 } ;
 func foo ( ) int . int { for var foo int = - - true | foo ;
 foo ;
 123 -= foo & 123 { "bar" ++ ;
 } ;
 } ;
 class foo { foo int . int ;
 foo int . int . int ;
 func foo ( ) int { for var foo int = 123 . foo ;
 ! ! "bar" ;
 ~ "bar" [ ~ true [ foo ] | true < 123 [ true == true ] ] { for var foo int . int = true * "bar" == true ;
 - ~ ( false ( ) ) ;
 ~ - 123 + false [ ! false ] { ! - - - ~ 123 ;
 } ;
 } ;
 } ;
 foo int ;
 foo int ;
 func foo ( foo int , foo int ) int . int { ( ( ( ~ true < ! "bar" ) ) ) & ( ( ~ - "bar" - - ~ ~ 123 ) + - ! ~ "bar" >= ~ ~ - ~ ~ "bar" . foo ) -- ;
 } ;
 func foo ( ) int { ! ( foo > ( ( ! true [ ~ ! "bar" | ( ! - 123 ) == ( ~ ~ false ) | ( false - ~ true ) ] ) ( ! ~ ~ "bar" , false ) ^ ! - ! "bar" ) ) != ! false ;
 } ;
 foo int ;
 foo int ;
 } ;
 var foo int . int . int = true > "bar" ;
 class foo { } ;
 val foo int = ( ~ - false >= ! ~ foo ) ( ) ;
 class foo { foo int ;
 func foo ( foo int . int . int , foo int . int . int , foo int , foo int , foo int ) int . int { ! ( ~ ! ! "bar" ^ - ~ - ~ true > ! "bar" ) /= foo ( ) ;
 } ;
 func foo ( ) int { if foo / - - - ! true . foo != ~ - ~ ! - foo + false ( ~ - foo == ~ true , false [ false ] != 123 ) { ! ~ "bar" & - true [ ! - false . foo ] == ~ ! ~ ~ foo [ true ] /= foo . foo ;
 } else { if "bar" { ( - 123 . foo ) -= - "bar" / "bar" ;
 } else { true [ true != - "bar" & false ] -- ;
 } ;
 } ;
 } ;
 foo int ;
 func foo ( ) int { if 123 { for var foo int = ~ "bar" ( ) & ! ! foo ;
 true != "bar" ( false [ ! "bar" ] , - - true [ false ( ~ ! false , false * ~ false ) & ~ foo [ 123 ] ] == ! false [ "bar" [ ~ false ] ] ) ;
 ! "bar" ( ) -- { "bar" | ! true ( "bar" > true , ! 123 . foo ) **= false ;
 } ;
 } else { ~ "bar" ;
 } ;
 } ;
 func foo ( foo int , foo int . int , foo int , foo int , foo int . int ) int { ~ 123 [ ~ true - ( - 123 . foo ) < ! "bar" ] * false **= - "bar" . foo & ! true ( ) ;
 } ;
 func foo ( foo int . int . int , foo int ) int . int . int { for var foo int . int . int = ~ false ;
 - ! - true + foo ( ( "bar" ) ( false , ! ! false ) , ~ - 123 + ~ ~ false ) ;
 ~ "bar" > true . foo ++ { if - ~ false [ "bar" ( ( true ) [ - false ( false != - ! foo , - true ) + 123 == true ] , false ) ] / - true { if ! ! ! ~ ! 123 [ - - - ~ true ] { ! ! "bar" < true *= ! "bar" ;
 } else { for val foo int = 123 <= 123 ;
 ( - 123 ) [ ~ - ~ false ( ) < ! - 123 * foo ] ;
 ~ ! foo . foo | - ! 123 < ~ - "bar" *= "bar" . foo { for var foo int = - ! false == - - ! 123 ;
 - - - ~ ~ false ;
 false /= - 123 + ~ 123 [ ! - ~ ~ 123 ] { for var foo int . int = ( ! ~ 123 [ false [ - ~ true == ~ ~ ~ - 123 * false ] ] ) ;
 ! foo ( ) ;
 ~ 123 ( ) { if ! 123 [ ~ - "bar" ] { for var foo int . int . int = ~ ~ false [ "bar" ] ;
 false ;
 - ! ~ ! false -- { for var foo int . int = ~ 123 ;
 true ;
 ( "bar" * 123 | true ) { if ! "bar" { 123 | ! - - ! ~ foo -- ;
 } else { true >= false . foo **= "bar" != 123 ;
 } ;
 } ;
 } ;
 } else { "bar" ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { for val foo int . int . int = - ! ~ true ^ ! ~ foo ( - false ( true * - false - ! true , true & "bar" . foo ) , ! false . foo ) ;
 - ! true ;
 ( false . foo != "bar" ) { if ~ "bar" != - 123 { ! ~ ~ ! ~ false < ! "bar" / false | ! 123 -- ;
 } else { if 123 { if - ~ false { for var foo int = ! ( 123 ) ;
 ~ - - "bar" * true ;
 123 . foo <= ! foo ++ { if ~ ( "bar" . foo ) <= ! true - ! ! "bar" { ! 123 [ - foo [ - 123 . foo ] & foo [ ~ - ! ~ ~ ! true ( - ~ "bar" , - ! ! true ) ] ] | ! "bar" ++ ;
 } else { - foo & foo -- ;
 } ;
 } ;
 } else { - ~ ~ "bar" ( ~ 123 & 123 [ true ] , ! ~ - true & - foo ) * foo -= ! - - ! - "bar" ;
 } ;
 } else { for val foo int = true ;
 - ( ! true ( ) ) . foo < - ~ ! true ;
 - - - - foo [ ! - true ] ++ { true . foo = ~ true . foo ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int . int , foo int , foo int ) int { for var foo int = foo ^ ( ! foo != "bar" . foo ) [ true ] ;
 ~ foo ;
 ! ~ "bar" [ foo ] -- { ~ "bar" ++ ;
 } ;
 } ;
 foo int ;
 func foo ( ) int { ! - false **= ~ foo ;
 } ;
 } ;
 class foo { func foo ( ) int { - 123 + ! ~ 123 & ( "bar" - ~ ! true . foo ) ;
 } ;
 func foo ( ) int . int { if ! - 123 [ ( ~ - true * - "bar" | ! foo / ~ foo ) <= false ] { - ! true . foo ^ ! true . foo ;
 } else { ( foo [ - - "bar" ] ) - - ! true & foo ;
 } ;
 } ;
 func foo ( ) int { if foo ( ) { for var foo int = true ;
 "bar" == ! 123 ;
 true ++ { false /= ( ~ ( ~ - false [ true ] ) . foo - - 123 ) / ~ "bar" == true ( ) ;
 } ;
 } else { if ( ~ - ~ - - ! false ) { ! foo . foo /= "bar" / foo ;
 } else { false = "bar" & - false >= "bar" ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int ) int { if ! ~ ( "bar" . foo ) & false ( ) { for var foo int = ( ( false / ! - ( true . foo != ( ~ ! ( foo ( ) ) ) <= - 123 ) ) - ~ ~ ( false ) == ( "bar" [ false - - - false ( 123 == foo , foo ) ] ) . foo / "bar" ) ( ) ;
 ( ~ ( ~ - true ) . foo > false ( - - true ( ) , ! ~ ~ ( ! ( false ) ) != - ~ ! 123 ) ) . foo ^ foo . foo ;
 - ! false . foo >= ~ false -- { for var foo int = ~ ~ ! "bar" & ! ( ~ ~ ! ! true | ~ "bar" ) [ false ( ) > - false == - true ] >= ~ - - true ^ - ! "bar" . foo ;
 - "bar" ;
 ~ foo -- { if - true { false ( ) ;
 } else { if ! ( ! 123 [ ~ ~ true . foo ] ) - - foo ( foo , - ~ ! ! ~ true < ~ - ( ~ ~ 123 ) ) { ~ "bar" -= ( foo / 123 . foo ) . foo ;
 } else { for var foo int = foo ;
 - ~ - ! 123 ;
 foo **= - ~ false { for var foo int . int . int = - ! false * ( ~ ~ ( true ) ) <= true ;
 "bar" ;
 ~ true == ~ "bar" += true <= ~ true . foo { true [ ~ foo ] /= ~ ! false ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { ! foo -= 123 * - - ~ ( false != - "bar" [ ! - ( ! ~ - true ) . foo ] ) ;
 } ;
 } ;
 foo int ;
 foo int ;
 foo int ;
 foo int ;
 func foo ( ) int { for var foo int = true ;
 - ~ ! "bar" != ~ false ;
 "bar" { ! 123 [ 123 ( "bar" [ ~ ~ true ] , 123 + ~ - true < ! ! ( ! true [ ~ ~ ( false ) [ foo ] - - ! "bar" == ( ~ - ~ true ) ] ) [ ! "bar" . foo ] ) * - - 123 ( ! 123 , ! true ( false / ! ~ 123 | ~ ~ false ( - ~ - ~ false * ~ - false , - ! "bar" ) , foo [ - - ~ 123 . foo ] < - false ) ) ] ++ ;
 } ;
 } ;
 func foo ( foo int ) int . int { ! ( ! ( ! ( ! ( - foo . foo ) ( ) ) ( - false . foo , - false . foo ) ) ) /= ( - true ) + ~ true ;
 } ;
 } ;
 class foo { foo int ;
 func foo ( foo int . int ) int { ~ ~ foo ;
 } ;
 foo int ;
 foo int ;
 func foo ( foo int . int , foo int . int , foo int ) int { if - ( ~ ! 123 ( ) & "bar" ) ( ) * ! - 123 [ foo ] { if ~ ~ ( foo . foo ) | true ( "bar" . foo & ! 123 ( ) , ! ~ "bar" ( - ( "bar" / ! ! "bar" . foo ) . foo , ~ ( foo ) ) ) != - - ( false * ~ ( - false ) [ true [ false ] / - ~ ! - ( "bar" ) == true ] ) [ - true ] { ( - ( ~ - ! "bar" ) ) - false [ - ! foo ] ++ ;
 } else { for val foo int = "bar" ;
 false ;
 ! ! true [ - ~ "bar" < ~ ! ( ! - false [ ~ foo ] ) . foo ] | ( true ) [ ~ 123 [ ! "bar" . foo ] ] == ~ "bar" { for val foo int = ~ foo ( ( - 123 . foo ) , ( ~ ! ( foo ) [ false > true ] * foo ) == ~ ! false ) ;
 "bar" [ foo ( ) ] ;
 ~ foo [ ! ~ ! true ] { for var foo int . int = true ;
 "bar" . foo ;
 ~ ! ~ ! - ~ ( true ) . foo -- { ! foo != foo [ ~ - ! ~ - foo ] ;
 } ;
 } ;
 } ;
 } ;
 } else { for val foo int . int . int = ! ! - ! false ;
 ! false [ ! 123 < "bar" [ ~ ! false ] ] ;
 123 ++ { ! ! ~ - - ~ - ~ ~ ! ! - false - - true ;
 } ;
 } ;
 } ;
 foo int ;
 foo int ;
 } ;
 func foo ( foo int , foo int , foo int ) int { for val foo int = 123 ( 123 / - foo , ( true [ ( ~ ~ true ) . foo ] ) < 123 ) ;
 - "bar" ;
 false . foo >= foo += ~ ~ 123 { ~ ~ 123 ( "bar" , ~ ~ ! foo < ( ! 123 ) ) = false != 123 ;
 } ;
 } ;
 
