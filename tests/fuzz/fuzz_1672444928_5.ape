module foo ;
 var foo int . int . int = ! ( - false ( "bar" , ! false != ( - ! ~ - ~ ~ ! ! ! foo < true . foo and "bar" ) ( - ( - false ) [ ! foo >> - ! true < 123 ( ! ~ ~ false , ~ true and ! foo [ true << foo . foo ] == ! ! ~ ( ~ ! ~ - ~ ~ foo and true << ~ "bar" or ~ true [ - foo ( ~ ( - ( ~ - "bar" and 123 [ true ] ) ) and true , 123 ( ! foo != 123 ( - 123 ( ! 123 ( ( false == ~ foo ) [ ~ foo or 123 . foo & - true ] < ( foo ) [ ( false [ 123 ( ( ( "bar" ) [ "bar" ] % - true <= "bar" ) , - - 123 >> ! - ( ( - 123 ) ^ ~ true or - 123 [ "bar" <= false and foo / "bar" - ! 123 . foo == ~ ! foo ] >= 123 ) and false > false ) ] ) ] , - "bar" ) <= 123 ^ ! foo and ( "bar" ) or - true [ "bar" and false [ - ~ false [ ~ ~ false [ false * false ] < ( "bar" ) * ( ( foo ( ) + ! ! ~ ( false ) ) ) . foo << true ] << ~ true ] ] + foo [ true ( ) and ( ( "bar" . foo ) ( ) > ~ ! ( ~ foo [ 123 ] and 123 ) . foo == - - - ! 123 ) >> ~ foo ] , 123 . foo and 123 ( ) & foo [ foo * - ~ "bar" . foo ] ) >> - - ~ ! false , true . foo ) , 123 and - ! - foo . foo ) != true . foo - ~ "bar" / - - 123 ) ] ) << true ) + ~ foo ( ) ] < "bar" and ( - ~ "bar" >> - - ~ "bar" ) , false ) ) + ~ ~ ( ( ! - ! ! - "bar" ) ( ) * ( true ) ( - ! ! 123 , false ( ~ foo ( ~ 123 , - foo * ~ "bar" ) * true , "bar" ( ~ foo ( ) - "bar" , - true [ "bar" ] / 123 ) & "bar" ) > foo ) and ~ ~ true * ~ ! - "bar" . foo ) <= ! true == ~ - "bar" >= false ) ( ) ;
 var foo int = false [ - - ! ! - ( 123 and ! "bar" [ - - - ~ ! foo ] - - false [ - false [ 123 ] ] ) ] and ( ( 123 ) . foo ) [ true ( true , ! ! "bar" or ( true ) [ ! foo ( ) or false ] >> ~ - "bar" ) != ( 123 ) or ~ - true . foo ] ;
 class foo { foo int ;
 foo int ;
 func foo ( foo int ) int . int { ( ! ! ( - foo [ false . foo | - ( - ! - ~ foo and false % ! false ( ~ "bar" , ! ! true ) + foo ( ) ) [ true >= ~ ! - - ! ! ( false ) ] << 123 % ~ - ( ~ false and ~ - - foo >= false [ ( ! ( - - ~ ( "bar" ( ) and ~ foo ) ( ) * false ) ( - ! 123 >> foo , ~ ~ foo ) ) and ! true ( ~ false ( ! ! 123 ^ ~ foo << - - ! - ~ - foo . foo , false ) , ~ "bar" ) | ~ ~ - ! "bar" or - ! "bar" % ! foo . foo ] ) > - ~ ~ false ] ) ( ) ) >> ! false or ~ "bar" > ! - 123 == false < - 123 ( ~ 123 >= "bar" ( ) << 123 [ ! - false ] , false ) >> ! true ++ ;
 } ;
 } ;
 class foo { func foo ( foo int . int , foo int . int . int , foo int , foo int , foo int , foo int ) int { ( - ! "bar" . foo or ~ true ) . foo != - ( ! 123 ( ) ) ( ) = true and true % foo [ - ~ ! true == - - ( ! false [ foo << "bar" ] * true ( ) ) ( ! true and ! "bar" . foo & ~ "bar" , 123 | - ! - - false ) and ~ true ] or ( ! true [ - ( ~ 123 or foo >= ( ( foo ^ false . foo and - false ) [ false < true [ true ( ) ] or ( - 123 . foo >> false [ "bar" . foo - foo ] ) [ - 123 ^ false != ( ! 123 ) ] ] and ! true != foo or foo ) ) and ~ ( false ) * ( foo + 123 ) ] << - ! ! ~ "bar" ) > foo and true > ~ ! 123 * ! ! - ! ~ 123 ;
 } ;
 foo int ;
 } ;
 class foo { func foo ( ) int { var foo int = 123 % ! - ~ 123 + ! true >= ~ ~ ! ! ~ - true [ ~ 123 * ~ false ] ;
 } ;
 func foo ( foo int , foo int , foo int . int , foo int , foo int ) int { for val foo int . int . int = ~ foo ;
 ~ ! ( "bar" ( ) ) >> ~ ~ ~ "bar" == ! ! ! foo or ~ 123 >> - ~ foo ;
 foo [ - true + false ] { var foo int . int = ! 123 ;
 } ;
 } ;
 func foo ( ) int { var foo int = - ! 123 and ~ foo ;
 } ;
 foo int ;
 foo int . int . int ;
 func foo ( ) int { ( false ) [ ! ! ! foo % - ( ( ~ - - ~ - ! true ( ~ false ^ 123 , 123 . foo and - true ) != false [ - ~ true != ~ "bar" ] ) ) and "bar" or 123 . foo == ( ~ foo ( ( false ) , false [ foo [ ! - - true or "bar" ( ) >= - - ! false ( ) ] or 123 and ! ! - ~ ~ ! 123 [ foo << foo . foo >= ! ~ false [ true ] ] / ~ - ! 123 . foo ] ) ) ] -- ;
 } ;
 func foo ( foo int . int . int , foo int ) int . int . int { if ( ( ! true ( ) >> 123 . foo ) >> ~ ~ ( ~ 123 or ( ! "bar" <= ~ false ( - false << - foo [ ~ false ] / ! ( ~ ! ! false == 123 ( - ! ~ ( ~ false . foo ) . foo , - ! ~ 123 ) ) ( - ~ - false or "bar" and ~ ~ ! false [ ~ ! ~ ( - ! true >= ! - true ) [ ! "bar" . foo ] ] , ~ ( ! ~ ! - foo ( ) and - ( ! true and ( true or ~ "bar" << - "bar" . foo ) - "bar" ) ) [ 123 and ! - "bar" << 123 [ - - - ! false ] + true . foo or ( ~ ~ ~ - ( - true and ( "bar" . foo ) ) ) [ ~ false <= ~ false + - true ( true . foo & - ! ( foo or 123 ) <= foo * ! ~ "bar" ( ! ! ! - - "bar" [ ! ( ~ false [ ~ ! ( true ) ] > ! true + ( 123 << 123 [ foo or ! true ( false , true ) ] ) ) [ ! ! ( "bar" and - ! foo ) ] or - ! ~ - true + "bar" [ - - ~ - - - "bar" and ! ~ foo ] > - false . foo != 123 ] != "bar" ( ) << ( ( true ) != ~ true << foo % ( ! true / false . foo ) ( ( foo . foo ) | ! foo or false * false < foo , ( false . foo and 123 ) ( ) / ! ~ ( ~ false ) . foo ) ^ ~ ! false ) [ true ] , ~ ( 123 ( ) >> ! - 123 [ foo ] ) ) , - ~ - ! ! ~ foo % ~ ! true <= ( ( foo ) ) ) or 123 << ~ ! ~ "bar" == ! false ( ) ] ] * - ~ true and ! true << ~ 123 ( - ! ( ( true >> true . foo ) & 123 [ foo and ! false ] ) [ false != - ( ( true . foo ) ) and 123 > - - ~ false * - ! false . foo ] >= - false . foo == ~ false , true or ~ ! "bar" != ~ 123 ) or - foo > ! - false ) , ! ! 123 ) ) [ true . foo > ! 123 ] ^ true ) ) [ ( ( foo ) ) ( ) ] { 123 ;
 } else { for val foo int = ! false <= ! ( ! true >> ~ ~ ! - "bar" and - ! - - ! true - true ( false [ ~ false - foo ] / false ^ ~ ~ - true << "bar" / ( - ~ true >> ! 123 and false ) and ! true > ~ true == ~ ~ foo << - ! "bar" , ~ true & "bar" [ false % false << ~ - ! foo and foo ( false , ~ ( true | "bar" ) . foo and - ~ ~ 123 . foo ) ] | ~ 123 / ~ - ! - ! foo [ foo != ~ true ] ) or - ! ~ ( ! - ! "bar" and true . foo ) . foo ) ;
 ( false . foo <= - - "bar" . foo and ! ( ( ~ ~ "bar" and ! ( ~ foo < ! "bar" ) ) << ! - "bar" ) ( ! true ( ! true [ ~ ! ! ~ ~ false ( 123 or - - false == 123 [ ! ! "bar" and ( ! false ( - "bar" and ! false , foo > 123 != foo and - true ) * ~ ! true < 123 - ~ - ( - ~ ~ - true ( ) + - false and true - 123 ) and - ~ false >= ! "bar" . foo or "bar" ) ] , "bar" ) * ( ~ false . foo or "bar" ) or - "bar" ] / - - ~ - ~ foo , ( ~ "bar" [ ~ true / ~ ! "bar" . foo ] << - true [ "bar" or ~ "bar" ] ) ) == 123 , ! "bar" ^ - "bar" ) ) ;
 - false -- { if - ~ ! ~ ~ ~ ~ ( - 123 ( - "bar" [ 123 [ ! ~ false ] ] ^ ! ~ "bar" , ~ foo [ "bar" <= ( ( "bar" ( - ~ - - - ( ~ - ~ ! "bar" or - ! foo . foo ) [ - ~ foo [ ! true ] == ~ ~ foo ( ! ! ! "bar" . foo == ~ "bar" or true . foo , ! true . foo or 123 << - ~ ( 123 [ 123 [ true ] or "bar" ] <= - - ! true % ~ - foo [ - - ~ ! ~ ~ - 123 or ! true . foo and false ] ) and ( false ) ) and ! ( 123 << ! - ( "bar" or true ) ) ] or foo < - ! ~ ! 123 , false ^ "bar" ) ) and - false [ - false ] ) ( ) ^ "bar" == ~ ( ! - ! ~ false and ~ ~ "bar" ^ ~ ! ! ~ - ! false [ - "bar" or false ] ) >> ! - ( - ( - - 123 and 123 * ~ ! ~ 123 <= ~ - ( ! - ! ( - ! ~ ( 123 . foo ) == false ) and "bar" >> foo ) . foo | foo ( ) ) ) ( ) or false [ ! ! ( - ~ ~ ( ! false % ( - ! - ! - - - 123 ( ) ) ) and ( "bar" ) ) ] ] and ! ( ~ ! false ) == false <= ! ~ ! - - 123 ) - true and - ( - "bar" and ! ! "bar" . foo != - true . foo % foo or "bar" and false . foo ) < - ~ false ) { if ~ ~ ! - ( ! - - "bar" ) { val foo int . int . int = - ! true ;
 } else { for var foo int = true / true or ~ - true ;
 - ! - false >> ~ - - true == ~ false & foo >> - - false . foo or false ;
 ! ! - ! ~ false { if false { for var foo int = - foo . foo and ( true & - true [ ! ~ ~ - foo . foo / true or ! "bar" ( ) ] >= false ) >> ( ( true <= foo [ - - 123 . foo == - ! ~ ! - false [ - "bar" and ~ 123 % ! true ] ] ) ) . foo ;
 ! false ( ~ true [ "bar" ] , ~ "bar" [ false >> "bar" ( ) / true [ true ] ] < - - false [ ! "bar" != true ] ) ;
 true [ 123 >> true and - ! "bar" . foo == ! "bar" [ 123 ( false != ! ! true . foo , ( ! true . foo ) and ~ ( ~ ! "bar" ) ) * ! "bar" and ! - 123 . foo < - ( ~ true . foo or ( ~ 123 . foo ^ - ~ 123 and ! ( ! ( "bar" ) ) - - - ! false << ~ 123 ( false [ ~ true >> - ! ( false . foo - ~ "bar" / ~ ! ! 123 >> "bar" [ ! ! ! 123 [ ! ( ~ ! - - ~ false ( ) ^ "bar" ) [ ~ false != true + ~ 123 ] - true . foo / - ! ! 123 ] != true ] ) ] << "bar" . foo , foo . foo ) or 123 ( ! - 123 , "bar" ( ) <= ~ ! ! foo [ false & ~ 123 [ ! ! ! 123 or ~ ! ~ ~ - ! ! true ] ] and - false == ~ foo ) ) - - ~ false != ! ~ ~ false ) [ - ! - ! - ~ 123 and ! ~ foo << ! false ( "bar" [ ~ foo . foo ] , - 123 ) ] ] ] ++ { true & ~ ( ~ foo ) ;
 } ;
 } else { "bar" [ ~ - ~ foo % foo ] >= "bar" << ~ ! 123 . foo + ! foo ++ ;
 } ;
 } ;
 } ;
 } else { for var foo int . int = ~ true or 123 ;
 ~ ~ 123 == ~ 123 . foo ;
 false | - 123 [ ~ true ( ) or "bar" [ "bar" [ ~ true - - "bar" ] ] ] -= ( true and 123 ) { false . foo and 123 *= ! - ~ foo [ true ] != ! ~ "bar" >= 123 and foo or - ~ - ( true ) ;
 } ;
 } ;
 } ;
 } ;
 } ;
 foo int ;
 foo int ;
 func foo ( foo int , foo int , foo int . int , foo int . int . int ) int { val foo int . int = ( ! - ( ~ - ~ ! true - ~ ! ~ foo and foo ) >> foo . foo != foo ( ! ~ ~ ( ( false < ! ~ ~ ! - ~ - ! ! 123 ) * ! "bar" [ true / 123 == foo ] or - ( true and ! false ) ) . foo < 123 , false * "bar" ) >> ~ ! foo and ! - - ( - - true ^ ! foo ( ( ! ! 123 ) [ ~ true ( ) or - true % true ] < "bar" . foo >> ~ ! "bar" , ~ ( ! foo == true <= ( ! ~ foo ) ) >= ! - - true - ~ ( ( ( true [ ~ ! 123 or 123 ] ^ false / foo and ~ ~ ! 123 [ ! ( 123 . foo ) ] >> - true > ~ ! "bar" ) . foo and 123 | ! - ( false != ~ - ! ! foo % "bar" >> ~ ~ true ) [ 123 . foo and "bar" ] & - ( ( foo and foo % ! - - ~ 123 or - ( ~ ~ false * ~ "bar" ( foo , ! ! - ! ~ - - false [ ( ~ foo ) ] < - foo ) and ! - foo or - - "bar" + ~ - ! - ~ - - ~ - ! false [ ~ ! ~ true . foo ] ) ) [ false [ false [ foo or ~ false ( ) ] and ~ ~ true ] << - ~ 123 / 123 [ ( true / - ~ ( ! 123 or ~ ~ 123 ) <= ( ( "bar" ) ) ( - ~ false . foo and ~ ! - - "bar" | ~ 123 or ( ! ! ~ ~ - ~ foo ) , - ~ - - true < true and ! false == 123 ) != ! ~ - ( "bar" ) ) . foo % "bar" ] ] ) ) ( ) ) ) <= foo . foo or ~ ~ ! ! - true < true . foo % false . foo ) . foo >> false ) ;
 } ;
 } ;
 class foo { foo int ;
 foo int . int . int ;
 func foo ( ) int { if true { for var foo int = - true != "bar" or ( foo + 123 ) ;
 "bar" ;
 ~ ~ true [ - "bar" >> ! 123 ] -- { true < "bar" = false << ! "bar" [ - ( - - ~ - ~ "bar" ) != ~ false ] ;
 } ;
 } else { val foo int = ! false ;
 } ;
 } ;
 foo int ;
 func foo ( foo int , foo int , foo int . int . int , foo int . int . int , foo int , foo int . int ) int { ! "bar" -= ~ ~ ~ ~ true and ! "bar" | ! 123 . foo or ~ ~ 123 ;
 } ;
 func foo ( ) int . int { var foo int . int . int = - ~ ! - ! ~ foo [ 123 + ~ "bar" ( ) << true ( ! ~ - "bar" . foo , ~ ~ "bar" << - false != foo ( ) ) ] ;
 } ;
 func foo ( ) int { for val foo int = 123 [ - ! ~ ( foo ) ^ ~ ! ~ ~ ( ~ 123 == false ) ] >> - ( foo ) or ~ ~ 123 ;
 ~ - 123 and foo ;
 "bar" * - true == ! ! foo ( - true , 123 ) * - true ( ! foo , - "bar" ) ++ { false and foo or false . foo <= true and ( ~ foo ) . foo << ~ 123 [ ! ( ~ ( foo [ 123 [ ~ - 123 [ true . foo >> true ] ] == ! ! ~ false or ~ "bar" <= - false == true ] ) ) ] **= - false [ ( ! 123 ( 123 . foo , ! ~ - 123 . foo and - false ) | - 123 ( ) <= 123 ) ] & ~ false ;
 } ;
 } ;
 } ;
 class foo { foo int ;
 func foo ( ) int { var foo int . int . int = ( ( ! ! 123 ) <= foo ) << 123 ;
 } ;
 func foo ( foo int . int . int , foo int , foo int , foo int . int . int , foo int . int . int , foo int ) int { for var foo int = foo ;
 true . foo ;
 ! "bar" *= foo { var foo int . int = ! ! "bar" ;
 } ;
 } ;
 foo int ;
 func foo ( foo int , foo int . int . int , foo int ) int . int . int { if ~ true ( ) { var foo int = - - "bar" & ~ ~ - - ~ "bar" >= false ;
 } else { for val foo int . int . int = ~ ! foo ;
 false ;
 ! ! false ( ) = ! "bar" * ( ~ ! false ) [ ~ ~ ~ ! ~ ( - ~ ~ "bar" >> 123 [ ! ! false ] | ~ false and true [ ~ - ~ true ] ) != 123 [ ( 123 >> ( ~ true >= ! - 123 | true [ ~ 123 . foo and foo ] == - ! ! foo ( foo % ! "bar" , "bar" + false ) << false or ~ - ~ ( false and 123 [ "bar" ] << "bar" ) ) . foo and ! false [ foo [ 123 and ~ true * true . foo or true [ - ( false / ! "bar" . foo ) . foo - - false ( ) & ! - "bar" [ "bar" ] or foo ] ] ] >> 123 ) ( ) ] ] { for var foo int = ~ - 123 ( ( false ( "bar" and - false ( ) + ~ foo . foo , ~ ~ - - 123 != foo <= false ( ! 123 , - - ~ - - ~ ! ! - "bar" [ true or ~ ( - ~ ~ - true != "bar" - ~ - - foo [ ~ ! ~ - - ! foo ] ) ] == ! "bar" ( false [ ! "bar" ] != ~ ~ ~ ~ ! ! false - - 123 << true ( ) or "bar" , false - - ! true and 123 / foo or 123 ) / foo >> "bar" . foo ) / - - "bar" ) ) ( ) , ~ "bar" ) != true ;
 123 ;
 - "bar" ++ { if "bar" { if "bar" . foo { true . foo or "bar" / true and false -- ;
 } else { var foo int = ! foo ;
 } ;
 } else { ~ ! ( foo ) >= ! "bar" [ ! ~ - true ] or ~ ! - ! ! ( true ) and ~ ! ~ ! - - ( "bar" != ~ "bar" / ( - ~ ! ~ - ~ true [ "bar" ] ) | 123 [ true ] & "bar" . foo ) > 123 -= ! foo ;
 } ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int ) int { foo [ 123 ] >> "bar" & 123 . foo += ~ - ! foo ( ) ;
 } ;
 } ;
 class foo { func foo ( foo int , foo int , foo int . int , foo int . int . int , foo int ) int { for val foo int = - ! false ;
 ~ 123 ( ) ;
 ! ~ foo ( false , ~ ( 123 - ~ false == - 123 <= ~ ( ! ! 123 ) ( ! - ! false , ~ - ( "bar" << ! ~ false or ! ! foo ) | true ) >> 123 or ( "bar" ( ) % ( foo . foo - ~ ! false and - ! foo ) ) ( ) ) ) ++ { val foo int = - ~ ! foo < foo << true ;
 } ;
 } ;
 foo int ;
 } ;
 val foo int = "bar" ;
 val foo int . int = ~ - true ;
 class foo { } ;
 var foo int . int = false ;
 func foo ( foo int , foo int , foo int , foo int ) int . int . int { var foo int = false . foo >= foo ;
 } ;
 class foo { func foo ( foo int . int ) int { foo * ! ( false < ! true [ ! ( - 123 ( ) ) ( 123 . foo + 123 [ - true ] < ~ foo , false % "bar" [ ! ~ - true * "bar" . foo > false ] or ~ ! ! "bar" . foo and - ! ~ ! true . foo ) ] ) . foo | - ! true = 123 - - true ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int . int . int , foo int ) int . int { if foo { "bar" * ~ foo *= ~ - - foo ;
 } else { if - ! foo . foo { ! ~ ~ ~ - ~ - ~ true < ~ false ;
 } else { var foo int . int . int = ! 123 ;
 } ;
 } ;
 } ;
 foo int ;
 foo int ;
 foo int ;
 foo int . int ;
 } ;
 class foo { foo int ;
 func foo ( ) int { val foo int . int . int = ~ true or ! false != 123 ;
 } ;
 func foo ( foo int ) int { if "bar" | ~ foo { val foo int . int . int = foo [ ( 123 and false ) != foo . foo ] or - ~ false ;
 } else { foo -- ;
 } ;
 } ;
 foo int ;
 } ;
 func foo ( foo int , foo int . int . int , foo int ) int { if true [ ! ~ ! "bar" [ true ] ] { if ( ( foo ( ) << "bar" or false [ ! - false ] ) . foo < ( ~ ~ ! ~ foo != foo . foo and ! - ( "bar" ( ) or ~ ( ! ! ~ foo . foo ) ^ ~ ! foo ( - - false / - - 123 , 123 ) & false . foo ) ) ^ 123 [ true ] & ( - ~ - ! false . foo ) ) { ~ "bar" ;
 } else { if ~ ~ false { for val foo int = ~ ( - ( - true | 123 ) <= ! ! - foo ) . foo ;
 false ;
 "bar" != ! - "bar" ++ { val foo int = false [ foo ] >= 123 and ! false [ "bar" ] ;
 } ;
 } else { ~ ~ ! - "bar" ;
 } ;
 } ;
 } else { ! foo >> ~ - true . foo or ! 123 ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int , foo int ) int { val foo int = ~ - ~ 123 and true or true . foo != ! ! - - ~ "bar" [ "bar" != - - ! false ] ;
 } ;
 val foo int = - true . foo and ~ 123 << ~ ~ 123 ;
 class foo { foo int ;
 foo int ;
 foo int ;
 } ;
 class foo { func foo ( ) int . int . int { var foo int = ! - false . foo ;
 } ;
 func foo ( foo int , foo int , foo int , foo int ) int { if - ~ true <= - ! true ( ) { val foo int . int = - 123 or ! ( false - ~ ! false . foo & ( "bar" != ~ ! ! ( 123 ) / - ~ "bar" . foo or - ( - - ! ~ ~ ! true ( ) ) ^ true == ~ - 123 ( - ~ ( "bar" / ~ true ) and - ( "bar" ) , ~ ~ - 123 ( 123 ( ) , - ! 123 . foo ) | ! ! true ) ) ) ( ! foo >= - - false ( ) & foo >> foo , 123 ^ ( - ~ 123 [ - ! - ( - "bar" & ~ false >> ~ ! 123 ) ] ) == "bar" [ ! - - true > ( 123 != ( true [ - true ] ) % ~ false ) or 123 ] ) ^ "bar" and - false ( ) ;
 } else { var foo int = - ~ false ;
 } ;
 } ;
 foo int ;
 } ;
 class foo { foo int . int ;
 foo int ;
 foo int . int ;
 func foo ( foo int , foo int , foo int . int , foo int , foo int . int , foo int ) int . int . int { true >> ! foo >= true ;
 } ;
 foo int ;
 func foo ( foo int , foo int , foo int , foo int . int , foo int . int . int ) int . int . int { val foo int = ! "bar" and ~ ( 123 ) ;
 } ;
 func foo ( foo int , foo int , foo int , foo int . int . int ) int . int { - ~ true ;
 } ;
 foo int ;
 foo int ;
 } ;
 var foo int = 123 ( ) ;
 val foo int . int = "bar" ;
 var foo int . int . int = "bar" == 123 [ ( ! false ) ] ;
 var foo int = ~ ! 123 - ( - ( - 123 ( ~ - ~ 123 << false + false , ! foo ) ) [ ( 123 ( 123 [ ~ - 123 | ( true ) [ "bar" ( foo , ! true . foo <= ( - - - 123 ) == ! foo and false [ ~ 123 . foo * - "bar" >> ~ ! ~ ~ false . foo ] << foo != - - 123 . foo ) | ! - ! true ( ) and ~ foo [ true [ ! 123 > ~ foo and 123 ] ^ 123 and foo > - "bar" - foo [ - true [ ~ ! ~ ( ( ( ~ 123 ) != ( ! ~ ~ - 123 and ! ~ ! ~ ! false [ - ~ - ~ false >> ~ 123 ( foo ( ) , ! - 123 - ~ 123 [ ( false ) . foo ] << 123 ^ - - - ( - - ~ - false ) and ! ( ( ( foo > foo ( ) >> ~ true and ~ ~ ! ~ "bar" ) * "bar" and 123 <= - - false >> ( ! ! - ~ false ( true or false , ~ ~ 123 and ( foo << ( ( ! ! ! false . foo ) . foo and ! ! false - 123 . foo << "bar" . foo ) ) . foo << ~ true [ foo ( ! - - ! ! ! ~ ! "bar" , 123 ) >> ~ foo . foo < ! 123 ] + - ! - "bar" or ~ 123 % - - 123 ) or - ! ~ true . foo ) ) or false >= false ( ) & - foo ) / - ! ! "bar" . foo ^ 123 ) % 123 <= ! ( ( "bar" . foo / - foo . foo | foo or ( ~ - - true . foo ) << "bar" ) ) << 123 | "bar" or foo ] ) [ ! - - "bar" ] - foo ) ( ) == ! foo ( ) or - - ! ! - true >> - false ) ] ] == false ] + 123 [ ~ true or ~ - ( ! false / 123 != ~ - ! ~ - ! false ( ) and 123 << false & ~ 123 ) and - ! false >> ~ foo [ true * ~ "bar" ^ ! ! true * ( 123 ( ! ! ! - ~ ~ true != ! false and true , 123 << true ) >> ! ( ~ - - - 123 ) >= ! - ! ! ! - true . foo ) << 123 ] ] ] and false / - "bar" [ - ( ~ foo ) <= ! foo . foo ] == 123 . foo >> ~ ( foo > foo ) [ foo [ ! ~ - false [ - foo ( ) == ! ~ ~ - - - true ^ 123 ] << ! ! ! ( foo [ foo ] ) ] ] ] & ! false ( ) != foo << ( ! false ) > ~ - true + 123 >> - - ( false ) . foo , - "bar" and ~ foo ) ) [ ( ~ foo and - ( - false [ "bar" ( ) ] - - foo >= ! true | ~ false and "bar" ( ~ ( ! - ~ foo . foo ) , false ( ( - "bar" [ ! ~ true ] ) >= ! 123 ( ) , "bar" [ ~ false ] or ! false . foo ) ) ) == ~ ~ ! ! false [ ~ foo ^ 123 >= 123 [ true / ! ( false ) != ( ! ! - false ) ( ) and ~ 123 [ ( false ) ] >= 123 ^ ! true ] | ~ - ! foo ] or true . foo ) ^ true ( ) or ! foo ] <= ! ! ! foo . foo == ! 123 and ! - ~ ( 123 ) % ~ ! ~ foo [ "bar" ] ] > - ! true % foo == 123 ) and foo . foo ;
 var foo int = ! - 123 [ 123 << foo ] ;
 class foo { } ;
 func foo ( ) int . int . int { for var foo int = 123 or 123 ;
 false and 123 ;
 ! ~ "bar" + 123 < - ~ true >> false - false and false or ! ~ foo << ~ "bar" { var foo int = false ;
 } ;
 } ;
 val foo int = ! - true or ! ~ - "bar" ;
 val foo int . int . int = ! foo > "bar" ;
 class foo { func foo ( ) int { var foo int . int . int = false ;
 } ;
 } ;
 func foo ( ) int { for var foo int . int . int = ~ "bar" / - ! ! foo [ ! - ( ~ 123 / - ( ! foo >= - "bar" . foo ^ - ! ( ( "bar" % ~ 123 ) ( ) ) ) == - false . foo ) ] or "bar" != ! "bar" <= ~ true ;
 false ;
 ~ false ( ~ "bar" - ~ - ~ ! ! ! foo [ foo ] , true ( ) & ! 123 ) % ! true { for val foo int = ! true <= ( ( true ) >> "bar" [ - ! "bar" != - ~ 123 ] ) ;
 - "bar" | - ~ "bar" [ ! ! true ] ;
 foo . foo == foo [ foo . foo == false and ! ! - ! true ^ false ] or ! - 123 | ! ( "bar" >= ! foo ) += true [ 123 > ~ - 123 ] { var foo int . int = ~ ~ ! ~ - false or true >> true ( ) ;
 } ;
 } ;
 } ;
 func foo ( ) int { if true { ! - ! ! true > true [ "bar" ] ;
 } else { for var foo int = false . foo ;
 - - 123 ;
 false [ ! - ~ "bar" ] { for var foo int . int = false ;
 ~ 123 [ ! 123 and - ! true ] << - true ;
 - ! "bar" ( ) and - - true < - ( true and ~ "bar" [ "bar" ] or ~ ! "bar" and - ~ foo != false ( ) >> ~ ! ! ~ ~ true ) -- { for val foo int . int . int = ! - ( "bar" or ! - ~ ! ! false ) ;
 - - - "bar" . foo and ! - foo [ ( - true . foo << ~ false [ ! ~ ~ ( - ! ( ~ true ) != true . foo * ~ 123 ) [ "bar" ] == "bar" ] > ~ ( ~ ! ( - - "bar" and ! - ! ~ foo ) % ~ ~ ( "bar" . foo ) ) ) & - ~ ! ~ true ] * - ~ ~ "bar" == ~ 123 ;
 ! ! true . foo / 123 and "bar" - ! ~ ! 123 [ false ^ 123 ] > "bar" . foo { - - ! ~ "bar" / ~ false [ false or ( - 123 ) ( ) and false ] != ( ~ ! 123 . foo - "bar" . foo ) ( ) + true ++ ;
 } ;
 } ;
 } ;
 } ;
 } ;
 var foo int . int . int = ~ - - ~ false << ~ ! ( - ( ( 123 . foo <= "bar" ) and ! foo ) << - foo <= - 123 ) ( true * ! "bar" << false , ~ 123 [ ( true ) | - ( - true or ~ foo ) [ true ] < ! 123 [ "bar" ^ 123 ] ] ) ;
 class foo { func foo ( foo int , foo int . int , foo int ) int { - ( ~ "bar" [ true and ! ! - - - ~ 123 ] ^ 123 * false ) ( ~ foo [ 123 . foo - true ] , - ( false [ - ~ ~ ~ - ( true ( ) << true - ~ ! 123 * "bar" ) | false <= ( - foo & ( true ^ ~ true ) ( ) or false | ! foo & - "bar" and false % ( ! ~ - ! foo ) ) or false / ~ foo and ~ ! true ( ) ] ) [ ( ~ "bar" ) + 123 ] >> - foo ) >> ! true + "bar" -- ;
 } ;
 func foo ( foo int , foo int , foo int , foo int . int . int , foo int , foo int ) int . int { val foo int = - true ;
 } ;
 func foo ( ) int . int { ~ ! ! - ( "bar" ) ;
 } ;
 } ;
 val foo int = false ( ) ;
 var foo int . int = foo | ! false << ! foo ;
 val foo int = false ( ) or ! false >> ~ ( true | ! ( true [ - "bar" ] ) ) ;
 class foo { foo int ;
 foo int ;
 foo int ;
 } ;
 val foo int . int = ( - "bar" ) >> "bar" / - false ;
 class foo { func foo ( foo int . int . int , foo int , foo int ) int { var foo int = foo >> - ~ foo . foo - true . foo and 123 or foo ;
 } ;
 func foo ( foo int ) int { var foo int = ! ( "bar" and - ~ - ! ~ 123 + true ( true , foo - 123 ( 123 and ~ true . foo , ~ ~ ! ( - ! ( ~ foo >= ! false == ( ! true [ ( - 123 << foo [ ~ ~ 123 ] ) * 123 and ( false [ 123 >= 123 ] + ! ~ - ( foo == ! ( ( ! ~ - ~ ! false ( - foo , ~ foo or 123 and false ) ) != ~ - ~ ! ! "bar" ) ) and ! ~ - true ( foo , ! "bar" ) & ( true and ~ ! ! - "bar" . foo ) ) ( ~ "bar" . foo , ~ 123 ) / ! foo ] <= ~ ~ ! true [ - ~ false . foo % "bar" ] | false or ! - - - foo ( ) ) . foo and ( ! false ( - foo , ~ - ~ - true [ ( foo . foo and 123 or ~ ! ! - - ! false ( 123 . foo , foo < 123 ) ) ( - - ! false , ! "bar" < foo . foo or true . foo ) ] / "bar" <= ! true [ ( 123 [ ~ foo ] ) ] or ~ foo [ ~ foo < true ] < ( 123 ) and ~ false . foo ) + 123 [ - - true ] ) ) ( - ! "bar" , 123 ) / - false ) ) ) ) [ - ~ false | "bar" % ~ 123 != "bar" < 123 * ~ 123 ] ^ ~ - foo >> - true ( ) > 123 and ~ - false ( ) + ~ ! - 123 ;
 } ;
 func foo ( foo int , foo int . int , foo int , foo int . int . int ) int . int . int { 123 ;
 } ;
 foo int . int ;
 } ;
 var foo int . int . int = false ;
 val foo int = ~ "bar" ( ) ;
 func foo ( foo int , foo int , foo int , foo int . int , foo int . int , foo int . int ) int . int { ! foo - ~ ~ ! false . foo ;
 } ;
 
