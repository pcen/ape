module foo ;
 class foo { func foo ( foo int , foo int , foo int . int . int , foo int . int . int ) int . int { if ~ foo [ ( true ) [ - - - ( true . foo <= ! "bar" ) [ - ~ ~ 123 ] >> ( "bar" ) or "bar" [ ! true [ 123 << ~ ~ foo ( true and foo << 123 , 123 % ~ false [ - - - "bar" . foo or "bar" ] or ~ "bar" ) ] ] ] and true >> "bar" ] >= "bar" { for var foo int = 123 ( ~ ( 123 ( ~ 123 > ~ ! ! foo , ! "bar" >= ( ! foo ) . foo ) ) , ~ ! - 123 ( ) ^ - ( - - ! true . foo ) [ - "bar" . foo << ~ foo . foo != ~ - ~ "bar" . foo ] ) >= true ;
 true != ! foo ( true == - ! ! - "bar" [ true ( - - foo , ! ( ( ! ( ( foo << - false [ ~ ( foo or - "bar" ) . foo ] == - ! - ~ ! - - ~ true ) * 123 ) ) == true ) >> 123 >= 123 != ~ ! false ) ] - "bar" [ foo ] , ! true or - true * false ) % "bar" [ - - false [ - "bar" - - 123 >> ~ foo ^ ~ false and 123 [ ! 123 ] > ! false . foo >> ! ! ( ! ( 123 ) ) or foo . foo and ~ "bar" ( ) ] or ! - false ] ;
 ~ "bar" -- { "bar" / - - ( ! foo ) ;
 } ;
 } else { - 123 . foo += ! ! foo ( ) and "bar" ( ) ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int ) int . int { ! false ( ! false ( ! foo or true and ~ ~ true , foo ) , true or ~ ! true and ~ "bar" ) <= ! ~ "bar" ( ) -- ;
 } ;
 } ;
 class foo { func foo ( foo int . int , foo int , foo int ) int { if "bar" <= ~ foo { if ~ ! - - - true ^ ~ false % "bar" { for val foo int . int = ! "bar" >> false ;
 ( true or - - ! - "bar" != ( foo ( ) ) % "bar" ) != true and foo . foo ;
 ~ true %= "bar" > - true { true ++ ;
 } ;
 } else { ! ~ - "bar" %= 123 ;
 } ;
 } else { var foo int . int . int = ~ ( - ! ~ - ! foo - 123 & - ~ ! false << ~ - false ) ;
 } ;
 } ;
 foo int ;
 func foo ( foo int , foo int , foo int . int . int , foo int . int . int ) int { if ! - false { ( ~ foo ( ) or ! ~ true ) ;
 } else { ( ~ true . foo ) ;
 } ;
 } ;
 foo int ;
 } ;
 class foo { func foo ( foo int , foo int , foo int , foo int , foo int , foo int . int ) int { ~ ~ ~ ~ - - "bar" . foo == 123 -- ;
 } ;
 func foo ( foo int . int , foo int . int , foo int ) int . int { for val foo int = ! "bar" . foo * "bar" ;
 ! ~ - foo ( ) % "bar" . foo < true ;
 ~ - ! ~ 123 [ ~ ~ - foo ] * foo ( - ~ ~ ~ ! ~ true , 123 + true and true [ ! 123 > - - "bar" . foo & false ] >> 123 ) ++ { val foo int . int . int = "bar" and foo . foo ;
 } ;
 } ;
 foo int ;
 func foo ( ) int . int { ( ~ - false ) == foo or foo ( 123 , false . foo < "bar" ( ) ) ++ ;
 } ;
 foo int ;
 foo int ;
 func foo ( ) int { ~ - "bar" %= 123 * false << - foo ;
 } ;
 } ;
 var foo int = - ~ false ;
 var foo int = ( ~ - ! false ) . foo == false ;
 class foo { func foo ( foo int ) int { true %= ~ "bar" ( - false - 123 > ! ~ ~ false >> "bar" [ - ~ ~ ( ! ( ~ foo and ~ - foo . foo + ! ! - ~ ! ! false [ ! foo or ~ ~ false & ! false + false ] ) ( false and "bar" >> ! 123 [ - true [ - ( ~ ~ true << foo > ! false and "bar" ) ] or - ! ( 123 << "bar" ) [ "bar" ] == ! ! 123 ( ) ] , ~ ! foo ( ~ false [ false << ! ( 123 ) ^ ~ ! 123 ( 123 , 123 ) ] << foo . foo and true , - - foo ( ) ) ) or - ~ ( true ) ) >> foo == true and ( true == foo ) [ ~ 123 ] ] and foo == ( "bar" ) << foo > foo ( ) % foo . foo , ! ~ ~ ( foo - ( - ! ! ~ - 123 / ~ true ( ) ) ) ) & ~ ( - - "bar" != ! 123 - ( ! 123 ) . foo >> true and foo [ false ] ) ;
 } ;
 foo int ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) int { val foo int = "bar" . foo and ~ ~ true ;
 } ;
 } ;
 var foo int . int = "bar" ;
 var foo int = ! "bar" << - true ;
 var foo int = ( true ) [ foo . foo > ~ ! "bar" ^ false and foo >= true or ~ "bar" << true ] >= ! foo [ ~ ~ 123 << ~ foo ] % ~ foo != ! ! ( ! - ! false ) ( 123 [ ! "bar" [ foo ] > ! ~ foo [ 123 . foo | true . foo << ~ ! ! ! ! true ] ] != true or ~ ! ( ( true >> 123 ( ) ) [ ! "bar" [ ~ ~ "bar" [ - ! - 123 ] ] or 123 | 123 / ! ~ true ] or - ~ - true ) . foo , ( false . foo ) >= ! ~ ! ! - true ) or ~ ! ! ( ! ! ~ - ! ( ! foo [ "bar" + ! - "bar" [ 123 - - foo % ~ ! ( true [ ! - ~ "bar" ] & ~ - true [ ! - ~ - true . foo ] ) ] ] != "bar" > 123 ) [ - false ] or ~ ~ ~ ~ ! ( ! ! ( true [ foo > - foo ] % - foo ) [ 123 ] ) * - "bar" [ foo and - ~ - ( ~ ( 123 . foo ) ) [ - - ! ! ~ 123 ] ] > - ( ! - ( - false or true . foo ) - false [ ~ "bar" ] >> ! - ( foo ) ) [ - ! false [ ! ! ! ~ - "bar" [ ( - "bar" >> false . foo ) [ ~ ! 123 >= ! ~ 123 and ~ foo << 123 or ! 123 ] and - false ] ] != foo [ 123 ( - ! ~ ! ! "bar" , foo and - ( 123 ) - - false ) | false . foo != ( ! ! ~ "bar" ) ] >> "bar" - foo & - foo or - true ] != - ( ( 123 and ~ "bar" * ! ~ - ~ true ) ) ) ;
 class foo { foo int . int . int ;
 func foo ( ) int . int . int { for val foo int . int . int = ~ ! ! ! true ;
 "bar" ;
 "bar" ( ) { for var foo int . int = - true ;
 foo ;
 foo and true >= 123 { - ~ "bar" != ~ ~ false + ~ foo ( 123 or ( foo == true and ! "bar" ( ) != ~ ! true or true and "bar" [ foo | 123 ] ) . foo , ( - "bar" . foo ) ( false . foo , ~ ~ ! ( ( - ~ 123 [ - foo % true ( ! ~ ~ ! false ( - - "bar" & true or - "bar" , "bar" ) or ~ ~ ~ true ( ) and ~ - false , ! - ~ ! ( 123 and 123 ) ) or ~ - ~ ! ~ ~ "bar" % 123 ] >> 123 or - ~ foo ) [ ( ~ - false != - false ) ] | false < ! "bar" ( ~ "bar" ( ) << false <= ~ ( "bar" and foo or false and ( ~ ! ~ - ~ ! - "bar" [ - true [ - 123 [ - foo % ~ ! ~ ! - "bar" [ ~ ~ ~ ~ ! false ] ] < 123 or foo ] ] > foo or ! false ) . foo + false > "bar" / 123 . foo ) , foo [ ~ "bar" . foo << ~ foo ( ) and - true | ( false ) [ ! ! - 123 / ! false << - ( ! ! 123 ( ) ) ( - ! - ~ "bar" , ( ~ - "bar" ) [ "bar" [ false ] == ( 123 ) < - ~ "bar" [ - ! ~ ~ - true & ( - ( - ! - - ! ~ ( 123 & 123 >> - ~ ! 123 ) ) | false ) and - false >> false or ~ foo and ! 123 ( ) ] * - - ! ~ ( ( ~ ! false or ! "bar" ( 123 / - foo , "bar" > - foo ) and foo != ~ ! - foo ) % ! ( ! ~ foo ) ) ] >= foo + ( false + true ) << ~ foo [ "bar" [ foo ( ) == ~ ! "bar" ] ] ) ] ] ) ) ) >> "bar" ( true ( ( foo ( ) or ! ~ "bar" ) or ~ ~ ~ ~ ~ "bar" >= foo [ - ! ! "bar" [ "bar" ] == "bar" <= 123 ( ) and - true . foo >> ~ foo ] % foo and foo [ ! ( foo ) >> ~ ! 123 and - - ! 123 ] , ~ "bar" [ - ! ~ ! ! - - foo or true / - ~ false >> ~ 123 ] ) , 123 ) ) << 123 & ( true ) ++ ;
 } ;
 } ;
 } ;
 foo int ;
 foo int ;
 foo int ;
 foo int . int . int ;
 } ;
 val foo int . int = "bar" or ! ! foo ;
 class foo { func foo ( ) int . int { val foo int . int . int = - ~ - ( ~ ~ ~ foo * ( ~ "bar" - - - ! false ) . foo ) ;
 } ;
 func foo ( ) int { if - - "bar" [ - foo and ( ! true [ ~ "bar" & ~ ! - ! foo != ~ ! ! ~ ( 123 ^ - - - true > ( ! ( foo ) . foo + false ) ) ] ) ] { if ~ "bar" { var foo int = ~ - 123 ;
 } else { ( - ! ~ 123 and true != "bar" [ true != ~ - ( true - ~ false or foo [ ( ~ - 123 . foo / false . foo ) and 123 ] ) << true [ ( ! foo [ ! ! true ] ) * foo ] ] ) -- ;
 } ;
 } else { - ( ! "bar" + - ( 123 << false . foo or "bar" ) ( ) or foo >> ! ( false [ ! ! ~ ~ 123 >= ~ foo or true . foo >> foo ] & ~ "bar" ) ( ~ - - ~ true . foo > ! - ( true ( ~ ! "bar" , ! - foo << - - true ^ - ! - - foo ( ) ) ) , - ( - ! ! foo ) ) - ! ~ true ) ;
 } ;
 } ;
 foo int ;
 foo int . int . int ;
 func foo ( ) int { if true ( false and "bar" + - - - ~ ~ "bar" >= ~ "bar" != ! true , ! false . foo and ( ( ( - ~ - ~ true . foo ) < foo % ! 123 - - false . foo ) != 123 < false * "bar" >> "bar" or false ) << 123 ) { for var foo int . int = "bar" ;
 - ~ false [ 123 ] / - - ~ ! 123 and - true [ ! ~ ! ~ ! true or ! ! ! true > - foo ] << ~ foo * "bar" ;
 false ++ { if ! ~ foo { for val foo int = - ! true ;
 true . foo and 123 >> ! true ;
 - ~ ! foo [ 123 ] -- { for var foo int = ~ foo * 123 ;
 "bar" % - "bar" ( ! ( foo . foo or - - 123 ) [ - "bar" & 123 ] << true , - - true [ 123 [ true or foo . foo ] ] ) and false ( ) % foo ;
 123 { for var foo int = - ~ foo or foo << ! true ;
 ( - true != 123 ) >> foo ;
 true ( ) { if - ( ! - 123 & false ( ) - ! ~ ~ ( foo ) ( ) == ! 123 ) > ~ "bar" { ! - true ( ) and false ;
 } else { - ! ~ ! false ;
 } ;
 } ;
 } ;
 } ;
 } else { ~ ! true ;
 } ;
 } ;
 } else { false ;
 } ;
 } ;
 } ;
 val foo int = false ( foo , - ~ true ) != true ;
 class foo { func foo ( foo int , foo int . int , foo int ) int . int . int { for var foo int = ! "bar" << - ! ~ ~ ~ - - true ;
 ! - true >> ! - foo ;
 true [ ~ "bar" ( ) ] or ~ foo | - foo and - - 123 { var foo int = ( true != ( true ) << 123 and - ( 123 or - ( false >> "bar" + foo > true and true ) ) [ - ( foo ) ( ) & 123 ] ) [ ~ ~ foo ( ) ] | ~ ! - true ;
 } ;
 } ;
 func foo ( ) int { ( ! foo ( ! - false , - ! ! true ) - false and "bar" % ! ! true ) -- ;
 } ;
 foo int ;
 foo int ;
 foo int ;
 foo int . int ;
 func foo ( ) int { ~ ! ( ~ ! ( ~ ~ true ) [ false ] ) >= "bar" ;
 } ;
 foo int ;
 } ;
 func foo ( foo int . int . int ) int { true << false % - 123 and - false ;
 } ;
 var foo int . int . int = ~ 123 == ! 123 or true ( ) ;
 val foo int = ! 123 . foo or false [ ~ ( ! ! ! 123 ) ] and ! ! 123 ;
 var foo int . int . int = ! ~ "bar" >> false and - 123 . foo << "bar" == foo - - ( "bar" [ foo != ~ ~ ( ! false >= - ! ~ 123 . foo ) . foo and ! true [ ! ! ! - ~ ~ ( 123 or ! - "bar" ) [ "bar" ( false [ ! 123 ] != ( ! ~ 123 ) / 123 ( 123 ( ) , 123 ) , "bar" ) << ~ foo & ~ - ~ 123 [ 123 [ ~ ! "bar" and ~ "bar" ] ] != false . foo or foo + "bar" [ ~ 123 [ ! ! - ! ( false == - "bar" [ ( ! foo * - "bar" and foo . foo ) ( - 123 << 123 [ ! "bar" > 123 ] , 123 . foo or ~ foo ( ! - ~ "bar" , - ! true >= - ( foo | ! - ~ true . foo >> false [ - ( ~ ~ true + ( ! - ! 123 [ ~ true ] > 123 ) [ true + ~ - ~ true << - - - ~ - ~ ( true == ! 123 ) and ( foo + ~ ! false ) . foo or "bar" ( ( foo ( - ~ 123 , true . foo ) ) , ! 123 ) ] ) <= ~ foo != ( "bar" ( ) ) . foo ] and - ( - foo ) . foo >> - 123 ) ( true ( ) | ( "bar" ( ) + 123 << ~ false - - foo [ false [ ! "bar" . foo ] | - - ! 123 or foo ] ) [ ~ ! - - - foo ] << - false , false ) ) and false & ~ - ! ! false != ! - ! ( ! true [ ! true >> ! - - false & 123 and 123 * ! - "bar" . foo ] ) - ~ ! - foo ) - ! - ! ~ - true . foo ] ) ( ~ 123 , - foo < ( - ( ! "bar" | foo [ 123 ( ) >> - 123 ] != foo ) . foo / ! foo . foo ) ) ] ] ] * ~ false or - ~ ! 123 != false [ true . foo ] << 123 ] | true ] ) % ~ - true ( ) ;
 class foo { foo int ;
 } ;
 var foo int = ( ~ ! - ! ( ! ~ foo . foo ) >> "bar" ) ;
 func foo ( foo int . int . int , foo int . int , foo int . int . int , foo int ) int . int { if ~ - foo { for var foo int = 123 [ ( ! - ~ true or false == false % ! ~ "bar" and "bar" * - ~ - ( 123 and - true . foo ) ) == "bar" / foo < false . foo % ! - ( ~ ! ~ ! ! - ! 123 >> "bar" - ~ 123 ) ( ) + ~ true . foo / ~ ! ~ ( ! ~ ~ ! ! - - true ) ] * - 123 ;
 - - ( ~ ! - 123 >> true ( true , false == false ) or false ) ;
 ~ 123 ^ ! ~ - "bar" [ ~ "bar" ] and 123 or ~ ! ! - ( "bar" . foo >> false - ~ ~ foo ) ++ { var foo int = ~ 123 and ~ ~ - ~ 123 ;
 } ;
 } else { var foo int = foo ;
 } ;
 } ;
 class foo { foo int ;
 foo int ;
 func foo ( ) int { - ( 123 ) >= ! ( ~ ! ~ true >> true == ~ ! ( "bar" or ( - ! ~ true ) % - ( false ) [ 123 [ ~ 123 << - ! true ] ] == ~ "bar" ) ) * "bar" [ ! - ( "bar" ( foo , ~ - "bar" ^ "bar" << "bar" [ true & foo == ! false ] & - - foo ) | foo & "bar" >= - "bar" ^ 123 . foo and ( ! ! ~ ~ "bar" ) ) [ ~ - ~ "bar" ] ] **= ( true ) ;
 } ;
 func foo ( ) int { var foo int = false & ~ ! ~ 123 or - true == ! ! ~ ~ ! ! true [ - ! foo and false or "bar" . foo ] ;
 } ;
 } ;
 func foo ( ) int { val foo int = foo ;
 } ;
 class foo { foo int ;
 func foo ( foo int , foo int . int . int , foo int . int ) int . int . int { false ++ ;
 } ;
 func foo ( ) int . int . int { var foo int = false ( false / "bar" != ( - foo or ~ - ( - - "bar" [ foo / ( "bar" & "bar" and - ~ false ) ] ) != - "bar" ) , 123 or ! ( ~ - false ( ) ) >> false . foo and false . foo ) ;
 } ;
 func foo ( ) int . int { val foo int . int = ~ - - foo ;
 } ;
 foo int ;
 foo int ;
 func foo ( foo int . int . int , foo int . int . int ) int { if ! ~ true { var foo int . int = 123 . foo ;
 } else { var foo int = ! ( ! 123 [ ! foo == - false and "bar" ] >> ~ - ! - ~ - ( false . foo ) or true ) & - "bar" <= - "bar" and foo >> - foo or - - - ( foo ) / true != - ! ~ 123 . foo ;
 } ;
 } ;
 } ;
 class foo { func foo ( ) int { var foo int = foo != ( ~ ~ "bar" == ( ~ true . foo ) & ~ - true . foo - ! 123 ) - ~ true ;
 } ;
 foo int ;
 } ;
 class foo { foo int ;
 foo int . int . int ;
 foo int ;
 func foo ( foo int , foo int , foo int . int ) int { for val foo int . int = false or "bar" ^ ~ ! ! ~ ! 123 ( 123 , true ) ;
 ! ~ - "bar" != ~ ~ ~ foo and false & ~ ! foo [ - ! ~ ~ false ] ;
 foo -- { ! ! - "bar" . foo | ! false or ( ! false << ! ( - ! ~ 123 ) [ foo >= ~ - ( ! ~ ~ ! - true ( ) ) << ! 123 ] / ~ true ^ true ( ~ - ~ "bar" + ~ ~ ( 123 ( ) or - - ! true ) , - ! - false ) ) [ foo or false ] == "bar" . foo ;
 } ;
 } ;
 func foo ( foo int . int , foo int , foo int , foo int . int ) int { for val foo int = ( ! ! ! false >> true ) % ( ! false ) ;
 foo & ! - ! "bar" . foo ;
 "bar" -- { val foo int = "bar" ;
 } ;
 } ;
 func foo ( ) int { var foo int . int . int = ( ~ ~ - - - ~ - foo . foo ) ;
 } ;
 func foo ( ) int { if foo { - - true <= ~ foo != ~ ! 123 *= foo < "bar" ;
 } else { for val foo int = ! ! true or false ( "bar" & - 123 [ ( foo ( foo , false % ! ! ~ false ) << - "bar" [ ! ! false >> ! ~ ! 123 [ ~ "bar" ] and 123 [ true and - true ] ] and - "bar" ) ] , false . foo & ( - ! - - ~ ( ~ false ) [ false < "bar" or ( - - - "bar" . foo == false ) ] == ( ( true ) . foo | ( "bar" < - ! - ! true != - false . foo % "bar" and false ) > - ! foo != ! false ) / ! ! ( ( ! false | false and foo ) ) ) ) ;
 "bar" . foo << false ( ! - false , ~ ! - - false . foo | false ) ;
 "bar" [ ! ! ( ! "bar" ) . foo ] or foo ( ~ ! ~ - 123 , foo ) > ~ ! false -= true { true = true | 123 ;
 } ;
 } ;
 } ;
 func foo ( ) int { for val foo int = ! 123 ;
 ! false [ - ! true == - 123 ] ;
 ! "bar" | - ~ ~ "bar" { - foo [ - true < foo [ 123 ] << true ] ;
 } ;
 } ;
 } ;
 func foo ( foo int . int . int , foo int , foo int , foo int , foo int . int , foo int ) int . int { for var foo int = ~ false ( ( - "bar" >= "bar" ( false , ! "bar" and 123 ) ) , true + ( ! - true . foo == true + false [ ! true . foo and ~ 123 ] ) == false ( ) ^ false and - ~ - 123 ) ;
 123 ;
 123 { if ! ! 123 [ ~ ( "bar" == ! ! ~ 123 ) > ~ "bar" | false and ! true ] { for var foo int = true [ false ( ! 123 , foo ) + ~ ! - - 123 or false != - ~ ! - ~ ! false ] & ( ~ true ) ;
 false . foo or true ;
 ~ "bar" . foo < ! - "bar" ^ ~ ( false ) { var foo int . int . int = - foo <= true ;
 } ;
 } else { for var foo int = false and 123 % ~ false ;
 ! true ( ) << foo and - foo ;
 false . foo and false or false != 123 /= true { val foo int = ~ ! ! foo ( foo , - ( false ) [ - - ! true ] and false [ ! "bar" + ~ ! ~ - 123 ] ^ "bar" ) << ! true and - - ~ foo - ~ ~ true . foo ;
 } ;
 } ;
 } ;
 } ;
 func foo ( ) int . int { var foo int = false ;
 } ;
 val foo int = ! ( ~ ~ - ( true - ( ~ false [ - ( ~ foo ( ) == false ) ] or ~ false . foo ) [ ~ ! - - ~ ! ~ 123 . foo or 123 ] and - ! ! 123 ) >= foo << 123 ) ( foo and false , ~ - ~ foo << 123 [ ! true == 123 ] and - ! ( ! ( ~ "bar" >> 123 [ ~ ~ ~ false >= false ] ) ) [ ! false ] - true or ! ! - false ) ;
 val foo int = ~ true % false ^ 123 >> - foo . foo or 123 ( ( ! 123 ) , - - foo ) ;
 val foo int = 123 and "bar" ( ~ 123 , ! ~ ~ "bar" or ! - - - - ~ "bar" ( ) * 123 ( foo , false . foo ) ^ ~ ! - false and ~ ! "bar" ) < "bar" ;
 func foo ( ) int { if ( false ) [ ( ~ foo % ( - true ( ) >> "bar" ) ( ! ~ ~ ~ true % ~ ~ foo . foo or ~ "bar" , - ! 123 ( ! false ( 123 , - ! true or 123 + false [ false + ! ~ true . foo ] ) | true , 123 . foo ) >> ( false ( ) >> - foo | "bar" ) [ ~ - true != true - ! foo ] ) ) >= ~ - - ! ~ true << ! foo [ true * foo ] - 123 ] { - false ( ) or "bar" < - - foo [ ! 123 ( ~ ! ! 123 ^ true / ~ 123 , ~ false != false [ false ] ) and ! ~ false ] and "bar" * foo . foo ++ ;
 } else { true ;
 } ;
 } ;
 val foo int = ! true > ( false and ~ "bar" ) ;
 val foo int . int = - "bar" or "bar" + ! 123 ;
 class foo { foo int ;
 } ;
 class foo { func foo ( foo int , foo int . int . int , foo int , foo int , foo int ) int { if true { for var foo int = ~ false << ! ! ~ true ;
 - "bar" / 123 > false ;
 ~ ~ ( ! - ~ - ~ 123 ) != "bar" = "bar" and - ~ foo { 123 -- ;
 } ;
 } else { var foo int . int = 123 ;
 } ;
 } ;
 func foo ( foo int . int . int ) int { ~ false += ( 123 . foo ) . foo and "bar" . foo ;
 } ;
 foo int . int ;
 func foo ( ) int { for var foo int = true != "bar" >> ~ "bar" ( ) ;
 123 != true [ ~ - ( ~ ! true >> "bar" . foo % - - "bar" . foo ) << - - foo ] > foo | 123 ;
 - ! 123 << ! foo ++ { var foo int . int . int = ( "bar" >> true == true ( ) ) and true ( ! false ( ~ - ! ~ "bar" . foo , ~ ~ ~ - foo [ ! ! "bar" * - false [ - false [ ( - foo + ! - ~ "bar" * true ( ) > ~ true << 123 ) and ~ "bar" . foo == 123 / ~ 123 ] ] != false . foo ] << - ~ - 123 == - ~ - - 123 ) , ! ! 123 & - - ( ! ( - foo or ! "bar" ) . foo and ! "bar" ( foo . foo / ~ ~ "bar" . foo , foo . foo * ~ false ) << - - ! foo [ true ] ) ) * ~ - ~ foo ( 123 , 123 [ foo - "bar" [ - ! ~ ( "bar" % ( ! 123 . foo ) < - foo or false ) or ( ! true ) . foo % ! ~ "bar" != ~ - "bar" and ~ - - ( ! ~ - ! "bar" != 123 and ~ ( ! ! true >= ~ foo >> ! foo ) % - false [ true ] ) * true == ~ 123 ] == ! - - ! ~ ! - ! ( true > ! ! 123 ) ] ) ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int . int . int ) int . int { var foo int = "bar" > ! true != - - ( ~ ( ! false ) ) >> ! - "bar" [ ~ foo or ~ foo ] and ! ! foo ;
 } ;
 foo int ;
 func foo ( ) int . int . int { ( ~ - foo . foo >> "bar" or "bar" & - ~ - true [ - foo . foo or foo << - true ] << ! false ) and ( ~ ~ foo + "bar" or false . foo != - ~ ~ true [ "bar" / "bar" < ~ ! foo ( - ! ( ( foo or - foo ) and ! false ) * ~ - - true or 123 , ! ! ~ "bar" [ ~ ~ "bar" ] and - - ~ ! ~ true ( "bar" , foo ) or ! ! ( true ) ) / ~ - true | ! "bar" ] ) < ! ! - ( ! ( - ~ ! true / ~ "bar" ( foo ( ) == "bar" ( ) , ~ true ) ) and false == "bar" or false ) ;
 } ;
 func foo ( foo int . int . int , foo int , foo int , foo int , foo int ) int . int { for var foo int = false ( ) != ! ~ ! "bar" | ~ ( ! - false . foo == false ( ! ! ! ( ~ - ~ - ! "bar" or foo ( ) - false ) ( "bar" , false / ! ~ foo == ~ ! ! ~ foo ) and ~ ! true . foo < - "bar" [ - 123 and - "bar" or foo != ~ 123 and true [ 123 ^ - true ] ] , "bar" and ! ~ foo != ( "bar" ( ) << false and true ) or ~ ( - 123 != ( ( ( - - false . foo % ! false ) >> false & - ( ~ false ) [ true ] ) ) >> "bar" + false [ 123 ] and ~ 123 ) - ~ ! - ( "bar" ) ) << ~ ~ - ( - 123 ^ ! true or - ~ ! 123 ) < "bar" ) ;
 "bar" ;
 ( ! - 123 or ! ! 123 == true ) -= ! "bar" ( ) << true or false { if foo [ 123 & false ] == 123 << - ! 123 { ( ~ false < ! 123 ) <= false ++ ;
 } else { val foo int . int = false and ~ ~ ! - "bar" ;
 } ;
 } ;
 } ;
 func foo ( ) int { for var foo int = "bar" ( ) ;
 ~ ~ 123 ;
 ! false >= true % - ! true { - 123 ( ! - ~ "bar" or false , foo ( ~ ! ! - foo or - ! true ( ! 123 and "bar" , ! true ) , ( "bar" ( - foo , ( ( - foo / ~ true ) <= - "bar" and ~ ~ false ) ) >> ! ( ~ - ( "bar" ) [ true ( ) or ! true ] ) and ~ ~ false < ~ ! 123 . foo or ~ false . foo ) [ ~ - - ! foo >> true [ ~ ( false and ~ true or ~ "bar" | - - true ) == foo + "bar" . foo > - "bar" ] ] ) >> ! foo or ~ foo ) == ~ ! ~ - "bar" ^ - 123 . foo <= false ( true , - ! ( ( - ! - "bar" * false ) & - ~ ! ( ( true ) << - true % ( ~ ~ "bar" >> foo [ - foo and - - - ~ ~ - ! - - foo ( 123 << ( ( - 123 [ foo ] >> "bar" - foo ) ( foo and - 123 & - false > - ! ~ - ( ( ! foo >= false and "bar" ( ) != "bar" ) [ - ~ - false or foo ( ) ] ) , - true ) / foo <= "bar" << - true ) / - ! - - - ! ( ~ foo or - - 123 ) , ~ 123 [ false ( ~ true and - 123 & ( ~ - - ~ - ( - ! false ) ) or true [ - ~ false and false . foo ] | - - "bar" , 123 ) ] - ( - ~ ! ~ false ) . foo >= ~ true ) ] == 123 . foo << ! "bar" ) ) ( ) ) . foo != ! - ( true == ~ ( - ~ foo < ~ ~ false and "bar" ) [ ! ~ 123 / 123 or foo * false ] and - ! - true ) ) ++ ;
 } ;
 } ;
 func foo ( foo int , foo int . int . int , foo int ) int . int { var foo int = ( ~ ~ foo and foo ) % "bar" ;
 } ;
 } ;
 func foo ( foo int , foo int . int . int ) int { if foo [ ! ~ 123 ( ! foo [ - ! ~ - ~ ~ - "bar" . foo ] * ( ! - ! true >> ( false [ foo >= true ] ) . foo ) , ( - ( false and ! ! false ) % 123 . foo and - ! ! - 123 ) ( - ! 123 ( ) and ~ ( - - ( ~ ( ( - true % true ) - "bar" <= ! - false == - ! - true ) ) . foo << ! 123 [ ~ - ~ ~ ! - ~ "bar" ( ) >= ! ! "bar" ] ) , true + ~ "bar" * - ~ ( foo <= "bar" and false or ! ! - ( - "bar" . foo << ( foo [ 123 . foo and - - - ~ ~ ( - - ! ~ ! ~ ! ~ ~ "bar" [ foo ( ) and ! ! ! true [ false . foo != 123 ( ) ] ] != ~ ( - ~ ~ - ! ! 123 ) [ 123 ] ) ( ) % true + ! "bar" [ ~ ~ - foo == ! ! - ~ "bar" ] ] ) ) ) << foo / foo [ ~ ( "bar" . foo ) >> foo & ! ! ~ - 123 ] ) or ! 123 ( ~ true != foo , ! 123 ) > - ~ ~ ~ 123 [ ~ foo ] ) != ! ~ ( - false / ~ 123 ) and - - true / 123 ( ) ] <= ! false * ~ ~ true . foo { for val foo int = ! false ;
 "bar" or - - ! ( "bar" ) ^ ~ foo ( ) ;
 ~ foo **= 123 . foo { var foo int . int . int = false ;
 } ;
 } else { val foo int = "bar" >= - ( ~ ! ( ! ~ ! - ! - - - 123 ( ) ) or foo < foo ( ) ) [ true | ~ false ( ) and true - ~ ! - ~ - ! ~ ( ! true ) ] != - "bar" ;
 } ;
 } ;
 class foo { foo int ;
 foo int ;
 func foo ( ) int { ~ foo >> ! ! 123 ;
 } ;
 } ;
 func foo ( ) int { 123 >= "bar" [ "bar" ( - foo ( ) , "bar" . foo | false < true ) and ! foo . foo ] - ~ ( ( true [ ! "bar" ] and "bar" ) [ ! true <= ~ true ] * foo ( ) ) ++ ;
 } ;
 class foo { foo int ;
 foo int ;
 func foo ( ) int . int { for val foo int = ~ "bar" > ! "bar" and true != ~ ~ true ;
 false ;
 - - false - - ! - - ! - ( ! "bar" ) += ( - - ~ - true and ( ! foo [ ~ - ! ! foo < - 123 * ~ "bar" == ( ! false >= ~ ! - - 123 ) ] + ~ ! "bar" [ true ] == foo ) ) { if ! - 123 { var foo int = "bar" . foo ;
 } else { var foo int . int . int = true [ - true ] ;
 } ;
 } ;
 } ;
 foo int . int ;
 foo int . int ;
 func foo ( ) int { for val foo int . int = foo ( - 123 ^ - ! ~ ( ~ ~ ! ! true | 123 ) . foo or - ! - ~ foo , - ! ( "bar" << ! false <= ( ~ - true ) ( ) ) or true [ "bar" [ true ] % ( ~ - - ! 123 . foo ^ - false != - "bar" ( ) > false or ~ "bar" ) and ! "bar" ] ) <= - "bar" ;
 - - ! ! - ! - foo == - false > ! ~ "bar" ( ~ - - foo , ~ "bar" . foo ) and ( 123 . foo ^ ! ( - ! ~ ~ false ^ ! ( ~ ~ - foo ) ) or ( foo ^ false ) << "bar" . foo | "bar" [ true << ! ~ - ( false ) ] ) == "bar" << "bar" ;
 foo or 123 == - - true -- { if false % ~ - 123 . foo { "bar" / 123 == foo %= "bar" . foo | - "bar" or - ! ~ ( ~ "bar" or ~ ~ false . foo ) ;
 } else { for var foo int = ! "bar" != true ;
 ! ! - ~ ! ~ 123 ;
 false % ! - - - - - foo -- { for var foo int = foo ( ) << ~ ! "bar" ;
 foo and - ( ! ~ - - ~ ~ true [ ( false ) & ~ - "bar" > ~ "bar" ] ) or true ( true , true ) ;
 ! ~ - ~ "bar" . foo and true /= ! false + "bar" { var foo int = false and ~ "bar" [ - true ( ) and foo ^ foo ] + foo ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int . int . int , foo int . int . int ) int . int { 123 ;
 } ;
 func foo ( ) int { for val foo int . int . int = - false or - ! - false % - ( true ) . foo ;
 ~ "bar" ;
 ! ! - foo { if false . foo { val foo int . int = ~ false . foo ;
 } else { false ( ) > ~ - ~ ~ ~ ! - foo = ~ ~ true ;
 } ;
 } ;
 } ;
 var foo int = ~ ! false ;
 func foo ( ) int { foo ( foo % - "bar" ( ~ ! "bar" == - true , ~ ~ - ~ ! "bar" == ( false [ ~ ~ ( ~ true % "bar" ) ^ ! - ! "bar" . foo ] ^ "bar" or ! - - 123 != ~ ( foo + - ~ 123 / true > ~ ~ ! - ! ( - ! false / - ( foo ( ) or - ! foo . foo >> "bar" ) ) ) & ! false ( false != - ! ( ( - ! "bar" . foo ) ^ false ) , ( ( ! ~ ~ - true ( ) ^ ! ! ! false [ - false . foo ] ) & "bar" ( ) > 123 [ ~ - ! ~ "bar" ( ) ] ) [ true . foo | - ! - true ] ) ) [ - - - false ( ) * ~ - - ! ( "bar" % ! true << - - ! "bar" % ( ! ! - ~ ! ~ 123 [ ! ~ true or foo ( ) ] ) ( foo and foo , - ( 123 [ 123 ] ) and ! true [ ~ ~ 123 ] > foo ) == ! true <= 123 . foo + "bar" ) ] ) > false ( ) or false , "bar" & ! true < ( 123 [ "bar" ] ) . foo ) and - true / ( ! ~ ~ ~ false ( - ( ! - ~ false - ~ foo <= ~ false << ~ false ^ - - ! ! ! ( 123 ( ~ ! ! false , true > ! - ! ~ true ) >> foo ) % "bar" ) , ~ ! ! ! ~ 123 ^ ! ~ ( true >> - false == ~ - "bar" . foo ) ) ) == false | ( - ! ~ ! "bar" + - "bar" ) ( ) ++ ;
 } ;
 var foo int = ~ false ;
 var foo int = ! ( true ) ;
 class foo { func foo ( foo int , foo int . int . int , foo int , foo int ) int { foo ;
 } ;
 func foo ( ) int { if ! ( - 123 ) . foo ^ - 123 { val foo int = "bar" [ ! 123 & ! true [ ( ( ! - ~ 123 - true . foo / 123 ) [ true [ ! true ] ] ) << - ! - foo or false ] ] ;
 } else { ( "bar" ) << ~ true ( false << ( ( 123 & ! false << foo and ! ~ "bar" ( ~ ! ! true , ( ! 123 | ~ foo . foo ) and - ~ - ~ 123 ) ) ( - ~ ~ "bar" , foo ) >> - true ) and true . foo != 123 , 123 ( ) ) and "bar" or false and ! "bar" <= 123 [ ( "bar" ) <= ~ ! true << - ! ( - "bar" ( ) ^ true ) ( ) ] % foo [ "bar" . foo and ( - ( ~ ! ! ! 123 > ( - ~ foo and ! ~ 123 ^ "bar" << ( foo or foo * true ) ( ) ) or foo ( ) ) ) ] ++ ;
 } ;
 } ;
 foo int ;
 foo int . int ;
 foo int ;
 foo int ;
 } ;
 var foo int . int . int = true ;
 class foo { foo int ;
 func foo ( ) int . int { ~ "bar" and ! ~ - "bar" . foo << ( ~ ~ 123 [ ( - 123 ) ] ) . foo -- ;
 } ;
 } ;
 class foo { foo int . int . int ;
 foo int ;
 foo int ;
 } ;
 
