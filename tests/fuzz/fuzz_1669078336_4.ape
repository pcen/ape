module foo ;
 val foo int = foo ( - foo , "bar" <= ~ ! "bar" ) ;
 val foo int = ! - ! foo . foo == ( 123 != true ( ! ! false == ~ foo , ! ~ ( ! ( true ( ~ ! ~ ! ( ~ 123 . foo <= "bar" ) > ! true , true ) >= - 123 . foo == true ) ( true , ( foo . foo & true >= ~ ~ false + - ~ "bar" ) ) <= 123 ) ) ) | ~ ! foo ;
 var foo int = - "bar" [ ~ - - 123 ] ;
 var foo int = ~ ( ~ "bar" ) ;
 class foo { for var foo int = ! ! ! ! ~ - ! true * - false ;
 - foo ;
 123 ( - true < false . foo , ~ ( "bar" >= true . foo != false ( ! true & ! ! "bar" ( ( 123 ) == true [ true ] , ! false != ! true - "bar" ) , - foo ) ) ) < - "bar" { if false [ false * true < ! - false [ true ] ] == 123 ( - foo , true ) { 123 ;
 } else { false / foo | false -- ;
 } ;
 } ;
 } ;
 val foo int = true ;
 func foo ( foo int , foo int , foo int , foo int ) { - ! ! ! ~ 123 [ true ] ++ ;
 } ;
 val foo int = ! - - "bar" ;
 func foo ( foo int , foo int , foo int , foo int ) { ! "bar" -- ;
 } ;
 class foo { if "bar" { if foo == 123 { for val foo int = ~ - false . foo ;
 ( ! ~ ! ( ~ false . foo != false ) ) ;
 ! - false { true - ~ - 123 -- ;
 } ;
 } else { for var foo int = 123 . foo ;
 ~ false ;
 false <= ! foo + - ~ "bar" == - 123 . foo < ! ~ ~ ! false ( - ~ ~ "bar" != false [ "bar" ( foo [ ! - ( - 123 ( 123 [ ! foo ] , "bar" [ - - - 123 [ ! "bar" ] >= - false ] != - ! ~ ! - - 123 <= ( ~ false != ! ( ! false ) ) ) + - ! ! "bar" ) < true == false ] , false ( true ( ! true . foo , 123 [ "bar" [ true ] < "bar" ] ) , ! false . foo ) ) ] ^ true , - ! ! ~ - - - ! false [ - ( ~ - ~ false [ true > "bar" [ ! ! ( false ) != ( "bar" < true / false . foo ) ] + ! ! ~ ~ - ~ ( ! foo [ - ( ~ ~ false + 123 ) & - ( 123 ) <= ~ "bar" [ ! 123 ] - "bar" ] == "bar" ) ] ) [ - ! ! - foo ] ] != ( ! ( - ! ~ - ! false ) . foo ) > ! ! foo ) / 123 ++ { if ! ! ( - - ! true ) { if ~ false { for val foo int = ~ ( - 123 ( - ( 123 ( ~ ~ true + ~ ! foo . foo , ! "bar" ) ) [ ~ ! true [ ~ ~ foo [ ~ foo != ! foo ] ] ] & ! true . foo , ! ( true ) [ false ] ) ) [ - "bar" / false . foo ] ^ - ~ ( - - ~ false | ~ 123 [ "bar" ] == 123 . foo / ~ ( ~ "bar" [ ~ - 123 ] ) ) ;
 - false ;
 - foo [ true . foo ] / ! ~ foo /= foo ( ! ~ - true . foo + - ~ 123 , ~ - 123 ) + - ~ foo { if - ~ foo . foo { - ! ! - ~ - "bar" **= ~ ( true <= - ( ( ~ ! "bar" + - - ~ 123 ) [ true ] ) ^ "bar" ) & true ;
 } else { if 123 != ( 123 [ ~ false [ - ! 123 [ ~ true - ( true < ~ foo ) [ - true ] / 123 ] ] ] ) . foo | false & ( - ! ! ~ "bar" ) { if 123 { if ! ~ - - ( 123 ) { - 123 ;
 } else { ! true . foo <= ! ~ ! - false ++ ;
 } ;
 } else { ( ( ! ! 123 / ~ foo ) ) += - - 123 & ~ true ;
 } ;
 } else { ~ ~ 123 ;
 } ;
 } ;
 } ;
 } else { ! ~ - foo == foo [ 123 . foo > ~ ( ! false < ~ true ) . foo ] ++ ;
 } ;
 } else { if ~ "bar" { if foo . foo { if foo ^ foo [ - foo ] * ( false ) { if 123 > false . foo { for var foo int = false ;
 ~ ( "bar" ) ( foo <= - ~ ! ( ! ! false != - false ) . foo , 123 ) / - ! 123 [ foo . foo ] != - - true ;
 123 -- { if ~ foo { for val foo int = ! 123 [ true [ ~ - ~ ! true | ~ ! "bar" ] ] ;
 "bar" ;
 ( foo ( foo , - ~ - ! ~ ! true & ~ - ( ~ foo ) [ foo . foo ] ) ) != ! ~ ! - foo -- { if ! ~ false & 123 { for var foo int = ! ! ~ foo [ "bar" ] ;
 ~ ~ - ~ foo [ - true | - ~ ~ ! foo . foo * - ( foo == ~ foo ) ] < 123 - ~ ( "bar" ) ;
 ( 123 ) != ~ ( ~ "bar" ( ~ true , - false ) & true ) / ! ~ ~ - 123 /= ( 123 + ~ ! "bar" [ "bar" / foo ] ) ( - true , false ) & 123 < true { ( ~ ! 123 ) /= ~ ~ ! "bar" >= ~ true [ ! - false + true ] | ~ 123 / ~ "bar" ( true . foo , ! "bar" < foo / ~ foo [ 123 ] ) ;
 } ;
 } else { ! false -- ;
 } ;
 } ;
 } else { false - true *= - ~ ~ true ( true ( - ! "bar" , ~ - ! ~ ! "bar" & "bar" ) , ! ! foo ( - - "bar" == "bar" [ "bar" == ~ "bar" ] / 123 , - ! ( "bar" != ! ( true ( ! - - ( - - 123 ( 123 ( ! false ( 123 , - - false ) , ( ! ~ - ! ! "bar" == 123 ) * false ) , ~ ! ! ~ false ) ) , ! - ( ~ false ) ) == ! - true ( "bar" [ 123 ] >= - - "bar" * - ~ ! ! false , "bar" ) ) . foo ) . foo ) | - ~ 123 < foo ) ;
 } ;
 } ;
 } else { ! ( ! false ) ++ ;
 } ;
 } else { for val foo int = 123 + - ~ ~ ! true [ - foo - - ( false [ ~ ! ! true . foo ] ) == ~ false . foo ] ;
 ( ~ ( ~ 123 ) + - 123 [ false / "bar" ] ) . foo ;
 123 . foo { - ! ( ~ ~ ( ! - ( foo * - ~ ! false <= ! - foo ) ) . foo ) += true [ "bar" [ ~ false . foo ] ] ;
 } ;
 } ;
 } else { foo ( - ( ! 123 != foo . foo ) ( ! true == ( "bar" ) [ "bar" ] , ! true ) , ( ~ "bar" . foo ) ) -- ;
 } ;
 } else { - foo ( ~ ! ! ! "bar" , true ) = ( false ) ;
 } ;
 } ;
 } ;
 } ;
 } else { - - true != foo * - - ~ false /= true ;
 } ;
 } ;
 var foo int = - - ( - - ~ 123 <= true | false ) ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) { if ~ "bar" { if ~ "bar" != ( "bar" ( ( 123 ) - false , ~ ~ ( ! true [ false ] ) ) ) ( foo | - ! "bar" ( - false == ! ( - false ( ( foo ) ( ! "bar" , false [ true * ~ false ] ) , 123 ) == true ) < ~ - "bar" ( ~ 123 * false ^ ~ ! ~ foo , ! true ) , - ( false - false * 123 ) [ false > ( - ! 123 ) != true ] ) , ( "bar" ) ) { ! ~ ! "bar" ;
 } else { foo == "bar" -- ;
 } ;
 } else { false . foo ;
 } ;
 } ;
 var foo int = - foo & ! false + ~ 123 ;
 class foo { ( "bar" ) = ! ! false >= ! ! ~ - false ;
 } ;
 class foo { foo -= ( 123 . foo ) ;
 } ;
 class foo { true ( 123 , ! - ( ! ~ "bar" [ ! true > - - - ~ ! - - - "bar" ( ! 123 , foo ) ^ ~ false ] ) ) < true /= false - - false . foo ;
 } ;
 class foo { if ! false ( - ~ ! ~ ! "bar" [ true ( ~ ( ! "bar" ) ( ( ~ ~ true <= foo ) , - ! ! ! ! ! 123 / ( true ) ( - ! ! ( "bar" [ 123 ( - ! ( false ) + ( true ( "bar" . foo , foo [ - ! false + ! - foo . foo ] - "bar" [ true ] ) == false ( - foo , foo ) ) , ~ 123 + "bar" ) ] ) * ~ 123 , - ( false ) ) - - true ) , ( "bar" ) ) ^ - ! - ! ! "bar" ] / foo ( foo * ( foo ( 123 ( ~ ! false ( ~ ~ foo , ! ! ! true . foo / false ) != ~ foo , - - 123 ) / ~ - false | - 123 < - true * ( ~ ( ~ ~ ( - foo ) ) ) != foo [ ~ ~ false & ! - ~ true ] < ! ~ true ( ! - foo [ ! true [ - - foo ] ] , ( true [ false ] != - 123 >= ( "bar" ) ) ) , ~ ~ ( 123 < ~ "bar" . foo ) . foo ) ) [ - "bar" ] , ! - false [ ~ - ( ! ( foo [ ! ! foo ] ) . foo > foo . foo ) ] > - ! ( ~ true ) ( ( "bar" . foo ) , ~ ! 123 ) ) , - ( 123 ) != ! ! "bar" ) { ( - ( 123 ) & "bar" ) ;
 } else { for var foo int = ( 123 ) [ - ! foo - foo ] + - - - foo . foo != ~ 123 ;
 123 . foo ;
 123 [ ~ false ] * false . foo < foo -- { for var foo int = "bar" ;
 true ;
 - foo [ 123 ] < ( true ) ( - false , ~ ! ! "bar" ) - true [ ~ - foo ] -- { - foo ++ ;
 } ;
 } ;
 } ;
 } ;
 class foo { for val foo int = ! ~ 123 . foo ;
 false == 123 . foo ;
 "bar" { ( false ) [ ! - ! ! - ! foo ( ! true , "bar" ) ] *= foo ;
 } ;
 } ;
 var foo int = "bar" == - - ! 123 ;
 var foo int = 123 ( - - ~ ! - foo + "bar" , ~ false [ - - - ! - ! true ] != ! 123 | - ! false ) ^ ! - - - ! ~ foo . foo ;
 class foo { if ! ~ ! 123 ( false . foo , ! ( ~ true [ "bar" * "bar" ] ^ foo ) [ 123 [ ! ~ ! 123 & ~ false ] <= ~ foo == ! ~ false [ foo * ~ ! - 123 ] ] < ~ ~ - false ) ^ ! false [ "bar" ] > 123 { for var foo int = "bar" . foo ;
 true ;
 - "bar" [ foo == ~ "bar" ] ++ { if - ! ! 123 ^ foo { for val foo int = ! ! ~ "bar" ;
 ~ ~ - ! ! ( false >= ( 123 ) ) ;
 true ( false , ! 123 - true ) | "bar" { if ( false ) { ( ~ ~ true ( false , ( 123 & foo ) ) > 123 ) /= ~ "bar" . foo & ~ ( - "bar" ) ( false . foo , 123 . foo + ( 123 ) > false [ ~ - foo + ( false & 123 ) ( foo <= false == - - ( ( ( 123 == - ! ~ ! "bar" ) [ ~ ~ 123 == ! ! ~ - - 123 ] ) ) & - false , 123 ) / - ~ - "bar" ] != foo - 123 ) ;
 } else { 123 / ( ! ! foo ) ( ! true , true . foo ) = false ;
 } ;
 } ;
 } else { for var foo int = ( ! ! - - false ) [ true ( ( - false > ~ - ~ ( ! true . foo * - ~ foo ) ) , true != ~ 123 | false & false [ ~ - true - foo * ! ! 123 ] ) ] & ! - - "bar" ;
 false != - ! false ;
 false * foo { for var foo int = ( 123 == false . foo ) ;
 ~ ~ ( ! ! ~ false . foo & - - - true ( ! true ^ ! false , "bar" [ ~ ( ~ foo [ foo ( true - false , - - ( ( ~ - ! ~ 123 ) ) [ - true ] ) ] ) ( ~ ! 123 , ! ( ~ true ) ) ] != ! false ) ) & "bar" ;
 ~ ! false += false { if "bar" ( - ! false ( ! - true >= 123 , foo ) , ~ true < ( ( - ~ - - ! ! ! ! foo ( - ! 123 , ( ~ ~ false - "bar" <= ~ "bar" - ~ ! "bar" ) . foo ) ) ( ( ~ - ~ - - ~ ! true >= ! ~ - "bar" ) , ! ~ ( foo ( - ~ ~ foo ( false , 123 [ - "bar" ] >= true ) - ! ( ( ! - 123 * - false ) >= foo ) != ! foo * true . foo , - ( 123 * "bar" ) . foo == - ( ( - - "bar" . foo ) ) ) ) ) ) * false ) { if "bar" { for val foo int = false / foo ( ~ false ( true . foo , - true == "bar" ) / - ! "bar" , true . foo ^ false ( false , - 123 != ! ~ ~ foo ) ) ;
 foo ;
 ~ ~ "bar" { for val foo int = ~ - - ~ foo [ ~ "bar" ] ;
 ( - ~ - - foo ) ;
 - - foo { if "bar" / ! foo . foo - - true { "bar" = ~ false ;
 } else { if 123 <= ! false { if true { for val foo int = ! true < "bar" [ foo [ - true - foo [ ! 123 ] < - ! - ~ ~ 123 ] ] ;
 ~ - ! ~ - ! ~ - false ;
 - ~ ( true . foo ) != - ! - ! 123 - ~ ! true /= false { if ~ 123 { for val foo int = true + ~ ( ( ( - "bar" != - - ! 123 ) ) ) ;
 false != ( ! - - 123 / ~ foo . foo ) [ 123 ] ;
 "bar" [ false ] < foo -- { if ~ ~ true { foo <= false ++ ;
 } else { if ~ - ~ ~ ~ 123 { for var foo int = false ;
 ~ "bar" [ ~ "bar" ] / ( ! foo ) ;
 foo ++ { - true >= "bar" ;
 } ;
 } else { - "bar" [ ! false - ~ foo . foo ] ++ ;
 } ;
 } ;
 } ;
 } else { for var foo int = foo ;
 123 [ - ! - ( 123 [ foo >= ! ( ! - true ) ] & - ! "bar" ) + - ~ "bar" ] == - - - - true + ! - ~ "bar" ;
 - false [ - 123 ( ! - true ( true , foo ) , ! foo ( ~ - ~ ! - false - true . foo , - ! ~ "bar" - ( foo ) >= ( - false ( ! "bar" , - - ! ~ - 123 ) ) != - ~ false [ ! true ] ) ) == ( false / foo ) ] / foo ( false != foo , ! true [ true ] ) *= - ( - "bar" ) { 123 <= 123 != - ! false ;
 } ;
 } ;
 } ;
 } else { false & ! foo -- ;
 } ;
 } else { if "bar" - - - ~ ( ! ( true . foo ) ( - - ! "bar" , "bar" >= "bar" ) ) { ! "bar" - foo [ - true [ - ( ( ! foo [ "bar" [ foo ] ] ) [ "bar" [ foo * ! ( - true ) [ true != foo ] ] ] / ~ "bar" ( 123 ^ - ~ ~ foo , "bar" ) + ~ - ! ! true ) + ( - - foo ) & ! ! false ] ] ;
 } else { foo -= ! false / ! false ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { if ! - - false . foo != true { ( ~ true . foo ) [ false [ false ( foo ( - ! - ( ! ~ ! ~ ~ true ^ 123 / ! 123 ) ( ~ "bar" , false * - - 123 != 123 ) , "bar" & true ) , ! true ) ] != ! ~ true ] **= 123 ;
 } else { for var foo int = 123 [ foo ] != ! false ;
 foo ;
 - ~ true -- { foo & - - - ~ false **= "bar" . foo ;
 } ;
 } ;
 } ;
 } else { if ~ - "bar" * ! foo > - 123 { if ! - "bar" { if false { for val foo int = - foo ;
 ! ! false [ foo ( ( ! false ) . foo + - 123 ( false ( ~ - "bar" , "bar" ) , foo ) , ! ! foo ) & ~ - - false . foo | - - ~ foo ] ;
 foo [ - ! ! ~ - 123 . foo ] { if true ( ! true [ ( foo / ( ! ! ! ! true ) ) ( ( - - false / ~ ! true ) , 123 ) ] >= 123 , - foo * - 123 . foo - - false [ 123 * ! ! ( 123 ) ] <= true . foo ) >= 123 { if - - true ( 123 / ! true , ! ~ ~ ~ ! true . foo | false [ - foo . foo ] ) { if foo { for var foo int = ~ ~ ~ ~ ( - foo ) + 123 ;
 ( ~ ( foo . foo ) ) ^ ~ ~ - 123 ;
 - ( ! ~ 123 ) ( false , foo ) ^ ( "bar" == ! ~ - ~ - ~ ! foo ) <= - "bar" - ~ ~ ~ "bar" ( "bar" , true == ( - - "bar" . foo | "bar" ) ) -- { - ! ~ - ~ "bar" += true [ ! - - ! ! foo ] - ( 123 > ( ! 123 ) . foo / ! ! false [ true & ! ~ foo ] ^ ! - ~ ! true [ 123 ] ) ;
 } ;
 } else { ( ~ ~ ~ - false [ true ] ) * foo = - ~ - false ;
 } ;
 } else { ! ! 123 ( "bar" , ! 123 > "bar" [ false ] ) != ! 123 = ! ! false ;
 } ;
 } else { for val foo int = - ! ~ ~ ~ foo ;
 - - foo > true . foo ;
 ( foo ) * ( ~ false == ! ! - true [ ! ! ! ~ - ~ true ] * - - ~ ~ false ^ - 123 / true ) [ ( 123 == true . foo ) ] == ! "bar" *= ! "bar" { for var foo int = ~ - foo & ~ ( - foo [ ! - - "bar" * false . foo | 123 [ true | ~ 123 ] * foo != foo ] * ! ! "bar" != false ( ( ! ~ ~ ! foo ) [ ~ ~ false ] * - 123 > ( ~ - ~ ~ ! ~ ! 123 ( ~ - false . foo , false | ! ! "bar" ) ) - ( ! 123 ) , ~ ~ "bar" ) ) - true ;
 ( 123 & - ( "bar" ) ) ;
 ! ! false < ( ~ ~ 123 / true ) == - false [ - ~ - true ] = true { for var foo int = foo ( ~ foo ( ! 123 | ! ~ 123 . foo , foo ) , - ~ ~ 123 ) < false == ~ "bar" ;
 ! false & ( ! foo ) ;
 false [ false != - true * "bar" . foo ^ ~ ! ( - ( - "bar" ) ( true * ~ - false ^ - "bar" , "bar" & - ~ ! - false ) ) ] != true < ! 123 -- { for var foo int = false ;
 ! foo ( ~ 123 > "bar" , - ( - ( - ! "bar" [ 123 != ( ! false ) ] ) ) ) >= ( true [ - - - ! false ] ) == false [ false . foo ] | - 123 . foo > "bar" [ foo . foo ] ;
 - - - ( ~ true . foo ^ - 123 . foo ) & "bar" **= ~ foo . foo != ! - - ! - - foo { ! true [ ( "bar" . foo ) . foo & false [ "bar" ] ] != ~ - ~ - ( 123 . foo * ~ ~ true ( foo , "bar" ) ) += false . foo <= foo - 123 ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { if - ! true . foo < ( foo ) [ ! ! "bar" != true ] { ! "bar" [ - false ] * true *= - ( ! 123 . foo > - "bar" ) / ! 123 ;
 } else { for val foo int = 123 . foo ;
 true ;
 123 ++ { true ( ! "bar" , ( - "bar" ( true / - ( foo == true ( - ! 123 == ~ "bar" , ~ foo + ~ - "bar" ) - ( ! - ~ foo . foo ) . foo ) , ( true - ~ ~ "bar" * ( false [ ~ ! false * ~ ~ ~ ~ true ] >= "bar" ) ) ) ) | - 123 ) -- ;
 } ;
 } ;
 } ;
 } else { for var foo int = 123 . foo ;
 ( ~ - foo <= ( ! ~ ! ~ - ( "bar" ) . foo ) != ! ~ "bar" ) == true [ true ^ ! "bar" ] * ~ ! ! "bar" [ - - true ] ;
 ! ! - ~ ! ~ - ( ! "bar" ( "bar" [ foo != false ] , ( - - ~ ( 123 ) . foo ) ) ) / false [ ( - ! - "bar" ) . foo / ! - foo ] *= false [ ! "bar" ] { if - "bar" { ( ! ( ! "bar" ) & ~ false ) ;
 } else { ( ~ 123 <= "bar" ) . foo ++ ;
 } ;
 } ;
 } ;
 } else { true == ~ true ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { - true [ ~ - 123 ] ++ ;
 } ;
 } ;
 var foo int = - - ! false ;
 var foo int = - "bar" ;
 func foo ( foo int ) { true -- ;
 } ;
 var foo int = "bar" ;
 func foo ( foo int ) { - foo **= 123 . foo ;
 } ;
 class foo { for var foo int = true / false ;
 - ~ - ~ ( foo ) ;
 123 / "bar" ++ { ! ~ ( false / ( false < ~ ! foo * "bar" [ - "bar" | ~ ~ false ] ) ) -- ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int , foo int ) { if 123 { 123 ;
 } else { for val foo int = ! ( ! ! ~ ~ 123 ( "bar" , ! true / false - ~ ~ false ) >= 123 [ ( 123 < "bar" ) <= ! false ( foo . foo , foo ) | 123 ] ^ "bar" ) * foo ;
 ! - ! false == - "bar" ;
 true & ~ 123 [ - ( ! "bar" . foo / ~ false ) [ false ] | - ~ ~ ( ! 123 ) ] ^ false ( ( ! - "bar" ) , ! - foo ) { for val foo int = ~ foo & false == ! foo [ - foo . foo ] >= - foo | ! ( ! ! true [ ( ( true + - - true [ true ] / ! ! foo ) ) ] ) . foo * - ~ ~ ! true ;
 ~ 123 | 123 == ~ ! ( ~ ~ ~ true ) <= true ;
 foo & ( ! - ! ! ( ~ "bar" ) ) -- { for var foo int = ~ ~ foo [ - 123 ] + ! 123 ;
 - ~ false . foo ;
 ! ( ! ! ( ! "bar" . foo ) ) += - ~ ~ ! ! ~ foo ( false > - ! "bar" , - foo ) <= true { for val foo int = ! ~ - - ! ( false != ~ 123 ( false . foo - - - 123 == ! ! ! ! false < - ~ - - foo , false [ ~ - - ! foo ] > ! ! ! true ( - ~ ! ( ~ 123 ) , foo ) | 123 ) / - - "bar" ( false . foo , "bar" <= ~ - ! ( 123 ) ) < false ) | 123 . foo ;
 foo ;
 - ( false [ 123 - ( ! - "bar" ( ( ~ ~ ~ false ) . foo , ! ! foo ) ^ ~ foo != false ( ! ! ~ ~ true / - 123 != - ~ 123 , ( - - false ) ) ) . foo ] - true [ ~ ! 123 ] ) ( 123 [ "bar" ( false , 123 ) ] , 123 ) <= true & false { ! foo - - ! - ! "bar" ++ ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 var foo int = ~ ~ "bar" [ ! - ! "bar" . foo <= ! - - - true - foo [ - - - ! foo ] ] - ( - ~ ~ ! ( ( ! true ( false , 123 ) ) ( true , ~ true ) == ! - ( ~ ~ ~ foo ( foo ( - ~ ( ( false ) ) . foo <= - foo , true ) ^ ( false / "bar" ( - ~ ! 123 [ true != - - false / - "bar" >= "bar" ] , ! - ~ "bar" ( "bar" . foo ^ foo ( foo / ~ ! foo , foo . foo ) , false + ! ~ false ( ~ - foo | 123 ( ! ~ true == ! 123 , ( false ^ foo ) ) , ~ ( ! - ~ ~ - 123 [ false ] ) ) ) ) ) . foo , ( ~ ! "bar" ) [ true . foo ] ) ^ ~ ! ( ! false . foo ) ) < ! ! ! true ) ) & - "bar" ;
 class foo { "bar" ( ! true , ~ ~ - foo ) ;
 } ;
 func foo ( foo int , foo int , foo int ) { if true ( false & ( 123 ) [ ! - ! ! foo ] , - false ^ ! ! ~ - - ~ 123 ) >= foo { ! true ( ( ! 123 . foo ) , ! ~ "bar" . foo / ! 123 == - 123 ) / - ! - ~ ! "bar" ;
 } else { if false . foo { for var foo int = foo ( ! ~ 123 >= ( "bar" / foo ( ! - true , 123 ) ) + ~ false , ~ "bar" [ 123 ( 123 . foo == ~ false * ~ - "bar" , true > false ) & "bar" ] >= "bar" [ ( false ) ] ) ;
 "bar" ;
 123 * ~ false -= false { false += ! foo ^ ( foo == ~ ! ~ 123 ) ;
 } ;
 } else { if - - 123 { 123 [ ( 123 ) ] -- ;
 } else { if - ! ! ~ - foo ( false != ~ - true & 123 ( ! ~ ! true ^ - foo , ( ! - ~ - ! - ( ~ 123 ) ) / ! "bar" . foo ) , ~ ~ foo [ true [ ~ ~ false >= ( true . foo ) == ~ true ] >= - ~ ! "bar" & true . foo ] ) <= ~ false * "bar" . foo { false -- ;
 } else { ( ! ~ ! - ( foo ) ) ;
 } ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int , foo int ) { if true ^ ~ 123 { for val foo int = foo ;
 ! - ~ true [ - - - ~ foo + ! ( ! ~ ! true + ~ - ( 123 ) == true ) [ ! ! false ( true == ( - false == ! ( ~ true ) ) , ! - ~ ! "bar" > ~ true ) ] ] == - false ;
 false = ! - ~ ! ( ! true ) ( - foo ^ ! foo & ~ ! 123 ( true [ "bar" ] , 123 ) , - ~ true ( ~ ! ( ~ - - ( - false ) ) . foo , ( true ) < foo ( ~ - ! true . foo , - foo ) ) >= - "bar" [ 123 != ~ - foo & ~ - foo ] ) { if foo { ! foo ++ ;
 } else { for val foo int = 123 [ 123 [ ( foo ) [ - ( "bar" ) & "bar" ( ! ! false , ~ "bar" >= ~ - false ) > ! ~ ! ~ - ( - ~ "bar" ) & ~ 123 ] ] ^ "bar" ] ;
 ! - - false ;
 - - - ~ foo / - - - - ! true ( false , - 123 ) { ~ - ( ! false ) [ ! "bar" + false ] <= ( foo ) ( 123 , ~ ! - true ) - true += ! "bar" > ~ foo ;
 } ;
 } ;
 } ;
 } else { if ! - false { for var foo int = ~ ! 123 & 123 ;
 ! ! "bar" / 123 > true ;
 ~ ( foo ) <= ~ false . foo { for val foo int = "bar" ;
 - foo ( ( ! ~ ~ ~ - foo <= - ~ true ) ( 123 , - ~ ~ 123 ) , ~ ! "bar" ( ~ ! "bar" > - ! false == foo / ! ! "bar" , ~ - ! ~ true ) ) ;
 ! false -- { true -- ;
 } ;
 } ;
 } else { if ( ( true . foo / ~ - ! ~ - ( ~ 123 ) ) < 123 ) ( - ~ ( "bar" [ 123 [ - false / true <= "bar" [ ! ( 123 <= - ! ! ( false ) / ~ - ! ! ( true ) ) ] ] ] * ( ~ 123 != ! 123 . foo ) ) ( foo | false / ! ~ 123 != false , ( false ) ) , - ( - ! 123 <= ! true ) ) { if 123 == ! ! true & "bar" { ! ! foo . foo -= true . foo ;
 } else { 123 ;
 } ;
 } else { true **= ~ foo [ - true ] ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int , foo int ) { true . foo *= - 123 . foo ;
 } ;
 class foo { for val foo int = - ~ foo [ "bar" ] | true . foo ;
 123 ;
 - ~ true + ~ ( - ! true ( ! - - ~ - 123 < foo * - false . foo , ! ~ ~ "bar" ) ) ( ! ~ ~ 123 . foo / ~ foo , foo ) -- { if foo { if - 123 ( foo [ - ( "bar" ) ( "bar" , ! true ( ! false , false [ 123 . foo - false ( "bar" [ ! ( ~ "bar" ) ] , ~ true ( "bar" , ~ false & 123 ) + ~ ! - false ) ] ) >= ( ~ "bar" ( true [ - ~ ( ~ ( - ! ! ~ "bar" ) . foo * ! foo . foo ) ( true , ( 123 ) . foo ) ] , "bar" ( 123 == false [ ( - false ) * - ! ~ ! ! - - ! ~ "bar" ] , foo [ ! foo [ - 123 == - ~ ! "bar" / ! foo ] & false != ~ ( foo . foo ) [ ( ~ foo * true ) > 123 ] ] ) ) < "bar" [ - 123 / ~ true . foo ] ) ) ] , "bar" != 123 ^ - 123 ) { 123 ;
 } else { if foo { true ++ ;
 } else { for var foo int = ! ~ ! - - true ( foo [ ! - - - ~ 123 ( - 123 , false ) ] != ! "bar" [ false ] , ! - ! - true . foo ) + false ;
 foo ;
 - - ~ true -= true ( true , ~ - ( ~ - ! "bar" ) ) { - "bar" . foo + ~ true /= - "bar" ;
 } ;
 } ;
 } ;
 } else { if ~ ! false { "bar" ;
 } else { for var foo int = - - false ( ! ! foo , foo ) * - true ;
 foo ;
 - ! - ~ false { false <= "bar" /= ~ ! "bar" * false - ( 123 & - - true ) < ! foo ^ ~ "bar" ;
 } ;
 } ;
 } ;
 } ;
 } ;
 var foo int = - "bar" ;
 func foo ( foo int , foo int , foo int , foo int , foo int , foo int ) { if ! 123 != false { for val foo int = ~ "bar" ;
 ~ true ;
 ~ ! true [ false [ ( ~ - ( ~ true ) . foo ) - ! ! ~ ~ 123 ] ] < - foo & false = false { for var foo int = 123 ;
 ( "bar" != - ~ false ) [ ! foo [ - "bar" ] ] <= ~ ~ - ( ! - ( ~ ~ false . foo ) ) == ~ true ;
 ( - true * "bar" ) *= false != ! ~ false { if true { if ( ~ ! ! - false [ true < ! "bar" ] / ~ - - - false ) { if 123 >= ~ - ! ~ 123 - ~ ~ "bar" [ "bar" * "bar" ( foo , ! - - ! false ) == "bar" ( false > - false , ! - ! foo ) ] { foo != - ~ foo - - - false ;
 } else { - "bar" [ ~ foo ] == false ;
 } ;
 } else { false [ false ( ~ ~ ~ - ~ ~ true , true ) ] ++ ;
 } ;
 } else { - true | - - ( ! ( false ( ! false + 123 / "bar" , ~ ! ( ! 123 & ~ - ( 123 ) . foo ) [ true ] ) ) ) ( - - "bar" , - - foo ) ;
 } ;
 } ;
 } ;
 } else { for val foo int = true ( ! - foo != ! "bar" > "bar" , ! ~ foo ) ;
 ( false | ! true ) ;
 ( 123 . foo ) { ~ ~ ( ! false ) [ ~ "bar" [ ( ! ! true ) ] ] - - ( foo * - foo ) . foo ;
 } ;
 } ;
 } ;
 var foo int = false + ! - true [ 123 & - false ] ;
 class foo { if - foo { ~ "bar" /= ~ ~ ~ ( 123 ) ( foo , false ( "bar" , ~ "bar" < 123 ) <= false ) ;
 } else { 123 ( ( ! true != true / - "bar" ) , 123 . foo & ~ "bar" [ foo ( true , - ! "bar" ) ] ) == ~ ~ 123 += ! foo ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int , foo int ) { for val foo int = false ;
 ! ! 123 ( "bar" ( foo . foo / ~ - false + false . foo , - "bar" ) , false <= ! false ( true , ~ ~ ! - true ) ) ;
 true ^ true { ( ~ ! "bar" [ false ] / ~ ! - ~ ~ true ) . foo = true [ false ] == ~ ( foo ) ( ! ! ! false , ! false / 123 . foo ) * - - ( true != true ) . foo ;
 } ;
 } ;
 class foo { true < true == ( foo ) ;
 } ;
 var foo int = - ( foo ) ;
 val foo int = ~ ~ false & foo ;
 class foo { if - - - true . foo { for var foo int = true / true ;
 "bar" ;
 ~ true == ( - ~ ! - - false ) [ ! - ~ false ( ~ - ~ false , ~ "bar" [ 123 ] ) | false ( foo & 123 == ~ - "bar" * ~ - 123 | ( ~ ! ( ~ true ) . foo * ~ ! false ( foo , 123 ) ) , "bar" ) ] { for val foo int = - ~ ! "bar" / ! ( foo ) ;
 foo ( - false , true . foo ) == ! ~ ~ - - - ! true ;
 123 /= - ~ "bar" ( ( ( true != ( ! ! "bar" [ - ~ - 123 ] | ~ ! foo ) ) ) , - ! ~ - false ) { ! 123 ;
 } ;
 } ;
 } else { - foo != ( ( foo != "bar" ) ) ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) { for val foo int = ~ foo ;
 ~ ! ~ - - "bar" ;
 ( - ~ false ) [ - ( true - "bar" ) ] -- { for val foo int = "bar" [ false & ! - false [ true ] + true / - "bar" == ! 123 . foo ] + ~ ! ( ( ~ foo . foo ) ) . foo ;
 true . foo ;
 foo ( - true & ! foo , true > 123 ) *= - ~ false | ~ - false != ~ ! - ( foo / false ) . foo { 123 [ - - ~ - ~ ! - false . foo ] ++ ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int ) { if ( ! ! ! ! - foo ) / - - - - false ^ - "bar" == "bar" { true ( ~ ~ 123 ( ~ - foo , - - ! - false . foo ) , ~ ! ! - foo [ - "bar" & false ] ) / true += ~ ~ ( ! ~ ~ - ! foo ) ;
 } else { ! - ( ! 123 ) | ! - - ~ 123 == - false ( ! 123 , "bar" ) ;
 } ;
 } ;
 class foo { - ~ ! ! - 123 *= 123 ( ! false ^ foo >= true , ! false ) ;
 } ;
 
