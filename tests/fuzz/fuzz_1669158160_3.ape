module foo ;
 func foo ( ) int { if 123 { for var foo int = - ~ ~ - true ^ ! - foo & ! 123 [ ~ "bar" ] ;
 ~ 123 ;
 ~ "bar" [ "bar" . foo >= - - ( false ) ] { foo -- ;
 } ;
 } else { if ( ~ ! false >= foo ) [ - 123 ] != false { - 123 [ ! ~ - - ~ - ! 123 ] < foo -- ;
 } else { ~ true / ! 123 [ foo . foo <= foo ] ;
 } ;
 } ;
 } ;
 val foo int = ! 123 ;
 var foo int . int = 123 != - "bar" ;
 class foo { func foo ( ) int { foo ( ( true <= - false ) ( ) , - - ( - foo >= ! ! "bar" ) ) != true . foo -- ;
 } ;
 } ;
 class foo { func foo ( foo int , foo int ) int { ~ ~ ! "bar" ;
 } ;
 } ;
 val foo int . int . int = true ;
 val foo int = ( ! true ( ) ) ;
 var foo int = ! ~ true ;
 class foo { foo int ;
 func foo ( ) int . int { ! ~ - false * foo ( ! "bar" ( ) / - - ( foo ) == - foo , "bar" [ false ] ) += ! ( foo ) ;
 } ;
 func foo ( ) int . int { - "bar" & ! ! ! ~ ! ! ! false -- ;
 } ;
 foo int ;
 func foo ( ) int . int { for var foo int = "bar" ;
 ! "bar" / ~ ! false ;
 foo * - - ( ~ ( ! ~ ~ ( ~ ( ~ ! true ) ) * ! "bar" ) . foo <= 123 ) = ~ - "bar" ( foo [ ( ~ ~ false / ~ "bar" ) [ false - ( ! ! - ! foo ) ] ] , ~ - ~ ~ - - - 123 ) > ! false ^ ! ! - false { ( ~ - - false + - ( ~ - true [ ! - ! ~ false ] != "bar" ( ) ) ) ++ ;
 } ;
 } ;
 func foo ( foo int . int , foo int , foo int , foo int ) int { ~ - ! - ! foo **= foo / ( "bar" + foo ) ;
 } ;
 } ;
 var foo int = foo . foo ;
 func foo ( ) int { ~ foo ;
 } ;
 func foo ( foo int , foo int , foo int . int , foo int . int . int , foo int . int , foo int . int ) int { foo [ ! ( false ) ] += false ;
 } ;
 var foo int = ! - 123 [ ~ true ( ) ] ^ ! ~ ! ! - foo ( ) ;
 var foo int = "bar" ;
 func foo ( foo int , foo int . int . int , foo int , foo int . int . int , foo int . int , foo int ) int . int { ~ false ;
 } ;
 class foo { } ;
 class foo { foo int ;
 foo int ;
 foo int . int ;
 func foo ( ) int { for var foo int = ( - ~ - false ) [ ( ( 123 ) ( ) ) < true ] ;
 true ;
 foo -= foo { if 123 ( ! false , true ) { ! ! ! ~ ~ ! 123 ( ) == true **= 123 ;
 } else { if false + ( "bar" ( ) ) { for var foo int . int = foo ;
 "bar" ;
 - foo ++ { if ! - foo [ "bar" . foo ] { foo [ true ] | "bar" ++ ;
 } else { if foo . foo { for val foo int . int . int = - ! 123 & "bar" ;
 true ;
 ~ ( - "bar" ( ! 123 - 123 & false , - false . foo ) ) **= foo == ~ ! false { for var foo int = ~ - "bar" ;
 - - - "bar" ;
 false . foo { ~ - - foo . foo * ! ~ ~ ! ! true -- ;
 } ;
 } ;
 } else { - ! false [ false ] ;
 } ;
 } ;
 } ;
 } else { for val foo int = ( - ~ ! ! ! ! foo [ 123 <= - - ! ! ( ! - ~ ~ - - ( - - "bar" ) != ( false [ true - 123 & ~ "bar" . foo ] ) . foo ) ] ) ( ) > ! true * - ( 123 [ ! ! ! 123 ( ) * foo ( true , foo ) ] ) ;
 ~ foo [ ~ 123 ( ~ ! - ~ false , 123 ) ] * ! - true [ 123 . foo > false ( ) == ~ true [ - 123 < foo + foo ] ] > false ;
 foo { ~ false **= ( true == ~ - ! ~ "bar" ) ;
 } ;
 } ;
 } ;
 } ;
 } ;
 foo int ;
 func foo ( ) int . int { true ( - ! foo | ( ! false . foo ^ 123 . foo ) , "bar" ) <= - - "bar" & - ! ~ ! ~ ~ ! foo ;
 } ;
 func foo ( ) int { for val foo int = ( ! ~ ~ "bar" != foo ) [ - - - false ] ;
 - ~ true ( ) == - 123 / ~ ( "bar" ( ! "bar" != foo , ~ false | false ) ) ;
 - true ++ { if ! ! 123 / foo { if foo { ! - ! - - foo [ 123 != ! true [ ~ ! - - ~ foo . foo ] ] & true | 123 / ! false *= - 123 | 123 ;
 } else { ( ( 123 ( ) ) - foo > false / - false ) = ! foo ( foo ( ) , ! ~ - ! - 123 ) ;
 } ;
 } else { ( - ~ ~ 123 + false ) ++ ;
 } ;
 } ;
 } ;
 foo int . int ;
 foo int . int . int ;
 } ;
 class foo { foo int ;
 } ;
 class foo { foo int ;
 } ;
 var foo int = - foo ;
 func foo ( ) int { for var foo int = true . foo > - true ( ) ;
 true ;
 ! ~ ~ - "bar" { if ! false { ( ( ~ "bar" > true ) ) != ( ~ - ! ! true ) ;
 } else { - foo ( ) ;
 } ;
 } ;
 } ;
 class foo { func foo ( foo int , foo int , foo int ) int { if false == "bar" { true **= foo ( 123 . foo <= ( foo ) , foo ( ) ) ;
 } else { if ~ - foo != ( ! ( "bar" ) ) & 123 . foo { for var foo int = ~ ~ ! ~ ~ - ! foo ;
 false * ~ true ( true , "bar" + - false ) ;
 ! foo -- { - foo [ foo | - false . foo ] ;
 } ;
 } else { if foo & - ~ "bar" { - ( false ( false , - false ) ) ;
 } else { ! ! false - true = true ;
 } ;
 } ;
 } ;
 } ;
 } ;
 val foo int . int . int = ~ foo . foo ;
 func foo ( ) int { true ;
 } ;
 
