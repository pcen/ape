module foo ;
 class foo { foo . foo != - ! - ( foo ) [ false >= ~ true ] ++ ;
 } ;
 val foo int = ! ~ true <= ( "bar" ( - false , ( ! - foo != ~ ~ false ) ) ) ;
 class foo { ~ - ~ ~ 123 ;
 } ;
 var foo int = ! ! ( ~ foo . foo ) ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) { for val foo int = - false * - "bar" != - false ;
 "bar" . foo ;
 ! "bar" [ ( 123 | ~ ~ "bar" ( ~ ! - 123 , ! ~ - ! - foo ) ) ( false , ( "bar" ) ) ] *= - foo { for var foo int = 123 ( - foo , ~ ~ 123 ) ;
 false ;
 "bar" [ "bar" ( ~ true , - - foo ) / 123 - 123 ] ^ "bar" / foo { foo = false - false ( false . foo / ~ true ^ ~ ~ - ( "bar" ) , ! ~ - true ) == ! 123 . foo + "bar" ;
 } ;
 } ;
 } ;
 class foo { for var foo int = ~ ( true [ ! - false ] ) [ ! false ] != "bar" ;
 - - ~ - 123 [ false ( false <= true , ( ! ~ foo / false | ! foo ) ( ! "bar" , foo ( foo . foo / true ( ( ! ~ ! - - ( foo ) [ false ] ) | ! false , - ~ true [ 123 ] > "bar" ) , foo == - 123 ) > false ) ) >= ~ true ] / - ! ! - ! foo . foo == true ^ "bar" ;
 ! ~ 123 > "bar" ^ ! - false [ foo . foo ] { false + - - "bar" ;
 } ;
 } ;
 val foo int = ! ~ - "bar" - ~ ~ ~ foo ;
 class foo { foo & "bar" /= ! ! - ! - ~ ! ! false ;
 } ;
 val foo int = ~ false [ true ] ;
 val foo int = true ;
 val foo int = ~ - foo ;
 var foo int = 123 [ ! - ! foo ( ! ( "bar" ) , 123 ) == foo & "bar" . foo ] + foo * true ;
 func foo ( foo int ) { false * false [ ~ ~ "bar" [ ~ - false . foo ] / ( ( foo . foo ) ) ] < 123 ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int , foo int ) { for var foo int = ! "bar" [ - - "bar" | - false == ~ - "bar" ] ;
 ! false ;
 - - 123 [ ! ! 123 . foo ] / foo { ! 123 -- ;
 } ;
 } ;
 val foo int = - ~ foo != - - - - ! 123 ;
 class foo { ~ ! foo [ ( 123 ) >= foo ] == ! true ;
 } ;
 class foo { if - - false == ! ~ ! ! ~ ~ - ! true . foo & foo { ~ ~ "bar" ++ ;
 } else { 123 ;
 } ;
 } ;
 class foo { ~ "bar" . foo / "bar" . foo -= 123 ( false [ ! true ( ~ "bar" . foo , - ! ~ true ( 123 [ - ~ ( ~ true ) != true ] , ~ ~ - ! 123 ( ! ~ "bar" <= 123 , ~ ! ~ "bar" ) ) ) ] ^ false ( foo & ~ ~ true - 123 , ~ false ) , ~ false [ - ! ( 123 ) ( "bar" - - false / - ! true , ( - ~ foo ) ) / "bar" . foo ] + ~ foo < - 123 [ ! false ] ) ;
 } ;
 class foo { ~ ( true ( ~ "bar" - false , foo < foo ) < ( ~ "bar" ) [ false >= true == - ! - 123 [ - ( ! ! ~ ~ true ) . foo <= ~ true ] ] ) = - ( ( - ! ! ~ false >= ! ( - foo * ( ! foo [ 123 . foo ] ) ) [ ! ( - - ~ foo ) >= ~ ! foo & true + 123 [ foo ] ] & ( ! 123 ) ) ) ;
 } ;
 var foo int = "bar" ;
 class foo { if false . foo { for var foo int = "bar" ( ~ ! foo . foo == ~ 123 [ ! ( true ) ( - ! false * ! ! true , ~ true ( ~ foo ^ 123 , true ) != foo . foo ) ] , foo . foo ) - ~ foo != - ! true ( - ! foo * ( "bar" ) [ ! - ! "bar" ^ "bar" ] , foo == foo [ ~ ! ~ - ! ~ - foo . foo ] ) ;
 ( 123 <= ~ ~ true ) [ ~ 123 ] & false ( ! ~ ! - - ~ true ( "bar" & ~ true == false , ! ! - ( ~ 123 ) [ - ~ 123 [ ! - ~ true ] & ( 123 ) + ! ! foo == foo & - ~ true ( ~ - false . foo == "bar" [ ~ - ! "bar" < ~ false ] , "bar" | ( ~ false ) ( 123 [ foo ( "bar" , - 123 ) ] * ~ ( ( ~ - ~ - foo [ ( "bar" [ - ! foo . foo == - ! ( - "bar" . foo * ! false == 123 & "bar" ) . foo <= false . foo ] ) ( false > false , 123 . foo ) != ! 123 [ "bar" ] ] ) == ~ true ( foo . foo , - ~ "bar" ( ( 123 - false ) . foo , ~ 123 ) >= true ) ) ^ 123 / ( ~ 123 | - ! - ! true ) , ~ "bar" [ "bar" ] ) == - true ( ~ - ! "bar" [ 123 [ 123 [ 123 [ true ] - ! - - false [ true ] ] ] ] , 123 ) ) ] | - - ! - true ) , ~ ! "bar" [ ~ ! - false [ "bar" & false . foo ] ] ) ^ - 123 ;
 - - false /= ~ - foo { for val foo int = foo ;
 "bar" == ! ( ( foo [ ~ foo ] < foo ) > ~ ~ ~ 123 ) ;
 ! false . foo & ~ ~ 123 { for var foo int = foo * foo ;
 ( 123 ( ~ false >= - ! - ! true . foo == false [ true ] , - ! ( ! foo > - ( - - - true ) / ! - - true [ false ] ) ) ) ;
 ! ~ "bar" . foo { if ! "bar" * 123 { for val foo int = ~ ~ ! ~ ! foo ;
 false ;
 true **= ! "bar" ( - 123 != false , "bar" ) { - ! ! ~ 123 ( ! true , ~ ! - ( ~ foo . foo < true [ ~ ( ! ! - "bar" | true & ~ ! ~ true < ! ! foo / "bar" != 123 ) ] ) ) ;
 } ;
 } else { if ! true & foo { for var foo int = true ;
 true . foo ;
 false { ! ~ - - ~ ! false **= - ! - "bar" + ~ - - - false != 123 . foo ;
 } ;
 } else { ! true [ - true [ false ] ] *= 123 . foo == - ( - "bar" [ - - ( ! foo ) [ ( ~ - ~ 123 | ~ ~ 123 > - - true ( - ! - - true * "bar" , 123 < - ! false ) * ! - - - ~ false ) * "bar" ] ] + foo / foo ( "bar" , - ! ! ~ - - false ) ) / "bar" ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { if ! false { for var foo int = ! 123 ;
 ! ! false | - ~ "bar" ( false , true ) & ~ false . foo != foo + ~ false ;
 foo & - ~ true = ~ ! true [ ~ "bar" . foo ] { ~ ! - - ~ - true ( ~ true * ~ ( - foo & true ) ( ! ~ "bar" , - false ) , ! true ) ;
 } ;
 } else { for var foo int = foo ;
 123 ;
 123 { ! 123 . foo = true / - ! foo ( ( false ) , ! ~ 123 >= false ) ;
 } ;
 } ;
 } ;
 } ;
 var foo int = false ;
 func foo ( foo int , foo int , foo int ) { for val foo int = "bar" + ~ true ;
 - ! false & false ;
 123 [ true ] { if "bar" & ! ! ! ! ! "bar" { for val foo int = ~ foo ;
 123 . foo ;
 ! ~ ! - ! false - foo >= ! ! "bar" & - ~ ( ( ! - true ) * 123 < ! ! - false ) -- { for val foo int = ~ true . foo ;
 123 ;
 true == - 123 = foo { - false . foo ;
 } ;
 } ;
 } else { ( ! "bar" ) != - false ( foo , - - - ! true ) ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int ) { for val foo int = 123 ^ 123 * ! "bar" ;
 - ~ ! - - "bar" . foo ;
 ~ "bar" [ ! foo ] & true -- { - ! - ! ( true ( ! ! false . foo , "bar" [ true . foo ] | true . foo ) ) != - 123 [ 123 ] ++ ;
 } ;
 } ;
 val foo int = ~ ! ~ true ;
 func foo ( foo int , foo int , foo int , foo int , foo int , foo int ) { ~ ~ "bar" /= "bar" != 123 ;
 } ;
 func foo ( foo int , foo int , foo int , foo int ) { true ;
 } ;
 class foo { - - ! ( ! true ) ;
 } ;
 var foo int = 123 == 123 / "bar" ;
 class foo { if ! ! ~ 123 == 123 ( ! - ( ! "bar" * 123 != true ( - ! - ( ~ true < ! 123 ) [ true [ true [ foo + - true ] * ( foo ( "bar" . foo * foo ^ ( ~ - true <= - ~ ~ - ~ ! foo ) ( ( ! ( foo >= true [ ~ ( ! - 123 [ - true ( ( ( ! foo ) ) / "bar" == ! 123 , ~ - - true & ( ~ ~ ! ( ( 123 ) ) ) [ true ] + ! true ) ] | foo ) . foo ] ) ) , - - - - ! - foo . foo ) , "bar" ) ) . foo == true / ! - ( - true == ~ 123 . foo ) ] ] < ( ~ ! ~ - ! "bar" ( ~ false ( ( 123 . foo <= "bar" ( ( - ( ! false ) . foo ) / "bar" != ~ false , - true | true ) / ! - foo ( ~ ~ ~ true , ~ ( 123 ) . foo ) ^ true ) | true , ! true . foo ) , ~ 123 ) ) . foo / - 123 ( ( - - ( ! - false & ! ( ! 123 ( ~ false , - foo ( ~ foo , ~ 123 ^ ! ( - foo [ - ~ "bar" ] ) ) ) ) ) ( ~ foo , - ~ - ( ~ foo ) ) & ~ true ) [ ! foo ( false . foo <= ~ - "bar" , foo ) ] , ~ 123 == false ) , ~ 123 ( true , true ) ) - foo . foo <= true ) [ ~ "bar" ] , ~ foo ) { if foo { ~ "bar" -= false ;
 } else { ( ! ! - ! ( - ! - ~ ~ false ) [ true ] ) . foo ;
 } ;
 } else { for val foo int = true ;
 ! 123 ^ ! foo ( true , - - ! ~ ! 123 [ 123 [ foo < "bar" [ 123 ( ~ true != - ! - 123 . foo , true < false + - "bar" ( true . foo | ~ foo [ 123 ] , 123 < true ) ) ] ] ] ) ;
 true ^ - ( false ) **= - - "bar" { "bar" [ - ~ ! "bar" . foo - foo ] & ~ - - ( - true / - - - ( ~ - "bar" [ true . foo ] ) [ - ~ 123 ] ) *= ~ ~ true / true . foo ;
 } ;
 } ;
 } ;
 class foo { foo ;
 } ;
 class foo { for val foo int = "bar" [ ! ( ~ - ! ! ! foo [ ~ 123 ] ) ] + - - ! foo & ~ ! foo ( false , false * false . foo ) ;
 ! - false ;
 - ~ foo -- { for val foo int = ~ 123 | - "bar" [ foo [ true ] ] ;
 ( - - - - false ) ;
 ~ true [ ! ~ "bar" ] /= ! false ( ~ false . foo , false ( true [ ( false . foo ) ] , 123 ( 123 , ! ! 123 ( true , "bar" [ 123 ] ) <= - 123 ) ) ) >= ( foo [ false ] / - false . foo != - false ) != ~ ! ~ true ( ! - - 123 . foo > ~ 123 , ! false == - - ~ true ( true , foo * 123 . foo ) ) { for var foo int = ! "bar" . foo ;
 false ;
 123 [ ! foo >= foo ] { false *= ! ( ! ~ foo ( 123 , ( "bar" ( true + - ! foo != ! ~ - ~ ! - - ! - ! ! foo - "bar" / - foo , true ( ~ ~ "bar" , ! false > true ) == true ) != ~ ! false ) ) ) [ ( foo [ "bar" . foo >= - ! false != - true / ( 123 ( ! ( false . foo ) , false ) ) ] ) * - - 123 . foo ^ "bar" ] != foo ;
 } ;
 } ;
 } ;
 } ;
 var foo int = ~ ( "bar" / 123 . foo ) - ! false ( - ! - ( ! - - ~ - ! ! - - ~ true ) , - - - false ) / 123 ;
 class foo { for val foo int = ~ true ( ! "bar" * false , - ( - ~ 123 & foo < 123 [ "bar" ] ) ( ~ ~ ! true , ! ~ false [ ( false ) ] ) & - - ! foo ( 123 , ! ~ - - ! - ! true ( - 123 > false [ false ] , false . foo <= ( ! - ! true . foo ) ) ) ) ;
 123 ( "bar" , "bar" ) ;
 ( ! ~ true ( true , "bar" ) ^ "bar" . foo == ! ! - ! ! ! false ) -- { if - ~ ! - ~ 123 . foo { "bar" ( ( ! foo . foo / 123 [ "bar" != false ] ) , ( ( - true ) ) [ false ( - - foo <= ( ! foo [ ! ( - ~ foo ) ] ) + true , - - foo ) ] ) ;
 } else { if ( true ) [ - "bar" ] { ! false & false . foo -- ;
 } else { if ~ ! "bar" - ! ( 123 ) { for var foo int = 123 ;
 - ! 123 * true == true + 123 ;
 ~ ~ true . foo ++ { if ( ! "bar" > - - ! 123 [ - - ( false ) ] ) . foo { for val foo int = ! - ( ! "bar" < - true | ~ foo ) . foo != ~ ~ ( true ( ( ~ true == foo ( ! foo / foo , - foo . foo ) | true ( ~ ( "bar" - "bar" ) [ ~ ~ 123 ] , ( ! false != ( ~ ~ ~ - true [ "bar" [ 123 ] ] | false [ - ! 123 ] ) + 123 < ! false + "bar" ( ~ false , ! 123 . foo ) ) ) / foo ) . foo <= ! ~ ( foo ) , "bar" ( ~ - - false , foo [ foo ( ! false [ - ( - false ) ] != ! 123 , ! "bar" . foo ) ] ) ) != ~ "bar" ) ;
 ! ~ - - ( ! ~ foo . foo * ! ~ "bar" ) ;
 foo ++ { for var foo int = ( - false ) ;
 123 ;
 ~ false . foo != - ! 123 ++ { if "bar" . foo { foo [ false ] -- ;
 } else { false ;
 } ;
 } ;
 } ;
 } else { true = ! - true ;
 } ;
 } ;
 } else { if ! foo < ~ - foo { if foo { "bar" | 123 ++ ;
 } else { for var foo int = "bar" + foo . foo ;
 true ;
 false [ "bar" ] = true { ~ - 123 ;
 } ;
 } ;
 } else { ~ "bar" == ( ! - ~ ( 123 * ~ ! - ~ ! false ) ) ( false / ! true ( 123 * true . foo , foo ) , "bar" ) <= ! - foo . foo -= ( foo [ ! true . foo & ! true ( ! - - ! foo ^ 123 != ( - ~ "bar" ) ( ! true | ~ false , ~ - ~ ! false ) / foo , foo ) <= ! - ( - foo ) [ ! - ~ "bar" / ! foo ] ] + ~ 123 / ( ( "bar" [ false ] ^ true [ ! ! foo ] ) [ foo [ true ] ] ) . foo ) ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 class foo { for val foo int = ( - 123 ( ( ~ ( - false >= ! ( - - false ) ) ^ foo ( true , 123 ) ) , foo * ! false [ true & foo ] ) ) ( foo , "bar" ) ;
 ( true ) ;
 ~ false -- { false ^ ! false ;
 } ;
 } ;
 var foo int = - 123 . foo ;
 func foo ( foo int , foo int , foo int ) { for val foo int = ( true ( ~ ~ 123 , false [ 123 ] == 123 . foo ) ) ;
 "bar" . foo ;
 ! ~ 123 += foo | 123 ( foo . foo * false ( ! - 123 , false + 123 <= - foo ) , true ) { for var foo int = - ~ false ( true == foo , ! 123 > ~ - ! 123 ) ;
 ( ~ "bar" ) . foo ;
 false < ~ - false [ ~ true ] != false * true { if ! ( foo . foo == 123 [ ( foo >= foo [ 123 + foo ] ) ] ^ ~ true ) != - ~ "bar" { false . foo *= "bar" ;
 } else { if ~ ( foo ^ ! foo / ~ - ~ ! ~ foo ) == - true { if false != foo { if - ! ~ ~ ! - false ( - ~ ~ - ( "bar" ) [ 123 ] & true , - false ) != ( "bar" ) + ~ ! foo [ ( 123 - ! ~ 123 ) ] { "bar" ;
 } else { if true ( - ~ false , ~ ~ ~ ~ false ) { ! false < ( ( foo & 123 ( ! ~ ~ ~ "bar" , - foo ) ) ) ;
 } else { for val foo int = ~ ! ! false [ ! ~ "bar" ] != "bar" ;
 ! false ;
 ( ! ! - ~ - true ) ++ { false ;
 } ;
 } ;
 } ;
 } else { if ! foo * ( "bar" ) { if ( ! ~ false ) ^ "bar" { if "bar" [ ! "bar" ( true . foo <= 123 , true ( ! ! true - foo ( - 123 != ! ~ ! ( ( ! ~ "bar" ) ) <= - "bar" , foo ) , false ) ) ] { if ~ ! ! ! ~ "bar" { for var foo int = ~ 123 ;
 true . foo ;
 false -- { false [ ( foo ) ] -- ;
 } ;
 } else { ! - ( ! ! foo [ true ( ( ~ "bar" - false ) , ~ ( ~ 123 . foo == 123 ) . foo != ( ~ "bar" == - - ! ~ - ~ false - true ) . foo * ~ ~ foo ) * foo ] + false ) ++ ;
 } ;
 } else { if true ^ 123 . foo { if "bar" > foo [ true [ ! foo . foo ] ] { 123 [ - 123 ] **= - ! false ;
 } else { for val foo int = ~ true [ - 123 | ! - ( ~ - ( foo ) ) ] ;
 123 ;
 "bar" **= 123 < - 123 { false -= ~ ( foo . foo ) ;
 } ;
 } ;
 } else { for val foo int = "bar" ^ false < "bar" ;
 false ;
 ( ! ~ ! - - 123 ) + ~ ~ ! ! ( ! 123 == foo / ! ( foo ) . foo + ( false . foo ) ) ( ! false & false . foo , 123 ) <= - foo { if ( 123 ) & false { false ;
 } else { if false { if ~ 123 == "bar" { foo ++ ;
 } else { false ( ! ( 123 > ! foo ) [ ~ - ! true | 123 ] , ( ( foo [ ~ ! - ! ~ ~ ( ~ foo . foo ^ ! ! "bar" ) | 123 < false ] & ~ ~ "bar" ) [ "bar" ( - false , - - ! 123 ) >= 123 ] ) ( false . foo , foo [ foo . foo ] ) ) != - ~ foo [ - ! - - ~ 123 [ foo . foo == ! - ( - false ) & "bar" >= false ] ] -- ;
 } ;
 } else { ( ~ foo ) ++ ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { if - - ! true { 123 . foo != false . foo **= false ;
 } else { for var foo int = true . foo - true ;
 foo ;
 ( ~ ! ! ~ - ~ 123 ) [ ~ - ( ! ! - ~ 123 ) ^ - ! false ] -- { ~ ! ! ~ - true ^ ~ - ! false ( - ~ - false ( foo / - "bar" ( ! - - ~ true . foo , ! - 123 ) , ~ 123 . foo - false ) == ! - ~ - false - true * ( - 123 [ ~ ! ~ - - ( ! ~ - foo [ ~ "bar" ] != - 123 [ ! ! false * - ~ "bar" [ true / 123 ( - - ~ ~ - - foo ( foo , - - ~ ~ ! - "bar" ) == foo , ! - 123 ) ] ] ) ( 123 , - true . foo ) ] ) , ! ~ - ! false [ - ~ ~ 123 ( "bar" * - ! ! false , - - 123 ) ] ) -- ;
 } ;
 } ;
 } ;
 } else { for var foo int = ! 123 . foo ;
 ~ "bar" ;
 123 **= - 123 { if ( ~ false ) / "bar" { if ( - "bar" | 123 [ true ] ) { false . foo -- ;
 } else { for var foo int = ! ! ~ - true ( 123 . foo / false , true > ~ ~ - ~ - true ( ! - ~ ~ - ~ ( - - foo ) . foo >= - ~ ! 123 , ~ true ( ~ 123 [ ~ false >= "bar" ] , false - ~ - ! 123 [ ~ false * foo | ~ foo ] ) ) ) ;
 123 ;
 true ( ( ~ false >= - ~ ( ~ foo ) & - - true != ~ ( ~ true ) ) ( foo ( ! ~ 123 , ~ false ) != true . foo , foo ) , ~ - foo ) -= ~ false ^ false { for var foo int = ! - true . foo ;
 ( "bar" ) ( foo > ~ true ( ! true ( ( ( foo ) ) , foo ( foo , false ) ) , foo ) * ( - ~ true & false + ~ - "bar" ) . foo , 123 ) ;
 foo { for val foo int = ~ - - - ~ foo ;
 - - ~ 123 ;
 ( "bar" ) ( foo , false . foo ) += true . foo == false { ! ( ( ! true ( ~ 123 & ! true , ! "bar" ) + ~ ( true ) ) ) ( - 123 , ( 123 ) [ ! "bar" ] ) /= 123 ;
 } ;
 } ;
 } ;
 } ;
 } else { for var foo int = "bar" ( true , 123 [ ~ - - ! ! "bar" / - ! ! - "bar" ] * false ) ^ ! ( true . foo ) ;
 "bar" ;
 foo != ! true { 123 [ false . foo ] -- ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { - - "bar" /= ! foo + foo * "bar" ;
 } ;
 } ;
 } ;
 } ;
 } ;
 class foo { ( - foo ) [ - true . foo ] -- ;
 } ;
 class foo { if ! ! foo { false ++ ;
 } else { ! true ;
 } ;
 } ;
 var foo int = ~ ( ( ~ true ) . foo ) ( - 123 , "bar" ) ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) { if ~ ( - true . foo <= ( - false . foo ) ( foo . foo , false . foo | - - 123 ) ) { for var foo int = ( ~ ~ ~ ! 123 ) [ - "bar" ] ;
 foo ;
 ! 123 **= ! - - ! - ~ - ! "bar" { ~ ! 123 /= ( - 123 ) [ ( ! ~ ! ! false * - ! ! ! foo ^ false ) & foo ( ! false , false [ true ] / ( false ( true [ ! true ( ~ ! foo . foo != ! - ! false ^ false >= 123 , 123 ) == - foo / false ] ^ ~ false . foo , ~ ~ 123 . foo / ~ 123 ( foo < - - ( - - ( ( - - ! 123 ( true , "bar" & ( - ( ( ~ - false ) / ~ "bar" ) - ! false ) ( "bar" > ! 123 == ~ ! ~ ~ "bar" , true ( true . foo , - ~ ! true ) ) ) ) . foo < ( true < "bar" . foo ) ( - ! false > ~ - ! ! true , - ! ~ ! foo [ - - - false [ foo == - - ( - ! ( ! ~ false != ( ( foo ( ( false ( "bar" >= ~ foo ( - false , - ~ - ( ~ - ~ ( ~ ~ foo == 123 ) <= "bar" ) ) , ! ! ( ~ foo ) * ( foo . foo >= foo . foo ) . foo ) ^ foo ) , - foo [ foo ] ) ) . foo == - foo ) ) ( true , ~ ~ true ( ~ ! - 123 , "bar" ) ) & ~ - ( ! - ~ true ) ) ] <= - foo ] - - "bar" [ ! 123 == ~ ! false ] ) ) ) ( ! 123 [ ! ! false ] , ~ ( false / ! ! true ) ( - 123 != ( - false ( "bar" , "bar" ) ) [ true . foo - ~ 123 ] , foo [ ! 123 . foo ] | true >= - - "bar" . foo ) + ! - ~ foo ) * ( ! true ) . foo , - false . foo != ~ false ) ) | ( ( - "bar" ^ - "bar" ( ! "bar" ( - - foo [ 123 ( "bar" * ( ! foo ) - false , ~ - ! true ( true [ ! ! ~ "bar" * ( foo ) ] <= ! ~ ~ ! ~ foo ( ( ~ ( "bar" ) ) , ~ ~ - "bar" ( - ! ! - ~ ! foo <= ~ ! true , ! - false == ~ ! ! foo | foo [ foo ] ) ) , - foo . foo ) & foo ) | ! false ] , ( foo ( ~ ~ true , 123 == - - - ~ 123 ) * ! - "bar" [ true & true ( - ! 123 , foo [ ! foo ] ) ] ) ) , ~ ( foo ) ( - ! ~ ~ ! "bar" , false . foo == 123 . foo ) ) != foo ) ) ) ) <= ~ - ! "bar" ] >= - ~ ! ~ false / ! false ^ ~ "bar" ;
 } ;
 } else { - 123 * foo ;
 } ;
 } ;
 class foo { for val foo int = true ;
 - ~ foo ;
 false ++ { false ( ~ false , foo == false ) = - 123 ;
 } ;
 } ;
 var foo int = ~ "bar" [ 123 ] | true > - true * ~ - - - - ( - "bar" ) ;
 class foo { "bar" ;
 } ;
 
