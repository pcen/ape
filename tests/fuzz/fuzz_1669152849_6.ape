module foo ;
 func foo ( foo int , foo int , foo int , foo int ) int { foo ;
 } ;
 val foo int . int = true | 123 [ foo ] ;
 func foo ( foo int , foo int , foo int . int . int , foo int . int . int ) int { for var foo int = false != false ;
 ~ ~ foo * ~ foo ;
 ! 123 + - foo ++ { false ;
 } ;
 } ;
 func foo ( ) int { for val foo int = 123 ;
 "bar" [ true <= ! false ( false ( ) == 123 < - ~ ~ - true / ~ foo , - 123 ) != "bar" - foo ] ;
 ! - true -- { if - ~ foo . foo { if false & "bar" ( ) > ~ ~ ( ( ~ - - ~ - ! 123 ) ) . foo { for var foo int = ( false < foo . foo ) == ! ! - 123 | - foo * ( ~ 123 ( ) ) ;
 "bar" ;
 - true = "bar" * foo { if - "bar" ( ) { for var foo int = true ;
 ! ! foo [ - ( true . foo != 123 ) ] * foo != false ;
 ! - ! foo **= 123 . foo >= false { if "bar" { 123 ++ ;
 } else { ~ 123 [ "bar" ] -- ;
 } ;
 } ;
 } else { if ~ true < - true { if ! false [ ~ ! ( "bar" [ false ( ) ] ) ] { foo -- ;
 } else { for var foo int = - ~ ! false - - true . foo ;
 "bar" ;
 ~ ( - 123 . foo ) + ( true >= true [ ~ ~ - ! - 123 > ( ! true . foo < ! false ) ] ) ( ) / true { if "bar" { ~ - ( ! - ( ~ ! foo . foo ) ) . foo **= "bar" ;
 } else { for var foo int = true ;
 123 ;
 - - - 123 != ( foo & foo ( ) ) . foo { ~ - foo > true . foo | 123 ( ! 123 . foo , "bar" ) += ~ foo ;
 } ;
 } ;
 } ;
 } ;
 } else { if true [ ~ ( ! false . foo ^ ~ ! "bar" ) == "bar" ] { if ( "bar" ) { if true { if - foo . foo { for var foo int . int . int = - 123 [ true ] < - ! "bar" ;
 ~ ! foo ;
 "bar" [ - ! ~ ! ~ ~ ! ~ "bar" ] += true { true ;
 } ;
 } else { foo += ! true != true ;
 } ;
 } else { foo / - false ( ) - foo [ ~ - - - false ] * true ++ ;
 } ;
 } else { for var foo int = ! - 123 ;
 ( ~ foo . foo ) == ( ( 123 ) + 123 ) ;
 "bar" ( ! ! ! ~ ! ~ false ( ~ true , ~ - ~ ~ ~ foo ) <= ~ "bar" , foo ) / "bar" { true . foo >= ~ ( ( true ) ) ++ ;
 } ;
 } ;
 } else { - ~ "bar" -= ~ 123 ;
 } ;
 } ;
 } ;
 } ;
 } else { if ! foo { for var foo int = false & foo ;
 ! ~ ( foo ( ! ( 123 ) , foo ) ) | ( - ~ 123 | ( 123 . foo ) [ ! true ] ) [ foo [ foo ] ] ;
 foo -- { if "bar" . foo { for var foo int . int . int = - "bar" >= ~ foo ;
 123 ;
 true . foo ^ - true *= foo & ! false - false { false ++ ;
 } ;
 } else { ! - true ++ ;
 } ;
 } ;
 } else { true [ 123 / "bar" . foo ] ;
 } ;
 } ;
 } else { - foo ++ ;
 } ;
 } ;
 } ;
 var foo int = false > foo . foo ;
 func foo ( ) int { ! foo -= "bar" ;
 } ;
 func foo ( ) int { ! 123 ;
 } ;
 var foo int = foo ;
 func foo ( foo int . int . int , foo int , foo int , foo int ) int { for val foo int = foo & ! false . foo != ! - foo / false ( ) ;
 "bar" ;
 - true [ ~ - 123 ] *= - 123 ( ) { true *= "bar" . foo ;
 } ;
 } ;
 class foo { for var foo int = false [ ! "bar" [ true ] > ! ! "bar" . foo * - ~ ! foo ] ;
 foo ;
 foo { false ++ ;
 } ;
 } ;
 class foo { for val foo int = ( ! - ! foo * 123 ) . foo ;
 ~ ~ true + ( - - 123 ) <= ! ~ false ( ) ;
 ! false -- { for var foo int . int = - 123 ;
 "bar" + 123 . foo & false ;
 - - 123 >= ~ 123 { if false <= "bar" [ ~ foo >= 123 ] { true ;
 } else { true ++ ;
 } ;
 } ;
 } ;
 } ;
 var foo int = false ( - ~ foo , "bar" ) ;
 class foo { if ! foo { if false [ ~ true [ ! "bar" ] ] + 123 < - ~ ~ false { ~ true **= ~ false ;
 } else { ! foo - ! ! ~ ! ( foo ) * ~ ( foo | true ) == true [ ~ ( ~ 123 ) ] <= ! ~ ! true [ - ! true ] ;
 } ;
 } else { if false ( ) { if - ~ ~ ! foo [ 123 ] >= false { ~ false += ~ true ;
 } else { for var foo int . int = ! ! - false ;
 ! ! ~ - - - ~ true . foo ;
 false & - 123 ( ( ~ foo == ~ - ! foo . foo ) <= false ( false [ ( "bar" ) [ ~ "bar" ( ( ! "bar" ) , ~ "bar" * ! - - ~ ! - false ) | "bar" ] ] , - - foo ) == foo , - ! foo ) ++ { if "bar" { if "bar" . foo { if ! true { for var foo int = ~ ! 123 ;
 ~ ( - ! - ~ ! true + ( true ^ true < - ~ true + - - true [ 123 + 123 ] ) != foo | "bar" ) [ ! ( ( "bar" ) ) & 123 != - foo [ ! true ] ] * true ;
 ! false { for val foo int = false ;
 ! - false == - ~ foo + - foo ;
 ~ ! ~ - false -= ! ~ - false [ - ( ! ! ~ foo ) ] { ! ! ( true - - ! - ~ foo >= ! true ) ( false [ foo . foo > foo ] / 123 , false [ - false * ~ ! - ! - 123 ] ) ;
 } ;
 } ;
 } else { - "bar" [ - ~ - true > ~ ~ true * ! ( ~ "bar" . foo ) ] ++ ;
 } ;
 } else { for val foo int = ! - "bar" ( ) ;
 foo ;
 ~ ! "bar" ++ { - "bar" = foo ( ) != ! ~ - - true ;
 } ;
 } ;
 } else { - - - ( 123 ) ;
 } ;
 } ;
 } ;
 } else { if ( 123 ) { if - ! ( false - ! ! "bar" & false ) == "bar" + ~ ~ ! foo [ 123 ] { - ( ! ~ foo . foo & false ) ( ! - ~ "bar" >= - "bar" . foo , false ) ;
 } else { for var foo int = - 123 ;
 ! "bar" ;
 foo ++ { if foo { ~ ~ "bar" /= ! ! foo ;
 } else { if false . foo { for var foo int = true [ - 123 ] ;
 ~ "bar" - ! "bar" [ - false ] ;
 ! ( true . foo >= foo ) { if - ! true . foo > ! false { ! true [ - ~ foo & foo ] /= ( ( foo . foo ) ) [ false ] == ~ ! "bar" ( ) < - true & ( ~ "bar" ( ) < - - - true . foo ) ;
 } else { ! ~ "bar" ( ) -- ;
 } ;
 } ;
 } else { - - - true . foo *= foo ;
 } ;
 } ;
 } ;
 } ;
 } else { for val foo int = "bar" <= ! ~ foo ( foo , ! ( - true < 123 ) ) ;
 "bar" * 123 ;
 "bar" & ~ foo . foo ++ { for val foo int . int = 123 ;
 ~ "bar" ;
 "bar" = ~ false { for val foo int = - 123 == foo ;
 ~ true ;
 - ! - ~ ~ 123 != "bar" ( ) ^ 123 -- { - false [ 123 ] ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 func foo ( ) int { - "bar" != ( ~ foo ^ ! foo ) ( ! ( ! true ) < ~ 123 . foo * ! foo - - 123 , - - - ( "bar" ) [ ! ~ - - ! true ] * 123 . foo != ~ ! ~ ! ! "bar" <= 123 . foo | false [ - - false ] ) *= ! ~ 123 ;
 } ;
 var foo int = true ;
 val foo int = ~ ~ false & "bar" ( ) ;
 func foo ( ) int { ~ ! false -- ;
 } ;
 class foo { if ~ false { for var foo int = foo ( "bar" == false , foo [ ~ - - ~ ( "bar" . foo ) ] * ~ ( ( - - 123 & "bar" < ! ( false ( ) / ~ ~ "bar" ) [ ~ ~ ~ false ] ) / foo ( ~ ! ! - 123 <= ~ - ! ! ( ! - true . foo == foo ) , true >= foo ) ) ) ;
 "bar" . foo | foo ( ) ;
 false ^ 123 += - ~ 123 ( ) / ! "bar" ^ 123 { 123 ;
 } ;
 } else { if - - true { foo ;
 } else { if ( ( true ) ) { if 123 ^ ( true ) { foo ++ ;
 } else { - false ;
 } ;
 } else { for val foo int = - - ! false . foo ;
 ( false - true < ! - ! 123 [ "bar" ] ) . foo ;
 "bar" . foo { true ;
 } ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int . int ) int { ! true & - "bar" **= true ;
 } ;
 val foo int . int = ~ - "bar" [ ~ ! true >= - ( 123 ) ] ;
 val foo int . int . int = - ! ~ ~ false ;
 class foo { for val foo int = ! 123 . foo == "bar" [ foo ] ;
 true . foo + 123 . foo ;
 "bar" < foo & - ~ 123 . foo ++ { ~ ( ! ( ~ ~ ~ ! 123 > 123 ) + false > foo ) ( ! - - ( 123 ) , ( ! ( foo ) . foo ) ) ;
 } ;
 } ;
 func foo ( ) int { if - ! ( 123 ) ( ) & - ( foo . foo ) { 123 . foo ;
 } else { "bar" *= foo ;
 } ;
 } ;
 func foo ( foo int . int . int , foo int , foo int , foo int . int . int ) int . int . int { ! "bar" -- ;
 } ;
 class foo { for var foo int . int . int = ~ - false [ - true ] ;
 ~ true ( ) < ~ - foo ;
 "bar" { ~ - false / ! ( foo != foo ) ++ ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int . int . int , foo int ) int . int { ! ! ~ - ~ ~ ~ true ( false , ~ ! ( "bar" * ~ - ~ ~ "bar" ) <= ~ - ! ~ 123 ) == false ( ) -- ;
 } ;
 class foo { ! true < foo ;
 } ;
 class foo { if ! - foo { if foo { for var foo int . int . int = false ;
 - ! - true & ~ ( ~ 123 ) ;
 ( ! ! ! 123 [ foo ] ) / ! ~ - ~ ~ foo > ! false . foo != false { for var foo int . int . int = foo . foo ;
 ~ "bar" * foo ;
 "bar" | ! ! false { if ~ - false . foo <= ! 123 { - ( false - ! 123 ) . foo == ! ! true ;
 } else { if - ! 123 [ true == "bar" . foo ] { ~ false ( 123 , ( false ( ) ) . foo ) ++ ;
 } else { ( false ) ++ ;
 } ;
 } ;
 } ;
 } ;
 } else { ~ true = - ! ~ - ~ "bar" != foo ;
 } ;
 } else { if - ( ! ( ( foo ) * ~ ~ ! 123 ^ ~ ! ~ false / "bar" ) ) / ~ - ! - ~ - ! - foo { ! false | "bar" . foo == ! ! - - true > "bar" **= ~ - - ! "bar" ;
 } else { if foo ( foo , false . foo ) { if "bar" / false . foo { if ~ ! "bar" <= ! foo . foo != foo [ ( 123 ) ] { for var foo int = ! foo ;
 "bar" ;
 false { - ! "bar" . foo /= - ! - - false ;
 } ;
 } else { for val foo int = ~ "bar" != true >= ! ! foo ;
 - ( true ) . foo ;
 true ++ { if "bar" { for var foo int = true ;
 ( ~ false ) ;
 ! ~ foo >= ( foo . foo ) { for var foo int . int = ~ 123 ( "bar" , ! ~ - ! - "bar" ( true > ( ! ~ 123 [ true != "bar" ] * true ) == ( ( ! ~ false ) ) < ! 123 , ! 123 ( ) ) ) ;
 "bar" == true ;
 - ! ! ! true . foo { for val foo int . int = - ! true [ ~ false ( ) ] ;
 foo ;
 ~ - "bar" { for var foo int = ( 123 [ 123 ] & false [ - ( ( - false ) != ! true . foo ) ] ) ;
 ! "bar" != - - - 123 ;
 foo * ( 123 / - false ) -- { for var foo int . int . int = "bar" ;
 foo [ foo ] ;
 123 { ! false == false -- ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { for var foo int = true ;
 - - ~ foo [ - ( "bar" <= true ) ] ;
 - 123 ++ { ( false . foo ) <= foo . foo != ! ~ false < foo ++ ;
 } ;
 } ;
 } ;
 } ;
 } else { foo ( ( "bar" ) + - - "bar" , - true ) ^ ( true ) ;
 } ;
 } else { "bar" ++ ;
 } ;
 } ;
 } ;
 } ;
 val foo int = ~ 123 [ ! false ] ;
 func foo ( ) int { false . foo ;
 } ;
 class foo { false ;
 } ;
 class foo { ! ~ false . foo + 123 >= ~ ! ( 123 ) ;
 } ;
 class foo { if ( foo ) { if ! ! ~ ~ - ~ ! ! ~ ~ 123 & - ( ! 123 ^ ~ false ) ( "bar" , ( ~ ( ( ! foo * ( true ( ( ! ! foo == true [ false ] ) , true . foo ) ) | ( true >= foo ) . foo == - ! true [ foo . foo ] ) ) [ - false . foo <= ! ~ - foo ] == foo . foo ) != ~ 123 . foo ) { if 123 >= foo ( ) { for val foo int = - ( ~ ~ ~ - ! ~ true <= false ) ;
 ~ foo ;
 - true -- { if true { if false . foo <= ( - false ( ) ) ( ) { true ;
 } else { for var foo int . int . int = ~ ( 123 ) ;
 ! ~ true ;
 true += ! - ! - "bar" [ - 123 ] != ! "bar" { - ! ~ true >= ~ foo = ! true & - - - ! 123 ;
 } ;
 } ;
 } else { if ~ foo . foo <= ! "bar" { - true ;
 } else { - - - ~ foo ++ ;
 } ;
 } ;
 } ;
 } else { if "bar" { foo . foo == 123 = true ;
 } else { ! - ~ - 123 & ( ( false ) & "bar" ) ;
 } ;
 } ;
 } else { 123 ;
 } ;
 } else { for val foo int = false ( ~ "bar" >= ~ ~ foo , ! ! "bar" <= ! ( ! 123 ) | "bar" ) ;
 ~ ( - ( "bar" == ( - ~ ~ - ~ true ) ) != ! ~ ~ 123 . foo ) . foo >= foo ;
 "bar" -- { if true . foo { true += ( ! ~ false ( ) ) ;
 } else { ~ ~ 123 ( ) ;
 } ;
 } ;
 } ;
 } ;
 var foo int . int = false / "bar" ;
 func foo ( ) int { if 123 { if false { ~ true ;
 } else { for val foo int = ( ~ foo . foo ) ;
 false . foo & ! ( ( foo == - true ) ) . foo ;
 foo **= ~ ~ ~ foo { if ~ true { false -- ;
 } else { if ( foo > ( ~ - ( "bar" ) ^ ! - foo ) | ! ! true ) { if ! foo { ( ~ foo ( ! ~ false , ( - foo ( ) ) ( ! ! ! ~ - 123 , ! ( ! - ~ false ) ) ) ) < "bar" . foo += ! - ! "bar" ;
 } else { if - ! "bar" [ - foo ] { for val foo int . int . int = ~ ~ 123 ( true >= - "bar" - true != foo * ! ~ ~ ~ false | ~ ~ "bar" , ( true ^ 123 == foo ) == 123 ) ;
 ~ ! 123 ;
 ~ ! - true ( 123 . foo * true . foo | ! - - foo , false * false == ~ "bar" [ ~ ~ ! "bar" ] / ! "bar" <= "bar" - ! ! ~ - ! 123 ) { ~ - false ( false , ~ foo ) ++ ;
 } ;
 } else { for var foo int = - false ;
 true . foo != ~ false ;
 - ! false * false ^ ~ - ~ foo = foo { - ~ ! - 123 ++ ;
 } ;
 } ;
 } ;
 } else { if ! ! ( true ) { ! ( ! "bar" . foo ) | ( 123 [ 123 ( ) != - ! ! foo ] == "bar" ) **= ! true [ false ] > foo ;
 } else { for val foo int = 123 ;
 - - true ;
 ! ! ! - 123 / ! foo -= - false { ( ! - "bar" ) / false < "bar" -- ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { false -= ( 123 ) ;
 } ;
 } ;
 func foo ( ) int { for val foo int . int = ~ ( ! - ! ( ! - ( - true ( ) ) ) ) * true ;
 ~ ~ ! false <= ( "bar" ) . foo ;
 true **= - ( 123 ) > - ~ true { if ! ( "bar" & "bar" ) [ foo ] { 123 . foo / ~ ! ~ ~ - - "bar" ( ~ foo , false ) += foo == false ;
 } else { false [ 123 ] != foo - foo = true != ( - ! ( true ) ( ) ) ;
 } ;
 } ;
 } ;
 var foo int . int . int = ! 123 - ! "bar" ;
 val foo int = false ;
 val foo int = "bar" + 123 != foo ;
 var foo int . int = - ! ~ 123 . foo ;
 class foo { ! ~ ~ - false ;
 } ;
 
