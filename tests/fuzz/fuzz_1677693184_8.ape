module foo ;
 foo : : ! 123 ( ) ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) int . int . int { foo : = ( ! ~ ! true [ false % 123 ] >> [ ! - false , foo , - ! foo , - ~ "bar" , [ ] ] or [ ] and ! - ! foo >= ! - ! ! "bar" + - ~ ~ foo & ~ true ) ;
 } ;
 class foo { func foo ( foo int , foo int , foo int , foo int . int . int ) int { foo : int : ! "bar" . foo + - "bar" or [ [ ] ( ) or - ~ false , "bar" >= ~ ! "bar" and "bar" , ! 123 , ! [ ~ - [ ] ( ) == ~ foo or "bar" , true , false < - true ( ) != - false [ ~ "bar" ] ] [ 123 [ false . foo ] ] and "bar" [ foo ] , ~ ~ "bar" | ~ ( foo >> ~ ! ! - ! - - ! ~ ~ false ) or ~ - ( - ~ ~ ~ ~ ! true . foo ) , - - true ] ( ) / true [ ! - ~ foo [ ! - true ] ] ;
 } ;
 func foo ( foo int , foo int ) int { REVERSE ~ foo ;
 } ;
 foo int ;
 } ;
 class foo { foo int ;
 func foo ( ) int { } ;
 foo int ;
 foo int . int . int ;
 foo int ;
 } ;
 func foo ( ) int . int . int { foo : int : 123 ;
 } ;
 func foo ( foo int ) int { } ;
 func foo ( foo int , foo int , foo int ) int . int { } ;
 foo : int : "bar" ;
 class foo { foo int ;
 foo int ;
 func foo ( ) int { foo : int : - ~ true ;
 } ;
 func foo ( ) int { } ;
 foo int ;
 } ;
 foo : : false != false ;
 class foo { } ;
 class foo { func foo ( foo int . int . int , foo int . int . int , foo int , foo int ) int { } ;
 func foo ( ) int { for foo : int . int . int : "bar" ;
 ~ false ;
 ( ~ ( ~ ( "bar" ) . foo ) [ ! - ~ ! ~ ! foo << ( [ [ ] & foo , true , ! ( ! 123 / - ( ! ! ( ~ ! false << 123 ) - - - - ~ ( ! ! ! "bar" [ "bar" and foo [ - ~ ! false ^ "bar" ] ] ^ ! [ ] ) << foo or ! 123 [ - ~ true << ~ ~ ! true ] ) ) << 123 ] << foo ) ] != ~ 123 ) ++ { foo : int : ~ [ - ( - ~ - - ~ false < "bar" and foo ) , 123 , [ ] , 123 . foo , true >> ( - ~ ! false ( ) ) or ! true | ~ 123 ] ;
 } ;
 } ;
 foo int ;
 foo int ;
 foo int ;
 } ;
 foo : int . int : foo ;
 class foo { foo int ;
 } ;
 class foo { foo int ;
 func foo ( foo int , foo int , foo int ) int . int { } ;
 func foo ( foo int ) int . int . int { foo : int : foo [ ! - foo ] ;
 } ;
 } ;
 
