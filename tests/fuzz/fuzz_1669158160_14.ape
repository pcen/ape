module foo ;
 func foo ( foo int . int , foo int . int , foo int , foo int , foo int ) int . int . int { - ~ 123 ( false , ( ! false != - ! ! ! false ( ( - - true ( false ( ( ~ "bar" ) ^ ~ "bar" . foo * - false [ ! true ^ ( ! ! ~ - 123 ) ] , ! ~ 123 <= - ( ~ 123 ) ( "bar" , false ) ) & - ! ~ ~ 123 , true ) ) != foo [ - 123 ] * ! foo , true == false ) / ! ~ "bar" [ ! - ( foo ) ( ) ] ) [ - - ! ~ true ] ) ^ ~ 123 != - foo += "bar" ;
 } ;
 class foo { func foo ( ) int { for val foo int . int . int = - true ;
 ! foo ( ) ;
 foo . foo != 123 -= - 123 { "bar" ( "bar" , ( - ~ ! - - - "bar" == - ! "bar" ) ( ) * - true . foo ) < - ! 123 + false ( ) ++ ;
 } ;
 } ;
 func foo ( foo int ) int { false /= true != ! ! ! true >= "bar" . foo ^ - - - - ~ false ;
 } ;
 foo int . int . int ;
 foo int . int ;
 foo int ;
 foo int ;
 func foo ( foo int , foo int , foo int , foo int , foo int . int ) int { for var foo int . int . int = ~ - - 123 ;
 false ;
 false **= 123 . foo { if ~ foo == ! ( ! ! foo . foo ) { true ;
 } else { - false ;
 } ;
 } ;
 } ;
 foo int ;
 foo int . int ;
 func foo ( ) int . int . int { for var foo int . int = - true [ true ] >= ~ ! ( "bar" ) ;
 foo ;
 123 -- { 123 [ - - ! false != 123 ] -- ;
 } ;
 } ;
 } ;
 class foo { func foo ( ) int { - - - - 123 / ~ true *= 123 . foo + ! - ~ false & ! foo ;
 } ;
 foo int ;
 foo int . int . int ;
 } ;
 val foo int = "bar" == foo . foo ^ ! ! ~ ( ! "bar" ( ) ) >= - ~ ( ! foo [ false ] ) . foo ;
 class foo { foo int . int . int ;
 } ;
 val foo int . int . int = - ( ~ 123 [ ~ ~ ~ "bar" [ - ~ ! ! ( - ! ! false ) . foo ] ] <= foo ) > ! ~ false ;
 var foo int . int = - true ;
 val foo int . int . int = - - ! ~ ( - ( ~ ( ! foo ) . foo ) ) > ! 123 ;
 var foo int = ! ( foo ) + ! ~ ! ! 123 / foo ;
 func foo ( ) int { for var foo int = true [ - ~ ! false ] | - false ;
 ! ! - "bar" . foo ;
 "bar" [ ! ~ ~ false . foo ] - ~ "bar" += - - ! - "bar" { false -- ;
 } ;
 } ;
 var foo int = ~ 123 ;
 class foo { func foo ( foo int , foo int . int . int ) int { - ! ~ ~ ( true ) ++ ;
 } ;
 func foo ( foo int , foo int , foo int , foo int ) int { for val foo int = ( false ( true , - false >= ! ! 123 [ "bar" . foo ] ) & 123 ) ;
 foo ^ ! - ! ! ! - 123 ;
 ~ ~ ~ false ++ { 123 > 123 == ! ~ false ;
 } ;
 } ;
 } ;
 func foo ( ) int { for val foo int = foo . foo ;
 ~ ! ! ~ ~ 123 == true [ - - false ] | ( true [ 123 * 123 [ "bar" ] ] * ( - ! - foo ( ) ) [ ~ foo ] ) [ ( ( - foo ) . foo / - ! "bar" . foo ) ] ;
 - 123 ( ~ false | ~ - "bar" . foo & ( foo <= 123 . foo ^ ~ "bar" ) , ! true & ~ "bar" >= ~ true ) **= foo [ ~ ~ - ~ ~ - false == false ] == ! ~ 123 { ~ foo . foo -- ;
 } ;
 } ;
 func foo ( ) int { ~ ! 123 [ foo ] ^ false ++ ;
 } ;
 class foo { func foo ( foo int , foo int , foo int , foo int , foo int , foo int ) int { ~ foo -= 123 | ! true ( ) ;
 } ;
 func foo ( foo int ) int . int { ~ ! 123 & foo *= 123 . foo ;
 } ;
 func foo ( foo int , foo int , foo int , foo int ) int { if foo { ~ ! foo -- ;
 } else { ~ ~ - - false + foo [ - ~ true ] & "bar" != - "bar" [ - ~ - ~ - ~ false * - - false == true ] ++ ;
 } ;
 } ;
 } ;
 class foo { func foo ( ) int { false . foo *= - - ! - 123 != ~ - false . foo ^ ! true ;
 } ;
 foo int ;
 foo int . int . int ;
 foo int . int . int ;
 func foo ( foo int , foo int . int . int , foo int , foo int . int . int , foo int , foo int ) int { for val foo int = - foo ;
 ~ ! true ;
 - ( "bar" ) [ ! ~ ~ ~ ! ~ ( ! ~ true >= ! false ) ] /= foo { if - foo . foo != - ! ! foo { ~ ! ( ~ - 123 ( ) ) /= true ( ) ^ ! ( ~ ! ~ false ) ;
 } else { ( false ) ;
 } ;
 } ;
 } ;
 func foo ( ) int { - ~ 123 -- ;
 } ;
 foo int . int . int ;
 foo int ;
 foo int ;
 func foo ( foo int , foo int . int . int ) int { for val foo int . int . int = ( ! "bar" ) | 123 ( ! "bar" , ( ~ 123 ) ) ;
 ( - false > ~ foo ) ;
 ~ ~ ( 123 == "bar" [ ! 123 ] ) /= ( foo < - foo ) . foo { if - ! ~ ! ~ ~ false [ foo . foo ] != ( false ( ) ) ( ) - "bar" { - ~ ! - ! "bar" = foo ;
 } else { for var foo int . int . int = ! ! ( - - ! ! ! ~ ( "bar" * ~ true ) ) ;
 123 [ ~ "bar" ] ;
 ~ ! false = true * true { for var foo int = - "bar" ;
 - ! ~ ! "bar" [ ! 123 ( foo ( ) ^ ~ - ( true != ~ - ! ! false ^ ! "bar" ) , false ) + ~ ( ~ ~ ( "bar" [ ~ ~ ( "bar" . foo ) [ - ~ true . foo ] ] ) ) ( ~ foo ( ) , ( ~ ~ ! ~ 123 ( ! false ( ) , ( ! 123 * ! foo [ true . foo ] ) . foo ) ) [ - ! ~ ! ~ false [ false ] != ( ! - "bar" != "bar" ) . foo ] ) ] ;
 ~ ! "bar" . foo & ~ foo . foo -- { for var foo int = ( - true ( "bar" , false ) - - - ~ ! - true . foo > 123 ) . foo ;
 false ;
 ~ ~ ( ~ ! true >= foo ) . foo { - ( foo . foo ) **= - ~ ( ( ~ ! ~ ( - false ) ) != ! foo ( ) ) ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 func foo ( ) int { foo = - ( foo ) ;
 } ;
 val foo int = foo ;
 func foo ( ) int . int . int { for var foo int = ! ~ "bar" ;
 true [ ! ~ - "bar" [ - ! ! "bar" [ false == 123 ] ] ] ;
 ! false -- { for var foo int = 123 ;
 ~ - ( ! ! false . foo ) ( ! 123 ( ! - ~ foo [ ~ ~ - false - ~ ( ! ~ false ) ( false , true ) ] , ( false ) ) , 123 ) ;
 foo -= ( ~ ( 123 . foo ) ) / ~ "bar" { if ! - ! true { for var foo int = "bar" ;
 "bar" ;
 ( foo ) ( ) -- { ! false [ false | ! - 123 ] == ! ! foo - false [ false / ! "bar" | foo [ "bar" ( ( ~ ! - true ) >= ~ ( ~ ! ( ~ true ) [ ( ( true ) * 123 ) ] >= 123 & - 123 [ ~ "bar" ] ) [ "bar" ( 123 . foo , ! ~ ~ false ) ] , ~ - ~ ! 123 ) ] ] & - ~ true -= 123 ;
 } ;
 } else { "bar" ++ ;
 } ;
 } ;
 } ;
 } ;
 var foo int = 123 * ~ - - false . foo ;
 class foo { foo int . int ;
 foo int ;
 func foo ( foo int , foo int , foo int , foo int . int . int ) int { ! ( - ( foo + - ! - ! false [ 123 ] * false ) ) ++ ;
 } ;
 foo int ;
 func foo ( foo int , foo int ) int { for var foo int . int . int = - ( - ! ! ( 123 ( ) & ~ ~ - ! ! false > ! foo ) . foo ) . foo | ! - ! ( ( - ~ ! - ! true ) ) ;
 foo ;
 - false < false == - ! - ~ - - ! true **= ! true [ foo ( ) ] == - "bar" { if true { if false { for var foo int . int . int = ! ~ ~ - ! ! foo [ false [ foo - true ( ) ] < - true / "bar" | ! ~ foo ] == ! ! false ;
 true != foo ;
 false ++ { if false { ~ - ~ false [ ( ! 123 ( ) ) ] ++ ;
 } else { 123 . foo ;
 } ;
 } ;
 } else { ~ ! false != ! ( - ~ ( foo ) ( ) ) . foo += ( ! - - true == - 123 ) [ 123 ( ) | 123 ] ;
 } ;
 } else { "bar" += - 123 ;
 } ;
 } ;
 } ;
 func foo ( ) int { if - 123 { for val foo int = ! false ;
 "bar" ;
 true [ - false ] -- { ( true ( ) ^ ! true < ~ "bar" ) = - ! false / - ~ ~ true . foo ;
 } ;
 } else { 123 != 123 & false <= foo | - ! ( - ! true ) -- ;
 } ;
 } ;
 func foo ( ) int { for var foo int = ! foo ;
 false ( ) * true ;
 - ! foo != ~ "bar" { for var foo int . int = 123 >= ~ ~ "bar" != ~ true . foo ;
 foo / "bar" <= false [ ! - foo ] ;
 foo . foo **= foo { ! "bar" /= ~ ~ - ! false [ ! "bar" ] * true - 123 != false ( "bar" ( ! - ~ 123 * foo [ 123 ] + "bar" , true [ ! - - ! ! ! true ( ) ] * ! foo ) , ~ ~ true ) ;
 } ;
 } ;
 } ;
 foo int ;
 func foo ( ) int . int . int { if ! foo { if ~ ! - ! false <= true { 123 += ~ - ~ 123 ;
 } else { if ! true [ ~ foo ] <= ! "bar" { - - - true . foo /= "bar" [ - ~ "bar" [ 123 < ! ~ foo ( ) ] ] ;
 } else { ! - - "bar" [ false | foo ] ++ ;
 } ;
 } ;
 } else { - ~ foo -- ;
 } ;
 } ;
 } ;
 class foo { } ;
 func foo ( foo int ) int { ~ - 123 [ foo ] = ~ - ! false - false ;
 } ;
 class foo { foo int . int . int ;
 foo int ;
 foo int ;
 foo int ;
 } ;
 func foo ( foo int ) int { if ! true { - true **= ! ! foo ;
 } else { if ~ ~ - 123 ( ) { for val foo int . int . int = 123 ;
 ( ~ - ! - ! ! ~ ( foo ) ( ) & - - ! true ) != ~ true ;
 123 . foo - - ( ~ false ) { for var foo int = ! ~ foo [ - true ] ^ ( false + - 123 >= ~ foo ) != foo ;
 ~ foo + ~ 123 < - "bar" ;
 foo += false != ~ ! - ( ( - ~ ~ 123 ( false == 123 , false [ - - "bar" ^ ! ! ( false ( ) | ( "bar" [ - "bar" ] * true ( ~ ~ ~ ( "bar" ( ) ) , ~ false ) ) . foo ) ] ) ) ( - ! - ! - true , true ) ) { if false { if - - foo & - - foo [ 123 ( ) ] { if - - ! foo - "bar" { if true . foo { 123 -- ;
 } else { 123 [ - ~ ( foo ) ( ~ ! "bar" ( ~ ! ~ ! - ~ ~ ( ! foo != true ) , ( - ! - ! true <= - - ! ! ~ 123 . foo & - ! ( ! ~ true . foo ) == foo . foo ) * "bar" ) == foo < false , ~ "bar" . foo / ~ ! "bar" == true ) * - - 123 ] == - 123 [ true ] ;
 } ;
 } else { if - - ~ ! "bar" { if ~ ~ - ~ ( ~ 123 ( ) ) { - false ( ) ;
 } else { if ~ false { for val foo int . int . int = - - 123 / ~ ~ ! 123 != ! - true ;
 true ( ) ;
 - ! - - true [ - 123 != ! - ( ( ~ ~ true ( ~ ( false ( ) >= ( ~ 123 ) == ( ~ false [ ~ "bar" ] ) ( ) <= - - true ) , - ~ ( ! ! - ~ ! 123 ) ) & foo ) - true ) ( "bar" . foo , false . foo ) ] -= ! - ~ foo ( ) != ~ ! true . foo { "bar" <= - ~ ~ true ( ) ;
 } ;
 } else { ! "bar" . foo *= ! ~ ( false ) ;
 } ;
 } ;
 } else { true ;
 } ;
 } ;
 } else { - ! true != foo ++ ;
 } ;
 } else { if true { true [ ! true ] ++ ;
 } else { 123 -= ! false ;
 } ;
 } ;
 } ;
 } ;
 } else { if - true { - true -- ;
 } else { 123 ;
 } ;
 } ;
 } ;
 } ;
 class foo { foo int ;
 func foo ( foo int , foo int . int , foo int , foo int . int , foo int , foo int ) int { for var foo int = 123 ;
 ! 123 + ! ~ ~ true ( ( 123 . foo ) , foo == false ) / ( false ) . foo ;
 - ! ( - ( - 123 ) [ ! 123 [ ! foo . foo == ! "bar" [ ! 123 . foo & true <= "bar" ] ] ] ) -- { true [ false [ ! ~ "bar" ] ] ++ ;
 } ;
 } ;
 } ;
 func foo ( foo int . int ) int { for val foo int . int . int = false ;
 foo ;
 ~ foo /= ~ true . foo { - - ( ~ true ) ;
 } ;
 } ;
 var foo int . int . int = - "bar" [ ~ true . foo ] ;
 class foo { foo int ;
 foo int . int . int ;
 func foo ( foo int , foo int . int ) int { true **= ! - false ;
 } ;
 func foo ( foo int , foo int ) int { false . foo /= 123 ( ) ;
 } ;
 } ;
 func foo ( foo int . int . int , foo int , foo int ) int { if true { ~ false = ! ! ! ~ - ! false ;
 } else { true . foo != - ( false [ ~ 123 == ~ ! 123 ] ^ - ~ true < ! "bar" ) ++ ;
 } ;
 } ;
 func foo ( foo int ) int { - true ;
 } ;
 class foo { func foo ( ) int . int { ! 123 -- ;
 } ;
 foo int ;
 func foo ( ) int { if ! foo . foo { - - foo -= ! - ~ - "bar" ( ) * "bar" ;
 } else { "bar" ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int . int , foo int , foo int ) int { if - - true { if ! ! ! ! true { if ! ! false [ 123 | ~ ~ ! ! ~ ( ( ~ 123 [ ( 123 ) [ ! ~ ! - ! false ] * true < true ] > "bar" & ~ ( ~ ~ ~ ( foo ( ) ) != ! 123 ) == ! ( 123 ) ) ) ] { for val foo int = ( true != true . foo ) ;
 123 ;
 ! 123 /= true { for var foo int = ~ false ;
 ! ~ true ;
 ! ~ "bar" [ ! ~ ! ( ! - - "bar" ) ] { for var foo int . int = "bar" [ ! "bar" ] * ~ ~ "bar" ( ) ;
 ! false - ! 123 ;
 - false -- { - ! ! - - false [ ( ~ false ) == false + foo ] -= true ^ ! ~ ! foo . foo ;
 } ;
 } ;
 } ;
 } else { 123 [ "bar" ( ! - foo [ - ! ~ ! ~ ( - false == - true ) ] , ~ ~ - ( ( - false . foo ) ) == ~ ( foo ) [ foo . foo ] ) + foo ] -= false | ! ( ( ~ ( false ( - foo == ( "bar" [ ! ~ true . foo * false ] ) >= 123 | false . foo , 123 . foo >= - "bar" == false | ~ - ~ true ) * - foo ) ) ) ;
 } ;
 } else { for var foo int = true ( ) & 123 ^ false ;
 - - ( false ) ;
 123 = "bar" == ! ~ - 123 ( ~ ~ 123 . foo * 123 - - ~ foo <= 123 [ ~ ~ false ( "bar" [ "bar" > "bar" == 123 ( true , - true . foo ) ] , false < foo [ true ] ) ] , ! "bar" == ! ( ( foo . foo ) [ 123 ] <= ! true - ~ "bar" ) ) { if 123 { 123 ++ ;
 } else { false -- ;
 } ;
 } ;
 } ;
 } else { if ( true ) { - false += true ( ) ;
 } else { - ! true . foo + - - ( ~ ~ "bar" ) -- ;
 } ;
 } ;
 } ;
 } ;
 func foo ( ) int { ~ 123 ( ) /= 123 ;
 } ;
 val foo int = 123 . foo | "bar" >= "bar" ;
 class foo { foo int ;
 func foo ( ) int { ~ foo -- ;
 } ;
 foo int ;
 foo int ;
 foo int ;
 } ;
 func foo ( foo int , foo int . int . int ) int { true == ! ! ~ ! 123 [ ! ! - foo . foo * false [ "bar" ] ] ;
 } ;
 class foo { func foo ( foo int , foo int ) int . int . int { ! false == true ( ( ~ - 123 ^ "bar" ) , - ~ foo ) * 123 [ foo ( foo , - true > - ( - - ( - - - foo . foo ) ) ) ] -- ;
 } ;
 func foo ( foo int , foo int . int ) int { ~ ~ ! 123 -- ;
 } ;
 } ;
 var foo int = true ;
 val foo int . int = "bar" [ - false ] ^ ! ! - ! ~ false . foo ;
 
