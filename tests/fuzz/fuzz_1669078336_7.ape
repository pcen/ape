module foo ;
 func foo ( foo int , foo int , foo int ) { - 123 / ! 123 -- ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int , foo int ) { if - 123 . foo * ! foo { if 123 { ( ~ "bar" * "bar" ) [ 123 ] -= "bar" / ~ false ;
 } else { "bar" ++ ;
 } ;
 } else { ~ true ;
 } ;
 } ;
 class foo { if ~ "bar" < 123 { for val foo int = "bar" . foo ;
 false ;
 true { for var foo int = ! foo ;
 "bar" . foo ;
 false [ 123 ( ! - foo > false . foo , true ) ] != ( ~ - foo < - foo ^ ( foo . foo / - ! 123 ^ ~ - - ~ ! - foo > 123 [ ~ true ] ) ) [ 123 | ~ foo == ( foo [ false ] ) + - - ! ~ ~ foo ] += ! true * ~ - ~ 123 { true . foo ++ ;
 } ;
 } ;
 } else { if true { if false ( - ( true ) [ ( ( - ~ ( ! - ! true ) ( true + ( ! - 123 ) , ~ true ) ) ) ] , ~ - - ! foo . foo ) { - ~ - true ( ~ ~ true [ - ! false ] & true , "bar" ( ! "bar" > "bar" [ foo . foo * foo ] , ~ foo ) ) < true ( true == 123 , false ( ! ~ ~ ! true == ~ ! ! ! true . foo / - - foo , - ~ ! foo <= ( ! foo >= ! ( - false != foo - 123 . foo ) | - 123 ) . foo ) != true > - ~ ~ false ) ++ ;
 } else { if ~ "bar" ( true - - ! ! ( ( ~ true ( "bar" <= false . foo , ~ ~ ! false ) >= ~ ~ ! ! ~ - ! ~ - true . foo ) . foo < ! ( ! ~ - 123 ) ) < true ( - ~ - - false , 123 ) , ( ! false - foo ) . foo ) * - ( ! ! - ( ~ "bar" [ foo ] ) + ~ true ) { true -- ;
 } else { for val foo int = "bar" ( ! 123 * ~ false < "bar" . foo , 123 ) ;
 ( foo ) / ! false ;
 ~ - true . foo != ( foo | true . foo ) ^ ! true -- { ! ! true ;
 } ;
 } ;
 } ;
 } else { for val foo int = ! true ;
 - ! ! ! - ! ( ! "bar" <= "bar" ) ;
 ( ~ "bar" . foo ) / true { foo -- ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int ) { - foo ( ( ! ! ! ~ foo ) / ! - ! ! 123 , false ) **= false [ foo >= ~ ~ "bar" ( true ( "bar" ( foo > ~ "bar" == ~ ~ ~ ( - ! ! - foo ) , ~ ! ( "bar" ) != ! - ! ! 123 - 123 <= ~ - foo . foo ) , true ) , ! "bar" ( - "bar" , true ( ( ( ! ( "bar" ) ) [ 123 != true ] ) == ~ - "bar" ( - - true , false ) + ! ! 123 < - ! foo , true ) ) ) ] ;
 } ;
 class foo { false = ~ false < true ;
 } ;
 func foo ( foo int , foo int ) { - 123 -- ;
 } ;
 class foo { false *= ~ ( - - true . foo ) ( ! - "bar" ( foo != ~ ~ ( foo . foo ) . foo , ~ ~ 123 ( ! false ( foo , ~ ! - "bar" ) , false ) ) ^ "bar" , 123 != true [ true . foo ] ) / "bar" ;
 } ;
 func foo ( foo int , foo int , foo int , foo int ) { for var foo int = 123 ;
 ~ - ~ true ;
 - foo /= false != ( ! "bar" ) >= ( false ) { for var foo int = - false ^ - - ( ( 123 [ ~ ( "bar" + ~ ! false . foo ) - - true >= true ] ) ) . foo <= ~ ( ! ~ ! true ) ;
 "bar" ;
 ( "bar" [ ! true ] ) { ~ 123 *= ~ ~ true <= "bar" [ false ] ;
 } ;
 } ;
 } ;
 func foo ( foo int ) { for val foo int = ! true ;
 ~ false ( true , ! foo ( foo , - ( "bar" . foo ) ) ) ;
 123 [ ! - ~ ( ( ! "bar" [ true . foo & ! ~ - ~ ~ - "bar" <= foo ] * "bar" == ~ ! false [ ! true ] ) ( ! - - ( ~ 123 ( ( ! ( - ~ false ) . foo < true ) , "bar" ) <= ( foo & - ~ true ( 123 ( - ! ( true ) , false ) , - ~ - ! - ( ! ( ~ "bar" ( ! 123 , - false [ false ] ) ) ) [ false ] ) ) ) + 123 . foo , "bar" != ( - foo != true [ foo ] ) ( ~ - ! ( - ! ! 123 * - ! ( ~ - ~ ( ! ! true ) [ - ( ~ ! ( - 123 [ ~ ! - true > ! foo ] ) ) ( - ( "bar" ) == ~ 123 , ! true ( ( false > "bar" ) , ( - ! "bar" == ! ! ! - ! ~ - 123 . foo >= true / false ) ( ( - ( ~ ( ! "bar" * ( false . foo == ! ! - foo ) ) [ ! ( ! ! ! ! ! ! ~ ( ( - ( ~ ! ~ "bar" ) / 123 [ ~ ~ ~ foo ] ) < - ~ - ! 123 ) ) [ - ~ ! true ] | ~ - 123 == - ~ "bar" ] ) * - ~ - ~ ~ "bar" + ! "bar" ) , - ! ! true [ "bar" . foo ] ) ^ 123 ( true [ ! false ] == ~ ( true & ~ ( ( ( ! ~ ~ - true ) - 123 [ false [ ! ! ~ true | true != true + ! 123 ] * ~ - "bar" . foo ] >= foo ) ( foo [ ~ - foo ] == ( "bar" ) , ! - ! "bar" ) ) [ - ~ false ] ) [ - false + - true & 123 ] > - ! ! - 123 . foo , foo ( - ~ 123 , 123 ) <= true - - ~ false ) != 123 ) ) ] ) ( false . foo , ~ - true [ ! ~ ( ! ~ ! ( "bar" ) ) ] ) ) [ ! "bar" . foo ^ - false [ foo >= false ] ] ^ ! - true [ ! 123 ] != - foo [ ~ ( false . foo ) [ - foo ] & - false [ - - 123 . foo * true . foo >= ~ ~ ( ~ true & - ! ~ ~ ( ! ~ foo . foo ) . foo ) ] ] , foo . foo ) ) ) ^ ! true >= - false ] / false - false >= "bar" * ~ ! true { for val foo int = 123 <= false ;
 false < ~ ( ! 123 ) ( foo , 123 ) ;
 false { "bar" . foo ++ ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int ) { true ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int , foo int ) { - - ~ - foo == 123 -- ;
 } ;
 func foo ( foo int , foo int , foo int , foo int ) { ! "bar" ++ ;
 } ;
 class foo { ! foo -- ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int , foo int ) { ~ ~ false ( ! true , 123 ) ;
 } ;
 var foo int = 123 . foo ;
 var foo int = false ;
 var foo int = ~ foo [ ! 123 . foo == true ] ;
 var foo int = - false ;
 class foo { ! ~ - foo == foo . foo = 123 ;
 } ;
 var foo int = foo ;
 var foo int = ~ foo ;
 val foo int = - ! ! foo >= 123 ( foo , ~ true ) ;
 class foo { - "bar" . foo | "bar" -- ;
 } ;
 class foo { 123 ;
 } ;
 class foo { for val foo int = 123 [ ~ - 123 . foo ] ;
 - "bar" < ( ~ ! ! ! - ( ~ "bar" ) ) ( 123 [ ( ! ! - ~ - ! - ! - "bar" | "bar" ( - ~ true [ - "bar" >= foo * ~ "bar" ] != ( ~ ~ false / ! true ) - true , true > - 123 != "bar" . foo ) ) ] , false >= ~ ~ ~ - ~ ~ "bar" ( ~ 123 , "bar" ) ) - ~ false ;
 "bar" - false & foo { for var foo int = foo != ! true ;
 false >= false ;
 123 / ( false ) -- { false & false ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int ) { ! foo ;
 } ;
 val foo int = - false . foo ;
 func foo ( foo int ) { for val foo int = ~ ( 123 [ - ! ! "bar" [ ( ( - ( - ~ - true ) ) != 123 . foo / ! false [ ( false ) ] < - 123 [ false ] ) ] + true ] != ! - ( "bar" >= false ) . foo >= ( ! ~ ! ! false ( ~ true . foo , false ( foo , ! ( 123 ( 123 ( 123 , false . foo < 123 == true ) , ~ ~ - ~ 123 . foo * true < 123 ( false , "bar" != true ) ) ) [ ( ~ true ) ] ) ) + ! ! - ( ! "bar" & - ( 123 ) ( ( - foo == ~ true ( ! "bar" , true > false ) - ( 123 ) [ true == ~ - ~ ~ - ~ ! ! ( ( ! - ~ ~ ~ ~ ~ foo ) ) ] ) [ "bar" ] / - "bar" , false . foo ) < 123 ( false * ~ ! "bar" ( ! - ~ ( - true ) ( ( foo ) , 123 . foo ) , false | foo [ ~ ~ ~ ! ( - "bar" ) . foo == - false [ - 123 ] ] ) , ( false . foo ) ) ) [ ~ true ( foo , true ) | foo ( ! ( "bar" <= "bar" ( ! ~ - ~ 123 [ 123 ] , foo ( ! true , foo ) ) ) , foo . foo < "bar" ) ] != ~ foo * foo [ ! true - ( - ! - - ~ - false != "bar" / - 123 ) . foo & false ] ) ) ;
 - ! ! foo ;
 ! ! foo [ ~ "bar" . foo ] /= ~ - ~ 123 & 123 . foo { ! ~ "bar" ( foo , ! true ) ++ ;
 } ;
 } ;
 val foo int = 123 [ "bar" + ( false . foo >= ~ ~ ~ ~ foo . foo - ~ 123 ) ( false ( ~ 123 , ~ - true ) , - ! ! ( ~ ( ~ ( ~ ( ! ~ - true ) [ 123 ( - - ! ( foo - true ( ( 123 ( ! 123 >= ~ ~ false , true / 123 ) ) [ false != - ! true ] , ~ 123 . foo ^ true [ ( 123 ^ ! 123 ) . foo ] ) ) . foo , - "bar" ) & "bar" ] ) . foo > - true [ ~ ~ ~ ! false [ ~ 123 ( 123 != - ~ - "bar" * true . foo >= ( ~ - ( false ( "bar" ( "bar" != ( ~ 123 ) , true ) - false ( false . foo , ! 123 <= ~ foo + foo ) , ! - ! foo < ! "bar" ) ) * false [ "bar" + 123 ] ) . foo , true ) ] <= ! foo ] ) ) [ ( ~ false & ! - false ) ] * ~ false ) <= ~ ~ foo ( foo ( "bar" . foo , "bar" & ! ~ ( foo / ( 123 . foo < foo . foo ) ) != ~ ! ~ true ( ! true + ~ - ~ ~ ( - "bar" ) , - ~ ( false [ false ] | ( ~ - false ) ( "bar" == - ~ ~ ! 123 ( "bar" - "bar" , 123 / - 123 ) <= true , foo ) ) ) ) , ! ! "bar" / ! foo - false [ - ~ ~ - 123 == ! - true ] <= ! - ~ false ) ] ;
 class foo { if false . foo { for val foo int = - false ;
 ! true == foo | ! foo ;
 123 ^ ( true ) -- { ~ false = ! ( ! - ( ~ ! foo ^ ~ "bar" [ ( 123 . foo ) ] ) ) ;
 } ;
 } else { for var foo int = - - ( foo ( ! ! "bar" . foo != ! foo . foo , ! ! true . foo ) ) < ~ ~ ~ ( ! - true ) ;
 ! ( false [ - foo ( ( false . foo ) . foo & true [ false & "bar" ] , - 123 ) ] ) != false >= ~ ! ! ~ ~ foo . foo ;
 "bar" { for var foo int = 123 < false ;
 true . foo != ! ~ "bar" [ - false ] ;
 123 [ false ] -= "bar" { for var foo int = ~ ! false ^ foo ;
 foo ;
 false [ ( "bar" ( ~ ( ~ ! ~ - true ) , - "bar" ) ) ] += ! false / - 123 { ! "bar" ++ ;
 } ;
 } ;
 } ;
 } ;
 } ;
 var foo int = 123 . foo & ! foo != true > 123 ;
 val foo int = false . foo ;
 val foo int = - ~ 123 ;
 val foo int = ~ ! 123 ( ! ~ ~ true . foo , - 123 ( - false [ false ] , false ) == ! - ~ ! ~ ~ foo & 123 ) ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) { ! 123 != ~ foo ;
 } ;
 class foo { 123 /= - true ( foo , foo ( ~ "bar" != false , ! true ( - ! ~ foo ( ( 123 ) , ~ ~ ! ~ foo [ foo + ! 123 ( ( ~ foo ) , foo [ - "bar" * ( false ) ] ) ] ) , ( foo & ~ 123 [ - - true + "bar" . foo >= true - ! ( "bar" ^ ~ foo ) ] ) < true [ - ! true . foo & foo . foo ] | ~ ( false ) ) ) + ! ! true ) ;
 } ;
 func foo ( foo int , foo int ) { foo [ 123 / - ! ~ ~ "bar" ] ++ ;
 } ;
 func foo ( foo int ) { ~ ( foo ) . foo + 123 ;
 } ;
 class foo { for var foo int = ( foo ( ! true ( ~ foo [ ! 123 ( ! - - ~ - ! "bar" , ! - "bar" . foo ) ] , ( false * 123 != "bar" ) ( false , ( - ~ - ! "bar" > 123 [ - "bar" ] ) ) ) , ! ~ - ! ~ ~ ! foo ) + ( true ( ! ( ( false <= ~ ~ false | ! - foo ) ) , false [ false == - ~ ( true ( ~ true , false ) ) / ! ! ~ ~ true [ - foo ( ( ! ~ - true ) . foo , 123 ) ] | ! ( ~ "bar" ) . foo ] ^ ! ! ~ 123 ) ) ) [ ! ! "bar" ] ;
 - - - 123 != - 123 ;
 ~ false ( foo , foo . foo ) & - 123 { ! ! ! ~ true . foo | - ( ~ - - "bar" + - true [ "bar" <= true / ! - ~ - "bar" ] ) [ ~ 123 ( false == ~ 123 [ foo ] , - 123 . foo ) ^ 123 ] -= false ^ true ;
 } ;
 } ;
 var foo int = ~ ( ( false ) == ~ "bar" ) & ! ~ true ;
 func foo ( foo int , foo int ) { 123 ( 123 - - - ~ "bar" ( foo - 123 . foo , false [ ~ ~ false != foo ] ) , ( - ( foo - - ~ - ! true ) ) ) ^ ~ ! - false > ~ ~ ! "bar" * ~ ! ~ true ;
 } ;
 var foo int = ( foo ) ;
 func foo ( foo int , foo int , foo int ) { - ! ! - true > 123 -- ;
 } ;
 
