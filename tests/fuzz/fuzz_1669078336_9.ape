module foo ;
 func foo ( foo int , foo int ) { "bar" -- ;
 } ;
 val foo int = ! - - ~ 123 ;
 func foo ( foo int , foo int ) { false = ( ~ 123 ) ;
 } ;
 val foo int = false ;
 class foo { true . foo <= ! ~ - false ++ ;
 } ;
 func foo ( foo int , foo int , foo int ) { - 123 . foo -= true ;
 } ;
 class foo { ! "bar" ;
 } ;
 var foo int = ~ false . foo ;
 func foo ( foo int , foo int , foo int ) { ~ "bar" ;
 } ;
 class foo { for val foo int = true > ! ( true ) ;
 ~ foo ;
 ( 123 ( ! ! false ( ( 123 ) , true ) , ~ true . foo ) + - - ! false [ ~ ! ~ - false ] ) ^ false [ ! ( ! ! false ( ~ ! - ( 123 <= ~ ~ ! foo [ foo ] ) , - - 123 [ foo ( false ( - - 123 & true <= ~ ( true . foo != ~ ~ 123 ) , "bar" ) | true ( ! 123 , ~ 123 <= 123 != - - - "bar" [ - "bar" >= true == 123 ] ) , - foo + 123 >= foo ) ] >= - ( foo . foo ) ) ) . foo ] -- { "bar" . foo ;
 } ;
 } ;
 func foo ( foo int ) { ~ - ~ false - 123 -- ;
 } ;
 class foo { if ~ - - ~ ( "bar" ) { 123 [ "bar" - 123 & foo ] ++ ;
 } else { - - ! "bar" ++ ;
 } ;
 } ;
 func foo ( foo int , foo int ) { ! "bar" *= ! "bar" ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) { if - foo { for var foo int = "bar" == ( ~ - ! ! ( 123 [ ~ true ] <= - - ( 123 & - ! ~ 123 ) [ false & true ( ! ( ~ true ( ! ( "bar" ) ( ~ true . foo , false [ - ~ ! false ( - ! 123 , ( ! false | ( "bar" ( ! ! ! false , ~ ~ true . foo != - ! true ) ) ) ( "bar" , - ! ( ( 123 ( ~ "bar" [ ( - - "bar" ) . foo ] , true ) ) ) ( true , "bar" > true ( 123 , - 123 * "bar" ) ) ) ) > 123 ( 123 , ~ 123 [ 123 . foo ] ) ] ) & ~ ( false ) . foo , ~ true != "bar" ) ) , foo [ ( "bar" ) . foo ] ) ] ) ( ! ( ~ foo ^ ! "bar" ( foo & ~ ( ~ "bar" >= - ~ ! false ) <= - ~ 123 , ! ! false ) ) , - "bar" - 123 . foo ) ) ;
 - - ~ ~ ~ - "bar" ;
 ~ foo >= ~ ~ ~ - "bar" **= - ! false [ ! ( foo ) ( false & ~ foo , - foo + ! true ) ] { if - ! 123 { for val foo int = - ~ 123 ;
 ~ - true . foo ;
 ! - ~ ! foo + ~ false [ "bar" [ - false * true ] ] { for val foo int = - ~ - ~ false ;
 ! false ;
 foo > ! false { if ! "bar" [ true ^ ! "bar" ] & false { for val foo int = ! ~ ~ foo ;
 true ;
 foo { foo ( - foo , ~ - - ( - - ! ! true [ ~ "bar" ( foo ^ ~ true [ - ! 123 ] , ~ foo <= - false . foo + 123 ( - ! 123 , ~ true ) ) | false ] & - ~ ( 123 / ( - foo ) != ( ! ~ false * - false < "bar" / ! "bar" ) ) [ foo . foo ] > true ) / foo != 123 ) * true -- ;
 } ;
 } else { ( - foo . foo ) **= ! ~ ~ "bar" ;
 } ;
 } ;
 } ;
 } else { if 123 * ! - false [ foo [ true [ ~ ( ~ false ) . foo | - 123 ] == true . foo ] ] { for var foo int = 123 ;
 false . foo ;
 false /= 123 . foo > 123 { foo ;
 } ;
 } else { ~ 123 -- ;
 } ;
 } ;
 } ;
 } else { ~ ( - foo ) ;
 } ;
 } ;
 val foo int = foo != ! "bar" ;
 class foo { false [ false ] != 123 -= ~ ( "bar" [ - true & false ] | - ! false ) + ~ false . foo ;
 } ;
 class foo { if false ( - ~ false & 123 - ! foo , - false ) { if ~ ! 123 { if ( 123 . foo ) { if ! ~ ! true . foo + ~ - ( true ) [ ( ~ ~ ~ ( "bar" . foo ) ( "bar" . foo > - ~ ! ! "bar" . foo , ! ! ~ ! ~ ! ! "bar" ) > ( ~ true [ ~ true ] != - ! true ) [ 123 ] / ~ foo ) [ foo ] | - ~ 123 ] { 123 [ - ( true ) ] & - - - ! - - ! ~ - ( false ) += "bar" . foo ;
 } else { "bar" [ ( - ! false & - - true ) ( ~ ~ "bar" [ "bar" ( 123 <= true , ~ ! ~ 123 ) ] , foo + ! ~ 123 [ 123 ] ) ] += ( - false ) [ - - foo != true ] ;
 } ;
 } else { for val foo int = true ;
 "bar" <= ~ foo ;
 foo . foo **= foo [ true | foo . foo ] { true > ! true ( 123 , ! true ) ;
 } ;
 } ;
 } else { ! - ( foo & false ) ++ ;
 } ;
 } else { if - ! true { "bar" ;
 } else { "bar" | "bar" [ "bar" / ! ( - - - - ! ! "bar" ) ] += - ~ - false ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int ) { if ! ( - foo ) { 123 != ~ - 123 / - "bar" ;
 } else { for val foo int = false ( foo & "bar" ( - ! - - ! ~ ! true , foo * - foo ) + - - - ! ! true != true , 123 ) ;
 - false ;
 123 [ ~ 123 . foo ] **= - false <= ~ ( - ~ - false == foo ( ~ - foo ( ~ ~ - ! ! ! foo . foo , "bar" ) < ! foo , ( true > 123 ) & true ( true [ - ( ~ ! ! ( "bar" ) ) ] - true , "bar" != false ) ) ) { for val foo int = - ( ! false ) [ ~ 123 [ foo ] ] ;
 foo ;
 foo ( - true . foo > ! ! ( false ( ~ "bar" != - 123 [ 123 ] , foo ) ) & false ( true <= ~ - 123 , ~ foo ) , ! "bar" . foo ) **= ~ false ( foo . foo + ~ 123 , ! "bar" ) & true ( foo [ 123 ] > - ! ! ~ foo , true + 123 <= ~ true * ! ! 123 . foo - ~ true ) { 123 . foo & ! ( true . foo == ! ( 123 ) ) -- ;
 } ;
 } ;
 } ;
 } ;
 class foo { for var foo int = - - ! 123 ;
 ~ foo != ~ ~ "bar" . foo & "bar" [ false ] ;
 "bar" + false /= - ~ foo { if ! ( ~ ( - ~ ! ( ( ! ~ "bar" * ~ false ) ) ) ) . foo >= ( foo >= ! ! foo ) { if ( foo + 123 [ false ] ) + - ! ~ - ! false { ( ! 123 ( ( foo [ ~ true ( ( ~ ~ 123 != ! false ) [ 123 [ false [ ~ ~ "bar" [ foo [ ( foo ) ( - foo , false ) + foo . foo != - - - ~ ( ~ ~ true ) ] < ~ - ! ! ! - false . foo & ~ ! 123 [ 123 ] ] - ! false ] ] * false ] <= 123 , foo [ true [ ( ~ ~ - true == ~ ! foo ( true . foo , ( ( foo ) ) [ ~ ~ 123 [ 123 ] ] ) ) ] ] == 123 ( - - true / false , - - ( ( - ( - ~ ! ! ! ! false [ foo . foo / "bar" . foo ] ) ( - - ~ foo + ! - true == ( true ( - true [ foo . foo ] , - ~ ~ - ( - 123 ) ( - true , "bar" & "bar" ) - ! "bar" ) ) , ( ~ ( foo + ! true ) [ 123 ] ) ) ) ^ ( foo . foo ) . foo ) ) ) ] != ~ ! true ) [ ~ - foo ( 123 , ! - - "bar" . foo ) ] , ~ ~ ~ true + 123 [ ! ! ! foo ] != ! ! - ! true [ ( ! ! "bar" ) [ ~ ! - "bar" ] ] ) & foo == ! - ( ! foo ( 123 , 123 [ - "bar" ( ( ! ~ foo ) , ( - "bar" ) & ! - ~ 123 ) ] * true >= foo . foo != 123 [ foo > "bar" [ ! foo [ ~ - - foo ] ] ^ ! ! true . foo ] <= ~ ( "bar" ) / foo . foo ) ) ( ( ( - - ~ ! foo ) ) , foo ) ) * - ! - foo != false -- ;
 } else { for val foo int = ( ! ~ 123 ) != "bar" . foo ;
 "bar" [ - - ( 123 ) ] ^ false ;
 ~ ~ ~ 123 ^ foo ++ { for var foo int = ~ ( ( true < ~ ! ( ~ ! ~ ( ( - foo & ( - ! - ( false < - - ! ~ ! ~ ~ "bar" . foo ) ) ) [ "bar" ( ! 123 . foo , 123 [ ! ( true ( 123 , true ) ) ( foo / ~ ( true ) , ~ ! ~ foo ) ] != 123 * 123 ) ] ) == true ) ) ^ ~ foo > true ( 123 , false [ - ! false . foo ] != false - "bar" ) ) ;
 - "bar" & ! foo ;
 foo . foo > false -= ~ 123 ( false ( ! 123 . foo , ~ - "bar" . foo ) , - ! false . foo >= ~ ! ! ~ false * true ) & ! ( "bar" ) ( false , 123 | - ! foo ) - foo [ "bar" ] / true == ! ~ ( foo ) [ ( ~ ~ ~ 123 ( ( ( - ~ ! ~ - ! ( foo ) ) [ false [ ~ ~ ~ 123 * - true ] ] ) , "bar" ) ) ] & ~ false ( foo , - "bar" | ~ foo ) { - foo | 123 . foo -= ! foo & - ~ false != true < ( ~ ! ~ ~ ! false ) . foo ;
 } ;
 } ;
 } ;
 } else { for var foo int = false . foo ;
 - 123 ;
 ! false | true [ - - "bar" ] { if 123 . foo { for val foo int = true . foo - - - ~ true ;
 ( false ( - "bar" * - ~ ~ - ( foo . foo ) ( ! "bar" . foo , ( foo ) ) , ! 123 ) ) > - 123 ( ( 123 . foo != ! ( ( 123 != ~ foo ) [ ~ - ! - "bar" . foo ] ^ - - foo / ~ - ! foo != ~ "bar" + "bar" ( ~ ( ~ 123 != - false < - - ! "bar" . foo - true ) . foo , ( ~ true ) ) ) * foo ) * foo , ! foo - ! ! "bar" [ "bar" [ 123 ] & - "bar" ] ) ;
 - - 123 -- { if 123 * false { for val foo int = ~ 123 / "bar" == ~ ! foo ( ~ ! ! true [ - false ( ( 123 ) , ! ! ( - - 123 . foo ) ) ] , 123 ) ;
 foo ;
 false **= true [ ( - - ~ "bar" ) ] { false ( 123 . foo > 123 , ~ true ) *= - true == false ;
 } ;
 } else { ( ! "bar" ( - - "bar" , ( true [ false [ false >= - ! ( 123 ) ] & ! ! 123 == true & ~ - "bar" . foo ] ) <= false & - foo . foo != foo [ ( ! - false ) | foo . foo * - - ( ~ ( ( ( "bar" ) <= foo ) ) ( "bar" . foo , ! ! ~ - ( - false ) >= "bar" ) | ~ foo . foo & ! ~ ~ ~ "bar" ) ] ) ) / ! "bar" ( true ( 123 - ~ - foo , false ) * - true , false != 123 ) | foo == 123 *= 123 == ~ - ~ - false ;
 } ;
 } ;
 } else { for val foo int = ( ! ! 123 ) & "bar" ;
 ~ foo >= ( ! ~ "bar" ) ( false ( true . foo , ! - ~ ~ ( true [ - ~ - ~ "bar" ( foo , ~ foo ) ] ) != ! true ) , true [ "bar" [ ~ foo ] != ~ ( true ( true < - true , ! - ( foo + false < ~ true ) [ ! 123 [ foo & 123 >= ~ ! - - false . foo ] ] ) != ~ - false >= ~ ~ ~ true - false ) ( ( true ) , foo & ~ ! ~ "bar" . foo ) ] ) ;
 true + ( true ) . foo == ~ ~ foo . foo { ~ ! - ( ! "bar" [ ~ 123 [ foo [ false >= ! "bar" ] != false ] ] ) == ~ 123 += ~ - ! 123 [ false ] ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 var foo int = "bar" ( ! ! foo , foo * true [ false [ - "bar" | ~ false ] ] ) ;
 class foo { for var foo int = foo ;
 foo . foo != - ~ - ( "bar" [ true >= ! "bar" ( - ( ~ 123 ) , ! true != 123 . foo ) ] > false ) ;
 123 { if ( ! foo ( 123 == ( - false ) . foo / - - true . foo , ~ false ) ) . foo <= foo { for val foo int = false ;
 - ~ ( 123 ) != ~ - ! ~ ! false ;
 ! "bar" ++ { if - ! 123 [ ! ~ ~ ! 123 ( - false , ~ true ) ] < "bar" { if ! ( true <= false ) ( ! - ( ! "bar" ) , - "bar" ) { ~ 123 | ~ 123 **= "bar" ;
 } else { for var foo int = ! ! ( - false / ! - "bar" [ "bar" ] ^ - ~ "bar" ) ;
 123 [ "bar" [ ! true != - - true / ! foo > 123 ] ] - - ~ 123 ;
 - ( ~ - - - ~ foo ) [ - 123 ] * ~ - ! ! "bar" . foo < ~ false + ~ ! ~ "bar" = - ~ ~ ! ~ "bar" + 123 { if false * ~ ! foo != - foo { false = "bar" | - foo ;
 } else { for var foo int = ~ - ~ - foo [ - foo + ! ~ 123 ] ;
 ~ - - ~ false == - ( - "bar" . foo * "bar" ( - ! - ! - - "bar" < true . foo & ! ! ( 123 != true ) [ 123 ( 123 < false [ foo ] == true ( ( ( 123 ) / 123 | "bar" ) , - foo ( - ( ! true ) < "bar" , - true - - "bar" ) * false ) >= ~ foo , "bar" ^ foo [ false . foo ] ) ] , ! ! - ! 123 [ true . foo ^ false ] ) ) ;
 - - foo / - ~ 123 /= false . foo { ! 123 = false <= - false [ ! 123 ] ;
 } ;
 } ;
 } ;
 } ;
 } else { false ++ ;
 } ;
 } ;
 } else { - - ~ "bar" [ false ] != ( 123 ) -= ~ ~ "bar" ;
 } ;
 } ;
 } ;
 val foo int = - - ~ ~ ~ true == true / false ( false , 123 ^ - "bar" . foo ) ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) { for val foo int = 123 ;
 ( ~ ! "bar" . foo ) ;
 ! - - - ! "bar" / - "bar" = ~ ~ ~ ~ ~ false . foo { ! foo ( ~ - 123 , "bar" . foo <= true * "bar" . foo ) ;
 } ;
 } ;
 class foo { for val foo int = "bar" < ~ true . foo * - 123 == ! true ( "bar" ( true , ~ false ) , ~ ~ ~ - ~ ! ~ foo [ "bar" . foo ] ) ;
 ( ! false * ! - - - ! ! true | ~ ~ foo != 123 ) ;
 ~ false { - - ~ ~ ( true ) -- ;
 } ;
 } ;
 class foo { if 123 - ! ( "bar" ) [ - "bar" * "bar" . foo < foo [ 123 ( 123 [ 123 ] , false ( - ! ! foo [ "bar" ] , ! ( - ~ - ~ ( 123 ) ( ! "bar" < ! - "bar" , foo ) >= - false ^ 123 ) ) / ! true ) ] ] <= foo { if true { 123 [ true ] ;
 } else { true ;
 } ;
 } else { - "bar" ;
 } ;
 } ;
 class foo { ! ! "bar" > 123 **= false ( - foo [ ~ true ] , ~ - - ( ~ ~ - ~ - ( ! false [ true >= ( ! true / 123 ) ] ) & ~ false [ foo . foo | ! foo ] ) ) ;
 } ;
 func foo ( foo int ) { if ( - - foo ( - - ~ - - true [ - - false ] , ~ "bar" ) * - ! ~ true ) { for val foo int = 123 & - foo ;
 123 ;
 ! ~ ~ true ( - ! ( ! true / 123 ) , foo ) < ! ( ! 123 ) **= ! 123 * "bar" [ - ! ! ! - ~ true & ~ - true ( false . foo , ~ ~ ! "bar" / ! ~ ! 123 . foo ) ] { false [ false ( ~ ~ - - - ! true . foo , ~ ! ! ! - "bar" ) ] /= - true - ~ ~ ! 123 ;
 } ;
 } else { - ! ! false . foo *= ~ - true & ( true ) ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) { ! true . foo <= ! false ;
 } ;
 func foo ( foo int , foo int , foo int , foo int ) { "bar" ;
 } ;
 class foo { for val foo int = 123 ;
 foo . foo == ~ - - 123 ;
 - "bar" ++ { ~ true < ! "bar" -= - false ;
 } ;
 } ;
 class foo { ! 123 **= false ;
 } ;
 class foo { 123 [ ! ( false ) [ true ( true / ~ 123 , 123 ( 123 [ "bar" . foo == true ] , ! ( ! ~ ( ~ ! ! ~ - "bar" ) ) / false > - - - ( - "bar" ) ) ) ] ] *= ~ foo ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int , foo int ) { for var foo int = 123 ;
 ( ! "bar" < false ( ! "bar" [ foo ] , true <= true ) ) ;
 ~ "bar" . foo { - false ;
 } ;
 } ;
 class foo { 123 ( "bar" ( - ! ( ( ( ! ! ~ ( true ) ) ) ) [ ! - "bar" ] , "bar" ) | - ! - false , ~ "bar" ) ;
 } ;
 val foo int = ! ~ "bar" ;
 var foo int = ( ~ true . foo ) * false == ~ ( false ) ;
 func foo ( foo int ) { if foo { for val foo int = false ;
 false ;
 ! ! foo . foo /= ! "bar" [ - ~ 123 . foo & "bar" . foo - ~ ! ( "bar" ) ] { false ( ! foo , ! ~ ( true ( ~ false - ( "bar" ) , foo . foo ) + ~ ~ ! - ~ ( ( ( - ~ ~ ! - 123 . foo ) * "bar" ) ) ) [ foo ] > ( - ( ~ ~ ~ 123 . foo ) [ "bar" ] ) [ true | ~ - ! 123 ] ) = ! ( "bar" ) & foo ;
 } ;
 } else { if ~ ~ ! ! foo { for var foo int = ( true ) / ! ~ "bar" ;
 ! - "bar" / ! false . foo ;
 ~ ( - "bar" ( - foo / true ( ( ( false ) - false ) , ~ ~ "bar" | - 123 ) >= foo , 123 ) | foo ) -= true { for var foo int = 123 . foo ;
 ~ 123 . foo ;
 ! false { if true ( ! - 123 . foo , - - "bar" ( ! ! ! 123 , "bar" > ~ false & ( - false ( - ! ~ ~ 123 , true ( - foo [ true ] , 123 ) ) / foo ( ! foo == foo . foo , 123 / ! true [ ~ - ~ ! ! true ] ) ) ) ) / - - "bar" { if - ( "bar" / ( false | false ) ) { if ~ - true { for var foo int = ~ true [ foo [ ~ "bar" ( ~ ~ ! ( false . foo ) & false , false ) ] ^ 123 ] ;
 ! "bar" != false ;
 ~ ~ ( - - "bar" ) / - - true **= - "bar" * ~ ~ ( ! ~ 123 [ ! ! false > ! "bar" ] != false - "bar" ( false , ! ! - ~ "bar" [ foo ] ) ) { ! ! - - ! foo / foo ^ ! - ! ~ false **= ~ true [ true ^ foo ] ;
 } ;
 } else { "bar" [ foo . foo ] ;
 } ;
 } else { for val foo int = true >= - ~ ! ! ~ ~ ( ! ~ "bar" ) != ~ 123 ;
 foo == - - false ;
 foo ( ~ false , ( - ! ~ ( ! true ) ( 123 , false ) ) | ~ ! ! ~ - foo ) /= "bar" { 123 ( - - foo == foo ( "bar" > ! - true * false , - "bar" == ! - ~ - ~ 123 * false - 123 [ - ( ( ! ~ false == ( ~ false [ "bar" . foo ] ) < - "bar" ) ) ] ) , 123 ) += false ( "bar" , true + false ) ;
 } ;
 } ;
 } else { ~ ~ ! ~ "bar" == - "bar" . foo ;
 } ;
 } ;
 } ;
 } else { ! ! "bar" ++ ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int ) { ! false ;
 } ;
 func foo ( foo int , foo int , foo int ) { if false { for val foo int = - ~ ! ~ ! 123 & foo [ - ( ! - foo ) ] == - ! - ! ( ~ ~ 123 / true ) ;
 ( false & ~ ( true ) ) / ~ false ( ! ( foo ^ false ) , 123 [ ! true [ - true . foo >= true ] > ~ - ! foo . foo ] * - true [ foo [ - - foo ] ^ ~ ! foo / false [ - foo < ! false ] ] ) ;
 - ! ( ~ ( ! 123 ) [ - false ] + 123 [ true ] ) -= ( - true ) [ - - ~ "bar" ( foo , true ) ] * ! - ~ ! true . foo { ~ ~ - false += ! ! ! - false < ( 123 [ ( ! true ( true , ! foo > - false ) ) - 123 == ~ ~ "bar" [ ~ true . foo != "bar" / false ] <= 123 ] ) ;
 } ;
 } else { - ~ false [ 123 ] / foo [ ! ~ ! ( ! - ~ ! ! - 123 <= ( ~ true ) [ ! ~ ~ ! ! ~ ~ foo ] ) & - ~ 123 . foo < ! "bar" != ! false ] ;
 } ;
 } ;
 var foo int = ~ foo ( 123 , foo ( "bar" < false ( - foo , ~ "bar" ) , false ) * - ( true ) ) <= false ;
 val foo int = ~ ! ! ~ ~ ! ( 123 ) > ~ ! foo . foo ;
 class foo { false ++ ;
 } ;
 func foo ( foo int ) { for var foo int = ! ~ - "bar" ;
 - foo . foo < false ( ( 123 ^ false ) , - ~ 123 ^ ~ 123 ) ;
 ! ! true { "bar" [ true . foo / ~ true . foo ] = - "bar" ;
 } ;
 } ;
 val foo int = ! false [ ! ~ ! 123 / ! - 123 ( true & ! ! "bar" , "bar" ) ] ;
 var foo int = ~ ~ foo == ! 123 ;
 func foo ( foo int , foo int , foo int , foo int ) { for var foo int = ! - foo ( ( ! "bar" ^ ~ true ) - - - ~ ~ ~ ~ ~ "bar" , ( ~ true [ foo < ~ false ] ) ) ;
 ! false ( 123 , - - ~ ~ ~ 123 >= ( ( true ) [ ! ( ~ "bar" ) > false ] & ~ "bar" ) / - false | ! 123 ( ~ - false <= 123 . foo , false & ( "bar" . foo < - ( ! false ) ( ! ! 123 [ 123 [ ! ~ true - - - - true ] ] > "bar" . foo , true >= ! ~ false ) ) ) ) ;
 ( ~ 123 * ~ - - "bar" != true <= ( ~ ( foo ) <= 123 ) [ ( ~ "bar" ) ^ - ~ ~ "bar" ] ) [ "bar" != ~ 123 ] -= ! - ~ false [ foo ] { ~ ~ 123 [ "bar" & ~ - 123 ] == true **= ( foo [ - "bar" . foo ] ) ;
 } ;
 } ;
 class foo { ( ~ false - ~ ~ ~ false ) -- ;
 } ;
 
