module foo ;
 class foo { - ! ~ true . foo -= ! 123 ;
 } ;
 var foo int = ~ ~ ~ ( false ) ( foo , ( true ) ) ;
 var foo int = ! ~ ! 123 ;
 var foo int = ~ true ( 123 , - - false - ! "bar" ) ;
 func foo ( foo int , foo int , foo int , foo int ) { ! - ~ false + - ~ true ;
 } ;
 var foo int = 123 ;
 class foo { ! ~ - 123 [ ! - - ! 123 . foo ] += ! "bar" ;
 } ;
 val foo int = - 123 ( - - "bar" , ~ 123 ) ;
 class foo { "bar" **= ~ ~ - ~ foo ;
 } ;
 func foo ( foo int , foo int , foo int ) { - - ~ ( false ) ++ ;
 } ;
 func foo ( foo int , foo int , foo int ) { ~ "bar" [ ( - true ) ] ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) { - - ( false ) += - ! ~ ~ - ! foo [ - ~ - foo ] - "bar" . foo ;
 } ;
 val foo int = 123 + foo ;
 func foo ( foo int ) { ! - true **= ! ! 123 > "bar" [ "bar" ] != false ( 123 >= "bar" , "bar" ) ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) { for val foo int = ~ 123 ;
 true ;
 123 { for val foo int = 123 ( - ( 123 ) , 123 ) ;
 "bar" . foo >= - 123 ;
 true **= foo { ! ! 123 - ! 123 [ foo > "bar" . foo + true ] /= - - false . foo ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int ) { for val foo int = ( foo ) - ! false & ! ! ~ ~ false ;
 ( ! foo ( ~ false , "bar" ) ) ;
 - true /= - foo | ~ false { true [ ( - ! - 123 + ~ ~ ~ false & - 123 >= ! ! ( 123 ^ - false [ ( foo > ! true ) . foo ] ) ) ] += - ~ foo ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) { for var foo int = ~ "bar" ;
 false . foo ;
 - - ( true [ ~ "bar" ( ! ! ~ ~ true ( 123 <= foo + - 123 , foo ( ~ ~ 123 , ! ! ! - 123 ) ) , ~ ~ ( 123 ) [ ! ! ~ foo ] ) & "bar" ( ~ - - ~ "bar" , true ) ] ) ++ { ! ~ "bar" == ( ! ~ true ) -- ;
 } ;
 } ;
 class foo { for var foo int = - - "bar" ;
 "bar" / ~ ! - false < ( ! true ( "bar" - true , false ) ) ;
 false ( - "bar" + ! "bar" [ 123 [ ~ 123 ] + ( - foo >= ~ false ( "bar" , - ~ foo ( ~ ( true ) <= foo == ~ ~ ~ ~ ~ true , true ) ) ) ] , ! - true ) ++ { ~ ! ! - ! 123 ;
 } ;
 } ;
 class foo { if foo ( 123 <= foo == foo , false >= ! ! "bar" ) { ( foo * 123 ( true , ~ ~ "bar" & ( ~ - ! ~ 123 [ ! ~ ~ false . foo & "bar" ] ) ) == ~ - ~ false ) * ! - ( ~ true . foo ) **= ! ~ foo . foo != "bar" [ "bar" ] ;
 } else { if 123 != foo . foo * ! ! 123 { if foo { for val foo int = true . foo & ~ - - - false ;
 ~ ! ~ 123 ;
 - ! - - ! ( 123 ( foo , 123 ( "bar" , foo . foo ) + - foo . foo <= 123 ) | false != ! ( ! "bar" ) . foo ) * - ! ~ true **= "bar" <= ( "bar" ) { for var foo int = - "bar" ;
 ~ - ( ~ ! - 123 ) ^ foo / ~ "bar" ;
 "bar" { for val foo int = - ~ ( foo ) ( "bar" . foo , "bar" == "bar" ) * ~ ! foo >= ~ foo != ~ 123 ;
 ! true . foo != - ! ~ ! "bar" * "bar" ;
 ! "bar" ( true , ~ true [ foo . foo | true ] > 123 ) /= - ~ ~ ( "bar" ) + - - ( ~ ! true ) { ~ foo - 123 ++ ;
 } ;
 } ;
 } ;
 } else { ~ 123 <= ~ false . foo != true ;
 } ;
 } else { ! - ! 123 ( ! ! true / 123 ( false , 123 - false == - foo . foo ) , ~ - ~ ! - ~ ~ ( true / ( - ! true ) ) != ! ( ~ ! ~ ~ ! - ~ ( false ) | true <= ! - ~ "bar" ) | ~ ! 123 ) == ! ! ~ ! ! foo ( ! ~ ! true < false , ! - - foo ) ;
 } ;
 } ;
 } ;
 class foo { ( false ) >= ! 123 += - ~ foo ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int , foo int ) { ~ - false . foo ++ ;
 } ;
 func foo ( foo int ) { for val foo int = - 123 ( ! 123 != ~ 123 , - ! ~ - false ) ;
 - "bar" | false . foo < true ;
 - false /= ~ "bar" * ~ "bar" { "bar" ^ ~ ~ foo ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int , foo int ) { - ~ ( ( ~ foo ) * 123 ( "bar" , true ^ ( ! ! 123 ) * ( true ) . foo ) ) . foo ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) { - ! false ++ ;
 } ;
 val foo int = ( ! ! foo ( ( 123 ^ ! ! - ( ~ false ) ) , ! "bar" ) ) / - ( 123 ( ~ foo ^ "bar" , 123 ) != - - "bar" [ - true . foo ] ) . foo ;
 func foo ( foo int ) { for var foo int = foo [ foo ] / - foo ;
 foo ( ~ ( ! ~ foo == "bar" . foo ) , ~ true ) < - true ;
 true /= ~ foo { if ( ! - ! "bar" [ ! - false ( ~ 123 & ~ - - ~ ~ ! - true . foo , - ! ~ ~ "bar" ) & ! foo ] ) . foo - true { foo -- ;
 } else { - ! - - "bar" == ~ "bar" - 123 -- ;
 } ;
 } ;
 } ;
 class foo { if ! ! - "bar" { for val foo int = foo . foo + ~ foo ;
 true / 123 ;
 false & ! - ( ! ! false ) { - ! ~ 123 ;
 } ;
 } else { ( ~ false ( false , false ) ) /= ! ~ ~ "bar" ;
 } ;
 } ;
 var foo int = ! ~ - - 123 ;
 class foo { ! - ~ "bar" . foo -- ;
 } ;
 class foo { 123 | - 123 += - ! ~ - true ;
 } ;
 class foo { for val foo int = ! - ! foo ;
 ! 123 . foo ;
 foo { - "bar" != false -- ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int , foo int ) { if ~ "bar" / - ~ "bar" { if ( true * - ! ~ ( ~ ~ "bar" == true < "bar" . foo | "bar" ( "bar" [ true [ false ] ] , 123 [ ( - ~ false ) [ ~ ~ ! - ! foo ( - - ~ foo | foo , ~ foo ) ] ] ) ) [ ~ ! ! foo [ "bar" ] ] <= true ) { - foo / ( "bar" ( true * ! false . foo , ( ! foo . foo == ! false ) [ ~ ~ ~ ~ ~ - false ] * ! foo ) ) *= foo ;
 } else { for var foo int = foo ( true , false ) * true ( "bar" , - foo ) != foo | - ~ - true ;
 ~ - ~ foo ;
 ~ ~ ~ true -- { if ! "bar" { for val foo int = true ;
 ~ false [ false ] > ! "bar" . foo ;
 ! ~ - ! foo ++ { for val foo int = "bar" + ~ ~ - foo ( - false . foo != 123 ( ~ false ( - ~ true , - 123 [ ! ! foo < foo ] ) , ( true != ! ~ ( ~ - ~ - ~ ( false ) ) | ~ "bar" . foo & false ) ) >= - - foo , ! false ) ;
 - ! ( ~ foo ) > ! ! false . foo ;
 ~ ~ ~ ( foo ( - - 123 [ ! - ( foo ) ] , 123 ) ) . foo { foo /= "bar" ;
 } ;
 } ;
 } else { for val foo int = false ;
 foo [ "bar" . foo ] * ! 123 ;
 ! "bar" -- { if 123 . foo | ~ true { for var foo int = "bar" != ~ true ;
 ! false ( ( true ) ( ! ! - - false , ! ~ ~ false . foo ) , ! ~ foo . foo <= false . foo ) ;
 ~ ! true -- { for var foo int = "bar" ;
 ! - ! ( true != ~ ~ ~ - "bar" / ~ "bar" ) . foo ;
 false . foo == foo . foo <= - - false ++ { - foo < - ! ~ ~ - true -= false ;
 } ;
 } ;
 } else { for var foo int = 123 [ foo ] > ( ! true . foo ) ;
 true & ! "bar" ;
 ! "bar" * ! ! - foo | "bar" [ true ] <= ~ true { ! ~ - ~ 123 ( 123 < foo , ~ - 123 ) -- ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { for val foo int = true ( ( false - "bar" [ ! ! - 123 > - ( - ~ "bar" [ ! - false ] ) . foo ] / ( - true ) ) , 123 ( true [ ! ! ~ ( foo ) ] , "bar" + 123 ( ~ ! ! - foo , - - ( ~ ! - foo [ ~ 123 ] ) . foo ) * false ) ) ;
 - foo ( false , - foo ) ;
 false ++ { ! ~ ~ true == ( ~ true ) . foo += "bar" ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int ) { 123 > ( true [ - - 123 ] != ( ~ false ( - foo , ! ( - ! 123 ( - ~ true , ~ 123 ) ) ( "bar" [ ~ - "bar" ] , ~ true != true [ ! ! false ] ) ) ) ) . foo != ( - 123 & 123 + ( ~ - - 123 < - foo ) >= false ) ;
 } ;
 var foo int = ~ "bar" * false ;
 var foo int = ! - ! false & ( false ) ;
 func foo ( foo int , foo int , foo int ) { - 123 + ! ( ( ! 123 ( true / ~ 123 , false . foo & foo . foo ) ) ) ;
 } ;
 var foo int = foo [ ~ ! "bar" ( ~ - false [ foo ] * ! foo [ foo & ! ! 123 [ false ] ] , ~ ( ~ "bar" ) >= ( ( true >= ! ( ~ ! ! false ) ) . foo / foo ) ( - - 123 >= ! 123 , ~ "bar" / 123 | - true >= ~ - 123 ( ! ! false [ false == ~ ~ ~ - false ] , ~ false - 123 ) ) ) != 123 >= ! "bar" ] ;
 func foo ( foo int , foo int , foo int , foo int ) { false . foo ;
 } ;
 class foo { ( ( true >= foo . foo ) [ 123 ] ) . foo != false > ( foo ) . foo = - foo * ~ - "bar" ;
 } ;
 class foo { if ~ true { for val foo int = - ~ false . foo ;
 123 / ~ "bar" ;
 ( ! - true . foo ) ^ ! ! ! true ++ { if - 123 { "bar" [ ! - ~ foo ] | true [ - true / - 123 ( foo [ ~ "bar" ] , false ( ! ! ( ( ~ ! ( - ~ ! foo / foo ) ) . foo == false ) , ~ true ) <= 123 == ! ~ ! "bar" ) <= true ] /= ! false . foo ;
 } else { true ;
 } ;
 } ;
 } else { - true ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int , foo int ) { if 123 { - false += ~ "bar" . foo * ~ 123 ( "bar" , false ) == ~ - true ( foo , "bar" ) ^ - ~ true . foo ;
 } else { ! ! ( false ) != ~ 123 ;
 } ;
 } ;
 class foo { for val foo int = 123 != false ;
 ! "bar" [ foo ( 123 * ~ - - ~ ~ true , foo - ! foo ) ] | true ( - foo , 123 . foo * false . foo ) / ~ ! - ! ~ 123 ;
 - ! ! ~ 123 -- { if ! - - 123 . foo >= true { if ~ ( - - 123 / true ) { if ~ foo { if 123 { for val foo int = - foo * ! - ! - - ( - ~ true ) ( false , 123 | ( true ) * - - - ! ! ~ ! ! ~ ~ "bar" ) ;
 - ~ 123 + - true == 123 > foo & ( ~ "bar" & - foo ) ;
 true **= ~ foo { - - foo ( false , ! ( ! false & ~ ( true ) ) ) ;
 } ;
 } else { - ! 123 + 123 ( foo , ! true ) ;
 } ;
 } else { ~ ! true ++ ;
 } ;
 } else { ~ - ! ~ ! ~ ( true ) ;
 } ;
 } else { if "bar" { for var foo int = foo / false == - true . foo ;
 ( false ( ~ false == ! ! ~ "bar" . foo , ~ ! ! ( ( ~ ! ( - ! - ( - 123 ) ( - ! ! ~ false , ! true ) / 123 . foo ) ) * 123 ) + foo . foo ) != ~ ! ( ! false == true . foo ) [ ~ 123 & 123 [ ! "bar" ^ - ~ "bar" ] == ! "bar" ] ) [ ~ ~ - ~ false [ ~ false >= ! - ! "bar" == ~ ~ "bar" . foo ] ] <= foo ;
 ( ! ~ 123 . foo ) ^ ~ ~ "bar" { ! ! - ! true ( ! - ! - ! ( - ! ! foo ( foo , - ( false ) < ( false / ! ! "bar" | ! false ) . foo ) & true ) [ false ] , false ^ ( - - "bar" ) ) = ~ ~ - ! ~ "bar" . foo ;
 } ;
 } else { if ~ ~ foo { "bar" [ foo [ foo . foo ] ] != foo /= - ! 123 * - true ;
 } else { for val foo int = "bar" . foo - ! 123 ;
 "bar" ;
 ! - - ~ foo *= ! ! - foo { for var foo int = 123 < ~ - - ~ 123 ;
 true [ ( ( - "bar" ( false , ! ( "bar" ( "bar" , ~ 123 ) ) . foo ) ) . foo > ~ ! foo ) . foo == ! false [ ! ! ~ ! ! false > ! true == false <= - false ] ] >= 123 ;
 - ! ~ ( ( ( ~ ( - true ) & true != - foo ( ! - ! 123 ( foo , 123 [ foo ] | ! - ( - 123 ( 123 , ~ ( false . foo ) . foo ) ) ) / "bar" != ~ foo . foo , ! false < "bar" ) ) ) . foo ) ++ { for var foo int = 123 ;
 ! true . foo <= ~ ! ~ ~ - true ;
 "bar" | - ! - - - - false { 123 ++ ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int ) { ! ! "bar" | ! 123 ( 123 != false , 123 [ - - "bar" ^ ~ ~ ~ ( "bar" ) ] - foo . foo ) /= - ! 123 ( - ~ ! ! foo , false ^ ( - ~ ! ! "bar" [ ! ~ false & - 123 ] ) . foo ) != ~ ~ ~ ~ foo ;
 } ;
 func foo ( foo int , foo int ) { for var foo int = foo ;
 true ;
 ~ ( "bar" . foo ) ++ { if - "bar" { if false == ( ~ ~ 123 ( foo . foo , ! 123 ( ~ false , ! false . foo ) ) * 123 != ~ - false . foo ) & true [ ! ! 123 ] { ~ - - 123 ( 123 . foo , - true . foo ) < ! ~ ~ - "bar" += ! ( false [ true ] & - 123 != ~ ! "bar" [ - 123 ] / foo [ - ~ false ( 123 , - "bar" ) / - - false ] | false . foo / true ) * ~ true != ( ! "bar" . foo ) [ - true ( foo , - false [ 123 ( 123 , false ) ] != "bar" ) * ! - ~ - ~ ! false ] | 123 [ ( 123 <= ! ! ~ true ) [ ( true ) . foo ] | ! true ] ;
 } else { ~ ~ true / ( ~ ( 123 [ - - ! false < "bar" ] * ~ ! false [ false ] ) [ ~ ~ ! - foo ] <= ! ~ ~ 123 ) | - ! false == 123 . foo -= "bar" ;
 } ;
 } else { for val foo int = foo & 123 ;
 - 123 & - ! true ;
 - foo [ ( - ! "bar" ( foo , ! ! 123 != - 123 ) ) | ( true ) ] -= ! foo == ( 123 ( foo != ! ~ - false ( true ^ 123 . foo , - ( ( 123 [ ! - ~ ~ ! ( - ! - ~ - ( "bar" . foo ) ) . foo <= ~ foo ] ) ) + ~ false ) , 123 ) ) & ~ false . foo < ! 123 { foo ;
 } ;
 } ;
 } ;
 } ;
 class foo { - ( - ! 123 ) ( ~ ( "bar" ( ~ ! ! ( "bar" ) == ~ false - ~ - "bar" , true ) ) , ! ! 123 ) += ( ~ - true ) ;
 } ;
 func foo ( foo int , foo int , foo int ) { if ~ foo . foo { if - ! true { false ( - false [ true . foo * ~ ! false [ ~ - ! - ( ! ~ ! false - false [ false . foo ] ) . foo / "bar" [ ~ ! 123 [ ~ ~ ~ false / - true ( false == - - foo , false ) ] ] == - ! "bar" . foo ] ] , ! ! "bar" [ false [ true ] ] != ~ "bar" ( true . foo , ! ~ "bar" ) < ! ~ ~ ~ "bar" / 123 ) == ~ true += ~ ~ false ;
 } else { if ! ~ "bar" ( ~ "bar" . foo / "bar" != 123 , "bar" <= ~ ~ ~ 123 ) { foo . foo = - ! ( - foo [ - - true ] / false != 123 . foo / - foo ) . foo != "bar" ( ! ( ( "bar" ) [ ! ~ ~ "bar" . foo != ~ ! ! true ] > ~ - 123 ) * "bar" , true ) - ! 123 ;
 } else { if foo / foo ( ! false > ! false . foo | true , ! "bar" . foo | ~ - - - - ~ - ! ( ~ ~ 123 - - true ) [ ( false ) | 123 ] & ! ~ true ) { for var foo int = - ~ ~ - - ~ 123 ;
 ~ ! foo ;
 ( - ~ - true / ! false ) [ ~ false [ ! ! ~ ( ! - ! 123 ) ] ] != - ~ false >= ~ - ! - foo ^ - ! false -- { foo >= foo ;
 } ;
 } else { for val foo int = "bar" <= 123 + ! true * ! false . foo ;
 "bar" ;
 - ( ~ foo >= false == 123 ) > foo * ( ~ ~ true ) == ( false + 123 ) ( ! ~ 123 / 123 [ ~ foo - ( - 123 [ ~ 123 >= - ! ! "bar" [ true [ - ~ ! "bar" . foo ] ] ] <= ! ~ true ) ] , foo ) { for var foo int = false ;
 true ;
 123 { ~ foo ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { for val foo int = - "bar" | ( false [ - false . foo <= ! "bar" ( foo , ~ ! - - false >= ( foo ) . foo ) ] <= ! - ! ! foo ) != ( 123 ^ ~ "bar" . foo > ! ~ true ) ;
 ~ ! ( ! foo > foo ) ;
 ~ ~ "bar" + 123 < true ++ { if ( ! ! foo != "bar" [ ( - ~ ( ( ~ ! ~ - ( false * 123 < - - ~ foo ( - ( false ^ 123 ) ^ - foo ( ( true ) - foo , false ( ! ~ 123 , ! - ! ~ "bar" ( "bar" , ! - true > ! - 123 ) & "bar" . foo ) ) , ( ! ~ false ) . foo ) & "bar" ) ( - ( ~ true != true & ( ! - - 123 ( true , "bar" ( - true + - false , "bar" ) != "bar" * - ! - false ) ) < 123 ) , foo ( ~ ~ false . foo , ! ~ ~ 123 == "bar" ) < foo ( false [ ! ~ "bar" ] < 123 , foo ) == - true ) == foo ) ) [ ~ foo ] ) [ ( false [ ~ ! ~ ! ~ ! ! true ] ) > 123 ] & ( true ) ] ) { if - 123 { for val foo int = - ! 123 ;
 foo ;
 false -- { foo ;
 } ;
 } else { if ~ ( - ~ ~ 123 - ~ "bar" . foo ) [ foo + ( ~ - ~ ( - true ) ) ] - "bar" [ true ] / ! ~ ! "bar" == ( - false == ! "bar" . foo ) { - - ! 123 -- ;
 } else { - ~ ! ! ! foo += ~ ~ - ( ~ ( ! ~ - - ! - true ( foo , ~ - "bar" [ foo ] ) ) ( ! ! ~ ! foo , ~ "bar" / true . foo ) ) ;
 } ;
 } ;
 } else { ! ! foo += ! foo [ 123 ] ;
 } ;
 } ;
 } ;
 } ;
 val foo int = false ;
 
