module foo ;
 func foo ( ) int { foo : int : ! [ false >= - - foo , [ "bar" , false and ! 123 [ - true ( true >= ! 123 ( ) , [ ] , 123 . foo | [ ] . foo , ~ [ ] or 123 >= true and true . foo ) or ~ ( 123 | [ ~ [ ! ! "bar" ] , "bar" . foo , - ( ( - ( foo ) and ( 123 ) ) [ 123 or ! ~ [ - - ! ! ! ~ ~ [ ] and foo , true ( - ~ ~ [ ~ true , [ ] , ~ ! ~ ~ 123 , ~ true + ( true and ! 123 ) [ "bar" ( ) ] or ~ 123 != ! true , "bar" [ true ] and - - ! ! ~ - - - ! false ] , ! [ ] , ~ ~ false [ ! ~ - - [ foo or "bar" != ! ~ ~ 123 ] [ true ] ] > 123 & - ~ false << "bar" ( ~ 123 , 123 % - foo , - ~ ( foo . foo ) + 123 or ! ! ! foo < false == ! foo , ( ( ! - ~ foo or ~ - - ( false and 123 ) . foo ) . foo ) or - ( ~ - ! - ( - ! ~ ( ~ ~ false ) ) ) , foo or 123 != - ! foo ) , ~ ~ - - - - ~ ! ~ ~ [ ] ) and foo , ( true and 123 ) , ~ 123 <= "bar" , ~ 123 ] [ ! ! foo ] and true ] ) . foo ] < true << ( ~ ! ~ false or ! [ ] ) ) ( ) % true ] , ~ ~ ( 123 ) ( ) , ! - - ~ 123 and 123 ] ( ) ] ;
 } ;
 foo : int : - ~ foo . foo ;
 foo : = foo and - true & [ ] << ! [ ] != ~ - - ~ ~ "bar" ( ) ;
 func foo ( foo int . int , foo int . int , foo int ) int . int . int { foo : = ~ 123 ;
 } ;
 func foo ( foo int , foo int , foo int . int ) int . int { foo >> false *= true ;
 } ;
 func foo ( ) int { 123 ( ) *= 123 or ~ - ( - ( ~ true ) ) < - - ! - - - 123 ;
 } ;
 func foo ( ) int . int . int { } ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) int { SKIP { { foo : int = true ;
 } } SEIZE { { } } SEIZE { { } } SEIZE { { REVERSE "bar" ;
 ;
 } } ;
 } ;
 class foo { func foo ( ) int { foo : = - true ;
 } ;
 foo int ;
 func foo ( foo int , foo int . int . int , foo int ) int { } ;
 } ;
 foo : int . int = ! false ;
 class foo { func foo ( ) int { foo : = [ ] . foo ;
 } ;
 foo int ;
 func foo ( ) int . int { } ;
 foo int . int ;
 func foo ( ) int { foo : int : - true and ~ "bar" [ [ 123 , - true , ! ~ foo << 123 [ ! ! 123 ( ! 123 >> [ ] <= - foo , true , ~ ~ ~ false ( ) or ( 123 >> ~ ~ foo ) , ~ 123 ) ] , foo , ( ! ! ! - - - - - false or ! 123 + ~ foo ) <= ! "bar" == ~ [ - [ [ ] , [ ] , "bar" ( ) and "bar" != ~ [ ] , ! [ ] , ! - - foo ] and - - - false , foo , false == ~ ~ foo or ( ~ 123 ) ] , 123 ] ] ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int ) int . int . int { } ;
 func foo ( foo int , foo int , foo int , foo int . int . int ) int { } ;
 class foo { func foo ( ) int { foo : int . int : true ;
 } ;
 } ;
 foo : : false ;
 class foo { func foo ( ) int . int . int { } ;
 func foo ( foo int , foo int , foo int . int . int , foo int ) int { } ;
 foo int ;
 foo int ;
 foo int ;
 } ;
 func foo ( ) int . int . int { } ;
 func foo ( foo int , foo int ) int { for foo : = 123 ;
 foo ;
 ( "bar" ) { } ;
 } ;
 foo : int : false * false ( ) << - - [ ] . foo or [ foo and ! ! "bar" , ~ 123 . foo , true , ! foo , ~ false . foo , ! - [ ] ( ) ] ;
 class foo { foo int ;
 foo int . int ;
 foo int . int . int ;
 } ;
 class foo { } ;
 func foo ( ) int . int . int { } ;
 func foo ( ) int { } ;
 
