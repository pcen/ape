module foo ;
 class foo { foo int ;
 func foo ( foo int , foo int . int , foo int . int , foo int . int . int , foo int . int ) int . int { ( ~ - ~ foo << ! 123 ) [ ~ ( ! ~ "bar" ) ] or true *= ~ - "bar" ;
 } ;
 foo int . int ;
 func foo ( foo int . int , foo int , foo int ) int . int { if ! 123 >> 123 { for val foo int = ! "bar" and - ( ~ ~ ! 123 . foo * "bar" ( ) > ~ ( false . foo ) - 123 ) [ false ] or true ;
 123 ;
 true >> 123 { var foo int = ! "bar" ;
 } ;
 } else { if "bar" <= "bar" { for val foo int = ! true or ! ( foo == foo ) ( "bar" , ~ true << "bar" or ! 123 . foo | - - - foo ) >= ( ! false != ! ! ~ foo ) ;
 "bar" | ! ( ! foo | ( ~ ~ false . foo ) [ ! false ] and ! ! ~ true ) >> foo ( ) ;
 - foo . foo | false ( ) != true . foo -= ~ ! - foo << "bar" [ 123 - ~ - 123 ] { val foo int = ~ foo % foo ( true , foo != ~ ~ 123 ) ;
 } ;
 } else { if foo { var foo int . int = - foo ( ( ~ ~ foo or ~ - ~ ( 123 >= true and ~ ~ 123 >= ( - ~ ~ ~ ! false ) ) ( true == - ~ - ! ~ ~ - ~ "bar" ( ) , ( "bar" ) [ ~ false or ! false % 123 . foo ^ - false ] ) ) , foo ) >> ( false >> ~ - true ) or 123 <= - false ;
 } else { val foo int . int . int = "bar" * ~ 123 ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int . int . int , foo int . int . int ) int { if false [ - true <= 123 | foo [ - 123 . foo ] ] & false { for val foo int = ! ~ - ( true < - false ) == ( "bar" ) . foo > ~ foo ( false [ 123 ] and true ( ! - ! - ! - false , ! true != ! ~ ~ ~ - ! ~ ~ false % - ~ - ~ true + ! true ( ) >> ~ foo ) , "bar" != "bar" and ~ foo ) ;
 "bar" | ! ( ! ~ "bar" or false ( - 123 [ 123 == - "bar" ] and ( 123 ) == true , ~ ~ false ) ) * true >> - 123 [ - true [ - foo . foo ] <= - ~ ~ - - - "bar" . foo == ~ false ] ;
 false - - ~ true -- { val foo int . int = true [ ( false ( "bar" ( ) , false ( ( false . foo ) , "bar" . foo ) ) ) - ~ 123 ( ( ~ - - ~ foo ) - ( ~ "bar" ) < ( ! "bar" ) , true < false << ( 123 ) == ~ "bar" ( ) + - false . foo <= ~ - false or ! true >= - ~ ~ ( foo ( ) ^ ~ ~ ! ~ ( foo + foo ) ( ) ) and ! ! 123 | ( - foo % 123 ( ~ ( true [ foo [ - false ( ( foo [ ! ~ "bar" . foo > ! ( ! "bar" ) - ( ( ! - - ~ ~ ! false ( foo . foo and ~ ! ~ - - ! - true , 123 != "bar" ( ) ) | false ) or foo ) ] <= ~ true | - ~ false % 123 ) ( ) - ~ "bar" and false or foo [ foo [ ~ - ! ! true != ( foo [ ~ true ] ^ "bar" ) ] ] != ! false , 123 ) << ~ false ] or foo == ! ( ! true / ! true ) ] * true >> 123 . foo and 123 ) <= - ~ true / 123 . foo , ! ~ foo ) and ! - ! - ~ - - false ( ) ) ) and ~ 123 ] == foo & 123 . foo ;
 } ;
 } else { val foo int . int . int = ! "bar" and "bar" . foo ;
 } ;
 } ;
 foo int ;
 func foo ( ) int . int . int { val foo int = - true ;
 } ;
 foo int . int . int ;
 } ;
 func foo ( foo int , foo int , foo int ) int { for var foo int . int . int = ! ( false ) ( ! ~ ~ "bar" ( ! ~ foo != true , 123 << foo ) , ( foo [ ~ ~ - ~ ~ - ( 123 >> ~ ! ! 123 * true ) ] < ! ! ~ false ) ) >> - 123 or "bar" % ( "bar" * ! - 123 - foo ( ) >> 123 ) ;
 ~ true << - ! ( 123 ) - - ! ( - foo * - ~ ~ - ( - ! ! ! "bar" ) ) . foo % ! - ( false != ! ! "bar" ) and true ;
 ( - ~ false % foo - ~ 123 & foo ) or ! true != ~ - foo { for val foo int = ! ! - ! 123 ;
 ( "bar" ) and ! "bar" >> ( ! true [ - ! - - 123 ] ) > ! true ^ true ;
 ~ false /= ! - ! ! foo and false . foo ^ ~ ! ( foo != 123 ) or foo { false %= ~ 123 ;
 } ;
 } ;
 } ;
 func foo ( ) int . int { var foo int . int = foo ( ) or ~ - "bar" [ ! true <= false ( ) ] == foo . foo ;
 } ;
 func foo ( foo int . int . int , foo int ) int . int { var foo int = - true ;
 } ;
 var foo int = ~ ~ ( "bar" > ! 123 [ ! ! ~ 123 . foo | false and ~ ! ( ~ ~ ~ ! ! ! - true < ~ foo == 123 ) ] % foo != ! ! false ) and false ;
 class foo { } ;
 class foo { func foo ( foo int ) int { for var foo int = false ;
 "bar" & ~ ~ foo > - ~ ! ! foo . foo ;
 foo [ - ! - ~ 123 ] or ( ~ ~ ! - ( ! 123 ) ) != ~ ! false **= ~ ~ ~ "bar" [ - - - - ( "bar" << ~ ~ false ) ( foo ( ) == "bar" . foo , true ) << ~ ~ ~ ~ ~ ~ ! ( ! - - ! - ! false . foo & ~ - ~ ! ( "bar" ) - 123 or ( ~ foo ^ ! foo ) ) ] { val foo int = "bar" > false . foo ;
 } ;
 } ;
 } ;
 class foo { foo int ;
 foo int ;
 foo int ;
 func foo ( ) int { val foo int = - ! foo and true == ( ~ ~ "bar" == "bar" ) ;
 } ;
 foo int ;
 foo int ;
 } ;
 class foo { foo int ;
 func foo ( foo int , foo int , foo int , foo int . int . int , foo int . int . int ) int . int { for var foo int . int . int = ! "bar" + ~ - "bar" and - ~ 123 ;
 ! false ;
 ! false [ ~ ! false % 123 ] == ~ ~ false << ! ~ true -- { var foo int . int = ~ ~ false / ( - - - ~ ( 123 ) . foo or ! ! ~ ~ 123 ( ( - - false [ foo == ! true | ~ - "bar" ] ) [ false and ! ~ true ] or foo * ~ 123 ( ) , ( ~ "bar" + ! ~ ~ 123 == true ( ~ ( ~ true ) ( true ( 123 [ foo [ false ] ] , ! foo ) & foo , ! "bar" ( ) <= true ) or "bar" ( ) , ! true ) ) or true ( - foo ( ! "bar" or - ~ ~ ~ true and ( false != "bar" ) ( ) , true . foo % - false ) >> foo [ "bar" ] , true ) ) ) ;
 } ;
 } ;
 foo int ;
 func foo ( foo int . int , foo int , foo int ) int . int . int { for var foo int = foo ;
 foo . foo and - foo [ foo >> ! ~ "bar" ( ) ] ;
 true = ~ "bar" ( ) { for val foo int . int = - false * - ~ true != ! ~ ~ "bar" ;
 ( ! - - true ( ) | ( ! "bar" + ( ~ true . foo / ! ( ! ( ( "bar" ( ) << ! ~ ~ foo * - "bar" ) << 123 == false ) ) != - - - "bar" ) ) ( ) ) ;
 "bar" = - foo { for val foo int = ! 123 . foo ;
 123 ;
 ~ true **= - ( ( ~ foo ) ( - - ~ ! ~ ( - ! foo | foo ) , ~ ! false . foo % 123 | ! "bar" ( ) ) == false ) { var foo int = "bar" ( - false + false [ foo ] or - 123 and ~ true == false [ ~ ! ~ ~ - "bar" . foo ] >= ~ - ~ ! ~ "bar" << foo , ( - foo ) ) and ~ ! ! ~ 123 ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int . int . int ) int { for val foo int . int = true ;
 true <= 123 ;
 true or ~ ~ ! ! 123 << 123 -= foo ( foo < ~ 123 ^ - ( - "bar" | 123 or true ) or - ~ "bar" >> ~ ( - 123 or ! - ~ "bar" and ~ ! ! ( false >> ( - foo . foo << ! ! ! - - ( true ( ) / - false ) . foo or - ! "bar" ) ( ) and ( - ~ foo ) ( false . foo > ! ( true ) ( ) != ! ~ ~ true [ true ] , - false ) - ! ! ! ! - ( ! "bar" ) ) ) , false ) { for var foo int = "bar" ;
 "bar" * - foo ;
 foo += true == ~ "bar" & ! ~ "bar" ( 123 , foo . foo ) and 123 . foo { for var foo int . int . int = ! false or foo ;
 - foo + "bar" . foo ;
 true | ! ~ ~ false ( ) ++ { foo and ~ foo ;
 } ;
 } ;
 } ;
 } ;
 foo int ;
 func foo ( foo int . int . int , foo int . int , foo int , foo int ) int { for var foo int = ! ! true ( ) ;
 ~ false ;
 ! true += 123 [ 123 % ( ( ! - ~ ! 123 ) [ ~ true != foo and ! foo . foo ] ) ( ) and ! 123 ( false == ( - 123 ( false , ! ! true ( ) ) ) ( ~ - 123 > ! - ~ ~ - false [ ! ! 123 and - false ] or ~ ~ - ~ ! ~ ~ - ! true >= ! ! ! ! 123 , ~ true . foo - - ~ ( foo and ~ true ) and ( - foo % ( ! ~ true ( ~ foo + ( ~ foo ( ) >> "bar" ) , ~ 123 % ~ - true + true [ ( - ! ~ 123 . foo ^ ~ - ( ( false ) ) / 123 . foo and 123 ) ] ) > foo ( ) or foo != false . foo < 123 and ! ( true . foo >= 123 - ! "bar" . foo ) ) ) ( ) ) , "bar" ) ] >> 123 + ~ "bar" == - - ~ ( ( "bar" . foo ^ ( false >> ~ - ! "bar" ) <= ~ false ) ( ) ) . foo { ! "bar" >> 123 [ ~ false ] = foo and false - ! "bar" ( ! ! - ( 123 - ~ ~ - - ! ~ - "bar" >= ! ~ false ) & 123 ( - ! ! ( - foo <= ( 123 ) . foo ) . foo , ! true ) == "bar" ( ( true . foo - - ! ! - - ( foo or false and "bar" ) < ( ! true ) ) + - 123 [ ! ( ! true [ "bar" | foo ] != ! - - foo ) >> 123 ] , ~ false ) and ( true % - 123 >= ~ ! ~ 123 and false * ~ ! ( "bar" ) ) == - ( 123 and 123 <= foo or "bar" << ~ 123 < 123 ) , ~ foo >> false [ ~ false . foo and "bar" == ~ - false ] == "bar" - 123 ) ;
 } ;
 } ;
 func foo ( ) int { foo ++ ;
 } ;
 func foo ( foo int , foo int , foo int . int . int , foo int ) int { - 123 ;
 } ;
 foo int . int . int ;
 } ;
 var foo int = false | - "bar" [ ~ ~ ~ ! ~ foo ( - ~ ~ ~ ( "bar" ) [ ( "bar" ) & ! ~ - - ! foo and foo ] or ! false ^ - ! - - true , true - 123 ) ] or - ~ - foo ;
 class foo { foo int . int . int ;
 foo int ;
 foo int ;
 func foo ( ) int { if ! ~ - - 123 [ - - ~ false ( - 123 , ~ "bar" or foo ) & - - ( ! - true * ! ~ - - 123 ( ) or 123 << ~ ~ foo ( ) ) [ true ] >> "bar" and - ~ - ~ false ] { for var foo int = 123 . foo != foo [ ~ foo ] < foo ( ~ ! "bar" or - - true ^ ! true ( ! foo and ! false [ foo >= false % 123 [ ! - 123 ] ] or ! foo and - foo . foo , true [ - 123 [ false ^ 123 [ ! - 123 . foo ] or true ] and ~ 123 or true [ 123 ] ] ) == true < ~ ( ( ( ~ ( - - - false and ~ - ~ foo | ! - ! ( - ( "bar" and - foo [ foo / foo ] / ! false . foo ) [ 123 ( ~ foo , ~ ~ true or - - 123 ) <= false ] == ~ true . foo ) <= - true [ ! ! - true [ - 123 ] - false ( ) % ~ ~ ~ true and 123 != ! ~ - ( - ~ ! ! ! "bar" ( ) << true ( foo , ~ foo ( false ( ) >= ~ true >> ~ ( ~ - - foo != - ! ! foo ) . foo / - - false , ! ! false ) + - 123 ( ~ false , "bar" ( ! true , true >> ~ 123 and ! ( true ) or - ( 123 . foo != foo ) % ~ ! foo ) ) ) ) or true | true [ ~ ( - - 123 or ~ true * - ( ! ( ! ~ ~ ~ ~ ( ! - - - 123 ) ) . foo ) >= true ) ] ] / "bar" . foo or ! false ) ) == ~ "bar" ( ! - - "bar" ( ) >> ( 123 ) . foo , "bar" == "bar" ) ) ( ) and ~ foo % - - ! true < false ) [ ~ false ] - ! ! "bar" , false ) or true ( ) ;
 ~ "bar" ;
 foo * true . foo ++ { foo or "bar" /= ~ 123 ^ ( ( - "bar" == ! 123 | ~ ( - false / false ) and foo ( ) or ~ ~ ! true ) << true - - - "bar" [ ~ ! 123 ] == foo . foo >> ~ 123 and foo > ~ ! ( - ~ - false ( - 123 and true , foo ( ) ) ) ( ) ) ( ) ;
 } ;
 } else { val foo int = ! false . foo ;
 } ;
 } ;
 func foo ( ) int { - ! foo >= ! "bar" -- ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int . int ) int { - ( true ) ( ) >= - false ++ ;
 } ;
 class foo { foo int ;
 foo int ;
 foo int ;
 func foo ( ) int { ~ - ! ~ true . foo or - ( - ~ false / ! false or - ! ~ 123 ) [ ~ "bar" and 123 ] and - false -= ! 123 and ~ false | - 123 < true ;
 } ;
 foo int ;
 } ;
 var foo int . int . int = ( false ) [ ( - true ) ( ) ] << foo ;
 class foo { foo int ;
 foo int . int . int ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) int { ( ! true ( ) ) -= ! false [ - - 123 ] ;
 } ;
 func foo ( foo int , foo int , foo int , foo int . int , foo int . int . int ) int { 123 -= - ~ true [ - foo ( "bar" [ "bar" > foo % ! false [ ( ~ - true == - true ) . foo & "bar" ] >> 123 + - - true and ( true . foo and true ) ] >> false , ! ( ! foo or - "bar" ) ( ) ) ] ;
 } ;
 func foo ( ) int { var foo int . int = "bar" >> true * ~ ! ~ foo . foo ;
 } ;
 foo int . int ;
 foo int ;
 } ;
 func foo ( foo int . int . int , foo int ) int . int . int { if ( true ( 123 [ ! ! - ~ - ( foo == foo ) < foo ( false , ~ "bar" ) and ! ! foo >= "bar" ] >> ! ! true . foo , ! "bar" and - foo ) or ( true ) ) . foo << ! true ( ~ false , false . foo ) & 123 { val foo int . int . int = foo and 123 or ! - - foo | ~ true * - - false ;
 } else { foo * ! true . foo -- ;
 } ;
 } ;
 class foo { func foo ( foo int , foo int , foo int ) int { if "bar" { val foo int = ~ - ~ ( ~ ~ false ) . foo ;
 } else { - ( ( false ) ) [ ! - ~ - - ~ 123 ] and ( ~ - - "bar" & - ! ~ true and ~ ~ foo ) ;
 } ;
 } ;
 } ;
 val foo int . int = ~ ~ ! ! 123 ( ) or 123 ;
 func foo ( foo int . int . int , foo int , foo int , foo int , foo int ) int { if - ~ ~ ~ false - ~ ! true > ~ ! ~ ! ~ "bar" ( "bar" , - ~ ~ ~ foo . foo and ~ 123 ) { if ( foo and ! ( ( ! ! ! ! true << - - ( - false ) != ( - ! "bar" . foo and "bar" or foo ) >= ~ - foo ) [ true ( foo [ 123 . foo and 123 ] % 123 ^ - "bar" and ~ ~ ~ ~ ! ! - - ~ ! - - ( ~ ~ 123 ) . foo , - ~ false ) ] or true [ ( ( foo >= - ! - ! ~ foo and ~ foo ) ) . foo ] ) ) . foo { var foo int = - 123 ( ) >= - ! ~ - true ;
 } else { - 123 ;
 } ;
 } else { ~ "bar" ^ ~ ~ "bar" == foo >= - false . foo | foo [ true [ foo >> false < 123 == true ( ! ( true ) [ ( foo ) . foo or true and "bar" ] | - - - ( ! ~ foo . foo or ~ foo ( ) ) , 123 ) and ( ( ! ( true ^ - ! ( ! ~ ! ~ ~ ! ~ ~ 123 ) [ 123 and ! ( false >= ~ 123 != ( ( ! - ~ "bar" ) [ ! 123 & ~ ( false [ false or - ( ( ! ~ true [ ( true >= foo or false ) * - true . foo + true & "bar" == - ! 123 and ( "bar" ) [ foo ] ] ) ) ( ) ] ) ] + - foo ) [ ~ false [ false % true and - true != ! foo [ ~ ~ ! ~ - ( ~ - foo . foo ) ] << ! false ] or ! "bar" & false >> ~ "bar" and "bar" ] ) [ foo % - ! ! true ] >= ~ foo ] ) . foo * ~ - 123 ) | ! foo >= ~ ~ "bar" | ! - foo ) [ - 123 . foo % 123 ] ] ] and ~ ! ! ~ "bar" or - - ~ ! "bar" >> - - false . foo + - ~ foo ;
 } ;
 } ;
 val foo int = ~ "bar" ;
 class foo { foo int . int . int ;
 func foo ( ) int . int . int { val foo int = ! "bar" . foo ;
 } ;
 func foo ( foo int ) int . int { val foo int = ~ ~ 123 or - ( ! ~ - ( true [ - ~ ~ ( - - true ( true [ ! ! ! 123 & true ] , foo or ( false ( ) ) ) ) & 123 ( ) ] & ! ( ~ - ~ - ~ ~ ! ! ~ false or ! true ) ^ - true and false ) ) and 123 ;
 } ;
 func foo ( ) int { - 123 / foo or ! foo [ - ( ! ~ ~ "bar" and 123 [ ! ~ false . foo > foo . foo + false ] >= ( "bar" ) ( ( ! ! foo ) and ! ~ "bar" >> ( ~ true ) , 123 ( ) ) ) ] -- ;
 } ;
 func foo ( foo int . int , foo int , foo int , foo int . int . int , foo int , foo int ) int . int { var foo int . int . int = ~ - ! "bar" == true ;
 } ;
 foo int . int . int ;
 foo int ;
 } ;
 class foo { foo int ;
 foo int ;
 func foo ( ) int { for val foo int = - - - ! 123 ;
 false . foo ;
 "bar" [ ! "bar" . foo ] > - foo and - foo % - "bar" [ - ! - 123 ] -= true { var foo int . int = 123 ( ! false == false ( ) , false ) == false ;
 } ;
 } ;
 func foo ( ) int . int { val foo int . int . int = false >> ~ ! ! ~ - ( false and - "bar" / ~ ! ~ "bar" == - false [ ~ ( - - false ( ) ) ( ) == ( "bar" ( "bar" . foo / foo , ! foo >= - - true . foo and false ) and foo [ ! false or false . foo * "bar" and ~ ! ! - "bar" ] ^ false << false [ ! 123 ( true [ ~ true <= foo and false ( ) | - 123 ] >> - ( ( ! ~ ! ! foo ) ) > - "bar" * ~ ~ ! ! 123 ( true , 123 . foo ) , - - false . foo ) ] ) and 123 >> ( ! ~ "bar" ) ] ) ;
 } ;
 foo int ;
 } ;
 var foo int = ! ! foo and false [ true or ~ 123 % - ~ 123 . foo ] % ! ! false or true ( ) ;
 val foo int = ! "bar" ;
 val foo int = ~ ! ! ! ~ - ~ ~ 123 ;
 var foo int . int . int = true ;
 var foo int = - ~ true [ ( ! false [ ! "bar" ^ true << "bar" < - false % ~ - ~ foo ] and - ! ~ ( ~ 123 ) | ~ true & ~ ( "bar" + ( true . foo ) or foo ) ( ) > ! - foo . foo ) >= - ! ~ foo [ 123 < ~ true >> ! ( 123 - - 123 . foo == false [ - - 123 . foo ] and - foo ( ) / 123 <= ! - true ) and ! - ! false ] ] / - false and - ~ false . foo == 123 [ false >= ! ! - 123 != - ! ~ foo + ~ foo or - - ( ( foo >> ~ false > false ) . foo ) >> 123 ( ) ] ;
 val foo int = ~ ( - ! ! ~ ! false > - ~ true ( ) ) >> foo ;
 class foo { foo int ;
 func foo ( foo int , foo int . int . int , foo int . int . int , foo int ) int { - ! false << ( foo ) ;
 } ;
 func foo ( ) int { if ~ true { - ~ - ( 123 ( foo [ 123 ] - true == false , - ! false ( ) ) | ~ - ~ ! "bar" ) ;
 } else { val foo int . int . int = ! - ! ( - "bar" ) ( false & ! ~ - - ~ ~ - 123 , 123 ) or ! "bar" ;
 } ;
 } ;
 func foo ( ) int . int . int { var foo int . int . int = - ! - foo ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int . int ) int { - ~ 123 ( ~ - ~ ~ foo [ foo [ ! - - ( - true ) * - ~ ~ - foo ] % true ] * - ! ! ~ ( - foo ) , ~ ( true ( ! ~ 123 and ( ! false ) / - ~ - ~ ! "bar" ( ~ true * "bar" , ! "bar" ) <= ! ~ ( ! ! ( ( 123 << ! ! true ) ) >> false . foo ) - true [ ~ "bar" ] * ! ( ( ( ( ! ~ 123 + ( 123 [ ~ ( false ( ) and foo . foo ) ] ) ) ) ) <= "bar" ( "bar" and ! true or "bar" , ~ true . foo or ( ( ! true == foo or true + ! ! false ( ~ - 123 . foo , foo ) <= ! 123 . foo and "bar" ) ( ) ) ) ) . foo , false | - - ( ( ! - foo ) and ! true . foo ^ 123 ) and ( false ) ) and 123 [ ~ ~ - ! ( foo / ! ( ~ 123 != false << foo - 123 ) >= ~ true % 123 ) ( true >= foo . foo and ! ~ true ( false [ "bar" [ - false . foo << - ~ foo == ~ foo ] ] | - ! ( 123 == foo ) . foo <= ! ~ - ~ - ~ ( ~ - foo % - ( ( ~ - foo ) . foo ) [ ! - ~ ~ ~ false ] < ! true ) , foo & ! ! "bar" + - "bar" % false ) , false or ( false != ~ - "bar" and true == ~ - - - true ) >> ~ ! "bar" [ ! false ] ) ] ) . foo ) ;
 } ;
 func foo ( foo int , foo int . int , foo int , foo int ) int { ! ! ~ ( 123 ( - ! "bar" != false , - foo ) ) / "bar" . foo ++ ;
 } ;
 foo int ;
 foo int . int . int ;
 foo int . int ;
 } ;
 func foo ( foo int . int , foo int . int . int , foo int , foo int . int , foo int ) int { - ! true /= true - - foo ;
 } ;
 func foo ( ) int { ! - - false != false > 123 * false -- ;
 } ;
 func foo ( foo int , foo int , foo int , foo int . int . int , foo int ) int . int . int { val foo int . int . int = - "bar" ;
 } ;
 func foo ( ) int { ! ~ ( ! - true % ! true ) >> ! ~ ~ ~ ~ ! ! "bar" ^ - ~ ( ~ false ) ( ) < ( ~ 123 ) ;
 } ;
 var foo int . int . int = foo and true . foo << true [ false & false or false ] or ! ~ 123 . foo ;
 func foo ( foo int . int . int , foo int , foo int , foo int . int . int , foo int , foo int ) int . int . int { - ~ false % ( ~ ! ( true | ( false ) [ - - - "bar" - 123 != ! 123 [ ( foo ) * - - - - ~ 123 ( ) == ~ true [ ( "bar" [ 123 or ( true . foo and true ) ] ) ^ ~ ~ - ! foo ] and - - false ( ) << ! 123 ] + ! false [ ! foo ( 123 , ~ foo == ! - ~ foo ) * ! - ~ false ( ) ] ] ) ( ) ) and ( true ) >= ( ( false [ "bar" ( ) & - ! ~ ! "bar" ] ) << - - ! ~ "bar" or foo [ ~ false != ( ~ true / - ! ! false ) [ "bar" or - true ] << ( - foo or "bar" . foo ^ - 123 . foo >= "bar" ) ] ) -- ;
 } ;
 val foo int = ~ false ;
 class foo { foo int . int . int ;
 } ;
 class foo { foo int ;
 foo int . int . int ;
 } ;
 func foo ( foo int . int , foo int , foo int ) int { true . foo & - ( 123 ) . foo and ~ 123 + ~ - true -= true - ! ! - ~ ~ 123 or - ( 123 > ~ ( foo - - ! false or true ) ^ ~ ! - ~ false ) ;
 } ;
 var foo int . int . int = "bar" . foo ;
 val foo int . int . int = 123 ;
 var foo int = foo . foo != true / foo ;
 val foo int . int = ! ! ~ ( "bar" ) [ true ] == "bar" and ( ~ - 123 ^ - false % - - ( ! 123 - 123 ) and true [ "bar" << false ] or "bar" >> true ) ( ) ^ ! foo ;
 val foo int = "bar" ( false , ( ! false ) or "bar" ) and - ~ "bar" % - 123 ( ) >> - 123 ;
 class foo { foo int ;
 foo int ;
 foo int . int ;
 foo int ;
 func foo ( ) int . int . int { if true { if foo [ - - - ! true and false . foo & true ( ) << ~ ~ foo + foo ] { val foo int = "bar" ( foo , - ( - 123 ) ) ;
 } else { "bar" % true . foo and false -- ;
 } ;
 } else { for val foo int . int . int = true or ~ ~ ! false / 123 ( ) ;
 ( 123 or - "bar" | foo . foo and ~ ! true << "bar" / false ) != - foo ;
 ! ( ~ ~ ! - ~ ! - ! ~ 123 ^ ~ ! true ) or true << ! 123 ++ { ~ false ++ ;
 } ;
 } ;
 } ;
 foo int ;
 } ;
 class foo { func foo ( foo int . int . int , foo int , foo int . int . int , foo int , foo int . int ) int { val foo int = - foo ;
 } ;
 foo int . int . int ;
 foo int ;
 func foo ( ) int { for val foo int . int = 123 or true and "bar" ( - ! ~ true != - ! 123 . foo / ~ 123 [ ! ~ - ! 123 ] < - 123 . foo , ~ ~ 123 or true [ ! true and 123 ] * ! ( ! 123 * 123 ) [ "bar" ] != ! ~ foo . foo ) ;
 ! false >> ! 123 or "bar" . foo >> true . foo ;
 ( ~ ~ ~ ( 123 ) % ~ - - false >> ~ ( ! - ( 123 ) ) % true ) <= - ~ ~ true . foo *= - ~ - - 123 ( ) { if - ! foo { foo -- ;
 } else { foo ++ ;
 } ;
 } ;
 } ;
 foo int ;
 } ;
 class foo { foo int . int . int ;
 func foo ( ) int { ~ true != foo . foo & "bar" . foo and true == ~ - ~ - ~ false [ ! - ~ - ~ true . foo ] ^ 123 %= true [ true . foo << ( 123 or "bar" . foo ) ] ;
 } ;
 func foo ( ) int . int . int { 123 += 123 . foo != ( false ) < - true ;
 } ;
 foo int . int ;
 foo int ;
 } ;
 var foo int = true >> "bar" ;
 class foo { } ;
 
