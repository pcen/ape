module foo ;
 val foo int = false . foo > ! - ! ! ! ! - ! - "bar" . foo ;
 val foo int = false ( true [ ! - "bar" ] ^ 123 ( false + foo [ ! "bar" [ 123 >= ~ true ] ] , 123 / ~ ! "bar" [ "bar" ] != true ) , - ! - true [ - ! ( ~ 123 ( ! - foo != ! 123 , "bar" [ ! true ] >= - 123 ( - ! ! ( foo ) , ~ - - ! - - ~ 123 [ foo ] * "bar" != foo > - ! ~ - foo ) ) ) ] / 123 ) ;
 val foo int = false ;
 val foo int = "bar" ;
 func foo ( foo int , foo int , foo int , foo int ) { "bar" > - 123 & ~ ! - ! - ! foo ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) { true == false ( ( ! true [ ~ foo ] > ! ( ~ 123 - ( false ) ( 123 , ~ ! ~ - ! foo | true ( ~ ~ - - false + false [ - "bar" . foo ] , false ) ) ) / - ~ foo . foo ) , - ( - foo ( ( - ! "bar" [ - ! 123 ] ) , true / ~ ! ! ! true ( - true & - ! foo [ 123 ] , ~ 123 ) ) ) [ ~ - foo ] >= foo ( false . foo , ! ! ~ - false ( true . foo , ! false ) ) ) -- ;
 } ;
 func foo ( foo int , foo int ) { true ( ! ~ ( "bar" ) , ~ foo [ ! ~ ~ ! ~ - "bar" ] ) ;
 } ;
 class foo { if false { false ;
 } else { for val foo int = ! foo / "bar" ( ~ foo > true , true . foo ) < foo ;
 foo - 123 . foo != ~ ( ~ ~ ! "bar" [ foo / false ] ) [ ~ foo == ( ~ true ) [ - false ( ~ ! false , "bar" / false + false & ! ! ~ - foo ) ] <= ( ~ true . foo ) ] ;
 ! ! 123 [ "bar" == ~ ! ~ - true ] += 123 ( false | ~ "bar" > - false , 123 . foo * 123 < ! 123 ) { foo [ ~ ! - true ] = 123 ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int ) { if - "bar" ( - 123 , 123 == - foo . foo <= ~ ~ foo ) { for val foo int = ~ 123 ;
 - - ! ~ - ~ ~ - - ( true . foo == foo ) ;
 ~ false *= foo . foo >= ~ ( ~ ~ - false >= foo ) | - ! true { foo . foo = - ( ~ ( false ) . foo ) ;
 } ;
 } else { - ~ ~ 123 ( - - - ( "bar" ) <= 123 [ ~ ! - 123 ] , 123 ) + ! ~ false -= ! false ;
 } ;
 } ;
 class foo { if 123 [ - - true ^ ! ! ( true ) [ - foo . foo == ~ ~ true ] & true ] { for val foo int = - ~ ! 123 ;
 123 [ 123 [ - foo ] ] ;
 - ( 123 ) += ~ true [ ! ~ foo & "bar" | - 123 != ! ~ foo & ( 123 ( ! false , ~ - true [ 123 [ true != ! "bar" ] ] ) | ! "bar" ) ] { for val foo int = - 123 > - foo ;
 false ( true | foo [ ! ~ foo [ ( - ! true ) ( ! - ( false ^ 123 [ 123 ( foo , - false ) ] * ( 123 ) ) . foo & true ( ! true , ( 123 ) ) , ~ ! - 123 ) ] ] , 123 ) ;
 ~ true ( ~ 123 , "bar" . foo ) ^ ~ "bar" { if - - 123 / ( false ) { if true | - ! ( - "bar" ) { if ( "bar" ) { true ++ ;
 } else { ~ true ;
 } ;
 } else { for val foo int = - foo ;
 foo ( ! - 123 , true ( "bar" ^ foo [ ~ 123 ] , - false != ! "bar" ) ) ;
 ! - ~ "bar" { "bar" ++ ;
 } ;
 } ;
 } else { if - - "bar" . foo { - foo ;
 } else { ( 123 ) ++ ;
 } ;
 } ;
 } ;
 } ;
 } else { if "bar" / ~ ~ - - ! - true < 123 [ ~ ! ! true ] { ! 123 ;
 } else { - ! "bar" [ ( - "bar" ) == "bar" * 123 ] ;
 } ;
 } ;
 } ;
 var foo int = ( "bar" ( ~ 123 , false [ ! ! ( ( ~ ! true ) ( true * ! ! - ~ true , ! "bar" ) ) ] ) ) . foo >= ~ ~ foo ;
 class foo { if foo { if ~ - - ~ ( ( ~ "bar" . foo ) ) { for var foo int = 123 | - ! false >= - true ;
 false ;
 foo -- { if ! ! 123 { if - false | ~ ! - true { for var foo int = ~ ! "bar" ;
 ! false ;
 - "bar" ^ - ! ! ! true >= "bar" [ "bar" == ! ! foo ( 123 , 123 ( - - ( ! - true != - ! ~ 123 ) , "bar" . foo ) ) ] + 123 ( ! "bar" & - false ( true , false [ 123 != - - "bar" ] ) <= false , false & ~ - "bar" ) -- { if ( ~ true [ ~ foo / ~ ! ~ ! foo | ( true / ( - 123 == ~ foo - 123 ) . foo ) . foo > 123 ^ foo ] & foo ) { false **= - ! ( - ~ foo ) ;
 } else { for var foo int = 123 ^ ~ true / ~ ! ~ false ;
 - foo ;
 - ! false ( true == ! ( ~ 123 ( ! ! "bar" , ~ - - ~ ! false [ - "bar" != false ] != true ) * 123 ) , true <= ! ~ - ~ ~ ~ false . foo ) /= true & "bar" [ ! ! foo ] { foo [ ! ~ 123 * foo ] > ~ false ( ~ ! ~ ~ - - 123 ( 123 ( false == - ~ foo , true ^ foo . foo ) , true ) , ! - - true ) -- ;
 } ;
 } ;
 } ;
 } else { false ++ ;
 } ;
 } else { false -- ;
 } ;
 } ;
 } else { for val foo int = - true ( foo , ! ~ "bar" ) ;
 ~ foo & false != ! ~ "bar" [ true ] ;
 ~ ~ ! - foo ++ { if - "bar" . foo > ! ~ ( - true ) . foo { ~ ~ - - foo . foo & ! true ++ ;
 } else { ~ true . foo ++ ;
 } ;
 } ;
 } ;
 } else { ~ ~ ! false == ! ! ! ! foo ( 123 , ! ~ ! ! false ) ++ ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int ) { ~ false ;
 } ;
 class foo { for val foo int = ~ foo ;
 ! ~ false ;
 false >= ! ! 123 += ~ "bar" < ~ ~ foo { for val foo int = false / true ;
 - foo > ~ "bar" [ ~ ~ "bar" [ - "bar" ] ] ;
 ~ - false { for var foo int = ! - true . foo * ( false ) ( - ! ! - ( ! ! "bar" ( ! 123 | ~ ! "bar" , ! false <= ~ ! true ( "bar" [ true [ ~ ~ false ] & ! - true ] / - ! - foo , false ) & false ) ) & ! - false < ~ ! true [ foo != - ! "bar" ] , ! false ( ~ true ( ~ ! ! true ( ! ( false ) > true != ! ~ - "bar" [ - true ] >= ! ! ( ! "bar" ( true / ! ( ! - ! - - ! foo ) , 123 . foo ) ) ( ~ false != false , true & true ( - ! ( ! true ) . foo - ~ ~ foo , - ( "bar" ) != ~ - "bar" ) != ! "bar" . foo ) , ( 123 ) . foo == 123 <= "bar" [ ~ foo ] - ~ true ) , ~ foo ( ! true , - ! foo ) != "bar" ) * "bar" . foo , ~ - "bar" ( - ! ~ - "bar" , ! - - ! ! ! foo ( ! 123 & foo . foo , 123 ) ) ) / ! ! "bar" - false ) ;
 true - foo [ ! ! foo . foo ] ;
 ( "bar" / ( "bar" - true == ~ "bar" ( "bar" == 123 , - true . foo | true ( false , - ! false == ! - - true >= false ( "bar" - - ! ! ! foo , true | - ! ! ! true [ true ] < foo == ~ ! 123 [ - true ] ) ) ) ) . foo ) ( foo , ( 123 & "bar" ) ) *= ~ ! ! 123 { ! "bar" [ ~ foo ] = ( true ) ;
 } ;
 } ;
 } ;
 } ;
 class foo { foo ( ( ~ ( false . foo ) . foo ) [ - ~ false . foo > foo ] != "bar" , "bar" ) -- ;
 } ;
 val foo int = foo ( ( - true * true ) , foo ) != - - ~ "bar" ;
 class foo { if - ! ! ~ "bar" ( ( ! ! false ( ! ( foo & ( ( ~ ( ~ ~ "bar" + ~ true [ "bar" ] ) / ! - ( false >= ~ true == foo ) ) ) . foo ) , ! ( ~ ! ! foo == ! ! - ( true ) ( ~ false ( "bar" * - ~ - - ~ ( - "bar" ) > - ~ true , ~ false . foo ) , 123 ) ) ( ! ~ false , ! 123 ( false , true ) ) ) == ! "bar" ) ( ! ! ~ foo | ~ - - - foo [ ~ ~ false ] , ~ - ! ~ ~ ~ "bar" ) , false ) { if ~ 123 { ~ - ( ~ ( false ) | true [ false [ foo [ foo . foo ] ] ] ) != - ~ - 123 . foo | ( ~ ~ - foo ) /= - ~ - false ;
 } else { for var foo int = - ~ ! ( false ) ;
 false [ "bar" ] != ! "bar" [ "bar" ( - ! 123 , foo - ! "bar" [ ( true ) [ false ( ! ~ true < "bar" , - 123 ( 123 / true ^ ~ ( - - true ) , true ) ) ] ^ ! - 123 ] ) ] ;
 - "bar" . foo += false { ( ( foo > 123 ) [ false != - true ] ) [ ! 123 . foo ^ ! - 123 ] -- ;
 } ;
 } ;
 } else { if ~ ! ! true { if ~ ~ "bar" . foo { if "bar" . foo { for val foo int = ! ( - "bar" . foo == ~ ~ foo ) ( false . foo , ~ 123 | - 123 [ foo . foo != false ] ) & false ;
 123 [ 123 ] ;
 ~ - ~ ~ ~ 123 /= ~ ~ true <= false . foo + ! ~ ! - - false { if "bar" { false / ( true * "bar" ) != false ( - ! ! ~ foo != 123 > foo , ! false ^ ! foo ) -- ;
 } else { if ( - 123 / ( foo & 123 ( ( false ) * - foo | - "bar" , ! ~ ( ~ ( ! true [ "bar" ] > ~ - foo . foo / ! ! 123 - 123 ) - 123 / ~ - ~ true ) ) != "bar" . foo ) ) | foo { if true { - ~ ~ false ++ ;
 } else { false [ ( ~ "bar" ( - true , ~ true ) ) ] | "bar" ;
 } ;
 } else { if 123 ( false & "bar" , - - "bar" ) { if ( foo . foo ) { ! ! ( ~ "bar" ) < 123 & ( ~ 123 . foo != ~ ~ true [ ! ( ( foo ) / "bar" ) . foo ] ) ;
 } else { if foo / ! 123 ^ ( ~ ~ ! ~ true != ~ ~ false ( ~ ! foo [ ~ ~ ( ( false . foo ) ) ] != ! ! ~ - 123 + 123 , 123 != "bar" - false ) ) { - true ;
 } else { for val foo int = ~ ! false & false ( 123 , - 123 [ false ] >= - ~ foo ) - "bar" ;
 123 ( - ~ true , - ~ ! ! ~ ~ ~ "bar" ) != ( foo ) ;
 ~ - ~ - - true { false ;
 } ;
 } ;
 } ;
 } else { - ! "bar" [ ! ( ! "bar" ) . foo ] **= true [ - 123 . foo ] ;
 } ;
 } ;
 } ;
 } ;
 } else { for var foo int = true [ ~ ( ~ - ( 123 ) . foo / - - true ) ] ;
 foo / foo ;
 ( - ( false * "bar" <= 123 ) ) ( ! ~ - false , ! - ~ ~ true ) { for val foo int = ~ "bar" ( false , - true > - ( - ~ - true . foo <= 123 ) ) ;
 ~ ! ! - ! ! ! foo [ ! ! "bar" [ ! ! ~ false ( ( false * ! - "bar" + ~ true == ( ( "bar" ) ) ) | false [ ~ true [ ~ "bar" [ "bar" ] ] ] != ( "bar" * ~ ! ~ 123 >= "bar" ) . foo , ~ foo . foo & ~ true ) ] & ~ "bar" == - - ~ ! ( false | ( ! foo ( - - false , - false >= ! ! - foo ) ) . foo ) & - ! "bar" ] ;
 - - ( ! "bar" ( ! false , ( ~ foo [ false ] ) . foo ) ) . foo /= ~ ! foo ( false ( ~ foo + ~ ( ! - true ( ~ - ! ! ! "bar" , ! ~ ~ ~ true ) ) [ ! ! false [ foo [ ! true - - - false / false ( "bar" , - true [ ! foo ] ^ ~ ! ( "bar" * ~ false ^ true ) . foo ) == 123 [ ! ( ~ false != "bar" [ ! - ! ! - 123 [ ! false & ~ ~ true ] ] ) ] ] ] ] , false [ true ] * - 123 ( ~ true / - ( ! "bar" . foo ) , - ! false [ ~ foo * foo ] ) ) , ~ 123 ) { 123 ;
 } ;
 } ;
 } ;
 } else { if - 123 [ false ] { ! - ! ( ~ ! "bar" ) + ! ~ 123 ;
 } else { - ~ ! true ++ ;
 } ;
 } ;
 } else { false ++ ;
 } ;
 } ;
 } ;
 func foo ( foo int ) { ! - 123 ( ! ( ~ - ! - true [ ( - ~ ( false ) ) + false & ~ true [ ! ~ ! ! 123 ( ! foo & ~ 123 ( ! 123 , foo ) | false & ~ - ~ - foo < false , ! ( foo . foo == 123 ) + ( ( ~ false ) [ "bar" / ! foo | ( foo < 123 | - false ) ] ) . foo ) <= ( foo . foo ) ] ] ) ^ ~ - true < ( - ! - ! - - "bar" ) , ~ ( foo <= false ( ! ! ~ foo , ! false [ - ! 123 <= ~ ( ! 123 . foo ) ] ) == ~ "bar" ( - foo ( - 123 , foo ) , ! ~ ! - ~ ! "bar" ) ) ) / ( ! - ( - foo ^ 123 [ - 123 ] ) ) . foo ;
 } ;
 
