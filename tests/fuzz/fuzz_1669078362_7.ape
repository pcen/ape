module foo ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) { ! ~ ! ! "bar" /= - ( foo . foo ) [ 123 ] ;
 } ;
 func foo ( foo int , foo int ) { foo / true /= foo ;
 } ;
 val foo int = ! ( false ) ;
 var foo int = ( "bar" [ true ] | ( ~ "bar" [ foo ( ~ foo == ( - - - - foo ) [ ! ( - - 123 [ ! ( foo ) ] + 123 > 123 ) ] , 123 ) ] ) ) ;
 func foo ( foo int , foo int , foo int ) { ! true ++ ;
 } ;
 func foo ( foo int , foo int , foo int ) { ~ ( "bar" ) /= "bar" & ( ! foo ) ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) { for var foo int = true ;
 - ! ~ true ;
 - 123 ( ! "bar" | false , ! false ) { for val foo int = ~ ~ foo != ~ ! - true ;
 "bar" ;
 - foo /= ( ~ false ) < ( ~ 123 != - ! ! true ) { if ( ( 123 . foo / - foo [ ! "bar" * 123 > - true ] != ~ ~ false ) ^ ( true ) ) ( foo , ! false ) == ~ - ~ - true { for var foo int = foo ;
 "bar" * - "bar" < - ( ( - true ) & false > ~ false ) ( false [ - ( ~ true - false ) ( - true , - ~ - ( ( - - ~ false / false ) ) ) & ~ foo . foo ] , 123 + true ) ;
 ! - foo . foo >= - 123 != "bar" [ foo * - foo ] / false ( 123 , ~ ! 123 ) { for val foo int = ! "bar" ( "bar" [ - - ~ - ~ false [ ! ~ foo ] ] , ( ! ~ ! ~ foo > 123 ) [ false ] * foo [ - true ] ) ;
 ~ ! ~ ! ~ foo ;
 "bar" [ "bar" ] { foo ;
 } ;
 } ;
 } else { if "bar" & ~ false [ true [ 123 ] * false == foo > true ] ^ ! "bar" { false *= 123 ;
 } else { for val foo int = - 123 ;
 "bar" [ foo >= - true . foo - - foo ] ;
 - false { if - ( false . foo ) { for val foo int = ! true ( - ! "bar" , ( ~ ~ ( 123 == ~ ! ! - false ) . foo ) . foo ) ;
 ~ foo ;
 ! 123 { if ~ "bar" [ foo ] { if foo * - ( - ~ ! ( "bar" . foo == foo ) ) + - ! 123 { foo != ~ ! ! ! ! - ~ ( ( - - ! ! foo . foo / true ) ) . foo -- ;
 } else { - true ;
 } ;
 } else { if foo { true ( 123 , ! - - - - false ( ( - false ^ ( ~ true ) / ~ - true < foo ( - ! foo ( foo , ~ ~ foo ) , - - false ) ) , ! false ) ) & ! foo [ - ! ! - ! false != - ! - ~ - - true ] -- ;
 } else { if ( ! foo [ 123 . foo ] ) { ! - ~ foo . foo ;
 } else { false += ~ true [ ~ true [ - ! ~ foo ] > - ~ ! true . foo ] ;
 } ;
 } ;
 } ;
 } ;
 } else { ! foo . foo /= - false ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 class foo { for val foo int = ~ ~ ! ( 123 [ 123 ] * "bar" ^ - "bar" [ - foo & ! ( foo ( "bar" / true ( - 123 == false , - ~ true * ~ 123 ) >= ~ ( - foo ^ false ) ( false , - foo * "bar" . foo ) | ! ! - false , ~ false ) ) ] ) ;
 ~ - - "bar" ( false , - ( - ! ( ( foo ) ) & false ) [ foo - ! ~ - ~ ! 123 == ~ true ( 123 * ( ~ "bar" ) ( - ! ( - - foo ) , true . foo ) - ! true , - ~ - ( 123 [ ! ~ ~ false ] >= - true ) [ ! 123 . foo ] ) ] & ( "bar" ) ) <= ! foo [ - "bar" . foo ] / "bar" ( 123 , - ! ~ - foo != - true ^ ! - true ) ;
 ~ ~ ! foo . foo ++ { foo & true ++ ;
 } ;
 } ;
 class foo { for val foo int = ~ false ( 123 , - ~ ~ true != foo ) ;
 "bar" <= 123 & 123 == 123 & ! ~ ~ ~ ! ( false ^ ! false * ! true != ! ~ - true ) ;
 foo > false **= 123 [ false >= ~ ( true ) . foo ] ^ false { - true ( foo , - "bar" ^ "bar" ) ;
 } ;
 } ;
 func foo ( foo int , foo int ) { ~ 123 . foo + - ~ ! 123 . foo == - foo [ true - false ] += ~ ~ foo ;
 } ;
 var foo int = true ;
 var foo int = - "bar" ;
 val foo int = "bar" ;
 val foo int = "bar" ( "bar" <= ~ false ( 123 , - false ( ! - 123 . foo , ! true ) ) / - ! - foo . foo != "bar" , ! foo ) ;
 func foo ( foo int , foo int , foo int , foo int ) { if - - false != - ~ ! ~ ! ( ~ true [ true ( - true . foo , true [ 123 & foo [ - "bar" . foo ^ ! ! 123 ] ] & 123 != - - "bar" > foo . foo ) ] ) { for val foo int = - foo . foo ;
 ! false . foo ;
 ! ! - - ! 123 { for var foo int = - foo . foo ;
 true . foo ;
 123 **= 123 ( ! - true , true ( 123 , ~ 123 == 123 >= "bar" ( ! 123 * ( ~ - false >= ! - "bar" ) >= ~ ( 123 ) ( "bar" , ! false [ false ] ) , true ) ) ) > true ( - - ! "bar" , - true ( ( - true ) . foo / - - ~ true , ! - true ( false . foo , foo ( true & - - false , ! ! ( false ) ) ) + "bar" ( ( 123 ) , foo > "bar" [ ! ! "bar" == - "bar" ] ) ) ) | ! 123 { for val foo int = ! ! true . foo ;
 - false ( false ^ "bar" , 123 ( - ! - 123 [ - false | ~ ! 123 ] , ~ ! ! true ) / ( ! 123 ) ) == false ;
 ~ "bar" [ foo ] { if ( 123 ) { 123 . foo ++ ;
 } else { if false [ ! ~ - ( false ) | ! ~ true ] == ! ! foo { ! ~ "bar" & ! ! - - ( true ) ;
 } else { if foo { - 123 == foo ( false , ~ true . foo ^ foo > ( foo ) ) & ! ! ( false + true == ! ! foo ) . foo += - - ! - ~ - ! ( ~ ~ "bar" / 123 . foo > 123 ) [ - ! false ] ;
 } else { for val foo int = foo | "bar" ;
 ~ ! false | foo . foo ;
 ( - ! 123 >= - false * ! ! "bar" ) / "bar" += 123 { for val foo int = false ;
 foo ;
 - "bar" { if - ! "bar" { - ( false ) >= ! ~ ~ - 123 [ true ] ;
 } else { if foo ( foo [ ~ - ~ ! ! ~ ~ true == ! "bar" ^ true . foo ] , true ) { if - ! "bar" { ~ ! ~ ~ 123 -= 123 ( ! ! false , 123 . foo | ~ - ! ! true <= foo ^ foo ) - ~ - 123 ( - ~ true , foo - false ( ~ - - ! ~ 123 , true * ( "bar" * - ( ! ! ( - 123 * ~ true ) ( ! ~ ( foo ) , ! ~ ! 123 ) & 123 ) [ "bar" < ~ - false ] < 123 [ false ] ) ) & ! ( ! foo ) ) ;
 } else { - - ( true ( ( "bar" ) > "bar" | ! 123 , 123 ( ! true | ~ ! ! foo , ~ - ( true >= ~ ! ~ 123 ) ) / true . foo ^ ~ - 123 . foo ) ) * ~ "bar" ( "bar" [ 123 >= false ] - "bar" < ! 123 , ! "bar" ( foo , foo == ! ( foo ) ( 123 , - "bar" / - true ^ - false ) ) ) >= true == foo [ ( ! "bar" ^ ~ 123 ) ] = ! ( 123 ) ;
 } ;
 } else { true / ~ true . foo <= ! "bar" == ( "bar" ) . foo <= ! "bar" [ foo >= - ~ - false ] = 123 + true ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { ~ true ;
 } ;
 } ;
 var foo int = ~ foo != - - "bar" ;
 
