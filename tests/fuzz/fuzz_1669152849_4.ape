module foo ;
 class foo { for var foo int = - "bar" [ foo - ~ ! ! foo ] ;
 ! - ! ~ ! - - - - true < 123 [ false * ~ false - foo ] ;
 true ( ) ++ { if "bar" { ! "bar" ++ ;
 } else { for var foo int = - - "bar" [ - ! ( - - ( - 123 ) != foo <= ~ ! false ) <= - "bar" ( ) ^ - 123 ] < - "bar" ;
 ~ ~ ~ - true [ foo != ! ~ 123 ] ;
 ! - false /= - ( ! ! ~ ~ ( false . foo ) ) | - - "bar" != "bar" { - ! ~ ~ ( false ( ) ) ;
 } ;
 } ;
 } ;
 } ;
 val foo int . int = foo ;
 func foo ( foo int ) int . int . int { "bar" [ false <= ! ~ - ~ - ~ true ] != ( ! ~ true ( ) ) -= ~ - ! "bar" & false . foo ^ ! false ;
 } ;
 func foo ( foo int . int . int ) int . int { ( - ~ - ! false + ! ( "bar" . foo ) ) ;
 } ;
 func foo ( ) int . int { false . foo <= true . foo ^ - true [ foo [ ~ - - 123 . foo ] ] -- ;
 } ;
 val foo int . int . int = true ( ) & ! true == "bar" + 123 / true ;
 func foo ( ) int . int . int { foo ( true < ~ true , "bar" [ ~ ( "bar" ) ( ) > ( ! ~ "bar" == "bar" ) [ ~ ( true ) ] != - 123 ] != false ) ++ ;
 } ;
 class foo { for val foo int = true ;
 false [ true ] ;
 true . foo + ! - ~ 123 { for var foo int . int . int = "bar" ;
 123 ;
 ~ ~ ~ ! ~ false ++ { ! ~ ~ ( - false - ~ ~ ~ "bar" ) . foo >= 123 * foo ;
 } ;
 } ;
 } ;
 class foo { "bar" == 123 - 123 ;
 } ;
 val foo int . int . int = - true ;
 val foo int . int . int = - foo [ foo ] ;
 val foo int = ~ - true ;
 var foo int = ( false ( 123 . foo - ~ ( ~ true ) . foo , ~ ( 123 < false ( "bar" , ! foo ) ) != ~ ! ~ foo [ "bar" != ( "bar" ) ( false + - 123 ( - - "bar" [ "bar" ] & true , false ) , ! ~ ! ~ ~ ~ ~ ~ - ~ ( false ) & - 123 != - ! 123 > true . foo ^ false ) & - ~ - 123 >= ~ ~ "bar" ] ) ) ;
 val foo int = - ~ foo ;
 class foo { ~ false | ( ! ( ~ false - false ) < 123 ) ++ ;
 } ;
 val foo int = "bar" ;
 class foo { if "bar" { ! 123 ;
 } else { if foo [ "bar" . foo ] { true ++ ;
 } else { true ;
 } ;
 } ;
 } ;
 func foo ( ) int { "bar" ( ) & true . foo ;
 } ;
 val foo int = "bar" ;
 class foo { "bar" [ ! ( ! ( - ! ! ~ "bar" ) ) ] ;
 } ;
 func foo ( ) int { for val foo int . int . int = - ( ! 123 & ! - - "bar" ) ;
 ! false ( ) | true ;
 true > 123 ( ) * - ! - - "bar" . foo = - - - ~ - ~ - - true { for var foo int = ~ ~ true | true >= ! 123 | foo ;
 false ;
 ~ ~ false -- { if 123 [ ( ~ ~ ~ ! 123 ) . foo * foo ] { ~ ! - false -= "bar" ;
 } else { if ~ ! false { for var foo int . int = ! true [ - ~ - foo ] / ~ - "bar" . foo ;
 "bar" ( ) ^ ~ false [ ~ - true ] < ~ false ;
 ! ~ ! ! false . foo { - false / - ~ ! ( "bar" ) != false = ! true > ! ~ ! true ( ) ;
 } ;
 } else { if ( ( "bar" ) ) { for val foo int . int . int = 123 . foo ;
 ~ ~ ~ - true [ ~ "bar" ] ;
 ~ - - "bar" ( 123 , ! ! false . foo > - ! "bar" ( ) ) ++ { for val foo int = ! 123 ;
 foo ( ) ;
 ~ ! ! - foo != false . foo *= - true { - ! foo ( ) -- ;
 } ;
 } ;
 } else { foo ( ) ++ ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 func foo ( ) int { for var foo int = ~ false [ ( false ) ] < true ;
 ( - ! foo ) [ 123 ] ;
 ! ~ "bar" ( ~ ( ~ "bar" != ~ - ( false == 123 [ ( true ) ] ) [ - ~ ( - ! ~ ~ "bar" ) . foo ] ) [ ( - ~ foo [ ! ~ ( ( - false ( ! ~ ~ "bar" , ! - 123 [ ~ ~ false . foo ] / ! ! 123 == true . foo ) | foo > ~ - foo ) ) == false [ ( false [ false < ~ ~ ~ - false ] ) [ ! - ~ 123 ] > false [ ~ 123 ^ false [ ! "bar" | ( 123 [ ! ( 123 [ true [ ! false [ ~ - ! 123 / "bar" ] ] ] >= false ) < "bar" ] ) ] != true ] ^ true [ - false ] ] ] <= ( ! ~ ( ! 123 ( ) ) ) ( ) == ! foo ) ] , "bar" / - false ) & ! ! false . foo < ! true + "bar" * - ~ true { for val foo int = foo [ 123 . foo ] < foo ;
 - false [ "bar" ] ;
 ! ~ false ++ { if ! false { for val foo int . int . int = true == false . foo ;
 123 ;
 "bar" **= - ! ! - - "bar" { if true { true [ 123 != ! false ] > - - true -- ;
 } else { if - false . foo + false { ! foo ;
 } else { for var foo int = ( ! foo ) ;
 ~ foo . foo / - "bar" ;
 ~ ! false = ( ~ ! ! ! ( ! ! 123 < ! "bar" ^ ( true [ ( ! ~ true ) [ 123 & ! 123 ] ] ) ) ( ( ! foo != - ! false ) , ! ( false != ~ ( - ~ - false ) ) != ! ! ~ "bar" [ - ( 123 ) ^ ~ 123 [ false != ~ 123 < false * ~ ~ ! foo ( ) ] ] <= ~ foo ) ) { if "bar" { if - foo <= ( ~ ( - foo ) ) { true - foo < false **= ! 123 ( ) ;
 } else { for val foo int = ~ ! - foo [ ! ~ - - ~ foo > ! ~ ~ ~ false != true ] ;
 false / 123 != ( foo - "bar" ( ) ) . foo ;
 ! - ( false < true ^ ! - ! ~ "bar" . foo ) [ true - ~ ! ! foo ( ! 123 , false <= - - true [ 123 != "bar" [ - ! true ^ "bar" . foo ] < false . foo ] ) ] -- { ~ false ;
 } ;
 } ;
 } else { for var foo int = foo [ true [ true != - foo ] == foo [ false . foo ] >= ! false ] ;
 ! ( ! - ~ false . foo ) ;
 ! ( ! - ( ~ - - ~ 123 ) ) *= ! 123 { - - foo ( ~ - true , ~ 123 ) ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { for var foo int = false * foo ;
 ~ ( ! false ) & ! ~ true > - ( false [ 123 == - ! true ] / ! ~ foo >= ( "bar" ( ~ ( "bar" ) , "bar" ) ) [ - foo . foo ] ) ( ) * - 123 ;
 true *= ~ ~ ! ( ! 123 [ true <= "bar" ( ) ] - ( ~ false ) [ ! ~ false ] ) { if ( ! false . foo - true . foo ) { for var foo int = 123 [ ! "bar" ] * ~ ! ~ ~ - ( true ) ;
 foo ;
 ! ! ! false ++ { if "bar" { ( - ~ ~ ~ ( - "bar" | ! "bar" ) ( false * ( ~ ~ - - true ( ) * false < "bar" ( ) ) - "bar" , ! - ~ ~ - ! - "bar" . foo | 123 ) ) /= true | foo & - - ~ "bar" >= 123 != - ~ "bar" [ 123 <= - "bar" . foo ] ;
 } else { for val foo int = - ( "bar" & ! foo ) ;
 foo != "bar" ;
 ~ false != "bar" += - - true { if 123 { ( ~ - false ) ^ ( - foo [ ! ~ foo . foo > false - 123 & false ] ) < ~ false [ false ( ! ~ ~ ~ ( "bar" ) ( ) <= - true , ! - ~ ! "bar" <= - ~ ! ! 123 . foo ) ] ;
 } else { for var foo int . int . int = ( ~ ! 123 . foo ) ;
 true [ ~ true ( ! ! false ( ~ "bar" , - ! false ) , ~ ! true ) ] ;
 "bar" { foo ++ ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { - 123 | ! ( false ) ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 val foo int = 123 == ! true . foo ;
 class foo { ( ( ~ "bar" ) ) <= "bar" ( ) ++ ;
 } ;
 func foo ( ) int { ! ! ! ~ ~ foo ;
 } ;
 class foo { if ! false != ~ false . foo { if "bar" { for var foo int = ! ~ - ~ ! 123 ;
 123 * - ~ ( false ) == ! ! false ;
 true = ! ! 123 [ ( foo | - ( foo ) ) ] & ~ ( - - "bar" ) { ! ~ ( ! foo ( false , ~ 123 ( ) * 123 ( ) ) ) -= - "bar" ;
 } ;
 } else { if ~ false [ foo ] * foo { false * ~ ~ 123 ;
 } else { ~ "bar" ++ ;
 } ;
 } ;
 } else { for var foo int . int . int = ( 123 ) ( 123 > - true , - "bar" ( ) & ! foo ) ;
 false . foo ;
 - false { - ~ ~ ( true ( ) - true ) . foo ++ ;
 } ;
 } ;
 } ;
 class foo { if 123 [ ! false & "bar" . foo ^ ~ foo ] <= ! false { true . foo ++ ;
 } else { ~ true == ( 123 ) ;
 } ;
 } ;
 class foo { if ( ~ foo ) >= foo . foo { ~ - ( ! ~ "bar" ) ++ ;
 } else { for val foo int . int = "bar" ;
 "bar" ;
 ( "bar" ) > foo { true -- ;
 } ;
 } ;
 } ;
 class foo { - false . foo == ~ - false ++ ;
 } ;
 class foo { if 123 >= foo { ~ ~ ! ! - true <= ( ! "bar" ( ! ! "bar" , ( ( - ! true ) [ false | ~ ( foo & true ) ] ) [ ! ~ ! "bar" [ "bar" [ - - true ] < - ! foo ] ] + ~ true ) ) **= foo [ ~ ! ( "bar" ) . foo ] + ! ! 123 ;
 } else { if ~ "bar" == ( foo * - ~ ! - - 123 ) { for val foo int . int . int = true ;
 123 ^ foo ;
 ! "bar" . foo ++ { if "bar" ( - ! ~ 123 , ! ( foo . foo ) . foo * 123 ) { "bar" = ! ( - - ~ - - - ~ - ! - ~ ! ! true [ 123 != ! true . foo ] / 123 ) ;
 } else { if - 123 { ~ ~ foo [ false ] != foo & - 123 [ foo [ foo ^ - "bar" ] ] -- ;
 } else { false -- ;
 } ;
 } ;
 } ;
 } else { ! false ;
 } ;
 } ;
 } ;
 
