module foo ;
 var foo int . int = ! - ~ foo << foo . foo ;
 class foo { func foo ( foo int , foo int , foo int . int . int , foo int ) int { if ~ - true . foo { val foo int . int = 123 ;
 } else { val foo int = ~ ! ! true & true ( ) ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int ) int { val foo int = foo and "bar" [ ! ~ ~ "bar" and - ( "bar" and ~ ! ~ "bar" << 123 ) >= foo ] ;
 } ;
 val foo int = - ~ ! ~ ! - 123 % - ~ ! foo [ false - false or ! 123 << - foo ] ;
 func foo ( ) int . int . int { val foo int . int . int = false <= foo ( - true , - - - foo & ( "bar" ) ) or ! foo - - ~ "bar" == ( foo and true >> true ) ;
 } ;
 val foo int . int = true [ ! foo ] ;
 func foo ( foo int , foo int . int . int , foo int . int . int , foo int ) int { for val foo int . int = "bar" & ~ ~ ! - false >= - ( ! 123 and false or foo ) ;
 ( foo ) ( ) & - - - 123 ;
 ! ~ false << ~ ( ! - 123 ( ! "bar" and ! false [ ! foo != ( foo ) . foo ] <= false . foo , ! foo == ! - - ( true / foo ) >> true . foo ) or ( ! 123 and 123 ) ) **= ~ foo [ "bar" . foo >> ! ! "bar" ] { for var foo int . int . int = false or foo ( ( "bar" << ~ foo ^ ! ~ ! - ~ false and ~ ~ ! ~ ! false [ ~ false == ! - ~ true ] ) , - - ! ( ( "bar" >> "bar" % foo ( ) and foo ( foo - ( ~ ( - ! - ! - - ~ "bar" [ - 123 ( foo - ( ~ ~ ~ ! false > - ~ true | - "bar" or 123 ) [ ! ! ! true ] , ~ foo ) and ! 123 ] << - ~ ! ( ! ! 123 ) >= true . foo + foo ) ) > ( ~ ~ "bar" . foo ) and false or ! ! ( false == ! - false + ( 123 ( ) / ! foo or - - ! false < foo ) and ! false ) and true , true . foo & 123 . foo ) ) > foo ) [ foo ] or ~ 123 ( ) + foo ) & ! ( ! ~ true < ! ~ ! 123 . foo / ! ~ ! - ( 123 & foo ) ) ;
 - ! false [ foo [ ~ ! - - ~ foo % ~ ~ ~ ~ "bar" or ( true [ foo or - ! ! true == foo | "bar" % true ( ) ] < "bar" ) ] << false ] == ! ! false [ ! foo >> ~ 123 and ! "bar" > - 123 ] ;
 ( ~ ( ( ~ foo >> foo ( true >= ~ - ! true [ - ! ( false <= ! ~ true or - ( "bar" ) ( ! true and 123 , foo or ~ true ) / - "bar" and ( - - foo ) ) ] , ~ - false and - 123 <= ~ ( 123 or false != ~ "bar" . foo ) ) ) << 123 and - ! ( ! - foo >= ( true and ( 123 ) . foo ) [ 123 ( ) == ! foo * ~ ! ~ "bar" >= ~ ~ - ! 123 ( ) >> "bar" [ false [ ! false . foo ] ] ] or "bar" . foo >= ! true . foo ) ) ) { var foo int = ( true ( ) ) ;
 } ;
 } ;
 } ;
 class foo { foo int . int . int ;
 foo int ;
 func foo ( ) int { var foo int = - 123 > - - - - false ;
 } ;
 func foo ( ) int . int . int { foo + ( "bar" ( ) ) . foo == ~ - ! true / - - ( ( false ) >> true ( ( "bar" [ ! false ] ) & ! true and 123 , 123 ) ) **= false . foo ;
 } ;
 func foo ( ) int { val foo int = ( true ) ( - "bar" ^ true , 123 ) < ( false << ~ - ( foo >= ! - - ~ foo == ! - ( ~ ( "bar" ) ) ) ( ) ) . foo ;
 } ;
 func foo ( foo int . int . int , foo int , foo int , foo int ) int . int { ~ foo -- ;
 } ;
 } ;
 val foo int . int = ! 123 << "bar" [ true ] ;
 class foo { foo int ;
 foo int ;
 foo int ;
 foo int ;
 foo int . int . int ;
 func foo ( foo int , foo int , foo int , foo int ) int { "bar" += ~ true . foo ^ "bar" . foo ;
 } ;
 func foo ( foo int , foo int . int ) int { val foo int . int = true and ( ( true ) ( ~ 123 , - ! ( false . foo ) and - "bar" [ foo ] ) and - ( foo != ! true or "bar" . foo ) . foo ) ;
 } ;
 } ;
 func foo ( foo int ) int { 123 . foo %= foo ;
 } ;
 func foo ( foo int , foo int , foo int . int , foo int , foo int . int . int , foo int ) int { for var foo int . int . int = ~ ( ! 123 and ! true == foo > ~ ! - ! false ) ;
 ! ~ foo or true ;
 ~ - - ! - "bar" += ! - ( ! ! ( ! false >> foo [ ~ - true % 123 ] ) <= ( ! ( true << ( "bar" [ ! "bar" or ~ foo ] ) ( true or foo , "bar" ^ 123 >= 123 and false ) + 123 ) - foo == foo >= ( ! ~ - ~ ! true ) [ ~ ( ! ~ ~ foo == false . foo and false ) . foo and true ] << ~ - ~ ( "bar" >= foo * - true ) ) . foo ) ( - - - ~ 123 - foo [ 123 or ! true ] % ( false . foo ) , ~ "bar" >> "bar" ) / ! ( ~ true [ 123 . foo & false - ( true ) [ - false . foo ] & - ~ false == ! false or false ] ^ ! false ) . foo { foo << true > ~ - ~ "bar" . foo / ~ foo = ~ foo == ~ ! "bar" ( ~ - false , - foo >> false < "bar" ( "bar" & true [ ( - ~ ~ "bar" . foo ) . foo >> ( true ) and ( false [ true ] ) ] << ! - "bar" - ( ~ "bar" ) [ ! ~ - 123 or ! ~ 123 [ - false or ! ! - ( ! ( false >> ! ! ! ~ false . foo + ~ ! foo or - foo <= true ( ) >> 123 and - ! ( - ~ ( true ^ "bar" ) == 123 >= 123 and ( true [ ~ 123 . foo == - foo . foo | true ] ) < 123 ( ) >> ~ foo . foo ) ) != true > true ) . foo ] ] , ! ! - ~ false >> foo ( ! - ! ( ( foo ) ) , false ( ) ) > true << false ) ) and foo ;
 } ;
 } ;
 val foo int . int . int = ( foo ) << - ~ false ;
 class foo { func foo ( ) int { var foo int = ! "bar" ;
 } ;
 foo int ;
 func foo ( ) int . int { ~ false ^ ! ! "bar" >> - false | - ~ - - ( ! 123 / "bar" | "bar" ) ;
 } ;
 foo int ;
 foo int ;
 foo int . int ;
 } ;
 func foo ( ) int { var foo int = true and "bar" == false ;
 } ;
 class foo { func foo ( ) int { val foo int = 123 ( ! ~ ! ! ! ! - ! ! ~ - ( ! false * ( ! foo . foo ) [ ( 123 == ~ ~ ( ! "bar" [ true >> "bar" ] * ~ false ( ) < ~ ~ - 123 . foo and true ) . foo - ! ! - foo ) ] << true ) & "bar" , ! "bar" . foo ) >> - ! ~ 123 ;
 } ;
 func foo ( foo int . int , foo int , foo int , foo int . int ) int { ! ~ "bar" ++ ;
 } ;
 func foo ( ) int { var foo int = foo ;
 } ;
 foo int ;
 func foo ( ) int { val foo int = true ;
 } ;
 func foo ( ) int { val foo int = ! true . foo ;
 } ;
 } ;
 func foo ( foo int ) int { foo ( ) <= 123 == ( ~ foo ^ foo [ false != false . foo and ( ! ~ - "bar" [ "bar" ] ) ( - true == ( false [ false == - true < foo ] and false . foo - - true ) % ! - true < false ^ true << ~ - ~ 123 ( ) , ! ! foo >> true . foo % ~ - ! foo ) ] != ~ ~ ~ false ) - false *= - - foo ;
 } ;
 func foo ( foo int . int . int , foo int , foo int . int . int , foo int , foo int , foo int . int ) int . int . int { if ! - ~ "bar" + - false ( ! ! "bar" , ~ ~ false ) << true ( ~ false , ! true >= false ( ) ) - false { "bar" >> ~ false ++ ;
 } else { true ( ~ - - - ( true << - foo ) ( ~ false | "bar" [ foo [ foo ] | false [ "bar" . foo ] ] , ! false ) <= ~ true , true [ - ! "bar" ^ 123 ] <= - ! - true . foo - "bar" . foo / ~ foo [ 123 ( ( true > - - - ~ "bar" [ ( true . foo ) ] or - ~ foo ) [ - ~ "bar" ] , false [ ( ! ! "bar" and true or - - false ) ] == ~ ! - ( ! - 123 ( ~ ! true ( ) , ! - ~ ! foo . foo - - foo [ - - foo ] ) | ~ true and false ( ! 123 | foo , ~ - ( - ( false > ~ ( ( ! true ) ) ) and ! ~ foo ) * ! - - true ) ) < ( false << true ) ( ! - ( false << - - 123 ) ( - ! ~ false ( "bar" [ foo ] and ~ ~ false + - true or false , - - false - "bar" . foo >= ~ - ~ ! foo [ true ] ) and ~ ! ! "bar" , ~ ! ~ false ) , - ~ true - true [ 123 ] or ( ! 123 ) ) and ! false ( ! 123 [ ~ false ] , ! - ! ( ~ ! ~ false << "bar" . foo * foo <= - 123 ) [ 123 ( ) != ! ! ! ~ true - false ] ) ) ] ) ++ ;
 } ;
 } ;
 class foo { func foo ( ) int { for val foo int = 123 >> ! 123 ;
 "bar" [ ( ~ 123 + - ~ false << foo ) . foo ] and "bar" >= 123 ;
 foo <= foo and foo - - ! ~ 123 { val foo int . int = ~ ( ! ~ ~ ! ~ 123 ) . foo ;
 } ;
 } ;
 func foo ( foo int , foo int . int ) int { val foo int . int = ( ~ ! ! ~ ( foo ^ - ~ ( ( "bar" % - - ( ! true and foo ) [ "bar" >> ( true [ ! ( ! ! - foo ) or foo > "bar" & true ] ) . foo or foo ] and ~ foo | - ~ ! true ) [ ( ~ ~ ! true [ true or ~ foo [ ! - - false [ - - - ~ foo ^ ( ( ~ - true >> false [ - ~ 123 ( "bar" / ! ( - true ) | false << - ! "bar" and foo <= true , - foo % ~ foo ) ] & true <= ! ( "bar" . foo ) ) . foo ) << ! - "bar" . foo ] ] ] ) ] * ! "bar" . foo == true + ! true [ foo ] >> ! ( ! ~ ~ ( "bar" - ~ ! ! 123 and ! ( ! - ~ false ^ 123 [ ! 123 << ~ - ( ~ foo - ! 123 and ! foo - - - ! foo [ true . foo ] != ( true | ( ! ! - ~ true and true [ true ( true . foo - 123 . foo , true ) ] * ! false ) < - "bar" ) . foo ) <= ! ~ ! ( - ! true [ foo . foo ] >> ~ ! ! ( ! ! ! ~ 123 ) ( ) ) ( true ^ ( ( false | true ) ( ) ) , "bar" % true ) ] ) ) ) [ 123 ( - 123 . foo << ( ( true % - true ^ ~ false ) or 123 . foo ) , ~ ! - ! ( ~ false + foo and 123 / ~ ! 123 . foo + 123 ) + ~ - ~ ! ~ foo or ~ ~ - 123 << ! false ) ] ) << ! ! true == foo + true ) > - "bar" [ true >> "bar" [ ! ! false . foo * ~ ~ "bar" | ! true or ~ - ~ ! ( ! - false ) == ~ 123 ] > 123 . foo or ! ! "bar" <= foo % ! ~ "bar" [ "bar" >> false ] != ! ( ! ! ~ 123 << ~ - - ! false > - ! "bar" ( ) ) ] ) [ ~ foo ] ^ ! - ~ ! true ;
 } ;
 func foo ( ) int { if ! ~ ( ~ ! ~ ! ~ foo . foo ) { ~ 123 [ ~ false > ! ! false - foo ( false and ~ ~ 123 , ( foo % "bar" != false ) or true <= ! ~ ! - - 123 ) ] ;
 } else { ~ false == false ( ) % 123 ( ) - "bar" ( true , false ^ ~ ~ ! ( ~ foo ) / - - false ) / ! true or ! "bar" > "bar" and ~ ! "bar" ;
 } ;
 } ;
 func foo ( ) int { - false and ! ( ~ ! ! "bar" ^ "bar" != 123 ^ foo [ ~ 123 or - false . foo << foo ] ) >> ( ( "bar" or ~ foo . foo << true ) . foo << ( 123 ) . foo % - ( true < 123 % ~ false != ~ - false + - ! "bar" > false * ( - ~ foo and - true ) << ! ( ~ - - ~ ! foo ) or ~ - "bar" [ 123 ] ) ) . foo -- ;
 } ;
 foo int ;
 foo int ;
 foo int ;
 } ;
 class foo { } ;
 class foo { foo int ;
 foo int . int ;
 foo int ;
 foo int ;
 foo int ;
 foo int ;
 func foo ( ) int { if "bar" ( false and ( true ) , ! - foo / foo - "bar" and "bar" < 123 + ! "bar" ) { if true . foo { var foo int . int . int = 123 . foo & ! ! ( foo . foo ) << ! "bar" ;
 } else { for var foo int = ! ~ ~ ( true - true <= ! ~ ! false ) ^ "bar" ;
 foo and "bar" . foo != foo ( ) ;
 123 += ~ 123 and "bar" { var foo int = foo ;
 } ;
 } ;
 } else { val foo int . int = ! 123 >> ! - ~ "bar" ;
 } ;
 } ;
 foo int . int ;
 foo int ;
 func foo ( foo int , foo int . int . int , foo int , foo int . int , foo int ) int . int . int { for val foo int . int = - foo ( ) and "bar" ^ ! ! true ;
 - true ( ) ;
 - false . foo += ~ ! ! ! "bar" { ( ( ~ ( false ) and 123 < ! ( ( - - - - true ) ) ) % ! 123 ) ( ! - foo | false or true [ ! - - "bar" ] > foo [ ! ! ~ ~ 123 ] and foo [ 123 and - true ] , ~ ( true ) . foo / false <= ! ( ! - ~ ( ! ! ~ 123 ( true [ ! true + false or ( foo . foo ) . foo ] , ~ "bar" ( false ( ) ^ ~ ~ ~ ~ foo and ! ( ! ! false ) , "bar" ) ) ^ 123 ) << ! false != "bar" ) ( false . foo or ( foo ) , 123 ( - foo , foo ^ foo >= false >> ! ~ false ) ^ ! - ! ~ 123 ) ) - true . foo **= ~ foo ( ) >= - - foo ;
 } ;
 } ;
 } ;
 var foo int = 123 . foo % false and - true ;
 val foo int = true . foo ;
 func foo ( ) int { var foo int = ! true [ false and - false ( ) ] and ! - ( ! false or - ( ~ ( foo & true < - ! 123 . foo / foo ) / - 123 ( ~ ! false ( ) & ! - ! ( "bar" - foo << false * - ~ false ) . foo , - ( ! ! ~ ! true [ ! ( ~ 123 ) | ( ! ! ~ true [ ~ ! foo and foo ] > ! true ) [ ~ ! ! ~ ( false . foo ) ] and "bar" ] ) ( ) % false or - true - - - "bar" ) ) ) ;
 } ;
 
