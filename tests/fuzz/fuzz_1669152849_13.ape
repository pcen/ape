module foo ;
 class foo { for val foo int . int . int = - ~ - ( - true ) ( ) ;
 ! ! false ;
 ( ( ~ ( ~ - - ! ~ ( - "bar" ) ) . foo == ! ! true . foo ) ) ++ { foo * - - - true >= - ~ 123 ( ) ;
 } ;
 } ;
 var foo int . int = foo . foo ;
 class foo { "bar" [ - "bar" ] *= true ( ) ;
 } ;
 var foo int = "bar" [ ! ! ~ foo [ ! foo ] != ! ( ~ ~ ( - foo ( ) == ~ false [ true ] ) ) . foo ] ;
 class foo { for var foo int = true [ "bar" ] ;
 ~ ! ! ~ false ;
 - "bar" ( ( "bar" < "bar" . foo ) ( ) , 123 ( false > - 123 , foo [ foo ] > - - ! false ) != false * - ! true . foo ) & true [ ~ false & ! foo == foo ( - - false , 123 ( ( 123 . foo ) , ~ true / ( true ) ) ) ] ++ { 123 . foo <= ! ! ! - 123 ;
 } ;
 } ;
 class foo { foo -= ( ~ 123 [ "bar" ] ) ( ~ foo & ! - "bar" , 123 ) != "bar" ( ~ false != "bar" [ true / 123 ] , - true ( ~ false , foo == foo [ ! foo ^ ~ "bar" ] | ! ~ ! true ) != ! - - true ( ) ) ;
 } ;
 class foo { - ! 123 -- ;
 } ;
 class foo { for var foo int . int . int = ! - foo ;
 ( ~ "bar" - true . foo ) >= ( ! ( false ) - true ) ;
 ! foo ++ { if foo { - false *= ~ "bar" / ! true ;
 } else { if true { - ( ! ~ false [ - ( ! false . foo ) >= ~ ! "bar" != ! ~ ~ - ~ ~ true . foo ] ) [ ! - ( ( true [ - ~ ( - - ( false ) & "bar" ) == - - ! - ( 123 ( ! 123 , true != false ) == "bar" [ ( - false ) ] | ( ! false . foo | ! false [ true [ foo ] ] & false ) ) . foo < - ! true ] ) ) ] ++ ;
 } else { "bar" / ~ - ! ! "bar" ^ true [ ~ ! ! - - 123 ] * - ! "bar" . foo -- ;
 } ;
 } ;
 } ;
 } ;
 class foo { true ;
 } ;
 val foo int . int = ( false ) ;
 class foo { 123 /= ! ( false ) ;
 } ;
 class foo { ! false ++ ;
 } ;
 var foo int . int . int = "bar" [ - true ] ;
 class foo { if ! - 123 . foo ^ true [ - true >= - ( - false >= ~ ( - false == ( - false ) < ~ true ) ) ] { for val foo int . int = ! ! ! 123 + ~ - ~ true ( - ( ( - - - true != true & 123 ) ) . foo , ~ false ) ;
 true . foo ^ ~ - - "bar" & ( true ) [ foo . foo ] >= ! false [ - 123 . foo ] ;
 ( ! ~ - true ) / ( - 123 . foo ) . foo { - ( foo . foo ) / foo . foo ;
 } ;
 } else { ! "bar" ;
 } ;
 } ;
 val foo int = 123 . foo ^ ~ ~ 123 ;
 func foo ( foo int , foo int , foo int ) int { for var foo int = 123 ;
 ! 123 & ! 123 ;
 - ( - false / foo ) . foo != false ( ) & "bar" { for var foo int . int = ~ false ( ! true [ 123 | ! ( ! 123 ) ] & ~ - ! ~ - ~ 123 . foo ^ ~ - false , 123 * ! ~ ! 123 != false <= ( foo ) [ 123 >= foo [ true ( - ! - ! ! ! ! ! 123 , "bar" ) ] ] ) & true . foo ;
 - false ;
 false != - ~ 123 - "bar" **= ( foo ) { for var foo int = 123 ;
 123 >= ( ( ( ~ 123 ) <= - false ( ! "bar" , ! ! ! ( - ! ~ ! - true - ( 123 == false ) ) * ~ ( ! - foo ) ) * 123 ) ) ;
 123 ^ true { for val foo int . int = - "bar" ( ) ;
 ! foo [ - ( ~ 123 ( ) ) ] ^ foo & foo ( ( - false ) , ! false [ ! ~ true >= foo ] ) ;
 - - 123 -- { - ( foo ) > ! "bar" . foo & 123 *= "bar" > - ! false [ 123 ] ;
 } ;
 } ;
 } ;
 } ;
 } ;
 val foo int = foo != - - ! 123 [ true ] ;
 func foo ( ) int . int { if ~ "bar" { if ! - ! ( ~ foo / - ~ true ) { for val foo int = ! ~ ~ true ;
 true ;
 123 * true { ( foo ) [ ( ! - ~ ! "bar" . foo ) ] -- ;
 } ;
 } else { if ( foo ) { - true ;
 } else { false ;
 } ;
 } ;
 } else { for var foo int . int . int = ~ foo ;
 ~ ( ~ - - 123 [ ! ~ true ( ) ] / ~ ! 123 ) [ foo ] < ( ! true != foo * ~ - "bar" ( ) ) ;
 "bar" [ "bar" / ( 123 ) != ! - true ] <= ~ ~ 123 * 123 { false <= true . foo **= "bar" | "bar" ;
 } ;
 } ;
 } ;
 class foo { if ~ false ( ) { foo = false ;
 } else { - ! ~ ! ~ ( ! - ~ ! ! false ) [ ~ ~ 123 ] != ! - ! - ! 123 ( ) -- ;
 } ;
 } ;
 val foo int = true | ! true * - "bar" ;
 val foo int = - ( 123 == - ~ foo ) == ( true ( ) ) [ ( true ) ] ;
 val foo int = "bar" ;
 class foo { if ~ 123 == ~ 123 { if - - true [ - true ] { 123 . foo = ( true ) / ( ~ - foo ( ~ 123 , foo <= ! true ) ) ;
 } else { ~ ~ ! - true ;
 } ;
 } else { if - 123 { false >= ~ - ~ foo -- ;
 } else { if false { for var foo int = false [ true <= ! ! ! 123 != - ! - ! - ! ~ ~ - 123 ] <= foo ;
 - true [ ( foo ( ) * true ) . foo / false [ "bar" <= false . foo ] ^ ~ foo ] ;
 ! "bar" -- { for var foo int = ( foo ) ;
 ! 123 ;
 ~ ~ false { ! true < - ~ ! - - foo -- ;
 } ;
 } ;
 } else { for var foo int = ( ! - ~ true . foo == ! ~ foo . foo ) ;
 false [ true ] ;
 ~ ( false [ false ] ) += - ~ - false { for val foo int = true ;
 - "bar" ;
 ~ false / true [ ! "bar" ] /= ! 123 { if ! - ~ "bar" { for var foo int . int . int = - - - - ~ 123 . foo ;
 ~ ~ ~ false ;
 "bar" - foo ( ) *= false ( 123 , - "bar" ) { ! ~ 123 *= ! ! foo ;
 } ;
 } else { ~ ! false -= - 123 ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int . int . int ) int . int { for var foo int = ! - true ;
 ( ! ( true [ false ] > 123 ) ) . foo ;
 "bar" *= ! ~ ! ( ( ~ ! ! ( foo / ! foo < - true * - 123 ) . foo ) . foo * true != "bar" ( ! "bar" , ( ! ( false & - ! - ~ ~ ~ 123 ( ) ) / false ) ) <= ! 123 ) { false > - ~ - - - ~ 123 == ~ ~ "bar" ( ! ~ - - - "bar" * true , foo ) ++ ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) int { for val foo int . int . int = - ! false ;
 ( - - ! ~ - ~ 123 ) ;
 false [ "bar" ] ++ { if ~ ! 123 { 123 ++ ;
 } else { if ~ ! ~ ~ false ( "bar" [ ~ false ( ) ] , ! - ( false ) | true ) { - true ( ) * foo ;
 } else { if foo . foo { ~ ~ - ( ! 123 ) + foo [ ~ true | ! true ( ) != - foo ] ++ ;
 } else { if ~ "bar" . foo { if ~ - "bar" / false { ! ! ~ "bar" . foo * ~ ( foo ) ++ ;
 } else { ! "bar" += foo . foo ;
 } ;
 } else { true * true -- ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 class foo { true * false ( ) /= ~ 123 ;
 } ;
 class foo { - foo ( false , ( "bar" ) ( 123 <= - ( ( - ~ ! "bar" ) ( - ( - false != "bar" [ "bar" ] ) , true == ! ! false . foo ) ^ - false ) , 123 ) - ~ ! ! ! - ( foo ( foo [ ! "bar" ] , ( 123 . foo & - - ( "bar" / - foo [ ! ~ - ! ! 123 ] ) ) ) ) ) ;
 } ;
 class foo { true ;
 } ;
 class foo { if - ! 123 { if ( 123 ) * foo { for var foo int = ! ! ( foo >= ! - "bar" ) [ foo . foo != - 123 & foo ] ;
 - - - false ;
 ( "bar" ^ true ) -= ~ false [ ( - true | - foo . foo ) ] { for val foo int = true ;
 ! foo * - foo ;
 foo ( - foo [ ( 123 <= "bar" ) * ! - false . foo ] , ! - "bar" ^ - ! ~ ( - ~ 123 * false - "bar" ) ) / true ++ { for var foo int = ~ ~ "bar" . foo ;
 123 ;
 ( ( - foo & 123 ) [ - ! false ] ) . foo { for var foo int = - ~ - ~ "bar" | ~ foo ;
 false ;
 foo ( - ~ foo , true . foo ) == ! - 123 -- { true -= 123 ;
 } ;
 } ;
 } ;
 } ;
 } else { ! 123 . foo - ( ~ false ) ;
 } ;
 } else { 123 * foo . foo *= ( ~ - "bar" >= - foo ) ( ! ( - ~ ! "bar" [ true ] ) >= 123 , ~ - - false <= ~ 123 ) < ( ! ! true ) ;
 } ;
 } ;
 func foo ( ) int { if "bar" { false - "bar" -- ;
 } else { if 123 { true ++ ;
 } else { if - - "bar" ( ! - ~ true / ! ~ ~ 123 , false [ true ] ) != ( "bar" ) { ! ~ false ++ ;
 } else { ! ! true <= 123 = 123 ;
 } ;
 } ;
 } ;
 } ;
 var foo int = ! false <= ! false ;
 class foo { for var foo int . int . int = ! - ~ 123 ;
 true ;
 false != true . foo / - false . foo { ~ - true ;
 } ;
 } ;
 class foo { - - ! - - - ~ "bar" . foo /= - true == foo ;
 } ;
 func foo ( foo int , foo int ) int . int . int { for var foo int = - ( ! ~ ! true ) ;
 "bar" ;
 false * false ( ) /= - - ~ false [ false . foo ] { for val foo int . int = - true ( ) ;
 false ;
 ( 123 == ! 123 ) [ ( false & ! ! ( 123 ( ) ) ) . foo ] { for var foo int = foo ( ) ;
 ( 123 ) . foo ;
 ! ( "bar" ) * ! foo < foo * ( ~ true ) ( ~ ~ ~ 123 , ~ true [ "bar" ] ^ ~ foo . foo ) { if ~ "bar" [ ~ foo ] != 123 ( ) { for var foo int = true ;
 ! ( ~ ~ "bar" & foo ) & ! 123 > "bar" [ ! 123 ] ;
 ~ foo { if foo [ ~ "bar" ] { for val foo int . int = - true ;
 - - ~ false ^ - foo ( ) ;
 123 <= - ~ true ^ 123 ( ) { ~ ~ - foo >= - ~ ! ~ true != ( ~ ~ - ! true ( true . foo , ~ ~ - ! "bar" != ( true != - foo [ false ( ) == ~ ! ( 123 & false ) * false ] ) [ "bar" != - - 123 . foo ] ) & ! true - - ~ ~ - 123 <= ( ! "bar" ) [ 123 . foo * ! - - ~ - ! ~ "bar" ] ) ++ ;
 } ;
 } else { - false ( ( ~ 123 ) , foo ) > false ;
 } ;
 } ;
 } else { ~ ~ 123 == foo ( true , - ! true ) ;
 } ;
 } ;
 } ;
 } ;
 } ;
 val foo int = ~ false ;
 val foo int = ~ foo ;
 func foo ( foo int , foo int . int . int , foo int ) int { foo = false ( foo == ~ - true , foo ) ;
 } ;
 class foo { for var foo int . int . int = foo ;
 false . foo ;
 "bar" <= ! ! true ++ { foo ( ) | false ;
 } ;
 } ;
 class foo { for val foo int = true ;
 - ~ 123 ;
 - ~ ( - ( ( ~ false ) ) ( ) ) ( foo [ ! ~ ( ( "bar" ( ~ - ~ ~ ! ~ ~ 123 ( - "bar" + ( 123 & - ~ ~ ~ "bar" != foo * 123 | - ~ ( ~ ~ ~ 123 . foo ) ) , - - ~ 123 ) , "bar" [ ! ~ ! ! - - ~ ~ 123 ] ^ ( true ) ( ) ) ) != ! ~ ( ~ foo [ 123 ] / ! ! true ) >= foo ) ] * "bar" , - true ) | ~ ~ "bar" ( ) -- { if 123 | ~ ~ false { true == ! - ! ( ! foo [ true | foo ] ) -- ;
 } else { ! 123 ;
 } ;
 } ;
 } ;
 func foo ( ) int { ~ ~ ! ~ ( ( - false ) ) -= ! ! - true & ~ false ;
 } ;
 func foo ( foo int . int . int , foo int . int , foo int , foo int . int ) int . int { - foo - ~ - ! 123 / foo ( ! ! foo . foo , - true ) -- ;
 } ;
 class foo { ! ! "bar" ( ) ;
 } ;
 
