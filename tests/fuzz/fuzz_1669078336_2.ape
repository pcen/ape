module foo ;
 func foo ( foo int , foo int , foo int ) { foo . foo -- ;
 } ;
 class foo { - true ++ ;
 } ;
 func foo ( foo int ) { if - - true { for val foo int = false / "bar" + 123 ;
 foo ;
 ! ~ - "bar" = - ! true { for var foo int = ~ true - ! ~ - ~ foo != 123 + ( - ( ! ( foo ) - "bar" <= ! foo ) == true ) [ "bar" . foo ] >= ! ~ ~ true . foo ;
 foo [ ! ! 123 ] ;
 ! foo /= foo { foo [ - 123 ] == ! ! ( ! 123 [ ! ~ false [ ~ foo + true ] + false ] ) [ true ] * true ;
 } ;
 } ;
 } else { false -- ;
 } ;
 } ;
 class foo { if "bar" > "bar" | foo ( ~ true , ~ - true [ ~ true ] == "bar" . foo ) { false -= - ~ ~ - 123 ;
 } else { ! ! - false == ~ foo * - ~ false ;
 } ;
 } ;
 val foo int = - ( ~ - false ) - 123 ;
 func foo ( foo int , foo int , foo int ) { if ! false <= ! foo { - 123 * "bar" == ! ! - - 123 ;
 } else { - - true ;
 } ;
 } ;
 val foo int = ! ! ~ foo > foo ;
 var foo int = 123 ( 123 != - foo , false ) ;
 class foo { for val foo int = ! ! ~ "bar" ;
 123 ;
 true ( 123 / true == foo ^ foo , ( 123 ( ( ( ! ~ false <= false ( - ( ~ 123 & ! foo < ! true ) <= ~ - ( true <= true == ~ 123 . foo ) , ( - ! - ( 123 ) == ~ ! foo ) * ~ - ~ ! ( 123 ) ) ) ) ( - false > "bar" ( false . foo , ~ false . foo ) , - ( ~ - - - ! 123 ) ( true == ~ false * 123 ( ! foo , "bar" ) , ! false ( ! foo , true ) ) ) + ! ! ! - true , true ) ) ) == false & ! - ~ foo ( ( - 123 [ false ] ) , ( 123 ) ( true ( ! - ~ true ( ! ( ~ 123 ( true [ 123 ] , ! 123 * "bar" ) - ! false ( true , foo ) >= - ~ false ) & - - ~ - ! false , true ) , ( ~ "bar" . foo >= foo ) ) , ~ true ) ) ++ { ! false = ( true ) [ true ^ - ! true ] ;
 } ;
 } ;
 val foo int = foo & ~ ~ "bar" . foo | true / "bar" == "bar" ;
 func foo ( foo int ) { if ( false [ ( - 123 ( ! ~ true >= ~ ~ ~ "bar" , ~ ! ~ - ( 123 < true [ true ] ) . foo ) == - 123 ) ] < ( - ! false ) [ foo ] ) . foo { - true | ! true != ! - ! ~ ( ( ~ "bar" ) . foo ) -- ;
 } else { if ( true ) - ~ foo { - - ! foo -= - true ;
 } else { if ~ - ( - ( foo < 123 ( ~ ! - true , "bar" > "bar" [ - 123 ] ) ) ) . foo == - false ( - - ! ! ! "bar" >= - - "bar" , - false == - foo ) + ! ! - ~ - ! ~ ~ - 123 { ! ~ - ~ ! ( false ) [ - 123 ] -- ;
 } else { for val foo int = "bar" ( "bar" - true , true - - ! ( false [ foo ( 123 , ! "bar" < ~ 123 ) == true [ foo & "bar" ] ] ) / foo [ ! foo ] ) ;
 123 ;
 ( - false ^ true ) | ( - true ( foo != 123 , "bar" ) ) . foo { if true { 123 ;
 } else { foo . foo < false ( ! ! - 123 > ( ( - ! "bar" [ ~ foo | foo ( "bar" . foo , - foo != false ) ] ) == ! ! "bar" ) [ - "bar" ] , 123 ) ++ ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 val foo int = ~ ~ true ;
 class foo { ~ ! foo -- ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) { if true ( ( ! ! foo != ~ true ^ ! ! ~ true ) . foo , true ) { for var foo int = true ;
 ! foo . foo ;
 false -- { - "bar" [ "bar" [ ~ false ] ] ++ ;
 } ;
 } else { foo . foo ;
 } ;
 } ;
 val foo int = ! - ~ ~ foo * 123 >= 123 ;
 val foo int = 123 / foo . foo ;
 func foo ( foo int , foo int , foo int ) { if false { if - - ~ true ( ! ! - ! - ~ ! false != true , ! ~ true == true ) { - true [ "bar" / ! ! ! "bar" ] ;
 } else { if - 123 { for val foo int = ! ~ true ;
 false <= "bar" ;
 ! ! ~ false >= - foo [ - - false . foo ] != true ++ { "bar" ;
 } ;
 } else { for val foo int = ~ 123 ;
 ~ true ;
 ~ false { if foo * - 123 ( ! ! ! foo , ! ! "bar" ) { true ;
 } else { if foo { "bar" & ~ 123 . foo = - 123 / 123 ;
 } else { if ~ ( ~ "bar" / ! true [ true ] ^ - - - 123 / foo > 123 . foo ) . foo { if ~ "bar" { ! "bar" -- ;
 } else { for var foo int = ! ~ ! false ;
 - ! ~ ( foo ( ~ ( 123 - ! 123 ) , ~ 123 [ ~ ! 123 == ( 123 . foo ) & ~ true . foo ] * foo ) * ~ ! ! - ~ - 123 ) ;
 true -= ~ - - 123 . foo { ! ~ true / foo <= false += ( - ! ~ - "bar" * 123 == true + ~ true ) ;
 } ;
 } ;
 } else { - "bar" ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { ! foo . foo **= ~ foo | ~ false * ! "bar" < ! false == ~ - true [ "bar" ( ( - foo . foo / ~ true [ false ] ) , false ) ] ;
 } ;
 } ;
 class foo { ( ! ( true . foo ) ) ++ ;
 } ;
 val foo int = - ~ - ! "bar" . foo < ~ false [ false [ ! "bar" ] ] ;
 class foo { 123 [ - ~ false ] /= ~ ! true ;
 } ;
 
