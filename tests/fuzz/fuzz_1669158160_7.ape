module foo ;
 class foo { foo int ;
 func foo ( ) int { for val foo int = - true ;
 ! ~ 123 <= 123 ;
 "bar" { 123 [ ~ ( ~ 123 ) & - - foo ] *= false | true ;
 } ;
 } ;
 func foo ( foo int , foo int . int . int , foo int , foo int ) int . int . int { for val foo int = false ;
 ( false ) | ~ ! ( ! foo ) ;
 ! true { for var foo int = 123 * - ( ! ! 123 | ! false ( ) * ~ - ! ~ false < - 123 [ foo ] ) ;
 true ( ) ;
 false * - ~ "bar" { "bar" <= ( "bar" ) . foo ++ ;
 } ;
 } ;
 } ;
 foo int . int . int ;
 foo int ;
 func foo ( foo int . int . int , foo int , foo int , foo int . int . int , foo int ) int { true [ foo ( ! "bar" + ! ~ ( - foo + - "bar" ( true [ true ] , ! foo ( ) ) * ! ~ ! ( - foo ) ) & false , - ( ! ( ! - ~ foo [ ~ false != 123 ( ) ] | ! 123 ) ) <= ( foo ) ( ~ ( 123 . foo ) | ~ ~ - - ! - "bar" , 123 ( ) ) ) ] **= false ^ ! "bar" ;
 } ;
 func foo ( foo int . int , foo int , foo int ) int . int { if ~ false [ 123 + 123 ] { for var foo int = "bar" ( ) ;
 123 != ~ "bar" [ true . foo ] ;
 - false [ "bar" ] ++ { if ~ false . foo { - - - ~ false -- ;
 } else { - ! ~ - "bar" ^ "bar" ++ ;
 } ;
 } ;
 } else { for val foo int = "bar" ;
 ~ ( ~ true [ ~ ~ ~ ! ! false . foo ] ) ;
 false /= ! 123 ( ) / ( - ~ false ) { for val foo int = 123 * 123 > "bar" ;
 ~ ( ~ ~ 123 ) ;
 ( 123 ) + ! - ( false & true ) { ! ~ "bar" . foo -- ;
 } ;
 } ;
 } ;
 } ;
 func foo ( ) int . int . int { for val foo int = ~ "bar" == ! ( true [ true [ ! - true . foo ] ] & ( ~ ~ true ( false , ! false ) & "bar" != "bar" ) ( ) ) [ ~ true . foo | "bar" . foo >= - 123 ( ) + - foo == 123 ] ;
 ! false ( ) == false ;
 ! true ++ { ( ~ - ( ! foo ) ^ - - ~ "bar" ) ++ ;
 } ;
 } ;
 foo int ;
 foo int ;
 } ;
 func foo ( ) int . int { ( "bar" ) ++ ;
 } ;
 class foo { func foo ( ) int . int . int { if ! ~ - true { - "bar" [ 123 . foo ] ++ ;
 } else { ! ~ foo -- ;
 } ;
 } ;
 func foo ( foo int . int . int , foo int . int ) int . int { ~ ~ - false ++ ;
 } ;
 func foo ( ) int { false ( ) ;
 } ;
 foo int . int . int ;
 foo int ;
 func foo ( ) int { ~ true += true [ - - - "bar" ] - false ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int . int . int ) int { ! - ( 123 <= false & - 123 ) + false . foo ++ ;
 } ;
 var foo int = 123 ;
 val foo int = ( false ) <= false . foo ;
 class foo { func foo ( ) int { if ! "bar" & foo - ! - true <= ! 123 { if 123 { for var foo int . int . int = true . foo ;
 - true ( ! ( foo . foo ) , 123 ) ;
 ~ ! ! ( - ~ ! - ~ ! ~ false | ~ "bar" [ ( ( ~ ~ ! ( "bar" ) ) ) ^ ( ( 123 ) < "bar" ) . foo * 123 . foo ] ) + ( true ( 123 , ~ foo ) ) . foo -- { false *= foo ;
 } ;
 } else { ! ~ false != "bar" [ - ! - true ] + "bar" . foo += ~ - foo ;
 } ;
 } else { "bar" [ ! ( ~ ~ true ( ) ) < ! "bar" ( ( foo & 123 + false & true ) ( true , foo & false ) , "bar" ) ] / ~ ( ~ false [ ! foo ] ) ( ) **= ( ~ ! ~ - ~ ! ! - "bar" [ ! ( ! - foo / - true ) ] ) >= true ;
 } ;
 } ;
 foo int . int . int ;
 foo int ;
 func foo ( foo int . int . int , foo int . int . int , foo int ) int { true /= 123 ;
 } ;
 func foo ( foo int . int ) int . int { if false { ! ~ ~ true ;
 } else { ( foo ) ;
 } ;
 } ;
 foo int . int ;
 foo int ;
 func foo ( ) int { if false { if ~ foo ( ) { ~ foo . foo + ~ ~ ( true ) [ "bar" ] & - - "bar" ;
 } else { ! false ;
 } ;
 } else { if - ( ! ! 123 [ ! ! false + - ! ( false <= 123 * "bar" ) ] ) == false [ "bar" ] { true *= 123 ^ - foo . foo ;
 } else { - foo [ - 123 == - ! ! - - ! - - "bar" [ - false ] ] ++ ;
 } ;
 } ;
 } ;
 } ;
 func foo ( ) int { for var foo int = ! 123 ;
 - ! - "bar" ;
 ~ ~ - "bar" -- { if true + false != - ( ! 123 . foo ) { ! ! - ! "bar" = ~ ~ - - ~ ~ ( - false != foo ) ;
 } else { ! 123 ( true , "bar" ( ) > ! ! 123 ( foo , ( ~ 123 ) . foo == ! true ( ) ) ) /= false != ~ ~ true * ~ ! - - ( - ( ! ~ 123 ) ( ) ) . foo ;
 } ;
 } ;
 } ;
 var foo int . int = - "bar" / false . foo + ~ true ;
 func foo ( ) int { 123 + ! 123 <= ( ( ~ true ) . foo / - true ) & true == "bar" . foo -- ;
 } ;
 var foo int = ! "bar" ;
 
