module foo ;
 class foo { - ( true . foo ) ;
 } ;
 func foo ( ) int { ! - foo ++ ;
 } ;
 var foo int = ~ 123 + true ;
 class foo { if ! ( ~ ! foo ) { - false ++ ;
 } else { if ! ~ - ! ~ foo [ ( true [ "bar" . foo ] ) * ! ( false ) < ! foo ] { 123 ( ~ ! true [ foo ] , - ! ( foo + ! - "bar" & true ) ) == - ! foo -- ;
 } else { if - ! ~ foo | ~ - - ( - ~ ~ - ( ~ - ! ~ ! ~ ! ~ ! ~ ! - "bar" ) <= "bar" ) { if ~ foo > foo [ true ] { true / - 123 - false / false . foo = ! ! false ^ - foo ;
 } else { true & - ~ false . foo == true -= ( false ) ;
 } ;
 } else { if - foo { if "bar" ( ) { ! ~ foo -- ;
 } else { for val foo int . int . int = "bar" > - ! ~ ! ! true . foo ;
 - ~ true [ ! foo / true [ ! "bar" ] ] <= - true ;
 ( ! ! foo ) { for val foo int = "bar" ;
 - foo ;
 true ++ { 123 == - "bar" - - - ! ! 123 -= 123 ;
 } ;
 } ;
 } ;
 } else { false [ ! true ( ~ ! foo + ( ~ ~ ( false == true * false | 123 . foo ) ) , "bar" [ foo ] ) / foo ] ;
 } ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int ) int . int . int { for val foo int = ~ ( 123 [ "bar" [ ~ foo [ - true ] ] + ! - ( - false ) ( ! true , 123 . foo ) != ( ~ false ) <= 123 ] != false / foo ) . foo / 123 ;
 - false ;
 true . foo **= "bar" . foo * ~ - ! ( ! ! ~ ! ! ~ false [ true ] != ! true ) ( ) { if ! - ~ ! ~ - ~ 123 . foo == - ~ foo [ ! ! - ~ ~ ! true + ! ! foo ] { if ~ - ! - ~ ~ ~ ~ "bar" . foo * ~ false { for var foo int . int = foo ;
 foo . foo * true ;
 false *= true != ! true . foo { "bar" ;
 } ;
 } else { if ( 123 ) ( ) { if false [ - ~ false [ 123 > - true ^ - true [ 123 [ ! foo ] ] == ( ~ 123 / ! "bar" ) ] ] { for var foo int . int . int = ~ ( ~ foo ^ ( ! foo ) [ ~ ( ~ foo ) ] >= ~ ~ "bar" ) [ ! ~ "bar" ] ;
 "bar" | - foo & ( ! ! 123 ) ( - - ~ false - ! "bar" , ! "bar" . foo != ! - true ) ;
 ( ! 123 ) -- { if true { - ! ! ~ ~ - - foo ++ ;
 } else { 123 ++ ;
 } ;
 } ;
 } else { ( true ) ++ ;
 } ;
 } else { false ;
 } ;
 } ;
 } else { if ! true != - ( - false ) { true -- ;
 } else { foo = ~ true [ "bar" . foo != ~ ! true ( ) ] ;
 } ;
 } ;
 } ;
 } ;
 val foo int = ! false [ - false . foo ] / ! - - ! ~ foo ;
 class foo { - ~ false . foo ++ ;
 } ;
 val foo int = foo ;
 class foo { 123 . foo -- ;
 } ;
 class foo { ( foo ( ~ ! - ( - "bar" ) , true ) ) - ~ ~ 123 ;
 } ;
 class foo { - - false [ true ] != foo -- ;
 } ;
 func foo ( foo int , foo int ) int { if ! foo ( ! ~ ~ ! foo [ "bar" ] , ! false ) { for var foo int = foo [ ( - ! ( "bar" >= ~ ! - ( false [ ( ~ 123 [ ~ 123 ] ) ] ^ - true > "bar" == - ! foo ) ) ) ] - foo <= foo [ ~ ~ - false [ - 123 . foo == ~ ( "bar" ( ) & false ) ] & 123 ] ;
 - ! ( ! "bar" >= ~ "bar" ) ;
 - ( ~ - foo ) ( ) = ( false ) / - foo { - ! 123 ( 123 != ! ~ false , foo ( ) ) ;
 } ;
 } else { - false ++ ;
 } ;
 } ;
 class foo { for var foo int = - true ;
 true ;
 ! "bar" * - "bar" { false ;
 } ;
 } ;
 class foo { if ~ - ~ - ~ ( foo + "bar" ( ~ - ( - ~ 123 . foo ) . foo , 123 ) ) { for val foo int . int . int = - - "bar" ;
 true ^ ~ foo ;
 - foo { for val foo int = ~ false [ foo ] ;
 ( ( false ) ) | ~ ( ~ "bar" . foo ) [ true ] ;
 - ! ! 123 += foo { false [ 123 . foo ^ ~ foo ( - - ! 123 == foo ( ~ ! ~ ( ~ foo . foo ) [ true ] , true <= true ) , ! ! true * - ( ~ 123 & foo ) == true . foo ) ] *= 123 ;
 } ;
 } ;
 } else { - false -= "bar" ( ) > foo . foo ;
 } ;
 } ;
 class foo { true -- ;
 } ;
 val foo int = 123 ;
 var foo int . int . int = true ;
 class foo { if ~ ( ( false . foo ) / ~ ~ ! ~ ~ false ) . foo { - ! - - - - ~ "bar" ;
 } else { ! ! - true . foo -= 123 >= - ( - false . foo ) & - - ! foo ;
 } ;
 } ;
 func foo ( ) int { 123 == - false & ~ true *= ! "bar" ;
 } ;
 func foo ( ) int { if 123 { false ;
 } else { for val foo int = ( ~ "bar" ( ) ) ;
 123 ;
 ( ~ ! ( 123 ) == ~ foo [ ( ( 123 ( foo , - false ( "bar" , foo ) > - - ( foo ) ) ) ) [ ( - ! false ) != - - ( - false ) * - ! ! - true ( ) ] & ( ~ ! ( "bar" ^ ~ ( false ) * true ) ( - foo , false ) ) < - "bar" ] ) >= true ( "bar" > - - ( foo ) * ~ - false , false & - ! false ) -- { ~ ! ! - "bar" | ~ true ;
 } ;
 } ;
 } ;
 var foo int = ! ( ! - ( ( ( ( 123 == ~ "bar" ) [ - - - ( ~ "bar" ) ] ) [ - ( "bar" ) ] ) . foo ) ) ;
 val foo int . int . int = ! ~ false ;
 class foo { if ( - - "bar" ) > ~ ! ( - - 123 ) { if ~ ~ ! - false { if ~ false ( ) { if true . foo { ~ ( "bar" ) ( ) != ( ! "bar" ) ++ ;
 } else { - - ! ! 123 ( ~ 123 | - foo > ! - ~ foo , - ! ! ~ ( ! ( foo ) ( ) ) ) *= true . foo ;
 } ;
 } else { - "bar" ++ ;
 } ;
 } else { if ! - foo > 123 . foo / - 123 != foo + ! ! 123 { ! ~ 123 -- ;
 } else { - ! true ( ) -= "bar" < ! - "bar" ;
 } ;
 } ;
 } else { for val foo int = ! ~ ~ false ( ) ;
 false & ( false ) ;
 - ~ true -= ( ! ! foo ) { for val foo int . int . int = ( ~ 123 ( ) ) ;
 foo [ ! "bar" . foo ] ;
 ~ - ( - true ( ) ) . foo > ( ! - foo ) { if false [ foo >= - ( true ) ] { true [ foo < foo ] ;
 } else { if foo ( ) { if ! - true { if true { ~ - true -- ;
 } else { ! foo ;
 } ;
 } else { for val foo int = ! "bar" ;
 - 123 ;
 ( 123 ) { true [ ! ! foo ( - ~ foo , - ! true ) ] ;
 } ;
 } ;
 } else { if foo & - ! - ! ( ! ~ ( - ~ - - false . foo ) == "bar" & 123 ( ( 123 ) & true + ~ ! ! false > "bar" , "bar" ) ) { for val foo int = ! 123 . foo ;
 ! ~ ( 123 ) ;
 true & 123 { if "bar" * - ! 123 { ~ 123 -- ;
 } else { - - foo . foo = false > true . foo == 123 < ~ "bar" . foo ;
 } ;
 } ;
 } else { for val foo int . int . int = - ! true <= "bar" ( ) ;
 true ;
 ! foo != ~ "bar" / ( false - - "bar" ) ++ { for var foo int . int = false != - ( ~ ! true * - ~ 123 ) ;
 false ;
 123 . foo ++ { for val foo int . int = - "bar" ( ) <= foo ;
 - ! 123 ;
 123 ( ) { "bar" ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 func foo ( ) int { if foo { ! false . foo += true ;
 } else { 123 -- ;
 } ;
 } ;
 var foo int = true [ ~ - "bar" ] ;
 val foo int = 123 > false * - true ;
 class foo { if "bar" { foo *= ~ ~ ~ - true . foo ;
 } else { if ~ 123 { foo >= ( ~ - foo - ( - ! ( ! foo + - - foo [ ( ~ true [ foo ^ - "bar" ( ) >= ~ ! false ( "bar" / false , "bar" ) ^ ~ true ] & true ( ) ) ] ) ) . foo ) ( ) -- ;
 } else { for var foo int . int = ( true & ~ ~ true . foo > ! ~ ! false ) <= foo ;
 ~ false > ~ - true ( foo , 123 | ! true [ - 123 ] ) ;
 - true > ~ ! - - true [ "bar" > true ( - ! false , - ! ! true ) / "bar" ( ) == ( "bar" >= false ) ] /= 123 { ~ ( ! true ) * - "bar" ( ) | true / false ( ! true . foo , - true ) *= foo ;
 } ;
 } ;
 } ;
 } ;
 val foo int = true ( ) ;
 class foo { foo ;
 } ;
 var foo int . int . int = - "bar" ( ) ;
 val foo int . int . int = 123 <= ~ 123 ;
 func foo ( ) int { 123 + ( ! ( ! ( 123 ) ) [ ! 123 . foo == ~ ! true ( true != ! true , 123 ) < ( false ) ] + ! foo [ ! - foo ] ) . foo & "bar" [ "bar" ] **= ~ "bar" ;
 } ;
 func foo ( ) int { 123 <= ! ~ ~ - ~ - ! 123 **= ~ true ;
 } ;
 var foo int = 123 ;
 class foo { ( ~ - 123 ) & 123 == - "bar" ;
 } ;
 func foo ( foo int , foo int ) int . int . int { if ! ~ foo . foo { if ~ true { for val foo int . int = ( foo ) ;
 ! ! foo ;
 foo *= false { if true { ! 123 ( ) & ! 123 += ! true ;
 } else { if ( ! "bar" ( false , ! - true + false >= false ) ) { for var foo int . int = ! ! 123 ;
 ! ! - - ( ( 123 . foo ) [ ( foo ) ] * true ) . foo / ( ! false + 123 == true ) ( ) - foo ;
 "bar" { if foo { for val foo int = ! false == - ! - false ;
 "bar" [ true - - ~ true ] & ~ "bar" >= true [ false ] ^ ! 123 ;
 - - ~ foo . foo { for var foo int = - 123 <= 123 ;
 ! false ;
 123 [ true ] -- { for val foo int = - ! ~ false ;
 - ! 123 ;
 - foo [ false ] - ~ false [ ! ( ( ( 123 < ~ false ( ) ) ) | "bar" ) . foo ] = false { ! true -- ;
 } ;
 } ;
 } ;
 } else { if - false { for var foo int = ~ false ( ) | 123 ( ! ~ - ! ~ foo , ! foo != true ) ;
 ~ ( foo ) ;
 false { for val foo int = ( ! ! foo [ ! - ~ true ] != false ^ ! false [ - true ( false , "bar" ) * true ] ) | ! ! ! "bar" ;
 ~ ! 123 . foo < - - - foo ;
 ( ! ~ - - false ) != ! ! 123 { ! false [ ~ "bar" [ foo ] == - false [ true ] <= - ! true - ! - ( true ) ] < foo ;
 } ;
 } ;
 } else { ! ! ~ - ~ - ! 123 ( false , true ) ;
 } ;
 } ;
 } ;
 } else { for var foo int . int . int = "bar" [ 123 <= ! false ] >= false . foo == ( "bar" ) ;
 ! 123 ;
 foo [ ~ ! ! false . foo ] & 123 -= ( 123 * ~ ( - - - true ) ) . foo { ~ foo = true ;
 } ;
 } ;
 } ;
 } ;
 } else { - foo * ~ foo . foo + ( - ! ( ~ ! false . foo ) ( "bar" > "bar" . foo , false ( ) ) ) & 123 ++ ;
 } ;
 } else { if 123 { ! - ( ( true ) ( ) ) ;
 } else { ~ "bar" ;
 } ;
 } ;
 } ;
 class foo { if "bar" . foo { for var foo int = 123 ;
 ! foo [ ! ~ - true ( true , - ~ 123 * ~ ( 123 ) ) ] ;
 false [ - ~ ~ - 123 ] -- { if ! false { if - false [ ! true > ~ ! ! true ] { if ~ ! ( foo ) [ - ! - 123 ] / ~ ( ~ false ) { foo == - ! 123 ^ "bar" *= - ( "bar" ( ) ) != - ~ foo ;
 } else { for val foo int . int . int = false ;
 true ;
 ! 123 **= - ( 123 [ true ( foo > "bar" & "bar" , 123 != ( 123 ( ) ) [ ~ ~ true ] & "bar" [ foo [ ! foo ] >= - ~ - ! 123 . foo ] ) <= false / true ] ) { "bar" ++ ;
 } ;
 } ;
 } else { for val foo int = ~ true ;
 true & - true ;
 ( foo ^ false ) *= foo { for var foo int = ~ - true ;
 false ;
 false / foo ( ) { for val foo int = ( true ) ;
 123 . foo ;
 true <= ~ - true { if ~ ~ 123 ( ! ! false [ - ~ - ( "bar" ) ] , ~ ~ 123 . foo ) == - false { foo ++ ;
 } else { if ~ - false { if ~ ! ! - ~ - foo <= ! foo . foo { for val foo int . int . int = false ;
 true . foo ;
 ! "bar" ( - ~ "bar" < ~ - - "bar" [ ! "bar" >= ~ true ] , "bar" ) = ~ "bar" [ foo ( ) ] { for var foo int = ( ~ ~ 123 >= ~ ! ! false ) ( ) & ! - ! ! false ;
 ! "bar" ;
 ! ! true ( ! - false , ~ "bar" [ ~ ! ~ ( ~ - - ~ ( ! - ! foo [ "bar" ] ) ) > 123 . foo ] ) * ! - ( 123 . foo ) ( ) += - 123 { "bar" ;
 } ;
 } ;
 } else { for var foo int = - ~ 123 ;
 true ;
 "bar" ( ) ++ { ( ! ~ ! ~ ~ ( true ) ) ++ ;
 } ;
 } ;
 } else { false == true . foo > - ! ~ 123 ++ ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { for val foo int = - - ! ! "bar" ;
 ! false [ ~ - ( - foo ( ~ - 123 ( ( false ) , foo ) * foo [ false . foo ] != - "bar" , ~ "bar" ( ) ) ) ] ;
 123 -- { if ~ foo ^ 123 { if true ( ) { for val foo int = true ;
 false ;
 false [ ! ~ 123 <= ! ! - "bar" != false [ ~ true ] ] { "bar" ++ ;
 } ;
 } else { true . foo ++ ;
 } ;
 } else { if - foo == ~ "bar" { - false | - ( foo . foo & ! ~ - ~ true ) ++ ;
 } else { if ! false { ! - ~ ~ "bar" - false -- ;
 } else { ~ ! foo / - ( ~ 123 ) ++ ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { - ~ - false ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int , foo int ) int { if true { for val foo int = foo ;
 foo [ true ( 123 , - ( foo - ~ ( - - - ~ - ! ! ! - ~ "bar" == ~ - ! "bar" [ ( ! ~ foo / ~ ( "bar" ) ( ) ) [ foo [ 123 [ - "bar" ] + ! ~ - false ] ] - ( ~ - - ( ( "bar" . foo ) < ! "bar" - ! "bar" . foo ) ^ ~ ~ ( ( ( 123 >= false ) ( ) ) ( false < ! ! foo , 123 . foo ) >= - true ) ) & ! "bar" [ ! ( foo | false ( "bar" & false , ! - foo ( false > 123 . foo / 123 ( 123 , "bar" . foo ) ^ ! foo [ ~ ! ~ ~ ~ 123 < - - ( false ) ] , ~ "bar" * ~ false < - ! false ) ) ) ] ] ) ) [ true [ ! ~ ! ~ true ] ] ) ] ;
 ~ - ! true > ! true { ! foo ;
 } ;
 } else { ~ ! "bar" -- ;
 } ;
 } ;
 var foo int . int = "bar" ;
 func foo ( ) int { ~ ~ ~ ! "bar" -- ;
 } ;
 val foo int = ( "bar" ) | ! true ;
 
