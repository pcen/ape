module foo ;
 func foo ( foo int , foo int , foo int . int . int ) int . int { - - - ( true ) -- ;
 } ;
 val foo int = ! true ;
 val foo int . int = ( false ( ) ) ;
 var foo int = ( ( ! - ~ ~ true ) ) . foo ;
 val foo int = - ~ 123 ^ - - foo [ true != false . foo * ! ( - ~ foo <= - true ) ] ;
 class foo { func foo ( ) int { for val foo int = ! ( ~ ~ "bar" [ - false [ foo ( ) ] ] ) ;
 foo ;
 false { - foo ( 123 , - ~ foo & "bar" ( ! - - ~ ! - "bar" , "bar" / "bar" ) ) ++ ;
 } ;
 } ;
 foo int ;
 func foo ( ) int { if ! true > foo . foo { if ~ ! false != false { if foo { if ! ~ false { ! ! true == - 123 . foo ++ ;
 } else { false [ true ] -- ;
 } ;
 } else { ~ - - "bar" = - "bar" > 123 ;
 } ;
 } else { for var foo int = true ( true , - ~ 123 + ~ "bar" & ~ ! false ( ) ) ;
 "bar" . foo ^ foo ;
 false { false ++ ;
 } ;
 } ;
 } else { for val foo int = ! ( ~ ! - ! ~ ! - ~ ~ - - true . foo ) < foo ( ~ - true , true / ! foo ) != false ;
 123 [ - ~ foo == ~ ( ! foo ) / "bar" [ ! "bar" ] ] ;
 ~ - ( - ! - ~ 123 ) { if "bar" { if foo . foo { ~ true / ~ ! "bar" > - ! 123 ^ true ( ~ false [ - foo <= true [ false | ! ~ ~ foo ] ] & true , 123 [ ! true ] - "bar" * - "bar" ) ;
 } else { 123 ( ) ++ ;
 } ;
 } else { foo + ( true ) ++ ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int . int . int , foo int ) int { for val foo int = ! 123 * 123 ;
 - false ( ) / - ~ - 123 ;
 "bar" - - 123 [ "bar" ] { ! foo [ - false ] > ! true ;
 } ;
 } ;
 func foo ( foo int , foo int ) int { ! ~ foo ;
 } ;
 foo int ;
 foo int ;
 } ;
 func foo ( foo int , foo int . int . int , foo int , foo int , foo int ) int { for val foo int = "bar" ;
 "bar" [ - "bar" . foo ] | ! "bar" . foo ;
 "bar" . foo { 123 - ~ ~ ~ ~ - true ;
 } ;
 } ;
 var foo int = ! ! - ( foo ) ;
 class foo { foo int ;
 func foo ( foo int , foo int . int . int , foo int , foo int ) int { "bar" ( foo [ 123 ] , ( ! "bar" ( ) ) & 123 | ~ "bar" [ "bar" <= "bar" ] ) ;
 } ;
 foo int . int ;
 func foo ( foo int . int . int , foo int , foo int , foo int ) int . int { ! ! false -= 123 ;
 } ;
 foo int . int . int ;
 foo int ;
 func foo ( ) int . int { if false ( - ! 123 [ 123 . foo ] , "bar" ) { if true { for val foo int = "bar" ( ~ 123 != 123 > foo , foo . foo / 123 ) ;
 ~ ! - ~ ~ false [ - ~ ~ ~ foo > - ~ foo ] ;
 ~ ! - - ~ ~ 123 { for val foo int = "bar" ;
 ~ - ( "bar" | - ! - ~ "bar" * ! true ) ;
 ~ 123 * 123 . foo <= 123 * ! "bar" ++ { for var foo int = false ( ( ! ! ~ "bar" < ! - foo ) , ! true & true ) | ! "bar" ;
 - - ! true <= ( ( - true . foo ) . foo == ~ ! "bar" + ! ! ! true . foo ) ;
 ~ - ~ - foo ( ) -= foo + ~ foo { for val foo int = ~ - 123 >= - - 123 ;
 ! ~ - ! - ~ foo ( ) ;
 - ! foo -- { if ~ ! "bar" ( ) <= ~ 123 != foo * false . foo { if ! "bar" ( ) { if - ~ foo { - 123 - - false ++ ;
 } else { - ! foo & 123 ^ 123 . foo <= - "bar" . foo != "bar" -= ( ~ - ~ ~ - foo ) ( ) ;
 } ;
 } else { foo ;
 } ;
 } else { if true { for val foo int = - - false ;
 ~ ~ ~ ! false [ ~ false [ - - ( foo ) ] == ! false ] >= false ;
 "bar" { "bar" ( ) ;
 } ;
 } else { for val foo int = ! ( ~ ~ ! ~ foo ) ;
 ( ~ foo . foo ) . foo ;
 "bar" **= ! ~ 123 { if true { if ~ false { if false { if true [ ! ! false ] { "bar" != "bar" += foo ;
 } else { true ( ) ;
 } ;
 } else { "bar" ++ ;
 } ;
 } else { for val foo int = ~ - foo * false ;
 true ;
 - true ++ { ( foo ) ;
 } ;
 } ;
 } else { for var foo int = ! - foo ^ 123 == false ;
 123 ;
 ~ 123 . foo ^ false == ~ ~ ! "bar" -= 123 & ( - 123 ) [ ! ( ! foo ) ] { for val foo int . int = 123 . foo ;
 - ! ( "bar" ( ! ( ~ ~ ~ ! "bar" [ ! ~ - ~ "bar" ] / ( - false . foo ) + - "bar" * ( foo [ ! "bar" - 123 ] ) ) , ! - 123 ) ) <= - false ( - false . foo & false , "bar" . foo ) ;
 ~ true != foo ++ { if "bar" { if false { for val foo int . int = ! - "bar" - ~ foo * - 123 ;
 ~ - ! 123 ;
 false >= - ( ! - - ~ ~ ! ~ false ) /= 123 * "bar" < - false { for var foo int = 123 ;
 ~ true ( true , false ) * ! false ;
 ( ~ foo ) -- { false . foo + ( foo ) ( ) ;
 } ;
 } ;
 } else { if - 123 . foo <= ( ! - ( ( - - 123 ) ( ) ^ ( "bar" ) ) ) [ foo & foo ] != ! ~ ( ~ foo ) ( false , "bar" [ - ~ true < - - "bar" [ ~ foo / ! true ( ) + - ~ ! - ~ false ] | foo ] ) { for val foo int = ~ ! "bar" ( true [ "bar" ] , - ! false / ~ ~ - - foo ) ;
 ( - - 123 ) ;
 ! ~ "bar" **= ! "bar" & ! ! true [ ! - ( ~ - ( 123 > ( true ) ( ) ) ) ] { for val foo int = ~ ~ "bar" ;
 false > ! ! ( - 123 [ ( ~ ! - - ~ foo ) | ! ( ! 123 ) == ! - true + false ( false [ ( false ) & ~ 123 ] - ! ~ true ( ) , false ) ] ) [ ~ ~ - 123 <= ! ! ! ( true ( "bar" , - ~ false & 123 ) ^ - ! ~ 123 ) [ - false ( ( false ) , - ! ~ foo ) ] + foo ] | true [ "bar" - false ] ;
 123 . foo -- { for val foo int = ( 123 / - "bar" ) . foo ;
 ! true ( ~ false == ! false , 123 ( ~ 123 != - false . foo , foo [ - "bar" == - ! true [ ( "bar" ( ~ ( - foo - - - - ~ ~ true ) , 123 ( ) & true . foo ) ) ] ] * ! ( ~ ~ "bar" & ! ! ~ "bar" ) ) ) * 123 ;
 ~ ! "bar" ( false [ 123 ] , - true ) { - ~ ! ! ! ! 123 **= - ( "bar" ( ) - ! ~ true . foo ) [ true . foo ] ;
 } ;
 } ;
 } ;
 } else { if - ! 123 { if - ! ( 123 ( - ~ ! ( - - true . foo * foo ) <= true [ ~ ~ - ! ( - true ) ^ ! - - ~ false / foo ] , ! true != - - foo ) ) { ! - false ;
 } else { for val foo int = true ;
 foo ;
 ~ 123 . foo ++ { for val foo int . int . int = "bar" ( ~ - foo , - - foo ) ;
 - ( "bar" ) ;
 123 ++ { - 123 . foo < - ( ( foo ) ) -- ;
 } ;
 } ;
 } ;
 } else { for var foo int . int . int = ~ - foo ;
 ~ 123 ;
 123 *= ~ ! true { 123 += ! ! ~ false == - false ;
 } ;
 } ;
 } ;
 } ;
 } else { ~ foo ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { false ( ~ 123 / ! false ( ! ~ ! ~ false . foo , - true ) , false ( 123 - - ! "bar" ( ( - ! false != - true / false ) [ 123 ] * ~ 123 ( ) == "bar" [ ! false ] , - ~ - ! ~ "bar" ) , "bar" <= 123 ) ) >= false -= 123 ;
 } ;
 } else { for var foo int . int . int = false ;
 ~ ( ~ "bar" ( ) ) . foo ;
 - ( true ( ~ true + ~ ~ foo . foo , foo ( ) ) / 123 ( ) ) [ true == ( ! ( - 123 [ ~ false [ ! ! ! ( true ) ] ] != foo ) & - ~ ~ foo <= ! true ) ] += ! true { ( - foo & - ( foo . foo & ( ! ! 123 & foo ) ) ) ;
 } ;
 } ;
 } ;
 func foo ( ) int { for var foo int = "bar" > true ( 123 , false [ - false / - "bar" + - - false ] ) ;
 foo [ - foo > ( ! "bar" ) ] ;
 ! foo / - ! - ~ foo = ( ~ foo ) ( ~ ~ 123 / ! false , - false ) { for var foo int . int . int = ( 123 ) ;
 ~ 123 ;
 ( false ) [ foo ] ++ { if - ~ foo { 123 ++ ;
 } else { 123 ^ true . foo -- ;
 } ;
 } ;
 } ;
 } ;
 foo int ;
 func foo ( foo int , foo int , foo int ) int . int . int { false != true . foo ;
 } ;
 } ;
 class foo { } ;
 func foo ( foo int , foo int , foo int , foo int , foo int , foo int ) int { if 123 . foo { ! - true ( - "bar" , ! ! ! - foo & foo ) / - ! foo >= "bar" ;
 } else { ~ ! "bar" -- ;
 } ;
 } ;
 func foo ( foo int . int , foo int , foo int . int . int ) int { for val foo int = - ~ true - ! - - true ( ~ 123 ( foo , ~ ~ 123 ( ) <= ~ ~ true ) , ~ ( - false ) ) < ( - foo + "bar" ) ;
 - "bar" > ~ ! ( ! ! - ~ - - ~ ! ~ - ! ~ ( "bar" / foo == foo * 123 ) & ~ ~ true [ "bar" + "bar" ] ) ;
 true ( ) -- { 123 **= - ! ! false . foo + ~ ! - - foo ;
 } ;
 } ;
 val foo int . int . int = 123 <= foo ;
 class foo { func foo ( ) int . int . int { for val foo int = ! false ( ) ;
 - ! ~ ~ 123 ;
 ! - false | ~ ~ "bar" & foo { for val foo int = ~ false ;
 false ;
 foo -- { true [ ( ! foo . foo ) + false ] -- ;
 } ;
 } ;
 } ;
 foo int ;
 foo int ;
 func foo ( foo int , foo int ) int { - - false - - ( 123 [ ~ ! - ( ( foo ( ) + true ) ) & 123 ] != true ) *= ! true > foo & 123 | foo ;
 } ;
 foo int . int . int ;
 foo int ;
 foo int ;
 } ;
 func foo ( foo int ) int . int . int { for val foo int = foo ( ~ - ! ( true ) , ~ ~ ! ! "bar" . foo ) ;
 - "bar" ;
 ( ~ true ) [ true ] { for var foo int . int = true ;
 123 . foo ;
 true -- { ( ~ - false ) **= - ~ true ;
 } ;
 } ;
 } ;
 class foo { func foo ( ) int . int . int { 123 = - - - ( ~ - false . foo & foo ) ;
 } ;
 func foo ( ) int { for var foo int = ! ( ! foo . foo ) [ - ! false ] == "bar" ;
 "bar" ^ 123 ;
 ! ( foo ) * "bar" - true [ "bar" ( ~ false > ~ "bar" , ~ 123 ) ] ++ { for val foo int . int = 123 == true <= - ! ~ - false ;
 true ;
 ! ! false { for val foo int = - ! true ;
 ! ~ ~ foo ;
 - 123 *= - false { if - 123 { if ! ! ( true ) ^ ~ 123 [ - - - ! ! foo | ! ! true ] { if ! ~ ! - false { ~ 123 * - foo ;
 } else { - ~ foo [ ! ~ ! ~ ( ~ - - foo < ~ ~ true ( ) != foo [ false ] ) ^ false * - true ] * "bar" -- ;
 } ;
 } else { if 123 ( foo , - - - 123 ) { foo + true ( ) ;
 } else { for val foo int . int . int = false + ! ~ foo ;
 - foo ;
 - - foo <= "bar" . foo ++ { ! foo & ~ false ;
 } ;
 } ;
 } ;
 } else { ~ - true *= - "bar" ;
 } ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int . int . int , foo int . int , foo int , foo int , foo int ) int { for val foo int . int . int = ! ! false ;
 - "bar" ;
 foo { ! - ~ - ~ 123 [ "bar" . foo ] / ( false ) ;
 } ;
 } ;
 func foo ( ) int { if ! ~ true <= - ( ! ~ true ) . foo { - ! - foo += ! false ;
 } else { for var foo int = ! ( foo [ ! ! - ! - ! ! ~ false + - - ~ 123 ] <= ~ ! ( - - - ! ~ foo ( ) ) ( ) == - ! - - false . foo ) * - ! true ;
 false ;
 false [ true ] / ( ~ ! - true ) ( ) = ( "bar" & ~ "bar" <= false != false ) ( 123 - 123 * ! - ~ "bar" [ true ] , ~ "bar" ) { if - ( ~ true ) { for var foo int . int = ! false [ false [ ! ! foo ( ) ] ] * ! - ~ false <= - ! ! 123 ;
 foo ;
 false [ ~ foo ] > - ! true - "bar" ( true , ~ true ( ) ) **= false == ! foo . foo { if ~ "bar" ^ ! ( foo ( - ~ ~ true [ ! ! ! ! ! - true . foo ] , "bar" ( "bar" , ( ~ 123 ) + "bar" ( ) * 123 ) ) ) . foo { foo ( ) ;
 } else { ! - ! true -- ;
 } ;
 } ;
 } else { if ~ ~ "bar" { if ~ - ! - "bar" & ~ ( ! ! - true != ! "bar" ) { false . foo ++ ;
 } else { for val foo int = true . foo ;
 - "bar" [ - - ! ~ 123 ] ;
 ~ foo [ ! ~ ( ~ ( - ~ true - 123 ) . foo + false ( false , - "bar" ^ ! 123 . foo ) ) ] *= true + ! ( - - ! ( false ( foo * ( ~ ~ 123 ) == - ! - ! 123 , ~ - ~ - ! ( - ! false [ - ~ ( - ! false ) <= ( - false ) ] ) ( ) ) ) . foo ) ( - "bar" | true , - false ) { if - 123 { for val foo int = ~ true ;
 ! - true ;
 ~ "bar" >= - "bar" = ( false ) { if ~ foo { if ~ - true ( ~ true [ ! 123 . foo + false == ( ( ~ - ~ ! ! ~ ~ - - 123 ( ! ~ ! ~ foo , "bar" ) == - ( false ) ) ) ] , ! ! foo ) == "bar" . foo { for var foo int . int . int = true ;
 - - ! foo > - - ! ~ foo | ( foo [ ! - ~ - "bar" ( ) * 123 [ ( - ( false . foo & - ! true ) ) . foo ] > - false ] ) ;
 123 { - false ( ) -- ;
 } ;
 } else { for val foo int = ~ true ;
 foo . foo ;
 true [ foo [ - ( ~ ! foo ) ] ] ++ { ~ ! - ! foo [ 123 ( ) ] ;
 } ;
 } ;
 } else { if foo { ~ ( - - ! - ! - - - ~ ~ true ) -= 123 & foo ;
 } else { for val foo int = ! - ( 123 . foo == - ! 123 | - ~ "bar" ) ( ~ false [ 123 >= false ] == foo , ~ ! ~ ( foo < false == 123 ) / ! true ) | ~ true ;
 ! false ;
 "bar" { for val foo int . int . int = ~ ~ true ;
 ! - - 123 ( false , 123 ) <= ( ~ ! ~ ~ ~ false ) ;
 ~ - ~ - ( ( ( false ) . foo ^ foo & - false ) > true ) /= true [ 123 ] { if ! ! - ! - ~ ~ ~ ! "bar" * - "bar" [ true ] { for val foo int . int = ~ "bar" < 123 ;
 ( ~ false * ~ "bar" ) . foo ;
 ~ ~ ~ - ~ true /= false { ! false == ! ! - foo + false & - ~ ( ! ~ ~ "bar" ) ++ ;
 } ;
 } else { for val foo int . int = - foo ;
 ~ 123 . foo ;
 foo [ ( ! ! - ! foo ) [ - true ] == foo ] -- { if "bar" { - 123 + ~ - ! "bar" ;
 } else { if - ~ ~ ~ foo != ( - ~ true [ - ! - ~ ( - true ) ] ^ ( ~ - ( false ( ) ) ( ) ) . foo ) { for val foo int = - false ;
 ( ! "bar" [ - foo == ( - ~ true . foo & foo ( ) | foo ) [ - - "bar" > - ~ true [ - true ] != - ~ "bar" ( ) / ! ~ ! ~ ( ~ ~ - 123 ) > - ~ ( true [ 123 [ foo ] ] ) ] ] ) >= ( ! ! ! foo ) . foo ;
 ! false . foo ++ { for var foo int . int = "bar" ;
 foo ;
 123 >= foo ^ - 123 /= ! 123 { - - true ( ) ++ ;
 } ;
 } ;
 } else { for var foo int = true ;
 123 == - ( - - false ( ) / foo ) . foo * true ;
 "bar" ++ { ( ( false ) ) ++ ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { if - ~ foo { - - ~ 123 & ~ foo | false ( ( - foo [ - ( ! true ( ) ) ] ) , 123 ) **= false ( ( false ) [ ! false ] , ! true <= foo ) ;
 } else { 123 -- ;
 } ;
 } ;
 } ;
 } ;
 } else { if foo * false { if 123 { - 123 . foo ++ ;
 } else { "bar" . foo ;
 } ;
 } else { - foo [ ! ( - true ) [ 123 ] ] ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int . int ) int { for var foo int = ~ ! - 123 == ! "bar" ( ! false ( ) * - ~ true ( ) , ~ 123 ) ;
 - true [ ( true ( ! "bar" < 123 , 123 [ ! ! ! 123 ( foo [ 123 ] , true [ - foo / true . foo == "bar" ] ) & ~ 123 ] ) ) [ ~ ! ~ - false | 123 . foo ] ] & ! - false [ foo + ! false ] ;
 ~ false ++ { for val foo int . int . int = ~ ! ! ( - 123 ) ;
 foo ;
 false . foo += - ! - ( 123 ) != ~ ! true . foo { ~ true += - - ( true ) . foo ;
 } ;
 } ;
 } ;
 foo int ;
 foo int ;
 func foo ( foo int , foo int . int . int , foo int ) int { false *= foo ( - false + - - - ~ true / ~ - "bar" . foo , false ) ;
 } ;
 } ;
 class foo { foo int ;
 foo int ;
 foo int ;
 func foo ( foo int , foo int , foo int ) int . int { if - ~ ~ false * ~ ~ true { ! ! ~ - foo ( ) * ~ ! foo ;
 } else { for val foo int = ! ! ~ 123 ;
 123 == ! - foo ( ) ;
 ! ! ! ! 123 [ - ~ ! false ] <= - ( - ( - ( - ~ ~ - true <= ( ( ~ ( - - ! ~ ! ( ~ ~ ~ ~ - ! true >= - "bar" ) < "bar" ( ~ ~ ! ~ - ( "bar" + ( foo ) . foo != 123 * ~ ~ ! ! 123 > ~ ( ~ 123 ) ) , - false [ false ] - ( ~ false ) [ ~ foo ] ) ) ( ) ) . foo ) * ~ false ) ) ) ( true , false ) { if ! - ! ! ( false > true ) >= ! ( "bar" . foo ) ( ) { foo = foo * "bar" ;
 } else { if "bar" { if "bar" { ( ~ ! ! "bar" ( ) - ~ "bar" ) == - ~ - ( true ^ foo ) ( ) -- ;
 } else { ! 123 ( ~ - ~ ~ foo ( ! ! ! ! true ( "bar" , 123 [ - foo ^ "bar" ( ! 123 ( "bar" ( foo & ( ( true * ( ! ( true ) ) ) ( ( ( ! ! true [ ( ! foo ) ] ) [ false ] ) [ ( ~ ~ 123 ) ( false , ! ( - ! ~ foo ( ~ - - - - foo ( ~ ! ~ false [ - foo + - ~ 123 ] , 123 ) != false [ - ~ ! ( ! ! - false ( ~ - - ( - foo ( false - ~ "bar" , foo ) ) ( ) , ( 123 ) + ~ true . foo ) ) ] & foo , ~ 123 ) | 123 ) == true . foo / "bar" ) | - ~ ( foo ) ] , ~ "bar" . foo * true ) ) , ~ foo * 123 >= - ! ! false ( ! - false , - foo >= - foo == ( ~ 123 ) ( foo , ! ! true [ true == - ~ 123 ^ ~ ! ( 123 ( ) & - ! ~ ( false ) | false . foo ) ] ) ) ) , foo ( ) - false ) , ~ ! ~ false ) ] - foo ( - "bar" . foo , ~ - ( true [ ( ! true [ ~ - "bar" ] < "bar" / "bar" ) ] ) ( ) ) ) , "bar" ) , - ( ~ ! ! foo . foo & ! ! foo ) >= - ! ~ ~ - ( - - ~ ~ ! ! - ~ ~ - true ( ) ) ) ;
 } ;
 } else { for val foo int = ! ! foo ;
 false * ! ~ ~ ( 123 ) == - true <= false ( ) ;
 ! - 123 >= "bar" ( ) { if true * ~ ! ~ ! "bar" == 123 ( ! true ( ) + ! foo ( ~ ~ - 123 . foo , ! "bar" ) == foo , foo ) { if "bar" { true == - - false -= ( false ) ( "bar" , ! - true [ 123 + - - foo ] ) ;
 } else { if "bar" ( false ( ) , ( ! true ^ ~ ( ! "bar" [ "bar" ] ) ) ) { - foo . foo = 123 [ ! 123 ] ;
 } else { for var foo int = false ;
 ~ true [ true < ! ~ "bar" ] + ~ ( false ( ( ~ false [ ( true ) / ! ! ~ ! false [ foo ] ] >= ! foo ) != false ( ) * 123 <= ! - true | true . foo , - ~ foo ) ) != false ;
 ~ "bar" [ ~ false >= 123 ] + ( true != ! ! ! ( ! - 123 & foo ) / ! foo ) . foo -- { ~ false . foo != foo . foo / true ++ ;
 } ;
 } ;
 } ;
 } else { if 123 <= foo . foo { if ~ false + "bar" / "bar" < foo { for var foo int = foo >= - "bar" ( true > "bar" [ ! "bar" . foo ] , ~ 123 [ foo >= ~ ! - ~ ~ ! "bar" ] < ! - ! ! ! 123 ) ;
 foo ;
 true != false { if 123 { - ~ ~ ( false ( foo , ~ ~ ( ~ ~ ! - "bar" ) . foo & ~ ~ foo ) ) ( ) ^ ! ! true ++ ;
 } else { ( ! "bar" ) ^ ! ! - false += false | ( ~ ~ ~ ! 123 ) == 123 ;
 } ;
 } ;
 } else { false ;
 } ;
 } else { for val foo int . int . int = foo . foo ;
 123 >= false ;
 ~ ~ true . foo -- { if ~ ~ ! ( ~ - true + false ) [ - ! false ( true ( "bar" , - ( 123 . foo - - - false ) ) , ~ - "bar" ) & ! ( ~ - - ( ~ ! ~ - 123 . foo ) ) ] { if ! ! false . foo { 123 ;
 } else { ~ foo . foo != - ! foo -- ;
 } ;
 } else { 123 / foo != true *= foo ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 func foo ( ) int . int . int { - ( foo . foo == 123 ^ ! ! true [ "bar" ] >= ( "bar" [ ! - ~ true ] ) ) > - ! foo *= foo - ! true * ! ~ - ( false ) ;
 } ;
 } ;
 class foo { func foo ( ) int . int { for val foo int . int = false ;
 ~ ! ( - ( ~ - foo >= "bar" / false ) | false [ - - false . foo ] * true ) ;
 ! 123 == true [ ! foo ( ) * 123 ( ) ] -- { ~ ! - ( false ) [ false == ~ ( "bar" ( ~ ~ "bar" , ( "bar" ( ( false ) , 123 . foo ) / ( ! ~ true . foo ) . foo == "bar" ( ) ) . foo ) ) ] += ! ~ ! "bar" - "bar" ;
 } ;
 } ;
 func foo ( ) int { if 123 != ( ! 123 ) >= false { - ( - ~ ~ - ! ! ~ - ! ( - - - - true & - 123 == ! "bar" ) ) = ( ~ 123 . foo ) ;
 } else { for var foo int . int . int = - ! false & ~ - ( true . foo ) ;
 ! foo ;
 false ( ! - "bar" ( ) > ~ 123 , 123 ( - ! ! ! ~ true ^ ( false ) > "bar" , 123 / ! - ~ - "bar" . foo + - ~ ! ~ false ) ) /= ! 123 != ( "bar" ) { - - ( foo ) ( ) ++ ;
 } ;
 } ;
 } ;
 func foo ( ) int . int . int { - true - ( ! ( false ) != false ( ) ) ;
 } ;
 func foo ( foo int . int ) int . int . int { for var foo int . int = true [ - true ] ;
 false . foo ;
 "bar" . foo { if "bar" * ! - - false . foo != ! - ! - ~ ! ~ - ~ ! false ( ) < - ( true [ ~ ! foo ] > foo ) { if ! foo { "bar" / false . foo != ! false ;
 } else { if false { if ~ 123 . foo { if true ( ~ true ( ) >= true & ( - ~ false >= ~ 123 ) . foo , - true < - ( - "bar" ) [ ! ( ~ true ( ) > "bar" ) / - ! false ( "bar" , ( - - ! - ~ ! - ( ( ~ foo > 123 ) ) ) ) - ~ ~ false ( ) ] & "bar" [ foo ] ) { if ! - true * 123 { for var foo int = foo ;
 123 * foo == - false ( ) & ~ foo ( foo , foo ) < "bar" ;
 ! - ~ "bar" * 123 - foo ( ~ true / - foo . foo , foo ) { true *= - "bar" ( ) ^ ! true ;
 } ;
 } else { false * true **= 123 ;
 } ;
 } else { if foo { if ~ - "bar" ( ) { for val foo int = ( - ~ false ) [ - ( - "bar" ) ] ;
 123 ;
 ( 123 ) ( ) *= 123 ( ) { ( false ) /= - ! "bar" ;
 } ;
 } else { if ( "bar" ) <= foo { foo & foo < foo += true ;
 } else { - - ( false <= - - foo != "bar" . foo ) ;
 } ;
 } ;
 } else { ! 123 <= - ~ ! foo += ~ ! - - foo ;
 } ;
 } ;
 } else { ~ foo ;
 } ;
 } else { ! true ;
 } ;
 } ;
 } else { - "bar" ;
 } ;
 } ;
 } ;
 func foo ( foo int ) int { - - foo ++ ;
 } ;
 foo int . int ;
 func foo ( foo int . int , foo int . int . int ) int . int { if foo / ! - foo { if "bar" > - "bar" { foo . foo >= - ! true [ foo ] **= - ! 123 [ "bar" ] ;
 } else { for var foo int = - - true + ( ! ~ - ~ ( "bar" <= ! - ~ - - 123 == ~ - foo ) ) [ ! ! true ( ) < ! - - - 123 / ! - ! ~ - true ] ;
 123 / 123 ;
 ~ ~ "bar" ^ - ( ~ 123 ) { for var foo int . int . int = ! ! - ! - ( ( true [ ~ - 123 ( ~ foo ( ! "bar" * true . foo , - - ! "bar" == true ) != ! ( ( ! - ( true ) ) ) < ! ~ ( ! ! ~ ~ ~ ! 123 [ "bar" ] & true ( false , foo . foo / true ) >= ! ! ! true ) , ! - ~ 123 != - "bar" ) ] == ! true ) [ ! ( ~ ~ ( ! ~ 123 ) ) ( ) ] ) ;
 ! - ! true [ ( ~ 123 ) ( ) ] ;
 ! ! ~ ! true *= foo [ "bar" ] { for val foo int = false ;
 false ;
 123 { true > false -- ;
 } ;
 } ;
 } ;
 } ;
 } else { if ! ~ foo + ! false { foo ( ) / ( ! ! ~ 123 [ "bar" ] ) . foo = ~ ( foo == true ) ^ ! ~ - - - false & ~ false > "bar" . foo ;
 } else { ! - true ++ ;
 } ;
 } ;
 } ;
 func foo ( ) int { - ( - ! foo != foo ) + 123 . foo ;
 } ;
 func foo ( ) int { foo -- ;
 } ;
 } ;
 class foo { func foo ( ) int { foo - true ;
 } ;
 func foo ( foo int . int , foo int , foo int . int . int , foo int , foo int , foo int ) int . int { "bar" += foo ( ) == ! ~ "bar" . foo > ! "bar" ;
 } ;
 func foo ( foo int , foo int , foo int . int , foo int , foo int ) int { for val foo int = foo ( ~ 123 ( ) + false . foo , ~ ( true ) & - ( ( 123 ) - ! true ) - foo ) | foo ;
 false ;
 false -- { ! ~ ! 123 ;
 } ;
 } ;
 foo int ;
 func foo ( foo int . int , foo int . int . int , foo int , foo int . int . int ) int . int . int { if ~ ~ 123 - ( - - ( - "bar" ) == ~ - ( ! ~ - foo . foo ) ) <= false { for var foo int = false ( ) ;
 - ! foo > 123 ;
 ~ foo - "bar" -= - foo | - true ( ) { if true { ! "bar" [ ~ 123 ] ++ ;
 } else { 123 [ true ] + - - true ( ) >= foo ( ) ^ foo ;
 } ;
 } ;
 } else { if ! ( true . foo ) [ ! true ] ^ 123 >= foo [ ! 123 ] & ! ! false ( - - foo . foo , ~ false ) { for val foo int = foo ;
 false [ ! ( false ) ] >= ( - foo ( - "bar" - foo , 123 ) - "bar" ) ( ) ;
 ~ ! "bar" { - ! ~ - ! foo += - - ! ( ~ ~ - - ( ! ( ! ! ! foo ) ) & true - ( ~ ~ false . foo < 123 != true ) ) ( false ( ) , ( ~ - - ~ ~ ~ false == false * ! ! ~ false . foo ) ) - - ~ foo != - false ;
 } ;
 } else { if foo { - "bar" -= false ;
 } else { ~ ! - 123 ( ) /= false ;
 } ;
 } ;
 } ;
 } ;
 } ;
 var foo int = false | true . foo ;
 class foo { func foo ( foo int ) int . int . int { if ~ ( - - true ) { ! - 123 > ( false [ foo ] ) = ! 123 ( - true , true ) > foo / foo ^ ! - false ;
 } else { ~ - false [ true ( ! foo ( ) , - - - true / 123 ) ] < true += ~ 123 ( ) - - ~ ~ ! - ! true ( ) == false ;
 } ;
 } ;
 func foo ( foo int . int , foo int ) int { if true { ~ true & ~ "bar" . foo < - foo ++ ;
 } else { for val foo int = ! foo [ ~ ~ ~ ! true == "bar" ] ;
 ~ 123 ( ) | true [ ! ! false * ~ foo ] ;
 123 < false -= ~ "bar" { foo ;
 } ;
 } ;
 } ;
 foo int ;
 foo int ;
 foo int . int ;
 foo int ;
 foo int ;
 func foo ( ) int { if "bar" { ~ ~ true -- ;
 } else { ! foo >= 123 /= ! 123 ;
 } ;
 } ;
 foo int . int ;
 foo int . int . int ;
 } ;
 val foo int = 123 ( ! ~ ~ 123 ( ) , ( foo / ! ~ false > 123 ) != false ) ;
 class foo { foo int ;
 } ;
 func foo ( ) int { ( ~ ~ - true != ! ( ~ false . foo ) ) ++ ;
 } ;
 func foo ( foo int ) int { ! false + true /= true > foo ;
 } ;
 func foo ( ) int . int . int { if true . foo - - false >= - ( ! true ( ) ) { if ( 123 == false [ ~ ( foo - - false . foo ) [ - ~ foo ] ] > "bar" ) { if ! - ( ! - true ) + - ~ ! ~ false != true { 123 | - - "bar" * ~ false == "bar" -- ;
 } else { if 123 == false <= "bar" { false [ true [ ~ ~ "bar" & false ] ] -- ;
 } else { for val foo int . int . int = - - "bar" ;
 ~ foo ( ) ^ ! ( false ) ;
 ~ false - ~ ( ! 123 . foo ) /= ( - ! foo ( ~ ~ ! foo . foo , ( - ~ false ) ) != ! - ( true ( ! false , 123 ) ) ) { if ( ~ ! - ~ true | 123 * false ) { 123 [ "bar" ( ) ] *= ! ~ - ( "bar" ) ;
 } else { if "bar" | true { for var foo int = - - ( ! ! ( ! ! ~ ~ ( true | ~ ~ - ~ - - ! false ) ) ) ;
 foo ;
 ! ~ - ( ! foo ( foo [ ~ "bar" [ ~ true ] ] , ! ! false ) & ~ - foo + "bar" ) >= foo * "bar" [ ( ! - ~ ~ "bar" ) ] ++ { for var foo int = - foo ;
 - ~ true != ! ~ 123 ;
 - - ~ ~ ~ - - ( foo [ 123 ] ) * ! - ~ - - ~ ~ "bar" == ~ "bar" [ ! ~ ~ ( ~ ( 123 * - - false ( ) == foo . foo > ~ ! 123 . foo ) ) ] ++ { true [ ~ true . foo ] *= ! ~ true [ false . foo | - - 123 ] ;
 } ;
 } ;
 } else { for var foo int = ! "bar" + ~ ! false <= ! true [ ! ~ ! true / - foo ] ;
 - ~ ~ ! ( 123 / ! ! ( 123 ( ) != - false ) ) ;
 "bar" ( ) -- { ~ "bar" >= ( ( - false & false . foo ) . foo < - 123 ) == "bar" [ true ] = ( foo . foo ) ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { for val foo int = 123 . foo & - foo [ - ~ ! 123 ( 123 , ~ foo ) ] ;
 123 ;
 123 -- { true += - - true ;
 } ;
 } ;
 } else { if ( ! false . foo ) . foo { ! foo ;
 } else { for var foo int . int . int = - true ( ) ;
 true / foo . foo ;
 "bar" [ 123 == "bar" < true ] - ~ 123 /= true { if true ( ! - ( ! ~ "bar" / - false | true . foo != false [ ~ ~ false & false . foo ] ) , ! 123 ) { if ! 123 / - true { for var foo int = "bar" / foo ;
 - - false [ "bar" * false ] != false & false ;
 false ( ) == ! ~ - ! true & true ( true * - - "bar" [ - 123 [ true ] ] , ! true ) { false -- ;
 } ;
 } else { - ! - "bar" = ~ false ;
 } ;
 } else { ! ~ ( ! - ( foo ) . foo != ~ - true ) ( - 123 & ~ - true ^ false , ~ - false ) *= - true ;
 } ;
 } ;
 } ;
 } ;
 } ;
 var foo int = "bar" ( ) ;
 func foo ( ) int { for val foo int = true ;
 foo ;
 true / ~ 123 -- { if 123 ( foo , ~ - ( ~ 123 ) ) { for var foo int . int = "bar" ;
 ( 123 ) [ ~ ~ 123 > - true / ~ ( - - foo ) ] ;
 - - - false <= ( ( - ~ true ) . foo ) { if true == - "bar" { if ~ 123 . foo { if true . foo { if ! foo != 123 . foo { for val foo int = 123 ;
 ! ( false [ - ~ - ~ foo . foo / "bar" ] & "bar" ) != ! - ~ ! ~ false <= ~ ! ! - ! 123 ;
 true { ~ ~ ! - false ;
 } ;
 } else { ! ! ~ ! - ~ ~ - false ++ ;
 } ;
 } else { if "bar" - ~ 123 * - 123 >= - ~ - ~ ~ ! "bar" { for val foo int = ( 123 ( ) < ! - foo ( ) ) ( ) * - ( true ) ( true , - ~ ~ - "bar" ) | ~ false ( 123 + ~ ( ~ false ) , foo . foo ) ;
 "bar" + ~ ! true == ! ! false + true > ~ ~ false ;
 ~ ~ ! ~ ! "bar" ^ ! "bar" ++ { for var foo int . int . int = - ( ~ foo ) [ 123 ] != ! false ;
 true [ true ] ;
 true *= 123 ( ) { - - "bar" -= ~ ~ ~ foo . foo ;
 } ;
 } ;
 } else { false * foo /= ( "bar" ( 123 [ - foo ] * ( ~ true ) , true . foo < ! true ) == ! ~ - ~ ~ ( ! false * true != true + ! true ) ) ;
 } ;
 } ;
 } else { for val foo int . int . int = ( 123 [ 123 ] <= ! - - ! true ) ;
 - - 123 ;
 true ++ { if ! - ! ~ ~ ~ true { if - ~ false { ~ false [ foo ] ++ ;
 } else { if ! "bar" . foo + 123 { if ~ foo ( ) <= ~ ! ! false ( foo , ! true [ ~ ~ 123 | true & - - - ~ ! ! ! ! - false ] / ~ - ! ~ - "bar" ) { "bar" [ 123 ] - ~ ~ - ! false == "bar" = foo ;
 } else { if 123 { if - ~ false . foo { "bar" . foo > ~ ( - ( ! false - foo ( ) ) * 123 ) ++ ;
 } else { 123 /= - - ~ - ~ true < - - ! - ! - true ;
 } ;
 } else { if ! - 123 ( - ( false [ ! 123 ] ) - ! ! - - false ( ~ ~ ~ "bar" < - - ! false , ! true + ! ( ! ! - ~ ~ 123 ) ) , - foo . foo ^ foo > ! ( ! foo . foo & ! false ) ) / ! false { - false != "bar" += - ( - ( "bar" - true ) ) ;
 } else { if "bar" * true { for var foo int . int = - ~ - ! - foo ;
 ( false ) ;
 ~ false [ - ~ ! ! true . foo & - ~ foo [ ! false [ ! foo ( ) * - ~ ( ~ ~ 123 ) . foo > ~ true / ~ ~ ! ( ! foo ) . foo ] ] ] -- { for var foo int = foo ;
 ( foo ) . foo | "bar" ;
 123 . foo -- { - ~ ! "bar" [ "bar" ( ) ] += 123 [ - ! false ] ;
 } ;
 } ;
 } else { for var foo int = ! "bar" . foo ^ ! "bar" ;
 ( ! foo ) ;
 ( ! ~ ! 123 ( false | - ~ ! - - foo . foo , 123 ) ) . foo { ( ! foo ) ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { for var foo int = ( ! foo ( ~ ~ "bar" [ ! - "bar" ] , ~ ~ ! ! "bar" . foo ) ) ;
 false ;
 "bar" / ~ ! "bar" { ~ false ;
 } ;
 } ;
 } ;
 } else { 123 ( ! 123 , true ) -- ;
 } ;
 } ;
 } ;
 } else { for val foo int . int = ~ ~ foo & ! ~ - ~ - ( ! ! ( ! "bar" & ( "bar" . foo ) ( 123 [ ~ true * false ] , ! - ! ! ( 123 | 123 ) ) ) . foo ) ;
 ( ~ ! "bar" ) . foo < true [ 123 ] ;
 "bar" { ! foo [ ! ( ! ~ true ) ] += ~ ~ ! ~ "bar" ;
 } ;
 } ;
 } ;
 } else { "bar" & 123 ( "bar" ( false , false ) , ! foo != ~ ( - "bar" [ "bar" != ! ! true ] ) [ foo > true ( foo , ! false [ ( ! ~ ~ ! - false & - ! ! "bar" ) ] ) | - ~ 123 ] ) ;
 } ;
 } ;
 } ;
 val foo int = 123 ;
 func foo ( foo int , foo int , foo int . int . int ) int . int . int { if - - true { false -- ;
 } else { true . foo ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int ) int { - ( "bar" [ ~ ~ false [ - "bar" == ! 123 . foo ] ] ) ++ ;
 } ;
 val foo int = - 123 [ ~ true + true ] ;
 var foo int = "bar" ( ) | ( ( foo <= ! false [ ! "bar" [ - ~ false [ 123 ] ] ] ) ( ! false , "bar" ) + - ~ ( ~ ~ foo . foo ) ) >= ! ~ ~ false [ ! ( ( ~ ( ~ 123 ) & 123 ) ) ] / ! ! foo ;
 class foo { foo int ;
 foo int ;
 func foo ( ) int { for var foo int = - - ! ~ ( ~ false ) ;
 ~ 123 . foo & ~ ~ true ;
 123 + false -- { - "bar" == ~ true . foo = - false ;
 } ;
 } ;
 foo int ;
 func foo ( ) int { foo & - "bar" += ~ ! - 123 ;
 } ;
 foo int ;
 foo int ;
 func foo ( ) int { ( ! ~ - 123 ) >= - ( ~ 123 - - ~ "bar" [ "bar" ] ) [ false - - ( 123 ) ] = ! ~ "bar" ( "bar" , ~ - - - 123 - ( ~ "bar" ) [ - 123 ] >= 123 ( ) ) == true ;
 } ;
 foo int ;
 foo int . int . int ;
 } ;
 class foo { func foo ( ) int { if ~ ~ ! - true { ~ ~ ! foo ;
 } else { "bar" -- ;
 } ;
 } ;
 foo int ;
 func foo ( ) int . int . int { ~ ! "bar" ;
 } ;
 foo int ;
 func foo ( foo int , foo int , foo int ) int { true /= "bar" >= false != - ~ - ~ ~ ! "bar" . foo ;
 } ;
 func foo ( ) int { for var foo int = "bar" [ false & - false ] ;
 123 [ ( - ( false ) ) ] ;
 true . foo & true ++ { for var foo int = foo ;
 ! 123 ;
 ( ! ~ 123 ) == - ( "bar" ) /= foo <= ~ ! false { for var foo int . int = ! ( ! true ) == ( false ( - "bar" > ! "bar" , ~ - ! - ! 123 ) & - ! true ) [ true . foo * foo == true ] ;
 ! "bar" / ( - foo ) ;
 foo + ~ ! ~ "bar" ( ) { - 123 **= "bar" ;
 } ;
 } ;
 } ;
 } ;
 foo int ;
 foo int ;
 foo int . int . int ;
 foo int . int . int ;
 } ;
 func foo ( ) int . int { 123 -- ;
 } ;
 class foo { } ;
 func foo ( foo int . int , foo int ) int . int . int { ! - "bar" -- ;
 } ;
 
