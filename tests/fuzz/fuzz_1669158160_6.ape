module foo ;
 var foo int . int = 123 | true ;
 var foo int = ! ! ! ~ ~ - ! ( ! - ( - - true ) ( ~ ! false + ! false , ! ! false ( ) ) * - ~ foo ) ( ~ ( false ) , 123 == false ( ) ) > - ~ - ~ true != ( 123 ( ) ) ;
 func foo ( ) int { if "bar" { for val foo int = ! ! true & ! ( true ) == - ( - ( true >= 123 ) > 123 ( ) ) ;
 foo ;
 - - ~ ! ! foo { for var foo int = false ;
 foo [ 123 ] * ~ ! "bar" ;
 ~ ( ~ foo . foo ) ( false , ~ ! ( - ( ( ! - ~ 123 ) & false + ( ~ - - - - false / 123 ) ) ) < - true == ! ! - - - ! false ( ( "bar" . foo ) & ~ "bar" , "bar" [ false . foo ] ) + - 123 . foo ) { ! ! - foo += ! "bar" < true ;
 } ;
 } ;
 } else { ~ true / ! ~ false . foo /= ~ ! ! - ~ ! ( - false . foo | ! 123 & ( - ( ~ - - false ) ) ) ( true , "bar" ) ;
 } ;
 } ;
 class foo { func foo ( ) int . int { - foo == true & 123 [ ! false [ ~ true ] * - ( ~ true ( ) ) != ! ! ~ ~ 123 ] = ~ "bar" [ ! "bar" ] ;
 } ;
 foo int ;
 foo int ;
 func foo ( ) int { - ( 123 * - "bar" ) != ( "bar" == true ) ^ ! ! ~ ! ~ ~ 123 **= foo ;
 } ;
 foo int ;
 func foo ( foo int . int . int , foo int , foo int , foo int ) int { ~ ! ~ - ( 123 ) ;
 } ;
 func foo ( foo int , foo int . int . int , foo int . int . int , foo int ) int { if ~ 123 [ ~ true ] { false ++ ;
 } else { if ! false { for var foo int . int = ! "bar" ;
 ~ - ! false ;
 "bar" . foo * 123 -= - ~ - foo . foo / true { if - false { for val foo int . int . int = foo == false ;
 "bar" ;
 123 -- { false & ! ~ "bar" [ - ~ ~ false . foo ] ;
 } ;
 } else { for val foo int = - - "bar" == ! "bar" | true & "bar" ;
 true ;
 ~ ! - ~ false . foo { 123 - ! foo ++ ;
 } ;
 } ;
 } ;
 } else { if "bar" . foo { if - ! - "bar" <= ~ ~ 123 == true { if ! "bar" | "bar" { for var foo int . int = - ~ - - 123 > false | false ;
 ~ foo ;
 ~ ~ true = - 123 * false { if ! "bar" { for var foo int . int . int = foo . foo ;
 ! ! - ~ true + ~ ! false ;
 "bar" { for val foo int . int = ~ ! ! ! false * foo == ( 123 == ! ~ foo [ "bar" . foo ] ) [ false [ ! 123 ] * ! false ( ) ] ;
 foo ;
 123 . foo ++ { "bar" /= true . foo ;
 } ;
 } ;
 } else { 123 | ~ ~ ( ( false ) ( ) ) [ 123 [ foo * "bar" ] ] -= foo ;
 } ;
 } ;
 } else { false < false ;
 } ;
 } else { - ~ - "bar" / foo ( ) ;
 } ;
 } else { - ! ! - - ( false > - ! ! - 123 * ~ ! true [ ~ ~ ~ 123 != "bar" ] ) ++ ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int ) int . int { ( true ( ) ) [ ~ "bar" ] != ! ~ false -- ;
 } ;
 func foo ( ) int { if foo { if - true < ! ~ 123 ( ~ - ( 123 < ~ ! - true [ ( "bar" [ ! false [ true [ ! false * - - - false . foo | ~ ! "bar" ] ] ] ) ] != ~ 123 [ true . foo ] ) >= - ( ! true ( ) ) ^ ! - ( 123 [ ! ~ true [ foo ] ] == ~ ( "bar" ) < ~ "bar" . foo ) , ! - ! ~ ! ! - ( true ) & ! - ! 123 ) * 123 ^ true { ( false ) -- ;
 } else { false += foo ;
 } ;
 } else { 123 ;
 } ;
 } ;
 } ;
 class foo { foo int . int . int ;
 func foo ( ) int { for val foo int = - 123 != true . foo ;
 - 123 ;
 - false -- { ~ 123 /= false ( "bar" , ! "bar" ) == ( "bar" ) ;
 } ;
 } ;
 foo int ;
 foo int ;
 func foo ( foo int , foo int , foo int , foo int ) int { ( - ~ ! ~ ~ ! ~ ! ! ~ ~ ! - foo ) += ! - ( "bar" ) ;
 } ;
 foo int ;
 func foo ( ) int . int { ! - true ;
 } ;
 func foo ( ) int { for var foo int . int = ~ false ;
 - - true ;
 - ( - false ) **= true { ! - ! false = - ~ 123 ;
 } ;
 } ;
 } ;
 class foo { func foo ( ) int { ~ "bar" = - false & true ( ) ;
 } ;
 } ;
 val foo int . int . int = - false ;
 class foo { foo int . int . int ;
 func foo ( foo int , foo int . int . int , foo int . int , foo int , foo int ) int . int { for var foo int = ( ! true ) . foo ;
 "bar" [ - - ~ ~ foo ] ;
 "bar" { - ~ 123 [ ! ( ! ~ foo ) ] ;
 } ;
 } ;
 func foo ( ) int { ~ ! ( ~ ! ! ( "bar" ) ) ;
 } ;
 func foo ( foo int . int . int , foo int . int . int , foo int ) int { for val foo int . int = ! ~ ! ! "bar" ( ) ^ false . foo != ! 123 / - true ;
 ! foo . foo > foo ;
 - 123 <= 123 { for var foo int = 123 ;
 ~ foo [ ~ ( true ) ] >= "bar" ;
 false [ - 123 ( ! true * - - false , "bar" ) | foo > - ! foo != ! ! - - foo ( ) ] /= - true * ! "bar" [ ~ "bar" ] { "bar" ++ ;
 } ;
 } ;
 } ;
 foo int ;
 } ;
 var foo int . int = ! foo [ ! ~ "bar" ( true * - - false [ "bar" ] , - ( "bar" - ! true ) != 123 [ - - false . foo != false * ~ ~ ~ 123 ] ) * ! 123 ] ^ - ( true ) == ! 123 ;
 class foo { foo int . int ;
 func foo ( ) int { foo /= foo ;
 } ;
 } ;
 func foo ( ) int { if true * ~ "bar" { - "bar" ;
 } else { if ( ! false . foo | ~ ~ 123 < true ) == foo { if ! ~ - - ( - - ~ "bar" ( ) != - 123 ) { foo . foo & 123 **= "bar" ^ true ;
 } else { ( ~ ~ - false [ true & ~ false ( ) ] <= "bar" [ ! ~ ~ 123 ] ) ;
 } ;
 } else { ! false . foo * 123 ++ ;
 } ;
 } ;
 } ;
 class foo { func foo ( ) int { 123 = ! false ^ foo ;
 } ;
 foo int ;
 foo int ;
 foo int ;
 func foo ( foo int , foo int , foo int . int . int , foo int . int , foo int . int ) int { false ;
 } ;
 func foo ( ) int . int . int { foo /= true ;
 } ;
 foo int . int ;
 foo int . int ;
 } ;
 func foo ( foo int , foo int , foo int , foo int ) int { if ( ~ - - "bar" [ 123 ] ) [ - false . foo ] { if "bar" { - true = false [ "bar" ] / ! ~ ! ! ! "bar" . foo ;
 } else { for var foo int . int = 123 * true == ! ~ - ! ~ ( - - - - true ) ;
 true ;
 ! true *= - ~ ~ foo { for var foo int = - ~ foo ;
 - ! ~ ( ~ true [ ~ - ~ true ] != 123 - true ) * - 123 ;
 "bar" -- { ( ~ true ) * ! - ~ foo ++ ;
 } ;
 } ;
 } ;
 } else { - ! - false ;
 } ;
 } ;
 class foo { func foo ( ) int . int . int { ~ ! foo . foo -- ;
 } ;
 foo int ;
 foo int . int ;
 func foo ( foo int , foo int , foo int . int . int , foo int , foo int . int . int ) int . int { for var foo int = ! - - "bar" ;
 - foo ( ) ;
 123 ( ) -- { for val foo int = 123 + ! ! - foo ;
 ! true ;
 ~ 123 . foo > true { if - ~ "bar" { if ~ - ( - ! false ) [ foo > ( ! false != "bar" ) ] { for var foo int . int . int = ( - true . foo < - - ( ~ ! false ) ( true , 123 . foo ) == 123 ) | ~ true [ true ] ;
 ~ ~ ! foo . foo ;
 - foo += ~ 123 / ( ! foo <= "bar" ) { if ~ ( - ( false [ "bar" [ ~ "bar" ] == 123 + - 123 [ - ! - - true ] ] ) . foo ) <= ! "bar" . foo { ! 123 ( 123 [ ! ! 123 . foo ] , ~ ! ! "bar" ) -- ;
 } else { if "bar" <= - ~ 123 [ - true ] { - ~ "bar" **= - "bar" [ false & 123 ] & ! false ;
 } else { 123 -= ! - ~ - ~ "bar" ;
 } ;
 } ;
 } ;
 } else { if ~ "bar" | 123 { true . foo /= ~ - false ;
 } else { ~ ( ~ "bar" ) . foo & ~ - ! ! false [ - foo [ false ] ] ++ ;
 } ;
 } ;
 } else { for val foo int = ! ( 123 ) ;
 true ;
 foo -- { if ( "bar" ) == ! ! ~ 123 [ - - true ] { if - - ~ - - false { for var foo int = ! ( ~ - - foo ) . foo ^ - 123 ;
 "bar" . foo ;
 foo /= foo { for var foo int = - ~ ~ false [ true ] <= "bar" ;
 123 ;
 - ! - - ~ "bar" > "bar" != ! false { if ! ! ! ( true ) / "bar" . foo { if - - ( false . foo > foo ( ( ( - ~ false ) . foo ) [ ( ( - ~ true ) ( true . foo , ~ ( "bar" ) ) / ~ - foo . foo ) ] , foo < ( ( "bar" . foo ) ) ) ) < - ! - ( 123 ) { foo . foo **= ~ 123 ;
 } else { for var foo int = - true ;
 - foo ;
 false ^ - ( ( 123 ) ) == ! ~ ! ! ~ - ( 123 [ ~ true ] + false == false ) -= foo | ~ ~ ! ( "bar" != - true . foo ) > ( ! foo . foo ) - ~ "bar" { "bar" ( ) ;
 } ;
 } ;
 } else { if foo [ - false ] >= 123 ( ~ ! ( ! "bar" - false / ~ true ) , - "bar" ) * false { ~ ! false - true /= - - "bar" ;
 } else { for var foo int . int = ! ! foo | ! foo ( - ~ foo / false ( ) , ! true ) ;
 - ! 123 / 123 . foo - false [ "bar" ] ;
 ! ~ ! "bar" [ ! ~ ! 123 ] * ~ true + - - ! 123 ++ { for val foo int = ! - foo ;
 ( ! ~ true [ 123 ] ) ;
 ! ~ ! false { ( true ) . foo **= ! ~ true < foo ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { if - 123 { if false < ~ ! 123 { ~ foo < 123 ;
 } else { for var foo int = 123 ;
 true ;
 false { for var foo int . int = ~ - ( "bar" ) ;
 ( "bar" ) [ "bar" [ 123 ] ] ;
 foo + ( false ) . foo { foo ( ) * ~ ! ! ~ "bar" += ! 123 <= 123 ( foo < ! ! true , ( foo ) ) ;
 } ;
 } ;
 } ;
 } else { if ! ~ ! ~ foo ( - ~ - ~ ( ( false / 123 ) ) . foo == ~ - ~ - true + false . foo & ~ 123 , - true [ ~ ( - 123 ) ] ) != 123 { if ~ 123 { - ~ "bar" ( ) != - ! foo . foo -- ;
 } else { ! ! ~ ! - ! false ;
 } ;
 } else { "bar" ;
 } ;
 } ;
 } ;
 } else { if true / ! "bar" { if ~ - "bar" [ ~ true ] { false *= foo . foo >= ~ foo ;
 } else { if ~ ! 123 { for val foo int = 123 ;
 ! - 123 . foo ;
 "bar" [ 123 . foo != ( foo ) ] == ~ 123 /= ~ false { 123 > false -- ;
 } ;
 } else { ! true -- ;
 } ;
 } ;
 } else { 123 [ - - foo ] < "bar" [ false ( ) | "bar" ] / ! ! - - foo = - ! ( - ( - - ! false ) ) ( foo . foo | ( ! false . foo ) == 123 , ~ 123 ) != - - ! foo ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 func foo ( ) int { if "bar" & 123 ( ) { ! ( true ) ;
 } else { if foo / ( true . foo ) { for val foo int . int = - false ( ! ~ ~ ! - false >= ( ( foo . foo ) [ ~ 123 ] ) , - true ) > ( "bar" * "bar" != 123 ) ( ) ;
 - ~ - ~ false [ ~ ! ! ~ ! false ] ;
 ( ( foo ) ( ( - foo ) [ 123 ] , ~ 123 / - ~ - ~ - - ~ ! ( "bar" ) ( ) ) ^ foo ) -- { ~ ~ false **= - 123 . foo != true ;
 } ;
 } else { for var foo int = ! ~ foo ;
 123 - - ( - false == 123 . foo ) ;
 ~ foo <= ~ ~ ~ - ( true == false ) [ - ~ foo ] ++ { for var foo int . int . int = foo ;
 ! - "bar" / ( false ) ;
 "bar" . foo -= ~ 123 { if ~ ( ( "bar" ) ( ! ! ! false , ( - "bar" ) & ( foo [ "bar" ( false ( - ! 123 , foo >= ( "bar" ( ) ) ) > ! ( foo ) , false * foo ) ] ) [ ~ true != ~ foo > - foo ] ) != ! - 123 [ ~ true ] ) { true ( ) ;
 } else { if true [ ! - ! ! ! true * ( ~ ( ! false [ ! - ! foo ] ) ( - true , foo ) ) ] { false ;
 } else { ! ~ true ++ ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 foo int . int . int ;
 func foo ( foo int , foo int . int ) int . int { ! ! ~ ~ true ( ) = foo ;
 } ;
 } ;
 func foo ( ) int . int . int { - ! "bar" ++ ;
 } ;
 func foo ( foo int . int . int , foo int , foo int , foo int , foo int , foo int ) int . int { ! foo [ - "bar" . foo + ! ! ~ true ] -- ;
 } ;
 var foo int . int = false [ ! - ! ~ - ~ ~ false ] ;
 var foo int = ( false . foo ) & false ;
 class foo { foo int ;
 func foo ( ) int { ~ 123 < - - ~ "bar" ( ) ++ ;
 } ;
 func foo ( foo int ) int { 123 ;
 } ;
 foo int ;
 foo int . int . int ;
 foo int . int . int ;
 func foo ( ) int { for val foo int = ~ "bar" [ - ! false ( ) != false ] > true ;
 true ;
 false [ ~ ~ ! - ( ! ! ! - ~ ! "bar" ( 123 - ! 123 . foo , "bar" ) ) ] | "bar" ++ { if ~ 123 ( ) { - "bar" [ "bar" <= 123 ] ++ ;
 } else { if - ! - ~ "bar" [ 123 . foo ] { foo ++ ;
 } else { for var foo int = - - - true ;
 "bar" == "bar" ;
 ! ~ false { "bar" . foo > ~ "bar" [ "bar" . foo ] -- ;
 } ;
 } ;
 } ;
 } ;
 } ;
 foo int . int ;
 func foo ( ) int { if 123 / - - ! true ( ) { ~ ~ "bar" ^ - foo ;
 } else { if "bar" { ( - ! ~ 123 ) = ! - ~ 123 ;
 } else { if "bar" [ ( ! ! ~ ~ foo ) ] { ~ ! ( true ) < ! ~ - - foo . foo ;
 } else { ! ~ ! foo -- ;
 } ;
 } ;
 } ;
 } ;
 func foo ( ) int { false /= ~ - foo < 123 ( ) ;
 } ;
 } ;
 class foo { foo int ;
 foo int ;
 foo int . int . int ;
 func foo ( ) int { foo ;
 } ;
 foo int . int ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) int { false - ~ ~ - foo ( ) -= ! ! 123 < true ;
 } ;
 } ;
 val foo int = 123 ;
 var foo int = true ( true / foo , ~ - ! ! "bar" - ~ ( ~ ! - ! - "bar" >= ! ! foo & foo + false . foo == - true ( ) ) ( - "bar" , - - ( ( - ( ( ! ! ! ( ~ "bar" ^ ! foo == - - - ! - ~ 123 ) [ ! 123 ] ) <= 123 == ! ~ "bar" ) ) ) ) & ~ true ) ;
 func foo ( foo int , foo int , foo int , foo int ) int { "bar" ( ) == false * 123 ;
 } ;
 val foo int = - ( foo ) != foo [ ~ ~ ! "bar" ] ;
 func foo ( ) int { for var foo int = - - 123 ;
 - - "bar" ;
 ! true ++ { if ( foo ) ^ false { for var foo int = foo / ( false ) ;
 false - 123 . foo ;
 ! ! foo = foo / "bar" { if ! true . foo { ( false . foo ) != - ! true ;
 } else { "bar" == ! - ! 123 ;
 } ;
 } ;
 } else { true -- ;
 } ;
 } ;
 } ;
 class foo { } ;
 func foo ( ) int . int . int { for val foo int = ~ ( ~ ~ ( ! "bar" ) ( ) ) . foo ;
 - ~ ! ! ! ! "bar" . foo & false ;
 false { ! true / - ~ "bar" *= ~ true ;
 } ;
 } ;
 class foo { func foo ( ) int { if ~ ! ! ~ - ( - - true ) { for val foo int = true ( "bar" [ - ! ~ false ] & 123 , 123 [ - true ] ) ;
 123 ;
 ! ~ ! true ++ { foo ( foo [ ! ~ "bar" ( 123 , - ~ 123 ) | ! - ~ - foo ] == true * true , false [ ! true ] ) == - - true ;
 } ;
 } else { "bar" = ~ ~ ! ( false <= ~ "bar" == - - ! - false ) * - false + foo != ! ! 123 ;
 } ;
 } ;
 func foo ( ) int . int { - false ;
 } ;
 func foo ( ) int . int { for val foo int . int = - ~ ! ~ ! 123 . foo ;
 ~ - ~ ! "bar" [ 123 ] ;
 "bar" ( - ~ "bar" , ! - ~ ~ ~ ~ ! false ) -- { ~ 123 -= ! ~ ~ - false <= foo ;
 } ;
 } ;
 func foo ( ) int { if true { if - 123 ( ~ - foo , 123 ) | true { true . foo -- ;
 } else { if true * foo { false / ! ~ ~ ~ ( ~ ( ! ~ ( ! - ! - ! ! true ( 123 , - - ~ - "bar" ) ) ) ) ;
 } else { for var foo int = - ! ! ~ true ^ - foo ;
 false [ - - - ~ false [ ! 123 [ - ( ! ~ ( "bar" ) ) . foo ] - 123 ] ] ;
 ! true / ! ! - ~ false { - ! "bar" - false >= - true & ! foo ;
 } ;
 } ;
 } ;
 } else { false ;
 } ;
 } ;
 foo int ;
 foo int . int ;
 } ;
 val foo int . int . int = false ;
 val foo int . int . int = - ! false ;
 class foo { foo int ;
 foo int . int . int ;
 foo int . int . int ;
 foo int ;
 func foo ( ) int { if ~ ( false ) { ~ true ++ ;
 } else { for var foo int . int . int = ! "bar" ;
 ~ 123 ;
 ~ - "bar" [ "bar" == ! ! ~ foo [ "bar" ] ] < true *= false { 123 - ( ! ( ( ~ ! false ) ) * ~ ! ! 123 ) <= ~ ~ - ! ( "bar" ( ( true ( ) ) ( ( foo . foo ) - ~ - ( 123 [ 123 [ false ] ] ) , foo [ - ( "bar" [ foo ] != true | ( ! ~ false ) ) ] ) != - ~ true > ! ~ - foo [ ~ - "bar" ] , "bar" ( ! foo . foo != ~ true , ~ ! false [ 123 ] * ! - 123 ) ) <= false ( ! true , ! - 123 ) / - foo ( ) ) ( 123 [ ~ ~ ~ - ~ - ~ 123 ] < ~ ! ( - ( - ( ( ! true [ ~ ! ~ ~ - ! ( ( ! ! false [ false + ! 123 ] ) ) ] ) ) & true ) ^ foo . foo ) != ~ foo , ! "bar" . foo ) ;
 } ;
 } ;
 } ;
 func foo ( ) int { ~ true [ 123 ( ) ] ;
 } ;
 foo int ;
 } ;
 func foo ( ) int { if ! "bar" ^ false { foo ;
 } else { for var foo int = true ( ) ;
 123 > - ! false ;
 "bar" = ~ ! ~ ! ! - ( "bar" - ( "bar" ) ) { if ! - - ( "bar" ) >= ~ ( "bar" ) { for var foo int . int . int = false [ - foo ] & false . foo != ~ ! "bar" - ~ true . foo ;
 "bar" / 123 > true != ( ! - foo & foo [ false ( ~ false , false . foo > - true ) ^ ! "bar" ] + "bar" ) >= false ;
 foo -- { for var foo int = ~ "bar" ;
 - "bar" <= ! ! - ~ false ;
 123 -- { if 123 { if 123 ( false , true ) { foo / - - true = 123 . foo ;
 } else { if - true >= ! ( ! - - true [ - - ( foo ) ] ) { ( ( foo | foo ( ) ) >= ! "bar" ) < 123 [ ~ ! "bar" ] ++ ;
 } else { if ! ~ foo != "bar" . foo { foo ;
 } else { for var foo int = ! ! - - true ;
 ~ false ;
 ~ foo . foo < ( false ) != - - foo { 123 += - ~ ( ( - - ( - ! - 123 <= - foo ( ~ ! ~ 123 - ~ - ( 123 ) ( ) , "bar" ) ) ) / ! ! ! ! ! ~ ! ~ foo + ~ true ( ~ "bar" , - "bar" . foo ) != true ) ;
 } ;
 } ;
 } ;
 } ;
 } else { if ! true { if ~ ( ~ - false < - foo ( ) ) { if ( "bar" | - - ~ foo <= - ! false ) { if ! ~ ~ "bar" { for val foo int . int = - ( "bar" - false * ! true . foo != ! true ) & ~ - false [ true >= false ] ;
 true [ ~ ! 123 ] ;
 true ( ) **= true [ ~ ~ ! ~ ~ "bar" [ ! false ] ] { - false -- ;
 } ;
 } else { foo ;
 } ;
 } else { if false . foo { if foo { ~ ~ - - "bar" >= "bar" -= - ~ - 123 ;
 } else { if ! ! ~ false { for val foo int . int = ( ~ foo . foo ) ;
 false ( ) ;
 - "bar" -= - true / - true | - ! foo { for var foo int = - 123 [ ! ~ "bar" ] ;
 false <= ! - foo != - - ! - ~ ! true ;
 true *= foo { if ( - - 123 ) { for var foo int . int = ( - ~ true [ ( ~ 123 ) [ ! ! "bar" ( false . foo , true ( ) ) > ! ~ false ] ] ) . foo ;
 true ;
 ! ~ ( ~ true ) [ false + 123 ] <= - foo -- { if ! true | 123 { 123 . foo *= ~ ~ "bar" ;
 } else { ! "bar" >= ~ ~ 123 == foo /= true * - "bar" ^ ~ ! 123 [ - "bar" / false ] & - ! - - "bar" ;
 } ;
 } ;
 } else { if true . foo { ! true += - ! - ( ~ ! ~ true ) ;
 } else { for var foo int . int . int = true ( ) ;
 "bar" ;
 ~ foo /= true <= - ! - "bar" / "bar" [ true * 123 ] { ~ - 123 [ ! 123 <= ~ foo . foo ] | ( "bar" ) ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { ~ ~ "bar" != "bar" > ( - ! ~ - ! ~ foo ( ! false / ~ true , foo ) ) ;
 } ;
 } ;
 } else { for var foo int = ! - ~ ! ( ~ ( ~ "bar" ) ) ;
 - ! true - ~ ~ ~ ~ - "bar" > ~ ( "bar" ) - - - 123 != ~ false ;
 ( - true ) / "bar" { for var foo int . int . int = foo == "bar" ;
 ! false . foo != ! "bar" . foo < ( - ~ foo ) ;
 ~ 123 . foo -= false ( ) ^ ( ( ~ ! ! 123 ^ "bar" ) <= ~ 123 ) { if 123 < - 123 { foo ( ) -= "bar" ;
 } else { ( false ) *= 123 / true [ ( false ) ( true [ ( "bar" ) ] , ~ ~ ! ! foo ( ) + foo > false ) / ! - ! ! - 123 ] != - ( ! ~ - ~ ( "bar" ) ) ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { if ( ! ~ ( 123 ) ) <= true { - - ( - ~ false == true [ true [ true . foo & ~ - foo [ ! ~ false ] ] ] ) + ! ! true -- ;
 } else { foo -= ~ false ;
 } ;
 } ;
 } else { for val foo int . int = ! - ( "bar" ) == "bar" / - foo ;
 - ( foo >= ~ "bar" ) ;
 - "bar" ( ) ++ { true . foo ++ ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { for val foo int = - false ;
 ( - ! "bar" ( ) ) ;
 ( true ) != false <= foo { for var foo int = ( ! ( ~ ( ~ ~ "bar" / ~ ! ~ ~ - "bar" ) & "bar" ) . foo ) * 123 ( ) ;
 true ;
 ! ( true ) { ~ ! ~ ! ~ ~ foo | - ! "bar" ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 class foo { foo int ;
 func foo ( ) int . int { for var foo int . int = "bar" == ( true ) ;
 123 ( "bar" , true ) ;
 ! foo **= ~ ~ "bar" ( - ~ ! ! ~ true , ( - - - true + ~ - ( 123 ) == 123 ) != ( false ) ) { for var foo int . int . int = ! ( "bar" ) ;
 ! - - ! ! - ~ ! - ~ - - "bar" . foo == ! ~ ~ 123 / false ;
 - 123 | 123 -- { true | 123 [ - ! ~ ! "bar" == 123 [ foo [ - ~ - ~ foo ] ] ] ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int . int ) int . int { for var foo int = false ;
 false ;
 "bar" /= ~ foo { for var foo int = 123 > ! true ( false , ~ ! 123 ) ;
 true ;
 - false ^ false [ ~ foo == ! ! false [ ~ ! "bar" ( ! ! ! ! 123 , - - foo ^ foo . foo ) ] < true ] { if ! - "bar" { for var foo int = ! 123 [ 123 ] ^ ( ! ( - "bar" [ "bar" ] ) ) ;
 ( false ) > ! ~ ~ - - false ;
 ( ! - ! - - ! true ) . foo = true ( ~ ! true ^ 123 [ - foo ] , 123 . foo + ~ - - ~ ( ! "bar" != ~ true ) ) { 123 ( ) -= false ^ foo <= "bar" ( ) ;
 } ;
 } else { if ~ ( ~ ! ! 123 == - true ) { if true { ~ true ;
 } else { for val foo int . int . int = "bar" ;
 foo . foo ;
 true == 123 [ ! 123 ] >= true [ foo ] **= ~ ! ~ ( "bar" < ~ ~ - 123 ) { if foo { for var foo int = - false ( ) >= - ! true ;
 - ~ ~ ( true ) ;
 ( - - ~ "bar" ) & "bar" ++ { 123 ( false . foo == - 123 , false . foo > ~ ~ false != ! foo ) == true ( ) **= ~ 123 ;
 } ;
 } else { 123 . foo -- ;
 } ;
 } ;
 } ;
 } else { for var foo int = false ;
 ( false ( ) ^ 123 . foo ) / foo . foo ;
 ! - ~ 123 ^ ! true = "bar" * "bar" { if ! ! ( 123 . foo ) { - ~ ~ "bar" ( ) += ~ true ;
 } else { false ( ) -- ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int . int , foo int ) int { for var foo int = ~ true ^ "bar" ;
 false ;
 ( ! - ~ foo ) **= "bar" { for val foo int = ( ~ 123 ( 123 , ! 123 / true ) / ! foo ( ~ true , ( ! 123 != - false ) ) ) ;
 ! - foo ( ( 123 . foo * ~ - ( ( true ) [ ~ "bar" ] ) [ ! ! ! false [ ! - - "bar" / ~ foo . foo != - foo . foo ] - "bar" ] ) , ~ ! ~ ~ - false [ ! false ( foo [ - ! true * 123 ] != true , ~ ( false [ ! ~ false ] ) ( 123 == foo + ( true ) [ foo == - false . foo ] , ( "bar" ) ) / true ) ] == foo ) ;
 ! true { if 123 < ( - true / ! ( true | ( foo < foo ) ) ) { ( - foo + ! ! true . foo ) ++ ;
 } else { - - ( "bar" ) ++ ;
 } ;
 } ;
 } ;
 } ;
 func foo ( ) int { for val foo int = ~ ~ ! ~ ! foo ;
 ( 123 ) ;
 true [ "bar" != 123 - ~ "bar" / foo ] { ~ "bar" ( ) = ! foo ;
 } ;
 } ;
 foo int . int ;
 } ;
 class foo { foo int . int . int ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) int . int . int { false = ~ ~ 123 ;
 } ;
 foo int . int ;
 func foo ( foo int , foo int . int ) int . int . int { ! 123 ++ ;
 } ;
 func foo ( ) int { false *= 123 ;
 } ;
 foo int ;
 } ;
 class foo { foo int ;
 foo int ;
 func foo ( ) int . int . int { - ( ! false ) [ 123 . foo ] -= foo ;
 } ;
 func foo ( foo int , foo int , foo int . int . int , foo int , foo int ) int . int . int { false / ! - true -= ~ - ~ false == ( false ) ( ~ ! ! "bar" , ( ~ ! ~ ( ( ( ~ ~ 123 ) . foo ) + true ) ) ) ;
 } ;
 } ;
 class foo { foo int ;
 foo int ;
 foo int ;
 } ;
 class foo { func foo ( ) int { ~ true != ~ - ! ~ - ( - true [ 123 - - ! "bar" ] ) & false . foo ;
 } ;
 func foo ( foo int , foo int , foo int ) int { for var foo int = false + ( - ~ "bar" ) ;
 foo ;
 ( ~ - - ! true ( ~ - foo . foo / ( ( - 123 . foo ) [ ! - true * true ^ false ] ) , 123 ) ) += ~ ( false ) { foo ;
 } ;
 } ;
 func foo ( foo int . int . int , foo int , foo int , foo int , foo int , foo int . int ) int . int . int { ( ( "bar" == ! true . foo ) ) ( ! foo , ! "bar" ) -= foo + - ! - ~ ! 123 [ - "bar" ( ) ] ;
 } ;
 func foo ( ) int { ( false ) [ ( ! "bar" & - ~ false ) & foo . foo ^ ~ 123 ] ^ ( true ) ++ ;
 } ;
 foo int ;
 func foo ( ) int { "bar" . foo ++ ;
 } ;
 } ;
 class foo { foo int . int . int ;
 } ;
 class foo { func foo ( ) int { for val foo int . int = ~ "bar" ;
 - - true ( - true , ! ~ ~ false ) ;
 ! true += - - false ( ( ~ - 123 [ false . foo <= - ( false . foo ) & ( 123 == ( foo ) * "bar" ) ] != false ) . foo , "bar" ) { false < - ~ 123 **= foo ^ "bar" ;
 } ;
 } ;
 func foo ( foo int ) int { for val foo int . int = - ( "bar" < ( - foo ) . foo ) ;
 false & ! ! ! - ~ ( 123 . foo == ( "bar" [ true ] ) . foo ) ;
 "bar" **= true [ 123 ] { 123 *= - - ( ~ "bar" ) . foo ^ - - ~ - ( ! - "bar" ) ;
 } ;
 } ;
 foo int ;
 func foo ( ) int { if false { ( foo ) + "bar" ( ( ~ "bar" ^ ! true [ - - - ~ - ~ ~ - ~ true . foo ] ) - ! 123 . foo != - ~ ! foo [ false [ true - ~ "bar" ] ] , ! ( ! - ~ ! foo [ ! ! "bar" * ~ ~ true [ ~ 123 >= true ] ] ) ) == foo = true ;
 } else { ~ ! ~ ! - - false [ ! 123 . foo ] ++ ;
 } ;
 } ;
 func foo ( ) int { "bar" ++ ;
 } ;
 func foo ( foo int , foo int , foo int . int ) int { for var foo int = "bar" [ ( 123 ) ( ) & ( foo [ ( - ~ - ( ~ ~ 123 ) ) ] ) != - foo * ! ~ ~ 123 ] ;
 123 . foo ;
 "bar" [ true ] & true . foo -= - ! "bar" { ~ ~ - 123 ++ ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int . int . int ) int . int . int { if ( foo ^ true ( 123 , "bar" [ ! ! ! foo . foo ] ) == - ! false . foo ) ^ false == - true . foo > foo | ( ! true != foo ) { for var foo int = true != ~ ~ ( foo == ~ - foo . foo | ! true . foo ) / false ;
 ~ true <= ~ - "bar" ;
 true [ ! foo ] += ! true >= 123 ( true , true ) { "bar" & 123 = false & - false [ ~ ! - true - ( ~ - ~ - ! false ( ) | true ) [ ~ ( ! ~ foo ) ] * ! 123 ] ;
 } ;
 } else { if foo . foo { for val foo int . int . int = true ;
 false >= ! ! ~ false * ! 123 ;
 "bar" { ! foo ++ ;
 } ;
 } else { if ( 123 ) { for var foo int = "bar" [ - ! 123 ] & foo ;
 - true ;
 false ++ { ! - ~ foo [ foo <= ~ ! false ] -= ~ ~ true ;
 } ;
 } else { ( foo ) ( ) ;
 } ;
 } ;
 } ;
 } ;
 func foo ( ) int . int { for var foo int = - false ( ) == ( - "bar" >= foo [ "bar" ] + ! "bar" ) ;
 ! true . foo < "bar" ( ) ;
 ~ - true -= ! ( - ~ ! foo . foo ) { for var foo int . int = ! true [ ! ~ ! "bar" ] ;
 123 . foo ;
 true . foo != ( ! - ~ "bar" ) -- { - - ! 123 ^ false [ true ] != false . foo ;
 } ;
 } ;
 } ;
 } ;
 class foo { func foo ( foo int ) int . int { ( foo ) ;
 } ;
 } ;
 class foo { func foo ( foo int , foo int , foo int , foo int ) int { - ! - - "bar" -- ;
 } ;
 func foo ( ) int . int . int { for var foo int = "bar" . foo ;
 foo * ( ( - - 123 != true ) >= ~ - ! - ! - - ~ - ( ~ true + ~ ! ( "bar" ) . foo ) . foo / "bar" ) . foo ;
 ~ foo ++ { ! ( "bar" ) [ - foo ] -- ;
 } ;
 } ;
 func foo ( ) int . int . int { for var foo int = foo <= true ;
 "bar" ( ! foo ( ) , ( ! true ) ( ! ! - ! 123 , - ! ( false ) . foo / - ~ "bar" ) | ~ "bar" ) ^ - - 123 ;
 123 * false != ! 123 ( false | ! ~ 123 ( ) * - ! false , ! true . foo ) > ( - ~ ~ ! 123 . foo != ! "bar" ) { for val foo int = ~ ~ "bar" . foo == 123 ;
 ! ! ~ ~ - "bar" >= 123 ( 123 != foo <= true . foo / - ( true . foo / ~ true [ - ~ false ( ) ] ) , "bar" < ! - ! ( false [ - - ! - "bar" ] ) ( ) ) ;
 ~ false ( ) -- { for val foo int = ~ - ~ true ;
 - ! ~ ! true ;
 123 { if 123 & ~ ~ ! ! foo ( ) { for val foo int . int = ~ ~ ~ 123 ;
 true ;
 ~ - 123 /= ~ - ~ 123 { if 123 ( ) / true ( ~ ! 123 , true ) { "bar" -- ;
 } else { for var foo int = - ! ! ! - ( - - false != ~ ! - foo ) ( ) ;
 ( - false & 123 ) == 123 [ "bar" ] ;
 123 ( ) ++ { 123 ;
 } ;
 } ;
 } ;
 } else { if - "bar" > false { - - - true < ! foo ;
 } else { for val foo int = foo ;
 false . foo ;
 ( true . foo ) ++ { ( ( ! - ~ ! false ) ) [ true + ! - foo ] + false <= - false [ 123 ] ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 val foo int . int . int = - "bar" . foo ;
 
