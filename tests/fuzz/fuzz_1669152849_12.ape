module foo ;
 var foo int . int . int = foo & ! - ( - "bar" ) [ foo ] ;
 func foo ( foo int . int . int , foo int . int ) int . int . int { ! "bar" / foo -= - ! - false . foo != - ! true ;
 } ;
 func foo ( foo int . int . int , foo int ) int . int { ~ - true ;
 } ;
 func foo ( ) int { if ( ! true ) > ( ~ ! ~ false ( - - ! ~ foo , foo ( ) ) ) ( - true & true , ! - ( ~ - foo ) ) { for val foo int = - - ( ~ 123 ) . foo ;
 true ;
 123 { "bar" | ! - - - - 123 ( "bar" , ! ~ ! - foo ) -- ;
 } ;
 } else { foo ;
 } ;
 } ;
 var foo int . int . int = - foo . foo ;
 var foo int = - "bar" [ ! foo ] ;
 var foo int = - "bar" [ ! ~ "bar" [ foo . foo ] ] * 123 ( ! ! foo , ~ "bar" | true ) ;
 val foo int . int = ! - - foo ;
 func foo ( foo int , foo int , foo int , foo int , foo int , foo int ) int { for val foo int = ! ( ~ ! foo ) ;
 ~ - "bar" . foo ;
 false / ( foo ) { - ~ ( 123 ) ( ! false , - - true ) >= - - ! foo = - - ~ ~ - "bar" ;
 } ;
 } ;
 class foo { for val foo int = false ;
 true . foo ;
 ! true != true ( ) ++ { if 123 { if - 123 { foo <= ~ - ( ! foo ) ;
 } else { ~ ! false / "bar" [ - foo [ "bar" ( ( 123 ) ( ( - ! - - false . foo >= false [ - "bar" . foo - - true [ ! true [ foo / "bar" ] ] ] ) / - foo , - 123 ) , "bar" ) ] ] = ~ - true ;
 } ;
 } else { if "bar" [ ! ! ! foo * - ! ( "bar" . foo ) ] { for var foo int . int = 123 ;
 ~ - ! "bar" - "bar" >= 123 ;
 "bar" . foo ++ { ~ "bar" **= - ! false / false ;
 } ;
 } else { if 123 | foo / true { false [ false > 123 [ - true ] / - ~ "bar" ( ) ] **= foo ;
 } else { for var foo int . int = false . foo | ~ ! ~ 123 . foo ;
 ( false + foo ) - ~ ~ - false & true ( "bar" . foo - ! - 123 > ! 123 ( ) , ! true [ ! ! ! - ~ - ! - foo ] ) ;
 123 { for val foo int . int = ~ ! ( - false != "bar" ) ;
 - "bar" [ ! foo ] ;
 123 -= - - foo { ~ "bar" . foo ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 val foo int . int . int = ( true ) [ - foo ] ;
 func foo ( foo int . int . int , foo int ) int . int { for var foo int . int . int = - foo ( ) / - foo ;
 ! foo ;
 ! ~ ! - ( ! ( ! ! - - ~ ~ - ! "bar" ) ( false [ foo ] , "bar" ) ) ( ~ foo | - - false [ - ( - "bar" ) * - foo [ - ! ! ~ false ] ] , ( - 123 < ~ ( ~ ! 123 ) ) ( ) ) **= ! ~ "bar" . foo { "bar" ( - true , ! ! ! "bar" ) -= ( true / - true ) ;
 } ;
 } ;
 val foo int = false . foo ;
 val foo int . int . int = - ! ! - ! 123 ;
 func foo ( ) int . int . int { for var foo int . int = - false ;
 - - ! ! "bar" ( ) ;
 foo ++ { if ~ true & - - - ! ( true ^ - true * ~ foo ) . foo { ~ "bar" *= foo ( ) ;
 } else { true . foo -- ;
 } ;
 } ;
 } ;
 class foo { foo [ ( ( ( 123 ) ( ) ) ( ) ) + 123 ] ^ ! - ~ true * false . foo ;
 } ;
 func foo ( foo int ) int { for var foo int = ~ foo ;
 ( "bar" <= "bar" & ! false ) ;
 foo /= ! true & "bar" { if ~ ~ ~ "bar" [ ! ! - - - ~ ~ - ( ! ! foo ) ] == true . foo { ~ true . foo ^ ( foo . foo > ( ~ ! ! "bar" ( ) ) ) >= true -- ;
 } else { for var foo int = - ! ~ ! - foo [ - ( ( false & 123 ( "bar" ( ) , true > true & true [ ( ~ - "bar" ( ) ) | - false . foo ] ) <= true != - ! 123 ) * foo ) + "bar" . foo ] ;
 "bar" * - ~ - - foo ;
 123 -= false ( ) { if - false < "bar" { ~ false <= - 123 . foo == ~ - 123 -- ;
 } else { if - foo . foo == ! 123 > - ( ! "bar" ( ~ - true , ( foo > ! true . foo ) ) ) ( ) { for val foo int = false [ 123 == - - true ] ;
 "bar" ;
 - ~ false **= "bar" { ! ~ ~ foo <= foo / ~ "bar" -= "bar" == true / ~ 123 . foo ;
 } ;
 } else { ! ! ~ - ~ true . foo ++ ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 func foo ( ) int { if - false { 123 ++ ;
 } else { if ! 123 == - ~ ( "bar" * false [ - 123 ] ) { for val foo int = ~ ! true + ~ ~ "bar" ;
 ( - 123 ) ( ) < 123 ^ foo * - ( "bar" - - "bar" ( ) ) [ 123 ] ;
 ! true [ foo + - ~ false ] ++ { true > - ( false ) . foo -- ;
 } ;
 } else { false -- ;
 } ;
 } ;
 } ;
 func foo ( ) int { if false { ~ ! 123 ++ ;
 } else { "bar" - ! ~ - - "bar" * 123 ( ) > ( ! ( ~ false ) ) [ ~ foo ] / ~ ! ~ ~ true . foo - ~ foo = ( - 123 ) ;
 } ;
 } ;
 func foo ( ) int . int . int { "bar" -- ;
 } ;
 func foo ( foo int , foo int . int . int , foo int ) int { for var foo int . int . int = ! "bar" ( ) == ~ ~ ~ ! - - "bar" . foo ;
 true ;
 "bar" *= ~ ~ "bar" - ! true * ~ ! ( 123 ) . foo { for val foo int = false ;
 ( ~ true / - ! ~ ~ 123 ) ( ! ! ~ - ~ ! ! ! - foo , true [ ~ "bar" ] ) != ! 123 ;
 true . foo * "bar" <= ~ ! false /= false { for var foo int = ! ! "bar" ;
 ! false [ ~ - ~ 123 [ ( ! ( ~ ! "bar" > - ( "bar" ) ) [ - ~ foo . foo ] ) ( foo [ true ] , false ) ^ ! ( ! ! 123 / "bar" [ ~ ~ ~ false [ ! ! 123 & false ] ] ) ] ] * "bar" ( ~ foo , foo ) ;
 "bar" -- { foo / false != ! - - ! - ( foo / "bar" < ! "bar" ^ ~ ! 123 ) ;
 } ;
 } ;
 } ;
 } ;
 class foo { for val foo int = ~ ! ! - false ;
 ( ! ( ~ ! ! ~ true ) . foo == "bar" [ ! - true [ ! ! - "bar" ] * ! ~ ! - ! 123 ] ) ;
 ( ~ "bar" [ false ] ) / ( "bar" ) ( ~ - false == true ( - true & 123 , 123 - foo ) , ( true & true ) ) -= ! - ! - ~ ~ - ~ false ( 123 == true , false ) { 123 -- ;
 } ;
 } ;
 class foo { "bar" / ( "bar" * false ) [ ~ false . foo ] - true ++ ;
 } ;
 val foo int = foo . foo != ( ( ! ! false <= ! true ) ) & 123 ( ) + foo ;
 class foo { ! - foo ( ) *= "bar" ;
 } ;
 func foo ( ) int . int . int { if "bar" { "bar" -= ~ 123 == - ~ true . foo ;
 } else { - ~ ~ - false * 123 += 123 ;
 } ;
 } ;
 class foo { ( 123 ) [ foo . foo ] -= foo ;
 } ;
 class foo { for var foo int . int . int = ~ ! foo ;
 - foo ;
 true { if ~ - - ( 123 ) . foo { if ! - ( ~ ~ ( ! ( ! "bar" > ~ - false ) . foo ) ) { if - true == false { if - foo [ ! ( - "bar" ^ true ) ( 123 , false != ~ ~ ! ~ - "bar" ) ] <= - ( ( ! 123 [ ~ false ] ) [ true [ ~ ! - false [ ( true ) ( ~ - - true , "bar" [ ( "bar" [ ~ 123 & - ~ ! "bar" ] - - ! true ( ~ ~ ( ! ~ ! ( false . foo ) ) , ! ( 123 ) ) != foo ) . foo * ( false [ true ] ) [ false <= ! - "bar" & ! ! false ] ] ) ^ - false . foo < ~ false ] ] >= - ! ! ! true ] | - 123 . foo ) / false { ~ ! ! ! ! - 123 [ ~ ! ( false / ~ ~ ~ ! ! true [ ~ 123 ] == ( true ( ! - ! foo , ( ~ ~ "bar" ( ) ) / - - false ) ) ) | - "bar" ( ( "bar" [ - ~ ~ true ] ) / foo , ! - ! true ) ] ++ ;
 } else { ! false **= false . foo ;
 } ;
 } else { ! - ~ "bar" / ~ - foo ( "bar" , true ( ) * false ) <= ! - ( "bar" ) [ 123 ] -- ;
 } ;
 } else { ~ foo [ "bar" ( ! ~ "bar" , ( ! 123 != ~ ! foo & ! ~ true [ foo . foo != "bar" ] ) . foo != ~ true ) ] ++ ;
 } ;
 } else { if - ~ "bar" { for var foo int = ! ~ - "bar" ;
 false ;
 ~ foo . foo /= - false ( ) != foo { if ! "bar" != ! ! - false [ ~ false ] > - false { if foo ( ) < ! ~ 123 { - true ;
 } else { ! "bar" + - ~ ~ "bar" == 123 . foo >= 123 [ - ! 123 != ~ ~ true ] **= "bar" . foo ;
 } ;
 } else { for val foo int . int = 123 ;
 - false | - - - ! foo ;
 ( false ) >= "bar" { false . foo ;
 } ;
 } ;
 } ;
 } else { true ( 123 - - ! ! ~ ( ~ ! false . foo + ~ - - ~ ! "bar" * ~ ! ( ~ 123 ) ) , false ^ "bar" ) ++ ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int . int , foo int . int , foo int , foo int . int ) int { ! ~ - ! - false [ true ] += foo ;
 } ;
 class foo { if - ~ - ~ ! true { ~ - false ;
 } else { true ( foo , 123 * false . foo ) = - - "bar" [ ! ( 123 - ! "bar" ) ] ;
 } ;
 } ;
 func foo ( ) int . int { foo & foo -- ;
 } ;
 func foo ( foo int , foo int , foo int . int ) int . int { if "bar" { for val foo int . int . int = ! 123 < ( - ! ~ ! 123 + ( ~ ~ foo <= ! ~ ! ( ~ ~ true ) ) ) ;
 123 . foo ^ ~ ! - 123 ;
 ( foo / ( - - 123 | ~ false != true ) ) -- { for var foo int . int = ! ! foo > foo != ~ 123 + - ! ~ ( ! true < ~ 123 . foo ) ( foo , ( - true ) - ~ ~ 123 [ 123 ] ) ;
 - - "bar" ( ) ^ ! ! false ;
 ~ "bar" [ ~ true ] { - ! false != "bar" **= foo ;
 } ;
 } ;
 } else { for var foo int . int . int = ! false ;
 ! ( foo ) . foo ;
 ! - - - "bar" - - ! ~ false < ~ ! - - ~ ( - foo ) [ foo ] -- { ~ "bar" ( ) **= ( ! ! ! ! 123 . foo ) < "bar" ;
 } ;
 } ;
 } ;
 func foo ( ) int . int { ! ~ ! - true != ( - ~ - ~ - 123 & 123 ) ;
 } ;
 class foo { if ~ 123 { ! 123 & false ( ) -- ;
 } else { if ( ( 123 ) ) { for var foo int . int . int = - false == 123 ;
 ~ ! ~ true * foo ;
 false [ ~ "bar" ] -- { if ( false ) / ! true { for val foo int . int . int = ~ "bar" ;
 ~ ~ foo . foo ^ true [ ! true + true [ foo ] ] ;
 true ++ { if - ! foo { ! ~ true -= "bar" ;
 } else { ( ! foo ( ) ) -- ;
 } ;
 } ;
 } else { - "bar" -= ( - ~ ! ! ! ! ! false ) ;
 } ;
 } ;
 } else { - true ++ ;
 } ;
 } ;
 } ;
 class foo { ~ ! ( 123 != - ! ! ( - ~ ! false [ "bar" ] ) ) . foo **= foo >= ~ "bar" == 123 ;
 } ;
 func foo ( ) int . int { ( ~ true . foo != - ! "bar" ) * false *= - true [ ( ! - ! true >= ~ ( - ~ ! ! true == - 123 ) ( - - ! "bar" [ ! - foo . foo >= foo == foo >= foo ] , foo . foo ) ) ] ;
 } ;
 val foo int = true / ~ - ~ "bar" ;
 func foo ( foo int . int , foo int ) int { ~ true += ~ - ! - - foo ;
 } ;
 var foo int = ! ~ true == - foo ;
 class foo { ! false ( - 123 , ( ~ true * ~ ~ - ! "bar" ) > - ~ ! ! ! ~ ! ~ ! "bar" ) ;
 } ;
 class foo { foo . foo ;
 } ;
 func foo ( ) int . int { "bar" [ ! ~ ! ~ 123 . foo ] ;
 } ;
 func foo ( ) int . int { if true { ~ ~ foo -- ;
 } else { for var foo int . int . int = - ~ 123 ;
 - foo ;
 123 . foo > ( - ! ( true & ~ false ) | 123 ) ++ { false *= true != "bar" ( "bar" . foo , - false ( ) * ( "bar" ) >= ~ "bar" / ! true ) ;
 } ;
 } ;
 } ;
 class foo { ~ - ! ( ! ~ ~ false | ( ~ ( - ~ "bar" . foo ) ) ) * true >= - - 123 ( ) == true ;
 } ;
 func foo ( ) int { if true . foo { ( ~ - - ~ - - ~ ~ ~ "bar" & 123 ) . foo /= ! "bar" ;
 } else { ! foo ;
 } ;
 } ;
 class foo { ! "bar" . foo == false -- ;
 } ;
 
