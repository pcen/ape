module foo ;
 class foo { if ! - ~ - ! ~ ~ ( ~ - ( "bar" [ - ( ( false ) ) == ! false ] ) > ~ - "bar" . foo == ( - - false ) ) { - ~ - ( ! ! foo ) -- ;
 } else { true * true -= false ;
 } ;
 } ;
 val foo int = ! 123 ;
 func foo ( foo int ) { ! - ! ~ - ! ~ - ~ - false <= true ;
 } ;
 class foo { if "bar" . foo & - 123 | ! ( - false > ! - - ( 123 & ~ true ) ) { if ( ! 123 ) [ - "bar" * false ( false , foo + "bar" [ ~ false ( "bar" , ( "bar" ) ( ! true / ~ "bar" >= "bar" & foo , 123 | 123 ) ) != ~ ! true ] ) ] < ! - true - false . foo { if "bar" * ! - ! ~ ( ~ - ~ - ( 123 ) ) < ( foo ) { for var foo int = 123 | - ~ true ;
 ~ 123 ;
 ! - foo . foo | ~ "bar" != false += ~ ( ( - ( "bar" ) ( foo , ! ! - - - foo ) * "bar" ) ) . foo < "bar" == - "bar" [ - 123 ( ! - ! false , - - - - 123 ^ false ( - - ( ! foo ) , - true ) ) ] ^ "bar" { true [ false . foo ] ;
 } ;
 } else { for val foo int = true . foo ;
 ! - 123 > false ( ~ - ! true , - - ( "bar" ) ) ;
 ! foo -- { for val foo int = "bar" != - false ^ false ;
 123 ;
 - foo != ~ ( false ) -- { ! "bar" -= 123 ( true - ( ~ - - ~ ! 123 * ~ foo | ( - true ( "bar" . foo , ! - ( ~ 123 ) ( ~ - ~ ( "bar" . foo ) & - ! false ^ false , ! ! ! ~ - ! "bar" & "bar" ) ) ^ ~ ~ - ( "bar" [ ( ! "bar" ) [ ! false >= ~ ~ - false ] ] < "bar" ) == 123 ) ) , "bar" ^ false . foo < - false ( true [ ! foo . foo ] | false [ "bar" ( ( "bar" * "bar" [ ! ~ 123 == ~ ~ 123 / ! 123 [ "bar" ( ( - 123 / false ) ( foo , ~ foo ) , ! 123 ) ^ ~ - ~ foo ( ~ ! ( ! - false ) ( ( ! true >= false ) < - - ! 123 [ - ( ~ ~ ( - ! ~ ! ~ ( - ~ foo & ~ 123 . foo + 123 ) != 123 ) - false ( ! ~ false , ( true != ~ ~ - - ! foo + ~ ( ! ~ ! 123 ( - "bar" , ! ( ~ "bar" ) < - ! ( ( - ~ - - ~ false . foo ) [ ! - foo & foo ] != ( 123 ) ) & ! - foo ( ( ( ~ false ( ! - ! ~ ( - ~ foo ( ( true != ~ ! "bar" ) != - - ( false ) >= true . foo * foo ( - true ( - false , - ~ true + true [ ! ~ - ~ ! ~ - true ] > ( 123 [ ( ~ ! ! ( true ) . foo ) ] > ! "bar" ) ) , ( - ~ foo ) ) + false , ! true ) ) , ~ 123 ) & ( foo ) . foo ) != ( ( 123 ) | true ) ) == ! ! - true [ false ( true , true + "bar" == ( ( foo ) . foo ) & "bar" ) ] , ! ! - "bar" * - ! ~ ( - 123 ( ~ true , false > - true ) ) . foo > - true ) ) < true * ! ! ( ( - false / - false ) ) ) ( "bar" , - ! ! ! - - false ) <= "bar" ) . foo ) ) | ~ "bar" ] == foo [ ~ "bar" ( 123 , ! - 123 >= - ~ false ) & foo . foo ] * false ( ~ - ( false <= ~ ( "bar" ( false + ! ~ - - foo , true ) ) . foo ) . foo , ! ~ 123 ( foo . foo , false * "bar" < foo * false ) ) , ~ true ) * "bar" , - ~ foo ( ~ 123 , foo ) ) ] ] ) , foo [ ! ~ - 123 ] ) ] >= ! ( ! - "bar" + ~ "bar" [ ~ ! - ( ~ - - 123 ( ~ "bar" , ~ foo ) * ~ ( ! ! true ) . foo ) != - true ] ) & foo , true ^ - ! ~ ( - foo . foo ) ( ! false , 123 > ! "bar" ) & true ) - foo != ! true ) | "bar" / 123 ;
 } ;
 } ;
 } ;
 } else { if ~ true { if - ! ! ! ~ ! ~ true . foo { "bar" [ ~ true . foo / "bar" . foo - ~ ( ! "bar" == ! ~ ~ ! ! true ) ] > ( - foo [ ( ~ ~ - ! true ) ( 123 == ( foo ) , "bar" > ( ! ~ ! ~ ~ false ) ) ^ ! ~ ~ "bar" ] & "bar" ) ++ ;
 } else { for val foo int = "bar" ;
 foo & ~ "bar" ;
 ~ - ( false == ! ~ ! ( - ~ foo ) [ 123 ^ - "bar" != - ~ ! ! ~ ! false ( ! ( - foo ) , - - ( false ) ) ] <= ~ true ) / ! ~ 123 -- { if "bar" * - ! ! ! ( - ~ 123 <= foo ) [ 123 [ ! ! "bar" & foo ] - ( ~ "bar" ) * 123 ] == foo { for val foo int = ! foo >= true [ ~ "bar" ] ;
 ( 123 . foo ) ;
 ! ! 123 ++ { false ++ ;
 } ;
 } else { if ( false ^ ~ - - true * - true ) { if "bar" { for var foo int = ( - ! 123 [ ! ~ true ] ) ;
 - ~ ! true ^ ~ - ( - false < ~ ! false [ ! ~ false ] ) ;
 ~ false ( ! ( false ( - ~ true | ( 123 ( "bar" + ! 123 < false , 123 . foo ) ) == foo ( foo ( "bar" , ! false [ ~ "bar" ] / ~ true . foo ) , ~ false ) , ~ 123 >= ! - ~ ( ! false ) ) ) ( foo ^ false / ~ "bar" , ! - true ) & ! ! - false > false . foo , "bar" ( ! "bar" ( ! "bar" , 123 ) , ~ - ~ - foo ( ~ ! false , true == "bar" ) ) * ! ~ ~ ( foo ) ) -- { if 123 { for val foo int = ! ! ! ! false [ - false ] ;
 ! "bar" [ false [ true [ true ] ] == ~ foo ] / - ~ ! 123 == false ;
 ( foo . foo ) -- { ! 123 == false . foo *= ! true & ~ false [ false . foo > ~ false ] | "bar" < ! ~ ~ false ;
 } ;
 } else { for var foo int = foo ;
 ~ 123 [ ! - - - ( ! "bar" . foo == 123 / false ) . foo | ~ "bar" ( 123 . foo , true - true / true ( - - ~ ~ - foo . foo , ~ ! ( foo >= foo ) ) ) * - "bar" ( ! ! ~ ~ false , 123 != false [ - ! ! - true ] ) ] > "bar" . foo ;
 false ( ! ~ ~ - - ~ foo & - - ! ~ ! - foo [ true . foo ] , ( - ! "bar" ) ) ^ 123 ++ { ! ! false | true = foo ;
 } ;
 } ;
 } ;
 } else { 123 != ( "bar" ) ++ ;
 } ;
 } else { if 123 { ( ~ - - 123 [ - ! - ( - ( "bar" ) ) + ~ ~ ~ foo ] > foo ) ^ ! "bar" . foo -- ;
 } else { for var foo int = ( ~ ! foo [ - ~ ! 123 ^ ( - ~ foo [ ! ( "bar" * false ) ] ) ] ) ;
 123 [ ~ foo ] ;
 123 [ ( ~ ~ 123 ( - ! ~ ! ! 123 <= - - ~ false ( ( ! ~ ! - foo & ! ~ - - - true <= "bar" ) [ ! true [ ( true != false / foo >= - ~ false / - 123 ) ] ] , false ) , ~ - false [ ~ false [ "bar" ] ] > false ^ ! ~ true ) ) . foo ] -- { for val foo int = - ! ~ ! ( ! false . foo ) ;
 true ;
 ! ! true ( ~ ! ! ~ ~ ~ 123 , false ) -- { for var foo int = true ;
 ~ - ! 123 . foo == true & ~ "bar" ;
 "bar" ( ( ! ( ! "bar" ) ) - ( - "bar" ( foo , ( ( foo == - - true ) ) ( foo . foo , foo == - - 123 ) ) ) ( ~ ~ false [ true & false ] > ! ( true > foo + "bar" ) , - ! true ) <= ~ false == ! ~ 123 , ! true <= foo ( - ~ ( ( foo ) ) != - ~ 123 ( false , false ) , ~ "bar" [ ! - foo / 123 ] + foo / ( 123 ^ - false < ! "bar" ) == ! - 123 ) ) { ~ ~ 123 != - 123 -- ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { 123 -= ~ - - ~ - ~ ( false ) ;
 } ;
 } ;
 } else { if false { 123 -- ;
 } else { for val foo int = ~ "bar" ( ~ 123 ( false != ~ ~ ! ~ true [ - false ] , false ) <= "bar" / "bar" , ~ ! - "bar" <= ! false ) ^ ! ~ foo < - - ~ true ;
 foo / 123 ;
 ~ "bar" ( "bar" * ~ false , - true ( ( true [ ( ~ - - ~ ~ 123 . foo != ~ foo . foo ) ] & "bar" ) . foo >= ! true , - "bar" ) > - ! 123 ) -= ! ! ! 123 . foo & ~ foo . foo > foo ^ ~ "bar" { foo **= true ;
 } ;
 } ;
 } ;
 } ;
 class foo { foo ( ! ~ "bar" >= "bar" != foo < ~ ! 123 . foo & false [ "bar" != ( 123 . foo ) ] , true | false . foo > false ) != - ~ false -- ;
 } ;
 class foo { - - true -- ;
 } ;
 func foo ( foo int , foo int , foo int , foo int ) { ! foo [ ! ! ~ ~ true . foo <= 123 ] > ~ - true [ ~ true == foo . foo & ~ "bar" ( foo >= "bar" [ - - ( 123 ) ] , ~ ! ! ~ false <= ! ! 123 == ~ ~ "bar" ) ] -= - false ;
 } ;
 class foo { if ! - ~ ! ! - ! false . foo ^ foo ( ( ~ - "bar" * ( 123 ( ! foo , - false [ - ~ "bar" ] - false ) / "bar" ) ) . foo , ! ! ! ~ - ! ! foo ) <= - ! true { for val foo int = ~ - - ~ ~ ~ 123 . foo ;
 - false ;
 - foo ( ! ! 123 . foo , false ) -- { false **= "bar" ;
 } ;
 } else { ! - false - ~ false ;
 } ;
 } ;
 class foo { for val foo int = "bar" ;
 ( ~ true ) . foo ;
 true ( false , 123 ) { ~ ! - ( foo ) | - foo ( true [ - ! ( ! true < 123 ) ( "bar" , ~ "bar" + ( - ! true - 123 * "bar" ) . foo > "bar" ) ] , ! false [ true ] & 123 [ ( - - - foo ) & ~ "bar" ( ~ ! false , - ( ! foo [ ~ - true != true [ ! - ~ ! ! ! - foo ( 123 ( "bar" [ ~ true . foo & ~ ~ 123 ] , false ^ false ( ! - false . foo & ( - ( ! "bar" ) ) [ ~ foo . foo == - "bar" ( foo * foo , ( true / ~ ~ ~ ! - false ) & - ( foo ) ) & - true [ ~ ! false ( foo , - ! ~ ~ ! ( - ( - ~ ! - 123 ) . foo ^ foo ) - foo ) ] <= - ~ ( foo ( ! ( - true ) , "bar" & ~ ! true ) ) ( ! ! foo , "bar" ) ] , ! false ) ) , - "bar" * ~ ! "bar" ) / - 123 == foo ] >= ! 123 ] ) ) ] != - foo / "bar" ) < ! 123 / "bar" -= foo ;
 } ;
 } ;
 class foo { if - ! - ! foo { ! 123 ;
 } else { false ;
 } ;
 } ;
 val foo int = true ( 123 / false , foo ) != true ;
 func foo ( foo int , foo int , foo int , foo int ) { for val foo int = 123 ;
 ~ ( ~ foo + false ( false , ( ~ ~ ! - ~ ! - "bar" . foo ) ) != "bar" + ! - 123 ( true | true [ ! ! "bar" ] , ( - ~ ~ ~ ~ ~ 123 < ~ ~ ! - foo | ~ ~ ~ ! - ! true . foo ) . foo + false [ ~ - 123 ] < foo . foo | false ) / ~ ~ foo ) [ true + foo ] ;
 ! 123 ++ { - "bar" ( true [ ( ~ ! - 123 ) & foo . foo ] / foo > ( false < "bar" ) , foo . foo ^ false ( false < ! foo , foo ) / ! ! ! false ) ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) { if ! true == ( ! ! ~ ( - "bar" ) . foo & 123 ) >= ~ ~ ! ! - true { for var foo int = false ( false ( 123 ( false . foo | 123 , foo != ( foo ) ) , - ( ( ! ~ ! ~ ~ - true [ ( false [ false ] ^ false [ false & ~ false ( "bar" , ! ! ~ ~ ~ - "bar" ) ] ) - false >= foo ] ) ( ~ foo , foo [ true * ! true - false [ - ~ true [ true ] ] ] ) > false ) ) / ( "bar" ) , - ! 123 ) != - "bar" * true ;
 foo & ~ ! ( ~ false [ - 123 ] ) | true ;
 ! ! ( ~ ~ ! true ( ~ "bar" , ( false ) ^ ~ foo > ~ ~ false ) ) ( ! ~ ( "bar" >= ! "bar" == ~ - ! true / foo ) ( ! ~ foo , true & - false ) > ! foo ^ ( - true ) , ( ! ~ ! "bar" ) . foo ) / ! ( foo ) . foo ++ { for var foo int = - ~ 123 . foo == 123 ( - - ! 123 ( ~ foo , false ( ~ - ~ "bar" / false ( foo > true , true . foo ) > 123 , ~ "bar" ) ) , - ~ true [ 123 ] & foo ) ;
 false < - ! ( - "bar" ) ;
 123 [ foo ] **= ! true ( - true [ foo ] , foo == - "bar" ) { for var foo int = foo ;
 123 - true . foo ;
 ~ ~ ! ! "bar" & 123 - - true **= 123 < 123 . foo * ( true . foo ) { for var foo int = ! ! - foo . foo | - - "bar" & "bar" ( ! ~ ! "bar" . foo , ! - - false . foo ) ;
 foo ;
 ~ true = foo - ! ( "bar" [ ~ true . foo ] ^ false . foo ) [ - false . foo > ~ - ~ "bar" ] < false & foo ( foo ( "bar" + 123 , foo != ! - true ) + ! foo , "bar" < foo ) { ~ ( - "bar" ) = ~ ~ ! ! ~ ! false <= - false != - false [ - ! ~ ! ~ ! - foo [ ~ foo ] ] / foo ;
 } ;
 } ;
 } ;
 } ;
 } else { 123 -- ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) { ~ false . foo -= false ;
 } ;
 var foo int = ! - 123 ;
 var foo int = foo [ ( - - ! ~ "bar" . foo ) ] > false ( ~ ( ~ foo > ! ! "bar" [ - ! 123 ] ) , ~ ~ ~ ! ~ false | true ) ;
 val foo int = false ;
 func foo ( foo int , foo int ) { ~ ( ! foo ) ++ ;
 } ;
 func foo ( foo int , foo int ) { for val foo int = true * - - ~ ! ~ 123 ;
 - ! ! - ~ ~ foo ;
 - - - ( - ~ - true <= - true ) -- { false - ! - 123 ++ ;
 } ;
 } ;
 var foo int = true . foo / foo [ ( foo <= foo ( foo ( ! ~ false , ! ! ! "bar" ) , foo ( - false , 123 > ( ~ - ( ~ ~ ! "bar" ) / - ( 123 != false >= ( true ) ) . foo | - false ) ) ) ) ] ;
 func foo ( foo int , foo int , foo int , foo int , foo int , foo int ) { if "bar" == 123 [ - - - foo . foo & false ( ( foo ) , - true [ - false ] ) ] { true . foo ;
 } else { if - - false . foo { for val foo int = - 123 ;
 foo [ 123 - true ] ;
 false { 123 != ( true ) ++ ;
 } ;
 } else { for var foo int = ! ! - ~ "bar" [ true > "bar" ] ;
 ( - true ) . foo ;
 ! - ! - - - ! ( false & true . foo ) != foo { ~ ! ( ! "bar" < ! ~ - - 123 ) & ! 123 ( - 123 * true , - ! true * "bar" ) + - - ! ! ~ ~ foo ++ ;
 } ;
 } ;
 } ;
 } ;
 
