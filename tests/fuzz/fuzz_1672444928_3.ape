module foo ;
 func foo ( ) int . int . int { "bar" . foo << ( - true > foo ( ~ ! foo [ true ] , ~ - - - foo ) ) or ( false [ - false ] and ~ 123 ) = 123 ( ! false , false [ "bar" . foo ] ) ;
 } ;
 func foo ( ) int . int . int { ! - foo ( ) << - - "bar" /= - ! ! "bar" ;
 } ;
 val foo int = foo [ ~ false ] ;
 val foo int . int = - ! true & true ;
 func foo ( ) int { - ( false [ true ] < true ( ~ "bar" , ( foo ) and ! ~ true or ~ ! foo [ - - - ~ ( ~ - ! ! ~ "bar" and ( ! "bar" ) ) . foo * true ] ) ) . foo = ~ ~ ~ true + ( ! ~ false or ! - ~ - ( 123 ) ) [ false << ! ~ foo & ! true | 123 [ - foo ( 123 , foo - ( foo ) and - ~ true . foo & ! true ) ] ] * ~ false != - - - "bar" <= - ~ ! ~ true | ! ~ 123 and ! ~ - ! 123 % - ! "bar" < - 123 ;
 } ;
 func foo ( ) int { for var foo int = false and ~ ! - ! ! ~ ! ! ! ( ! ! ~ true ) ;
 true ;
 false < 123 { var foo int = ~ foo . foo ;
 } ;
 } ;
 class foo { foo int . int ;
 } ;
 func foo ( ) int { 123 or ( 123 . foo << ( ~ ! ! ~ ( 123 * ~ ~ false != - foo and - ! - foo >> 123 ( - false or ~ false and - false , ~ 123 ) ) / ( ! ! - ! - ! 123 . foo / false or - ~ ~ ( ( true << ! ( - ! - ( "bar" [ - "bar" . foo ] and - true ) == true >> 123 ) == 123 + false ) ^ - "bar" << ! ~ ! 123 or ! ! "bar" ) - true % ! 123 ( ! ~ ! true < ! "bar" [ - foo ^ foo [ ~ - ! ! true or ! foo and ! true ( ) ] ] % "bar" != false ( ) , ( ( "bar" . foo ) ) ) ) ( ) ) ) ;
 } ;
 func foo ( ) int { val foo int = true [ - ~ foo [ ( 123 ^ - ~ ~ true . foo and - true ) . foo + true [ foo - ! ~ false ] * - - - true or ! foo ] | ~ - ! ! ( false [ ( true and ~ false [ ~ ~ - ~ false | - ~ ~ false . foo ] ) << true . foo ] * ~ ~ foo [ ! "bar" ] and foo ) ] ;
 } ;
 class foo { foo int . int . int ;
 func foo ( ) int . int { for val foo int = "bar" >> true != ( - "bar" > foo and "bar" or - "bar" ) - ( ~ foo ) ( ) ;
 ~ ~ ! 123 ;
 "bar" ++ { val foo int . int . int = ~ ! ! "bar" < 123 ;
 } ;
 } ;
 func foo ( ) int { val foo int . int . int = 123 ( ~ - ~ "bar" < false ( "bar" , ! ( foo ) % ! true or - foo [ ! ~ ( ! - ! "bar" ) | false [ false ( foo and "bar" [ - ~ foo ] or ( - foo ( ) ) >> true == false , false ) >> - "bar" ( ) or ~ ! 123 & ~ foo ] / "bar" and ! ! "bar" * 123 ( - "bar" % "bar" . foo - - 123 and ~ 123 . foo , ! ( ! ~ - - foo << - ~ - "bar" . foo ) ) ] ) , ! ! ( true << ! false . foo >= false . foo ) & 123 [ ~ - ! ~ true >= ( - - ! 123 ) / false != foo and "bar" ( - ~ foo . foo or - true % ~ - ! - "bar" . foo , ! ~ "bar" ) ] ) and - - foo << ! true ;
 } ;
 func foo ( foo int ) int { - ! true ( ! ! false and - - - ~ ! false >> - false != ! ! - true ( 123 , 123 ) , 123 or ~ ! ! "bar" ( true and - true ^ foo or true , false ) ) < true and - ~ false [ - ! foo . foo >= ~ - "bar" ] -- ;
 } ;
 foo int ;
 foo int ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) int { for var foo int . int . int = foo ;
 ~ - foo . foo / foo == - ! "bar" ( ! true % 123 , "bar" ) - 123 ( foo ( ) and ~ true , ! ! ~ false . foo and "bar" . foo % ! false > "bar" ) >> ! ~ 123 ;
 - foo { ~ ~ - 123 ( ( true ( 123 [ ~ false ] >= false , foo == ( ! - - - - 123 ) ) - foo and 123 ^ ! ! foo >> - foo ) != false or ! foo . foo % foo . foo - ! - ! 123 and ! foo , ~ - 123 [ ~ - ! true ] or ~ false ) % ( ( 123 . foo ) ) < "bar" & 123 or - ~ ! foo + "bar" **= false ( true or ! ( "bar" ) , ( - true . foo >> true ) == 123 [ foo < - foo [ true != ~ ! true ] / - ~ foo . foo and ( false . foo ) or ~ ( ! ! ! ( ! ! ! false ( ) ^ - ! ! ( foo . foo ) == ~ "bar" % ~ false ) << - - "bar" >= true ) [ "bar" . foo != foo - ~ ~ ! foo and ( - true ) ( ~ ! ~ ~ ! ~ 123 / ! ~ ( - ~ true or ! ! foo [ true & ~ - ! "bar" ] ) [ - - ~ - 123 . foo ] , foo ) >> true ] ] ) != foo < ~ 123 ( true . foo << ~ ( ~ "bar" + - ! 123 ) & "bar" , ~ ~ ! "bar" or - - true ) ;
 } ;
 } ;
 } ;
 class foo { func foo ( foo int ) int { val foo int . int = 123 == ( ~ foo ) and ~ 123 << 123 ;
 } ;
 func foo ( foo int , foo int . int . int , foo int ) int . int { - ~ ~ - 123 and foo < - ( - "bar" . foo or - foo . foo ) -- ;
 } ;
 } ;
 class foo { foo int ;
 foo int ;
 foo int ;
 foo int . int ;
 foo int ;
 foo int . int ;
 } ;
 class foo { func foo ( foo int . int , foo int , foo int . int . int , foo int , foo int , foo int . int ) int { if - foo { "bar" ( ) & "bar" ;
 } else { var foo int = "bar" == ~ foo ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int . int , foo int , foo int . int . int ) int { foo **= ( - true >> ! 123 ) ;
 } ;
 func foo ( foo int . int , foo int ) int { if false { for val foo int . int . int = foo and 123 ;
 ~ ( ( ! ~ false ^ true ) ) ^ foo ;
 ( ! - ~ ! - ! true | ! ! ~ true or ( 123 ) | false ) [ ~ "bar" == - ~ ~ - ( "bar" [ - true ( ) % - ( ! 123 [ ( "bar" >= "bar" != - ! ~ "bar" << foo - ~ foo or ! true ) ] ) and false ] or foo | - ! ~ ~ foo << ~ 123 / ~ foo and 123 ) ] != ~ - - ~ "bar" ( ~ "bar" , ~ ~ ( - ! ! ~ false [ "bar" . foo and 123 != - ! - ~ foo . foo ] ) or ~ foo ^ true == ( ~ ~ foo . foo ) | 123 and - "bar" ) { for var foo int = - 123 ;
 - false != - "bar" | ! ! - foo ( ) <= ( true ) ;
 "bar" ( ~ ! foo % 123 < ( false & false ) [ ( ~ - - ~ 123 or true ) << 123 ] and ~ "bar" or ! ! ! ~ ~ - foo ( ) and - ! ! false , true << false & ~ ! - ! false ( ) ) { ! - "bar" > false and ~ - foo ( - ! foo and ~ true ( ) & "bar" or true , "bar" / false ) % ! ! ! - ( - true ( ) ) > ! ( "bar" >> foo % "bar" ) [ ( ~ foo [ ! ! ~ - ( ~ false ) ( ) ] and ~ ~ ~ - - ( ( - "bar" ( true [ ( ! foo ) ] == ! true ( ( false != "bar" [ - ( ! ~ true or "bar" ( foo . foo , 123 ) ) ] | 123 ) . foo >> "bar" and - ! foo , 123 + ~ foo ) , 123 / "bar" ) and false ( ! foo [ ! ! ! - ~ "bar" ( true . foo , "bar" > ! "bar" << ! ~ "bar" or - - ~ 123 | ! 123 . foo ) ] , true ) % ~ foo . foo ) - true ) ) and - true != "bar" ] -- ;
 } ;
 } ;
 } else { var foo int . int = ~ false . foo * ~ ~ 123 >> ~ true or foo ;
 } ;
 } ;
 } ;
 class foo { func foo ( ) int . int . int { val foo int . int = ( ~ ~ "bar" % - false [ ~ "bar" >> false & - ~ "bar" != 123 ] and true ) and ~ - ( ~ - - ( ~ true ) == - - false & 123 ) ( - - - ! - 123 and ~ ~ ~ "bar" <= - ! true , false >> true % - - - - ~ - - - false ( ) ) * ( 123 ( ) ) ( - true . foo < true or foo , ! ( ! ( foo ^ - 123 . foo ) and ! ~ ( true . foo ) . foo ) [ false ] ) < ~ ~ ! 123 ;
 } ;
 func foo ( ) int { if ~ ( foo == ~ true ( ) ) / foo { if - ~ "bar" [ ~ 123 ] { val foo int = - ! ~ - 123 . foo or true . foo and ! false / foo ;
 } else { ( - ( "bar" + ! ( 123 or true . foo and - ! false ( ! foo . foo and ~ ! ~ "bar" , foo ) ) and ~ foo << 123 ( foo . foo , ! false != false [ - "bar" . foo ] or foo . foo - 123 . foo == ~ ! - ! ! ! true [ "bar" - ~ 123 [ true >> ~ - 123 and true >= ~ true ] ] >= ! ! false and true < ! - ~ 123 != ( - true << - ! false ) << true ) ) [ ( foo ( ~ ! ~ ( foo ( ) ) or - ! 123 , ( - ! - ! - "bar" * ( foo . foo ) > ~ "bar" >> ! true [ "bar" ^ 123 and ~ ! ~ ! ~ - ( - ~ true ) ] - - foo ) >> - foo and foo * ~ - ~ ! ~ ~ foo ^ "bar" [ ! ! - ( - false ) or ~ ! false . foo and "bar" ] ) <= ! - true and - ! true > 123 or ! - ~ - ( true ) > 123 ( 123 . foo >> ( ~ ! ~ ( ~ ! 123 and ! false ) ) ( ) , "bar" or false . foo and - false ) ) ] ) >> ! ( ~ ! foo ) ++ ;
 } ;
 } else { ! true or false ;
 } ;
 } ;
 foo int ;
 foo int ;
 func foo ( foo int , foo int , foo int . int , foo int . int , foo int . int . int ) int . int { ( - foo ) ( ( - foo ) | false % ~ ~ ~ foo , ~ 123 == false [ - - - ~ true ( ) != foo ] ) /= foo ;
 } ;
 func foo ( ) int . int { var foo int = ! ( "bar" ) ;
 } ;
 } ;
 var foo int . int . int = ~ ( ( true . foo == ! - ! ~ ~ ! - 123 [ 123 < ! false ^ ! true ] ) ( ) or foo / - foo [ ~ ~ ~ - "bar" and - false & ! ! ! ! 123 ] >> ~ ( ! - ~ - ~ ~ 123 [ ! - - foo ^ foo ] | foo * 123 ) ^ ! ! true ) != "bar" <= - - - "bar" . foo + - false ;
 class foo { func foo ( foo int , foo int , foo int ) int { - ( "bar" ) -= ( ~ "bar" ( ) ) ;
 } ;
 foo int ;
 } ;
 var foo int = - ~ - ( true or ~ - ! 123 ) or - foo ;
 
