module foo ;
 func foo ( foo int , foo int . int ) int { ! ~ foo | "bar" = ~ true ( 123 . foo , - ~ - - ! - 123 * ~ ( - ~ false [ ( ( - ~ - 123 ) < true ) ] ) ) & ~ ( ~ - 123 & true . foo ) ;
 } ;
 func foo ( foo int , foo int . int , foo int . int , foo int . int . int , foo int , foo int ) int { "bar" ;
 } ;
 class foo { for var foo int = ~ ~ ! true ;
 true | ~ ! ( ! ! ! ! "bar" | "bar" [ 123 ] ) [ ! - foo [ "bar" ( ~ 123 . foo ^ - ! false ( true , "bar" != 123 . foo | 123 ) , ! 123 ) ] ] ;
 ~ ! - - "bar" -- { for val foo int = - ( ( ! foo [ - true + false ] ) [ ! - ~ ~ "bar" ] ) ;
 true != "bar" * - "bar" | foo ;
 ! ~ - true { for val foo int = ( ~ ( foo ) ( ) ) ;
 ~ ~ ! "bar" == ~ ~ ~ ! - 123 ;
 true += - 123 . foo == - 123 + ! "bar" { for val foo int = ! ~ 123 ;
 ! true ;
 ! 123 ( ~ ! ( "bar" ) , true >= 123 [ ! "bar" | ! ~ - ! "bar" ] ) *= true { for val foo int = ! foo ;
 ! ~ ( ! ! ~ ! foo ) ;
 "bar" { ~ ~ ~ false . foo * "bar" ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 class foo { if foo != ~ 123 . foo >= foo ( ) { - - ~ ~ ( - ~ "bar" & true <= false ) . foo > - ~ false ;
 } else { for val foo int = - ( - ~ ! foo ^ ~ ! false ) != ( foo ( ) ) [ false ( ) ] ;
 ~ ~ ~ false ;
 ! "bar" **= - - "bar" ( ) { if ! 123 ( foo ( foo . foo ^ ( false ( ! ~ ~ ! ! - ( ~ ~ ( ~ ~ - ( - 123 ) ) ) , 123 != 123 ) > 123 == true * 123 ) > ! 123 , ( ~ ( false ) . foo != foo ) ( "bar" , true ) ) , ! - ( - ~ "bar" ) ) { for val foo int = false [ - false < - ! ! ~ true . foo ] ;
 ( ! false & foo ) ;
 123 != foo . foo { 123 ( true , false ) *= false >= - - - 123 [ true ] ;
 } ;
 } else { if foo != 123 ( ) { "bar" = ~ - 123 ;
 } else { false . foo /= ! - - - ( 123 | ( ( - foo ) ) & 123 ) & ! false . foo ;
 } ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int ) int { if "bar" { for val foo int = foo ;
 "bar" != 123 & ( true ) [ true + ! - ~ true ] ;
 ( "bar" ) -- { ! "bar" ;
 } ;
 } else { if 123 { for var foo int = - ~ false ( ~ 123 > "bar" , ! ~ ~ ( - ~ foo ) ) ;
 ! - ( - 123 * - ~ ( foo & - true ) ) . foo ;
 - foo { for val foo int = ~ true . foo ;
 foo ;
 false /= ~ ! ! "bar" / ! - - foo < - - ~ ! foo { for val foo int = "bar" ;
 - ! - foo ;
 - ( foo . foo ) . foo + ! foo -- { ( ! 123 ) . foo == true /= ~ foo ( ) ;
 } ;
 } ;
 } ;
 } else { for val foo int = foo ;
 "bar" ;
 ~ 123 ++ { if ~ ~ - ~ ( ! ! - ! ! foo >= true ) { for var foo int = ! ~ 123 ;
 ! "bar" ;
 true . foo += ! false [ true | 123 ] >= foo { for var foo int = - 123 ;
 - false ;
 foo ( ) ^ foo * ~ ~ false ++ { foo -= true > ~ ~ ( false [ true ] ) [ ~ ~ - ! ( ~ - true [ 123 . foo ] ) ( ! "bar" , - true ( false , ~ false . foo ) == ~ ! false [ foo < foo / "bar" != "bar" * - - - - true ( ! ( false & - true . foo ) , "bar" ) ] ) ] ;
 } ;
 } ;
 } else { ( ! foo ) ( foo <= 123 ^ "bar" , foo ) / "bar" ;
 } ;
 } ;
 } ;
 } ;
 } ;
 func foo ( ) int { for val foo int . int = ~ ! ! ! - false ( ~ foo [ "bar" < foo . foo ] * ~ true >= - true , foo ) | ! "bar" ;
 ~ "bar" [ - - ! - - true ] * ! 123 ;
 "bar" . foo | false **= 123 ( ) { ~ 123 -- ;
 } ;
 } ;
 func foo ( foo int . int . int , foo int , foo int , foo int , foo int , foo int . int ) int { ! 123 [ ! 123 ] -= ! ~ 123 ;
 } ;
 func foo ( foo int . int . int , foo int . int ) int { for val foo int = 123 ;
 - ~ foo [ - ! - 123 ( true [ false ] * foo | ~ foo ( false , ( ~ 123 . foo ) [ true ] != "bar" ( - 123 , 123 ) ) , ~ ~ foo [ ( "bar" ( false ( ) <= ~ ! - - - ! ( ! 123 * true [ ! foo ( ) ] ) [ - - foo < - foo ] != false , foo . foo > ! 123 . foo / ! - "bar" ) & foo ( ~ ~ ! ! false [ true ] & ! false ( ~ "bar" , ! foo ) , - - ! ! ~ 123 ( ! ! ! false / "bar" [ - - ! ! ! ~ ~ - 123 ] ^ "bar" ( ) , ! ~ 123 ) ) ) ] | - "bar" == - true [ - 123 + ~ ( ! ( 123 ) & ! ( ~ ( ! ! "bar" - false ) ) ( true , false + ~ false ) >= ! ( - - ~ "bar" ) . foo ) [ ! false ] ] / ! true ) ] ;
 false >= false ( 123 [ ! true ] , ! ! true [ - 123 ] * - true [ ~ true ( ~ ~ ~ ~ "bar" / ~ false , ! "bar" < ! 123 ) ] | 123 ) & 123 . foo **= - ( - 123 * true ^ foo ) { for val foo int . int = ~ true ;
 - "bar" [ ! 123 > ! foo . foo ] ;
 ~ true -= true . foo != - false [ foo / foo ] { for val foo int . int = - foo ;
 ! true . foo | - - ~ ~ ! "bar" . foo ;
 ! "bar" -- { if ~ - "bar" / ~ ( ! true ) { - - ( foo >= "bar" ) . foo != - ~ ( "bar" * - ~ "bar" ) /= foo ;
 } else { true ( ) ++ ;
 } ;
 } ;
 } ;
 } ;
 } ;
 var foo int = true ;
 val foo int = true ( ) ;
 val foo int = - ~ ( - - ( - ! - ~ - 123 ) + - - true [ - ! true * - false [ ~ ! true ] ] ) ;
 class foo { ~ ~ ~ false == 123 ;
 } ;
 class foo { for var foo int = ~ ! ( foo == ! ! ! - foo [ foo ] ^ - 123 ) ;
 ~ ! false != 123 ( ) ;
 ~ - ~ ~ true [ - 123 * ! 123 + true ] { for var foo int = ~ - ~ - ~ ~ - ~ ~ 123 ( false != ! false , true ( ) ) ;
 ~ false ;
 ( - ~ "bar" [ ! true ( - ! ! ~ - "bar" [ ! ~ "bar" [ ~ ~ ~ ! foo / ~ "bar" ( ) ] ] , "bar" ) ] >= foo ) - true ++ { ! ~ ( true > false ) = - foo & 123 ;
 } ;
 } ;
 } ;
 func foo ( foo int ) int { foo ( ) ;
 } ;
 class foo { "bar" != "bar" ;
 } ;
 class foo { true [ 123 ] ;
 } ;
 val foo int = false ( ) ;
 class foo { true [ foo ] ;
 } ;
 func foo ( ) int { "bar" ;
 } ;
 func foo ( ) int . int . int { if - ! true . foo * - ~ true { if true { if true { if ( ~ false . foo ) { foo . foo ;
 } else { for val foo int = 123 ;
 ( - false . foo ) ( ) ;
 false [ ! ( - ( false ) ) ] <= false *= "bar" . foo { ! foo [ ~ - foo [ ! ! - true != ~ false ] & ( true ) ( ) ] ;
 } ;
 } ;
 } else { if - "bar" { - ! - ! true * false -- ;
 } else { for val foo int = ! ! - ( 123 ) ;
 ( "bar" ) ;
 ~ 123 | - ! ~ true < false { for val foo int = foo ;
 true . foo ;
 foo [ ~ ~ - - ~ - - - 123 / ~ ! ! ( false ) ( ) ] < "bar" { false -- ;
 } ;
 } ;
 } ;
 } ;
 } else { if ~ ! "bar" { if - ! foo . foo { for val foo int . int = ! ! ~ - ! 123 ;
 ~ "bar" . foo * ~ ~ ~ foo [ - - ! - ! ! ~ ! 123 ( 123 > ~ 123 , 123 ) ] ;
 123 { ~ ! true -- ;
 } ;
 } else { "bar" -= - "bar" ;
 } ;
 } else { ! - ! ! ! ! - "bar" - ~ ( ! 123 ) ( ) & ! 123 -- ;
 } ;
 } ;
 } else { false ;
 } ;
 } ;
 class foo { "bar" ;
 } ;
 var foo int = foo == - ~ true ;
 func foo ( foo int , foo int ) int { if ! foo { for val foo int = 123 ;
 "bar" ;
 ~ - - true . foo { ~ - ! - "bar" . foo = "bar" . foo == - ! foo ;
 } ;
 } else { if true == ~ - foo [ 123 ] { for val foo int . int = true ;
 foo < ! - - ~ ~ ! ! ( false | - ( 123 ( - ~ ! foo , - ~ ! ! 123 ) ) ) [ false ] ;
 "bar" { if ~ foo . foo { for val foo int = false [ 123 . foo != 123 ] ;
 "bar" == ~ ~ false ;
 "bar" ++ { if ~ foo { if ( foo ) { if true { - ( - - foo / false ) /= true ;
 } else { ( - ! foo ) & ~ "bar" ++ ;
 } ;
 } else { for val foo int = ! - - false ( ) ;
 ~ ! - true [ foo ] ;
 foo = ! ! - true { for var foo int = - - true * 123 . foo ;
 false ;
 foo ++ { - ( ( - ! - - foo <= ! foo ) [ 123 / - ( false [ ~ ( false [ "bar" ] ) & "bar" . foo ] ) . foo ] != true ) - ~ - - ! false ++ ;
 } ;
 } ;
 } ;
 } else { for val foo int . int . int = ~ ~ - true * ! ! 123 ;
 ! - true ;
 ! ! ! ~ true != ~ ~ ( true ) *= ! ! ! ! 123 [ ( - 123 ( ) ) >= - ! "bar" * ~ ! foo . foo ] { ! ! ~ - ! ~ foo == ( foo ) / ( ~ foo ) ;
 } ;
 } ;
 } ;
 } else { ~ "bar" ;
 } ;
 } ;
 } else { for val foo int = ! ~ foo . foo ;
 foo & - ~ foo ;
 ! - foo ( ~ ~ "bar" != - "bar" , ~ - ! true ^ - foo ) ++ { for var foo int = ! ! false ;
 false ;
 ~ ( ~ foo ) **= - "bar" | ! - ! "bar" != "bar" > false [ - ( "bar" ) . foo == ~ ~ true ] { if - false { foo = - ! ! ~ - - ! 123 [ "bar" . foo ] != 123 ;
 } else { false & false . foo ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 func foo ( ) int . int { for var foo int = - true == ( ! ( 123 ) | "bar" == 123 ) ;
 ! "bar" ;
 123 **= true { for val foo int = - ~ ! ( foo ) [ ! ! - ~ ~ false [ ! false ( false , - ! ! ( foo [ true ( ) >= true ] & ( "bar" & "bar" | ~ foo ) [ ~ true ( ) ] ) | - "bar" / 123 ) ] ] ;
 ! - 123 ;
 - 123 >= - 123 [ ~ ! 123 ] { if ! ( 123 ) <= ! foo . foo { foo [ foo / ! ( foo ( ! "bar" [ ! true ] , ~ - ( 123 ( ) ) ) ) ^ true ] ++ ;
 } else { for var foo int . int = - ! ! ! "bar" ;
 - true ;
 - true { "bar" . foo -- ;
 } ;
 } ;
 } ;
 } ;
 } ;
 
