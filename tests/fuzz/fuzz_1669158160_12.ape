module foo ;
 val foo int . int = ! ! 123 [ ! "bar" + ~ foo <= "bar" ] ;
 func foo ( foo int , foo int ) int . int { - - 123 -- ;
 } ;
 func foo ( ) int { if foo / ! 123 { ~ - ( false ) /= true [ "bar" ] * false ;
 } else { - 123 -- ;
 } ;
 } ;
 func foo ( ) int . int { for val foo int = false ( true , ! ! "bar" ) ;
 - true ;
 ! true -= "bar" { - 123 == ! "bar" [ ( - ( 123 . foo * 123 ) ) ( true , - true * foo ) - ! ! ! - ! ~ ( true - foo ) [ - ~ true + ( ~ ! - ! ! "bar" ) <= ! ~ foo ] ] ++ ;
 } ;
 } ;
 var foo int = "bar" . foo ;
 class foo { func foo ( ) int . int . int { false != - ( "bar" & ! 123 . foo ) -- ;
 } ;
 foo int . int . int ;
 func foo ( ) int { for var foo int . int = ! "bar" ;
 - ( true ) ;
 ~ ~ foo **= ! ~ ~ false . foo * "bar" ( false , ( ~ ! foo ( ) != "bar" . foo - false ( ! ~ false . foo & ~ ! true . foo <= "bar" , foo [ ~ - false ] > ~ ( true ) ) ) | ( ! ~ - - true [ ~ - false ] ) ) { ( ! ! - - 123 != true ) ;
 } ;
 } ;
 foo int . int ;
 func foo ( foo int ) int { if ! "bar" { if ( false ) - "bar" { if ! 123 ( ! ( ! false ( ) ) != - false , ! ! "bar" ) { - ( ( "bar" ) + "bar" ) | ( foo ) *= - ~ ( ( false ) ) ;
 } else { for val foo int = foo ;
 "bar" * - "bar" ;
 123 == 123 [ "bar" [ - foo ] ] /= - ~ - "bar" { - ! ! ~ - - false [ ~ 123 . foo ] += 123 <= true ;
 } ;
 } ;
 } else { ! ~ ( "bar" [ false ] ) -- ;
 } ;
 } else { true [ 123 ] *= - ! ! ~ foo . foo / - ! - ~ false [ "bar" ( ( "bar" ( ! - - ~ - false , - ! - "bar" <= ! "bar" . foo + 123 ( ~ ( ! foo * ! false ( ! foo , - - ! "bar" ( ) ) ) . foo , foo . foo ) ) == ( "bar" ) ) , ~ foo / - - true ) ] ;
 } ;
 } ;
 func foo ( ) int { if ! false { for var foo int . int . int = ! ( ( - ( true ) ) & ! foo [ - ~ ! 123 . foo ] == "bar" ) ;
 ( "bar" + ( ! - foo ) ) > false ;
 123 ++ { for var foo int = - false & - ( foo ) > ~ ~ ! "bar" / 123 . foo ;
 ! ! foo . foo ;
 ~ 123 == ~ true /= - false { - - foo ;
 } ;
 } ;
 } else { for val foo int = ! 123 . foo ;
 ~ foo ( ) ;
 ~ ~ false ( - - - ! ( true ) , ~ ~ 123 - ! ! "bar" ( ) / - "bar" . foo ) -- { ! 123 ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int ) int . int { foo / - foo . foo ^ - ( 123 . foo ) **= ! foo [ ~ 123 . foo - "bar" . foo == false ] | 123 ;
 } ;
 foo int ;
 func foo ( foo int , foo int , foo int , foo int . int . int , foo int ) int . int . int { 123 ;
 } ;
 } ;
 func foo ( foo int . int , foo int , foo int ) int { if ! - ! - - - 123 . foo { - true ++ ;
 } else { for val foo int = true ;
 ! "bar" - ~ ! ( ~ foo ) <= true ;
 ! - - true & - ~ "bar" | false ++ { if ( - ! ~ - ~ ! - ~ ~ true [ - 123 ] ) <= foo != ( ~ 123 ) . foo { ( ! foo < 123 + foo != - ! - "bar" [ "bar" - ( "bar" ) ] ) ;
 } else { ! - ! true & ! false ( ( false & - "bar" [ ! "bar" ] ) / - false == ( foo * - - ( true ( ! foo . foo * - false , foo ) ) ) ( - false , false ) , ( foo [ false ] ) . foo ) ++ ;
 } ;
 } ;
 } ;
 } ;
 class foo { foo int ;
 foo int . int . int ;
 func foo ( ) int . int . int { if "bar" { ~ true ;
 } else { if true < - false { false ( ) ;
 } else { ~ false ( - "bar" , "bar" & ~ foo ) **= - foo * foo ;
 } ;
 } ;
 } ;
 func foo ( ) int { if ~ ~ ! ! "bar" != ~ false { if 123 { if ( ~ false ) { - "bar" -= "bar" . foo ;
 } else { ( foo [ - ! - ! false . foo | ! false / - true ] * ( ( ( ( ~ false != - ! false [ "bar" ( ) ] ) ( ) != true ) . foo != ! ~ foo ( ) ) ) ) ( ! false >= ! ( "bar" . foo | foo . foo ) . foo , ~ - false ) == ! ! false - ~ ~ ~ ! "bar" -- ;
 } ;
 } else { for val foo int . int . int = ~ true >= 123 ;
 ! ( ~ "bar" & foo ) ( ! "bar" , "bar" ) >= true / ~ ~ foo . foo ;
 ! true <= ! ! foo /= ~ "bar" & ! "bar" { ~ - - false ;
 } ;
 } ;
 } else { if "bar" & - ~ ! ! false { 123 ^ true ;
 } else { ~ ~ ( false + true ) == false ++ ;
 } ;
 } ;
 } ;
 func foo ( foo int . int ) int . int . int { for var foo int = "bar" ;
 false ;
 foo = ~ ( true ) . foo { for var foo int = foo ;
 "bar" . foo ;
 123 * - ! ! 123 { for val foo int = ( 123 ( 123 , ( 123 ( - - - 123 [ 123 * foo ] , true ( ) ) > - "bar" + true ) ) <= true ) != ~ ~ ~ ! false > - "bar" - 123 ;
 - ( "bar" | true / false ) ( 123 [ 123 <= ! - - ( ( true [ false ] + 123 ) ( ~ ( ( ~ false ) ) ( ) , ~ false ) ) ] , false ( ) ) ;
 ! true ++ { false [ foo / ! "bar" ^ foo ] / ( - ~ ~ ! ( foo ) == ! true ) ;
 } ;
 } ;
 } ;
 } ;
 } ;
 class foo { foo int ;
 foo int . int . int ;
 foo int ;
 func foo ( foo int , foo int ) int { for var foo int . int . int = - ( 123 . foo | ~ "bar" >= ~ ! ~ foo ) [ - ( 123 | "bar" ) / ~ ! ~ - ~ ! ~ "bar" ] ;
 123 ( ) <= - - "bar" * ( "bar" & false ) ;
 - foo { foo ++ ;
 } ;
 } ;
 foo int . int . int ;
 func foo ( ) int { ( false ) -- ;
 } ;
 func foo ( ) int . int { for var foo int = true ^ 123 ;
 true [ ! - false ( ) ] ;
 - ( ! ~ ! - ! ! ~ ~ false ( ! ! true , ( 123 [ - "bar" | ~ false != - 123 [ - ( ~ ~ - - true ) != 123 ( ) ^ 123 ] * - false ] ^ ! ! foo >= ~ ~ - true ) ( ~ ~ 123 < ! ~ 123 , ! false ) ) ) /= "bar" { true . foo ;
 } ;
 } ;
 } ;
 var foo int = foo [ foo ] & 123 ;
 func foo ( foo int , foo int , foo int ) int { for var foo int . int . int = - ( 123 [ - 123 ] ) [ foo * ! ( ( 123 <= - ! true ( ) ) - ( false ) & ~ - "bar" ( false , ! ~ - ! ! ~ foo | ! ! ( ~ ! ~ ! 123 . foo ) ) ) [ foo | - ! ~ - ! ! true [ foo ] ] ] ;
 - 123 ;
 ! - 123 | ~ ~ 123 ( ) <= - - - ! false = ! true { if ~ ~ 123 { ( false == ~ - "bar" [ false + 123 / - ! false ] ) >= - true ;
 } else { ~ false & - ! - - - ( 123 ) ;
 } ;
 } ;
 } ;
 class foo { func foo ( foo int , foo int , foo int , foo int . int . int , foo int , foo int ) int { 123 += ( ! ( - - ~ false ) [ - ( ! true < "bar" | ! ! "bar" == - true ) [ foo . foo ] ] ) ( ( ( ~ ~ 123 ) ) , "bar" ) + - ! ! - ( 123 > ( ! "bar" ) ) == ! - ! true ;
 } ;
 foo int ;
 func foo ( foo int . int . int ) int { for var foo int = foo ;
 "bar" [ ~ ( false < ~ true [ "bar" ] / ~ - - - - foo ) ] ;
 ( ( 123 ) ) | 123 = true { for val foo int = 123 ;
 ( - ! ! foo >= ~ ! ~ ! ( false ) ) ;
 ( "bar" ) { ~ ~ ! true . foo = false ;
 } ;
 } ;
 } ;
 foo int ;
 func foo ( foo int , foo int . int , foo int , foo int , foo int . int . int , foo int ) int . int { if 123 { for var foo int . int . int = ! ( ! false ) ;
 - false ;
 ( ~ ! - - true ( ) ) ^ ( ! ( - "bar" [ - false ] <= ~ 123 ) ) . foo { ~ "bar" == foo ;
 } ;
 } else { if false { for val foo int = - true . foo ;
 - ! true ;
 true / ! foo { for var foo int . int = false ( ) ;
 - true [ - ~ ~ true > 123 ] ;
 ! true ++ { for val foo int . int = - "bar" ( ) - ( true ) ;
 ! ! foo - "bar" [ - "bar" ] ;
 ~ ~ ! ~ - 123 -- { for val foo int . int . int = "bar" . foo ;
 foo & foo ;
 123 { ~ ! ! ! ! ~ true [ foo ] = ! ! ! foo ;
 } ;
 } ;
 } ;
 } ;
 } else { "bar" . foo *= ~ "bar" + 123 ;
 } ;
 } ;
 } ;
 foo int ;
 func foo ( ) int . int { true [ ( false . foo >= - - ! "bar" ( ! foo [ - foo == false ] , ~ ~ false ) ) == foo . foo * ~ ~ ! ~ ( ( ~ - ! true ) ( ) * foo [ 123 ] | - - ~ foo ) ] + ! ! false ;
 } ;
 func foo ( foo int , foo int . int , foo int ) int . int . int { if - - ~ true { if - true { for val foo int = ( ! ~ foo . foo ) [ ! ~ - ~ ( "bar" ) . foo ] ;
 "bar" ;
 - true [ true ] * ( false < false == - ~ foo ) { if ~ 123 { if ~ ~ foo { if 123 ( 123 , - - 123 ) { "bar" -= "bar" ;
 } else { 123 | true >= ~ 123 ;
 } ;
 } else { if ( - true & - ~ ! 123 ) > ~ ~ false ( ! ~ ( true . foo ) [ ( ! ( - 123 * ( ! "bar" & - - ~ false [ ~ foo - 123 ] != ! ! false / true ) ) ) & "bar" [ 123 < false . foo ] ] , true ) { ~ "bar" <= - - true -- ;
 } else { ! - foo != ~ foo ( 123 , true ( ) >= - ~ "bar" ) ++ ;
 } ;
 } ;
 } else { if false { if - - "bar" { true += true ;
 } else { ~ ( - ! ! foo < 123 ) . foo & foo . foo ++ ;
 } ;
 } else { if ( ( - foo . foo ) == ! - - ! - ! foo ) * 123 { - ! ! false [ - true ] ;
 } else { ! - ~ true ;
 } ;
 } ;
 } ;
 } ;
 } else { ~ ~ foo ++ ;
 } ;
 } else { false -- ;
 } ;
 } ;
 } ;
 func foo ( foo int . int ) int . int . int { "bar" ;
 } ;
 var foo int = "bar" / foo + "bar" <= ! foo ( true , "bar" - ~ ! ~ - false ) ;
 func foo ( foo int , foo int , foo int , foo int . int . int , foo int , foo int ) int { 123 < "bar" **= foo ;
 } ;
 val foo int . int = true [ ( false ^ false ) [ - 123 ^ - true ] ] != foo . foo ;
 func foo ( ) int { 123 ^ true >= 123 -= false . foo != ( foo ) ;
 } ;
 func foo ( ) int . int { ~ false == 123 ;
 } ;
 var foo int = ( ~ ~ - false . foo ) ( ) != ! ( true ) [ 123 ] ;
 var foo int = ! foo ;
 func foo ( ) int { for val foo int = foo [ foo ] ;
 "bar" * "bar" [ ! - ( 123 ) ] ;
 ~ 123 { for var foo int = false ;
 ( ! ! 123 ( ) ) ( foo == ~ - "bar" - ~ ! false ( ) , ~ ~ ~ false ( ( "bar" . foo ) ( 123 == ! - "bar" , false | 123 ) * false [ - ~ ( true >= ! foo ) ] == ~ foo , ~ false . foo + ! ( "bar" ( false , ( 123 . foo ) ) <= ( "bar" ) . foo ) < - foo ) ) >= 123 [ false ] ;
 false { "bar" ( ) | ~ - ! false [ - foo ] ;
 } ;
 } ;
 } ;
 func foo ( ) int { for var foo int = 123 . foo ;
 "bar" ;
 ~ "bar" ( - false , ~ - 123 ) == ! - ! ! false ++ { true ( ) <= ! foo **= ~ - ! ( true ) ( ~ "bar" , "bar" ) ;
 } ;
 } ;
 val foo int . int = ~ ! - - ! false ;
 class foo { foo int ;
 foo int ;
 foo int ;
 func foo ( foo int . int . int , foo int . int , foo int ) int { ! ( ! ~ ! 123 - true ) ++ ;
 } ;
 func foo ( foo int , foo int . int , foo int . int ) int . int . int { for val foo int = "bar" ;
 - "bar" >= 123 ( foo ( foo , ! "bar" ) , ~ 123 [ ~ "bar" ] | ( ~ true ) ) + ! - - false ;
 ( ( foo . foo ) ) ++ { if - "bar" { 123 [ ( ( ! true | ( ~ true * ~ ! - true ) ) . foo ) [ foo ] ] -= - ! foo ;
 } else { ~ true ;
 } ;
 } ;
 } ;
 func foo ( ) int . int { ! "bar" ( false , - 123 ) != - "bar" **= 123 <= - true ;
 } ;
 foo int ;
 } ;
 func foo ( ) int { ( foo [ foo / ! ~ ~ ! true ( ) < - - ( foo ) != ~ false - false * false ] * ! ! false [ false . foo ] ) -- ;
 } ;
 val foo int . int = true ;
 class foo { func foo ( foo int ) int . int { if - - true { - "bar" . foo ;
 } else { for val foo int = false < false ;
 foo ;
 true / true ( false . foo == ! ~ - true , ! "bar" - "bar" ( ) ) = 123 != false { false ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int ) int { for var foo int . int . int = false ;
 "bar" ;
 - ~ ! false . foo & true . foo < ~ foo [ false - ~ 123 . foo ] * ( ~ 123 ^ 123 >= ( foo != ~ - ! 123 ) ) += false + ! foo / ! ~ ~ ! - false { if ~ foo { for var foo int = 123 ;
 ~ "bar" ;
 ! ~ ~ false += foo [ true ] { - "bar" /= ! ~ ( false >= foo ) ( ) ;
 } ;
 } else { for val foo int = ( false ^ - - ( false ) ) >= ! ! ~ ~ true ;
 "bar" [ - - ! ~ ~ ! 123 ] >= ! "bar" ;
 false -- { ( 123 > - "bar" != - true . foo >= 123 ) = foo [ true ] ;
 } ;
 } ;
 } ;
 } ;
 func foo ( ) int . int . int { - ~ ! false ( foo , ( ! "bar" ) ) /= - false . foo ;
 } ;
 class foo { func foo ( ) int { if ~ true . foo < ( - 123 ) { - ( "bar" / 123 ) -= - foo >= foo ^ true . foo ;
 } else { if foo [ - "bar" [ - ~ - foo & 123 ] ] - ( - 123 [ false ] ) ( true . foo , ~ foo <= - 123 ) { false != ~ - ~ ~ ~ true & true = true ;
 } else { true * ( 123 != ~ "bar" ) -- ;
 } ;
 } ;
 } ;
 foo int . int ;
 func foo ( ) int { - ! - true ( ) ;
 } ;
 } ;
 class foo { foo int ;
 func foo ( foo int , foo int , foo int , foo int , foo int , foo int ) int { for val foo int = ( 123 ) ;
 true [ ~ foo ] < foo ( "bar" , false * ~ "bar" ) * - foo . foo ;
 ~ 123 ^ foo >= ~ ( ( ! - foo ) ) { ! foo * - true ( false , ! ! "bar" / "bar" ) = false ;
 } ;
 } ;
 func foo ( foo int . int , foo int , foo int . int , foo int ) int . int . int { for var foo int = ! ! - ! 123 . foo <= ~ ( ~ foo . foo ) . foo ;
 - - true . foo * ~ - ( ! - ~ ! ~ ! ! - - foo . foo ) . foo ;
 ( ~ ~ - ! ( - true ( ~ ! - false [ true [ ! ! ~ - - ~ foo & ( foo ) >= ! true ( true . foo & ~ ~ - 123 ( foo [ ~ "bar" & ( - - ~ ( ( - ! 123 ) ( ! ~ false . foo , ( - foo ) . foo ) ) ) ] , - true ) , "bar" ) ] <= foo ] , ! ~ "bar" ) ) . foo < - ~ ! true . foo ) != ! 123 * 123 [ false . foo * foo != false . foo ] { - false -- ;
 } ;
 } ;
 foo int ;
 func foo ( foo int , foo int , foo int , foo int . int , foo int , foo int ) int . int . int { ~ "bar" != ! - 123 > foo ;
 } ;
 foo int ;
 } ;
 class foo { func foo ( ) int { "bar" [ - ( ! false ) != foo . foo ] ;
 } ;
 foo int . int . int ;
 func foo ( ) int . int { true == "bar" ;
 } ;
 foo int ;
 func foo ( foo int . int . int ) int { if 123 & - "bar" { for val foo int . int = true . foo ;
 ( ! ~ foo ) > ! ! foo ;
 "bar" [ ! ! 123 ] **= "bar" & ! false ( ! - ~ ! "bar" . foo , true ) - ( ! ( - ~ - - ~ ! "bar" ) [ 123 [ - false ( false ^ ! ~ foo ( ) , foo ) ] ] ) ( ) > "bar" { if ~ foo [ foo ( ) ] { - ! ~ - ( false ) + ~ foo ( foo , foo . foo ) -- ;
 } else { ! ! ~ true [ true ] & true . foo -- ;
 } ;
 } ;
 } else { for var foo int = ~ "bar" ^ ~ foo ;
 foo ;
 - foo ( ) ^ 123 -- { for var foo int = ! true + ~ "bar" != false . foo ;
 ~ ! ! false ;
 ~ true -- { ~ ( foo == ! - ~ foo ) / ( ! foo ) = ! "bar" ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int . int , foo int , foo int , foo int , foo int ) int { true == 123 ;
 } ;
 } ;
 
