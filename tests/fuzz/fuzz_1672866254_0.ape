module foo ;
 var foo int = true ;
 class foo { } ;
 func foo ( ) int { } ;
 class foo { foo int ;
 foo int . int ;
 } ;
 var foo int . int . int = false ;
 val foo int = 123 ;
 val foo int = ~ true . foo ;
 func foo ( ) int . int . int { val foo int = ! ! "bar" ;
 } ;
 func foo ( foo int , foo int ) int { var foo int = - ~ - false >> false ;
 } ;
 val foo int = ~ ~ foo or true and ( ! ! ! - false ( - foo , ! foo , ~ foo [ false . foo ] or ! ! ! - ~ [ foo . foo , - - ! ! foo ( ! ! foo & ~ ! ! ( false or 123 [ - true > ! foo ] ) , true , false , [ ] or true , - true ) , - ( ! - ! true ) or false , false ] ) and false + true * foo ) ;
 class foo { foo int . int ;
 foo int ;
 func foo ( ) int . int . int { } ;
 } ;
 func foo ( ) int { } ;
 val foo int = 123 ;
 func foo ( ) int { } ;
 class foo { foo int ;
 foo int . int ;
 foo int ;
 func foo ( ) int . int . int { 123 ++ ;
 } ;
 } ;
 class foo { foo int . int ;
 func foo ( ) int { } ;
 foo int . int . int ;
 func foo ( ) int { for var foo int = - ~ true . foo ;
 - ( ~ ~ ! - ~ ! ! ~ 123 != - 123 ) ;
 - - - ~ ~ "bar" != foo . foo { 123 = foo ;
 } ;
 } ;
 foo int . int ;
 } ;
 class foo { foo int ;
 foo int . int ;
 } ;
 func foo ( foo int ) int { } ;
 var foo int . int . int = ~ true . foo >> foo ( ) or foo ;
 func foo ( ) int . int . int { if ( [ ] . foo ) { for val foo int = [ "bar" or false , ! ( ! 123 ) , - true , ~ ~ ( ! 123 + foo ) / ! foo , - foo [ ! - ( ! - - false - true ( ) ) [ - - true ] and ! true ( foo , false , [ ] , "bar" ) ] and ~ - - foo , ( ! - "bar" >= ~ [ true , - ( ~ ( ~ ( ! - [ ] . foo != ! - - - ~ ( ~ ( ~ ! ( "bar" ) ) ) ) ) ) , false , true , - ~ ! foo , true or true ] ) ] or - false . foo ;
 [ ! ~ - ! ( [ foo or - true << [ ] , foo != - - true , 123 , ! "bar" << ( "bar" ) ] or "bar" ( ! false and "bar" , - foo ) / ! "bar" and ~ [ ] ) , 123 [ true ] ] << "bar" > [ ! true == 123 ] ;
 ~ "bar" . foo % - [ ~ [ false ] / "bar" [ ! ! - ! "bar" ( ~ ~ false [ foo ] , - "bar" ( "bar" [ foo [ [ ] << false ] ] and - - ! ( "bar" <= "bar" [ ( [ ] ^ [ ~ ~ "bar" ] or true ) != ! - true ] ) >= ! false ( ) ) - false , - "bar" ( ) ) ] , 123 , ! ! foo ] { } ;
 } else { var foo int . int = foo ;
 } ;
 } ;
 func foo ( ) int { } ;
 func foo ( ) int { } ;
 val foo int = false ;
 var foo int . int . int = false ;
 func foo ( foo int , foo int , foo int . int . int , foo int . int , foo int . int , foo int ) int { } ;
 val foo int = - - - ! ! foo ;
 val foo int = [ ] ;
 func foo ( foo int , foo int . int , foo int , foo int . int ) int { ( 123 . foo ) & - ( true ) [ "bar" or - ~ ! foo ] **= ! "bar" ;
 } ;
 val foo int . int = [ ] ;
 val foo int = - true == ! ! ~ true ;
 func foo ( ) int { } ;
 class foo { func foo ( foo int . int . int , foo int , foo int , foo int ) int { true . foo <= [ ! 123 ^ 123 or ( "bar" and true or ! - 123 ) , ~ ( ! false [ ~ ( ! ! ! [ foo , ! true ] or 123 ) ( - ( ! ! ! foo ) , ( ~ ! - [ ] ) & foo , false , [ ] . foo , ~ ( 123 | true ) ( ) or true , - ! ~ [ ] ) > foo * false ] ) % true , [ ( false <= ~ "bar" ( ) ) ] . foo , - ! 123 , true ] ;
 } ;
 foo int ;
 } ;
 val foo int . int . int = [ ] ;
 var foo int = ~ foo < true != - ~ - 123 . foo ;
 class foo { func foo ( foo int , foo int ) int { } ;
 foo int ;
 } ;
 
