module foo ;
 class foo { foo int ;
 func foo ( ) int . int . int { false -- ;
 } ;
 func foo ( ) int { ! true *= ~ false ;
 } ;
 foo int ;
 func foo ( ) int { for var foo int = ~ "bar" . foo != false ;
 ~ foo ( ) ;
 ! ! ! ! ! ~ 123 . foo -- { for var foo int = false ;
 ( false . foo ) . foo * true ;
 123 ++ { for var foo int = - ~ 123 ;
 123 . foo < - foo . foo * ( - ~ ! ( ! ! ~ ( foo != "bar" ( "bar" != ! ~ - foo [ "bar" ] , ~ ! ! 123 | ! ~ ! ( ~ - ! ~ true ) ) ) ) != ~ - ~ false [ - "bar" ( ) ] ) . foo ;
 "bar" [ ! ~ - true [ ! false ] <= ! true * ! ~ "bar" . foo ] -- { for val foo int . int . int = true ;
 ~ ~ true [ - false . foo != ~ ( true ) ( - ! false , 123 >= ( ( foo . foo ) <= ! foo [ ~ - ! ! ! ~ - foo ] ) / true - 123 ) ] ;
 - ( - ! - ! - ~ ~ ~ true ) & "bar" . foo ++ { for var foo int = true ;
 foo ( - ! 123 , ~ "bar" [ ( ! 123 | foo ) ] ) ;
 true ( - - - ! ~ ! foo . foo , - foo ) -- { if - foo { for val foo int = false ( ) ;
 - ~ false > ~ - ~ ! false ;
 ~ true ++ { - foo = foo ;
 } ;
 } else { for var foo int = ~ true ;
 true . foo ;
 false > ~ 123 == ~ true -- { if ( - 123 ) { if - ! false ( ) { ~ 123 ;
 } else { for val foo int = ~ "bar" ( foo >= false [ ! foo ] - ( ! ! false ) , - true ) ;
 123 != ! ! ! false ;
 "bar" . foo = false [ ! ( ~ "bar" ) ] == - true [ foo . foo ] { ( ( true ) ( ) != ! ! ~ ( true ) ) [ ! ~ ~ ~ ~ true ] += ( ! ~ false / ~ ( 123 [ false ] ) ) == - foo ( "bar" ( ) , ! foo - ! ! false ( 123 , - - ( ! ! ~ ! ~ true [ ( ~ - - ! foo ) < 123 / "bar" ] ) == - 123 ) ) ;
 } ;
 } ;
 } else { if true >= false { ( "bar" . foo ) ++ ;
 } else { for var foo int = ~ ( foo ) ;
 - ~ foo ;
 foo [ ! - "bar" [ false < foo . foo | ! true [ foo ] ] ] { ! 123 ++ ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 func foo ( ) int { false - - true / ~ ! ( 123 * ( ! "bar" ) [ foo [ ~ - ~ false ] ] ) ;
 } ;
 foo int ;
 foo int ;
 func foo ( ) int { ( foo ) -- ;
 } ;
 foo int ;
 } ;
 func foo ( foo int . int . int , foo int , foo int ) int { ~ ! ( - foo ( ) ) [ "bar" ] & ! "bar" . foo ++ ;
 } ;
 func foo ( foo int . int . int , foo int ) int { 123 -- ;
 } ;
 func foo ( ) int . int { if true + 123 { for var foo int = ~ false ^ 123 ;
 ~ "bar" ;
 - true { if true == true { ! ! ( ! ! 123 ^ ! ~ foo ) * ( true ) ( ) ;
 } else { for var foo int . int . int = ( true ) ^ foo ;
 ~ ~ ~ ( ~ foo ( ! - "bar" , - - ~ foo & ~ ~ - false ( ) == false & - - ! ! ( ! 123 ) ( ) ) - ~ ~ - foo . foo ) & 123 ;
 ( ! ~ true ( "bar" * ( ~ true ^ "bar" & true ) != ( - ! ! ~ "bar" ( ) + - ( ~ ! true . foo == true [ false . foo * - 123 [ false + ~ - ~ false [ ( 123 ) [ ( ~ foo != - - - ( ~ 123 ( - 123 , foo ) ) ( ) ) ] == false . foo ] ] != ! true . foo ] ) ) . foo ^ ~ true [ foo ] < ~ ~ ! false / - ! ! - ! true , ~ ~ 123 ) ^ ~ - 123 . foo > ! 123 [ ! ! ! false ] ) { if - ! 123 . foo | false [ false ( ) > 123 ] { if ~ ~ - - ! "bar" . foo { foo [ false & - false ] ;
 } else { ( ~ ~ - "bar" ) ;
 } ;
 } else { if - ( foo ) { for val foo int = ~ 123 == false ;
 ~ ! - false ;
 123 ++ { for val foo int = ~ - false ( - "bar" ( - ~ ! ~ ~ true ( ! ! ! 123 , "bar" | ( - ~ false . foo / ! ~ ( true ) <= false + ! ~ ! ! ~ "bar" ) != ! "bar" ) , - ! true ( ) ) , ! ! ! - ! 123 ) ;
 ! ~ ~ "bar" [ ~ ! true ] * ! ~ "bar" ;
 ~ true & ~ 123 ^ - ~ ~ foo > ( - ~ true ( - foo [ ! true != 123 [ foo [ 123 . foo ] ] / ~ ~ - ~ ! 123 ( "bar" , ! ! ! "bar" ( ) ^ - foo != ! false ) ] , ! true ) ) *= ! - ( false ) * - ~ ~ ( - - 123 ) < ! true { ~ 123 ;
 } ;
 } ;
 } else { true - ! true . foo == ! "bar" + - "bar" ( ) >= false . foo - true ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { if true { "bar" >= false ( ! - ( - false . foo ) != ~ ! ! - ! foo ^ ( 123 ) , - ! - ! true ( ) ) == ! - ! ~ - ( ! foo [ "bar" != - ~ true . foo ] + - - ~ ! - ~ true ) ++ ;
 } else { - - ( ! ! false == true [ foo ] >= foo & - ( ! ~ 123 ) ) = - 123 . foo ;
 } ;
 } ;
 } ;
 func foo ( ) int { ! foo -- ;
 } ;
 class foo { func foo ( ) int { - ! - ~ ! false ;
 } ;
 } ;
 var foo int = ( "bar" ( ) ) <= - ! ! ~ "bar" - ~ - ~ ! ( - - false ) . foo ;
 class foo { func foo ( foo int . int . int , foo int , foo int , foo int , foo int , foo int ) int { if ~ ~ "bar" { for var foo int = foo ;
 true == ~ false ;
 - - foo { if "bar" + ~ false . foo { ! true /= true ;
 } else { for val foo int = false [ false ] ;
 - ( - foo [ - ( ~ ~ 123 ) ] != - - ( ~ ( ! ~ - true != - "bar" [ - "bar" ] ) ) [ ( "bar" ^ ! ( ~ ( true ) * true [ ! - foo ( foo + ~ foo . foo , - - ! - ~ "bar" [ ! ( ~ ! ( ( ! ~ 123 ) != ( ( "bar" [ ! - true ] * - - - ! - true != ! ( ~ - ( false [ foo ] ) ( ! - - ~ - - "bar" , "bar" ) ) ^ - ! ~ true ) ) ( ! - ~ ! ( true . foo * true . foo > ! ~ true ) , - true ) & ~ ! ! - ! ! "bar" ) ) == true ] ) ] ) ( "bar" , - false [ ! foo ] != ~ true . foo ) ) . foo ] ) [ ( ( foo < "bar" == foo ) [ ! ! ( ~ - 123 ) ] ) ] ;
 ! ~ "bar" [ 123 ] -= "bar" { true ;
 } ;
 } ;
 } ;
 } else { if ! ! ( - ~ ~ ! - foo . foo ) + ! ! 123 != ~ ( ! ( ! ! ! "bar" ) ) { false -- ;
 } else { ( true ) ;
 } ;
 } ;
 } ;
 func foo ( ) int { if foo ( ) { for var foo int = 123 | foo ;
 ~ foo ( false , "bar" ( ) * true ( ) ) ;
 ~ ( - false . foo ) [ false ] ++ { for var foo int . int = ( - foo ) ( ) < - false ;
 - "bar" <= ~ - 123 ;
 true { ! false & - ( ~ ~ 123 & ! ! ! ~ ! ~ ~ 123 ) [ true ( ) ] ;
 } ;
 } ;
 } else { ~ - foo > ! ~ ~ ! ~ false | foo -- ;
 } ;
 } ;
 foo int ;
 foo int ;
 } ;
 var foo int = - ( "bar" | foo / 123 ) ;
 val foo int . int . int = - - foo ( ( ( - ! false ) ) , ~ - "bar" ( ~ ! ~ ( - true ) , ~ ~ foo ) ) ;
 class foo { foo int ;
 } ;
 func foo ( foo int . int . int , foo int . int . int , foo int , foo int , foo int ) int . int { foo > false . foo -- ;
 } ;
 class foo { foo int ;
 func foo ( ) int { ~ - false ++ ;
 } ;
 func foo ( foo int , foo int , foo int , foo int ) int { foo ;
 } ;
 func foo ( foo int , foo int , foo int , foo int . int . int , foo int . int , foo int ) int { if foo { ! 123 ( ) -= ! ~ ( true [ ! ( ( ! ~ ( ! ! ~ ( ( "bar" ) ) [ ! ~ foo ] >= 123 . foo + ~ ~ - ! - - foo [ foo ] ) ) ) ] == 123 ) ;
 } else { if 123 { for var foo int = false . foo + ~ ! foo [ 123 ( ( ~ ! - foo ) [ false [ foo ] - ~ ! true <= - ! ~ ( - "bar" ^ true >= ( foo ) [ - ~ "bar" ^ false ] ^ - ~ ! 123 ) ( ~ 123 ( ) , true ( ( 123 . foo > ! - - ~ 123 ) . foo > - true , ~ - ( foo . foo ) * 123 . foo ) ) / "bar" != foo ] , ! ! "bar" [ ( true == - ! ! - "bar" < ! - ~ 123 ) ] ) ] ;
 ! ! ! true ( ) <= - true ;
 ~ ( true ) [ "bar" ] { true * true ++ ;
 } ;
 } else { for val foo int = "bar" [ false [ ~ "bar" <= ~ ! "bar" ( ) != 123 ] ] ;
 foo ;
 123 *= ! 123 { for var foo int = foo [ ( ! foo [ ( - ~ true ) [ ~ ~ ~ - ! - "bar" & ! false ] ] ) ] ;
 false > - false ;
 "bar" & ! ! ~ ( ~ foo ) < - false **= - true { ! ! - ! ( - 123 ) ( ) < foo ;
 } ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int . int . int , foo int , foo int ) int { for val foo int . int = ! ! false . foo / ! ~ false ;
 ( ( false == true ) . foo ) ;
 123 **= "bar" . foo { if false [ false ] { ~ ( - false ) * ~ - 123 | ( ! false ) . foo < true += - ! ~ 123 < foo ;
 } else { true >= "bar" -- ;
 } ;
 } ;
 } ;
 } ;
 class foo { foo int ;
 foo int ;
 func foo ( ) int { ! - ( ( - ! ! true . foo ) ) . foo == false ( ) / foo . foo -- ;
 } ;
 func foo ( foo int , foo int , foo int , foo int ) int { for val foo int . int = - foo > - ( ! - ! false - true < ! ~ true * 123 . foo ) ;
 123 ;
 123 -- { true . foo -- ;
 } ;
 } ;
 foo int ;
 func foo ( foo int , foo int . int , foo int . int , foo int , foo int . int . int , foo int ) int { ( - false ) [ 123 ] > foo ( ) ;
 } ;
 func foo ( ) int { ( "bar" != ! true . foo | true . foo ) ;
 } ;
 func foo ( ) int . int { for val foo int = - - - - - ( "bar" >= ! ~ 123 ) == - ! - ~ ( ~ ~ - ~ ! foo [ "bar" ] | ! "bar" ) ;
 - ( false ) ;
 ( ! false ) . foo / "bar" [ ~ ~ false ] ++ { for var foo int = ! ( 123 ) [ ( - true ( ) < ~ true ) . foo ^ 123 ] ;
 - - false ;
 123 < 123 { 123 -- ;
 } ;
 } ;
 } ;
 foo int ;
 } ;
 func foo ( ) int { for val foo int = ~ 123 . foo < ~ true * ! "bar" . foo ;
 ~ 123 != 123 . foo ;
 - ! ~ ! - true ++ { foo **= foo ;
 } ;
 } ;
 func foo ( foo int . int , foo int . int . int , foo int , foo int . int ) int { if ~ - ! false / - ! ! "bar" ( true , ! ! "bar" [ foo [ true == ! true - foo ] ] | true ) + "bar" { ! ~ ! ~ foo ++ ;
 } else { if foo ( ) { if true { - ! - 123 ;
 } else { if foo != true >= ( ~ ( - true . foo & ( - false / true . foo ) ) ) { ~ - false ;
 } else { for val foo int . int . int = ! ~ ( "bar" ) ;
 foo >= foo . foo ;
 123 *= ! - foo != false { for var foo int = ! ! foo ( true ^ foo * 123 , ( 123 . foo ) > ! foo != ! ! "bar" ) < ~ ! - ( foo > ( - foo [ ! - ! foo ] - true [ ~ ( 123 ) ] ) ) / ( ! ~ ( true - 123 >= true / ( ~ - ~ "bar" ) ) ) [ false [ "bar" ] * "bar" ( ) ] ;
 false ;
 - ! - false { "bar" . foo = ! ~ ! ( true / ~ ( "bar" ) ( ) ) != "bar" / ~ ~ ~ - false ( ( "bar" ) , 123 ( ~ ! "bar" , "bar" ) ) ^ ! ! ! true [ foo ] / ! ! ! - ~ true ( ~ - ! "bar" [ ~ "bar" == true * foo ] + "bar" , ( - false ) [ ( 123 ) ] ) ;
 } ;
 } ;
 } ;
 } ;
 } else { for var foo int . int = ! 123 ;
 false ;
 ! 123 *= foo { for var foo int = true ;
 "bar" + ! "bar" . foo ;
 ~ ! ( - false ) . foo -- { for val foo int = false ;
 false * foo ;
 - ! 123 { 123 ++ ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 var foo int = ~ - ! ~ foo ;
 class foo { func foo ( foo int , foo int . int . int , foo int , foo int , foo int . int . int , foo int . int ) int . int . int { if false [ ~ foo [ foo ] ] { ! ~ ~ - - true ++ ;
 } else { if ! true == ( ( ~ ~ 123 * true == ~ true / - ~ 123 . foo ) ) [ true ] * foo { ~ false / - "bar" ;
 } else { for val foo int = true | ~ ! ! false ;
 "bar" [ false ] ;
 ( foo . foo * ( ~ 123 ) . foo ) ( ) -- { for var foo int = ~ ~ ~ foo ;
 - ! foo ;
 ( "bar" . foo ) ( - "bar" ( ) , ! ~ false > ~ foo ) **= true { for var foo int = ( - ~ ( ! ~ ! ( ~ "bar" . foo ) ) + ! "bar" ) == "bar" ;
 - - false ( ) ;
 - ~ false > ! - ~ ! ( 123 ) { 123 >= foo **= - 123 [ - 123 ^ ~ ! 123 / ! - ( ! true ) ] ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 func foo ( ) int . int { ( ~ ~ - - - ( ~ ~ ! 123 [ foo ] ) ) ( ) += ~ - ! 123 ( ( ! foo ) ( - ! false ( ) + foo , - false [ false [ - ~ 123 ( ~ ! ~ 123 <= true == - ~ "bar" , foo > ! ( - ~ - ( 123 ) [ ( true ) ] & false [ ! ~ true ] ) ) ] ] ) >= 123 , - ( false == - ( ( ! - foo ) ) >= - ! ~ - true . foo * - ! foo ) != false ) ;
 } ;
 foo int ;
 func foo ( ) int . int { for var foo int . int = false [ ! ~ false [ 123 ] ] ;
 true == ~ - ( ( - - - "bar" ) . foo * ! false ) ;
 - - ( foo [ ! true ] ) - - false * foo ( ! "bar" * ~ ! false [ ! - ( foo . foo + false [ foo ] ) ] , ~ ~ ! 123 - ~ ( ! ~ ! ~ - 123 * ( ! ! - ! ! - ! foo == ( - foo ) > - - ! - ! ! "bar" ( - - foo - - ( ! true ( - false , ~ "bar" ) <= true ) . foo , - foo ) ) ) ) == 123 [ false ( 123 == true >= 123 . foo , "bar" / ! ~ - ~ 123 ) < ~ foo ] { true ( ) -- ;
 } ;
 } ;
 } ;
 func foo ( foo int ) int { if - ~ true * ( true < false - "bar" ( foo . foo , ! - "bar" / ( false ( ( - false . foo ) , - 123 ) <= foo ) ) ) { 123 . foo -- ;
 } else { if ~ - - 123 - ~ 123 . foo >= ~ ! - ! true { ~ - - ! foo & ~ true ;
 } else { if ~ ! ! ! 123 [ 123 == - ~ - ( foo ( true , ~ 123 . foo / - ( true & ~ - "bar" < foo ) ) ) . foo ] { 123 [ true ] & false [ ~ foo ( ) <= 123 ] = ! ~ - ! ! - false . foo - - 123 ;
 } else { - ~ foo . foo -- ;
 } ;
 } ;
 } ;
 } ;
 func foo ( ) int . int . int { if - - 123 <= false { ( true / ~ false ) [ "bar" ] ;
 } else { ~ false - ! ~ ~ false ( ) -- ;
 } ;
 } ;
 var foo int . int . int = - ~ "bar" + ~ ~ true * ( ! foo [ 123 ] ) [ ~ 123 . foo | - ! false ] ;
 class foo { func foo ( ) int { if ! ! - ( ! ( ~ - - ! ! ! ! ! ~ true >= ! ~ - ( - false . foo ) ) / - - ~ true [ ( - ! ( - - - foo == foo ) ) ] <= 123 * true ) . foo { "bar" ;
 } else { for var foo int . int = ~ false [ - ~ ! true ] ;
 123 ( 123 , ! ! true ) ;
 ~ ! - false < ( true [ ( false + false ) ] ) -- { ! true != ~ - foo -- ;
 } ;
 } ;
 } ;
 func foo ( ) int { if - "bar" == ~ - true [ foo ] | ~ ( false ) . foo { ! foo ++ ;
 } else { 123 += false ;
 } ;
 } ;
 func foo ( ) int { ~ ! false [ - "bar" ] **= true | 123 ;
 } ;
 func foo ( foo int , foo int . int , foo int ) int { "bar" /= true ;
 } ;
 foo int . int ;
 foo int ;
 func foo ( foo int , foo int . int , foo int ) int . int { 123 + foo ;
 } ;
 } ;
 val foo int . int = false ( false . foo , foo ) * ! ~ - ! true ;
 var foo int . int . int = ~ ~ "bar" ;
 class foo { foo int ;
 foo int ;
 } ;
 func foo ( foo int . int , foo int ) int { for val foo int = false [ - "bar" * true ] ;
 ! - ( true . foo ^ foo ) ;
 ( ( - ! false [ - ! ( 123 ) [ ( ~ - 123 < foo ) ] / ! ~ 123 ] + 123 ) [ ! "bar" ] == ( "bar" ) ) ( ~ ! ( ! ! - true > ~ ! false == - true ) ( ~ ~ foo >= false - 123 . foo , "bar" [ ( ! - - "bar" ) ( "bar" | ( ~ ! - ( ! ( - ( ~ ! ! foo ) ) ( ) < ! ! 123 ) ( ) ) , ! true ) ] ) , false ^ - - - "bar" ( - false , "bar" != ! true ) >= ! ! foo ) - ( ! foo < true ) *= false . foo { ! "bar" ( - ~ true [ true ] >= 123 [ ( ~ ! 123 ) ] / "bar" , foo ) - foo ( ~ ( ~ "bar" ) [ ! ( ~ - ( "bar" ( - ~ ! "bar" / ( false ( ! false [ foo ] , true ) ) , - false ) ) <= 123 [ - - ~ ~ true ] ) ] & ~ false , ! ~ - 123 ) -= "bar" ( ) - ! 123 < "bar" ;
 } ;
 } ;
 var foo int = 123 >= ~ ! "bar" ;
 class foo { func foo ( ) int { if "bar" . foo / 123 { ~ false . foo = - - ! ! true [ ! 123 ( foo , ~ false ) ] ;
 } else { for var foo int = foo [ true ] ;
 ! foo ;
 - false / ! ( - foo ) == 123 ( ) > ! - ! ~ - foo -- { for var foo int = ! true ( "bar" ( ) , - ( foo [ ~ ! ! - ! "bar" <= ! ~ false . foo ] ) [ - ~ "bar" ] ) / - ~ ~ false [ true ( true [ - ~ foo ( ~ - 123 , ~ - false ) ] / foo != ~ ! "bar" . foo , - ~ ~ foo ) ] != ~ ~ foo ;
 ! "bar" [ ( ! ! true | - 123 . foo ) != ! true ] ;
 ( ~ ! foo - "bar" ) += false { for val foo int . int = true . foo ;
 123 [ ( 123 ( ~ true ( 123 [ "bar" ] + ~ ~ ~ ! - - false , foo [ ( - ! ~ 123 ) ] ) , - foo [ foo ] / ! ! - - ~ "bar" ) < ! ~ - "bar" ( ) == ! ~ 123 . foo ) . foo ] ;
 ~ - ! - ~ 123 { if false ( ~ "bar" , ~ ~ ! ~ "bar" [ ~ ! ~ ~ ~ true . foo ] > ~ ~ ~ ! ~ - - ! ( - 123 ) ) { if ! foo / ~ ! foo { if false { ~ 123 & - foo < ! ~ "bar" / "bar" [ ~ - ~ ! ~ 123 ( - ! - - foo , - 123 ( - foo , false * foo ) ) / foo ] -- ;
 } else { if - false { - ! "bar" [ foo ] -- ;
 } else { if ! - 123 { if - - ~ ~ foo { - ! - ~ ! ! ( ! "bar" . foo ) [ true ] ;
 } else { for val foo int = - foo . foo ;
 123 ;
 123 ++ { if ( ~ foo . foo ) | ~ "bar" { false ( ) ;
 } else { if ( 123 ) { 123 -- ;
 } else { if 123 [ ~ ! ~ ! false . foo < foo ^ - foo ] { ! ( ~ ~ foo ) . foo = ( ~ 123 ( ~ true [ - ~ foo < foo ( ) ] , ! ! 123 ) ) . foo == ! ~ ! foo ;
 } else { if - ! ! false & "bar" ( ) ^ ! ! ~ ! foo ( "bar" - foo ( false , 123 <= foo ) , true . foo ) { false [ - false ] > ~ ~ - ! ~ foo -= true >= - ~ - ! 123 ;
 } else { for val foo int . int = ! false ( ) ;
 ! ~ - ( true ) == ! ~ foo ;
 123 { 123 <= foo . foo -- ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } else { if ! ~ ~ ~ "bar" != foo [ - ( true ( ) | - ~ ~ - ~ 123 ) - ! 123 ( - true , - ~ true ( ) < ! ! ! ! foo . foo + ! "bar" ) ] { if - ! 123 . foo { if true { if false { if 123 { for var foo int . int = ! foo ;
 foo . foo ;
 - ! - "bar" /= 123 { for var foo int = foo ;
 true ;
 ~ ~ false ++ { true ++ ;
 } ;
 } ;
 } else { for var foo int = "bar" ( false , 123 >= ! false ) != "bar" + ~ ( "bar" ) [ false >= "bar" . foo ] ;
 ! ( false - false [ "bar" ] / "bar" ) [ "bar" >= "bar" . foo ] * ( false . foo == ! "bar" ) ;
 ! - "bar" *= ~ ! "bar" { for var foo int . int = 123 / - ! - - ! true ;
 true ;
 foo ++ { if ~ ( "bar" ) { if ! - foo { - foo ++ ;
 } else { for val foo int . int . int = true / 123 [ - - - 123 != ! ! false ] | ( - false ) == false ;
 false ;
 - - - - ~ false ( false , ~ foo ) *= "bar" { if false { true ++ ;
 } else { ~ true == 123 ;
 } ;
 } ;
 } ;
 } else { ~ ! ~ ! ~ ~ true ;
 } ;
 } ;
 } ;
 } ;
 } else { if 123 & ~ ( 123 ) ( ~ 123 , ( 123 + false ) ) { for val foo int = "bar" [ ~ ! ~ ( - ~ true ) == 123 ] ;
 ! ( ! foo > ~ foo ) != 123 ;
 true { if - ! "bar" > "bar" { true [ "bar" ] -- ;
 } else { for val foo int = ~ "bar" & ! ! true == - ( - ! - true < ( ( ~ foo != true - foo [ ~ ~ true [ ! foo ( - ~ ! - ! foo , ~ - ~ ! true & - ~ ! ! 123 [ "bar" . foo ] ^ 123 ) ] ] ) >= ! 123 [ false >= false [ ( false ) [ false ] ] ] ^ - ( ~ false ) ) ) ;
 - - - foo ;
 - - - false < false != ~ ! - ~ ! false [ ~ ~ - - ! ~ ~ false ] { ! false != - - ~ "bar" . foo ++ ;
 } ;
 } ;
 } ;
 } else { if ! false ( ) { ! false ;
 } else { - foo ++ ;
 } ;
 } ;
 } ;
 } else { - ! false > true ++ ;
 } ;
 } else { ! "bar" = "bar" + "bar" ( ) < - "bar" . foo ;
 } ;
 } else { - foo -= 123 ;
 } ;
 } ;
 } ;
 } ;
 } else { if ~ false [ - false ] { true ++ ;
 } else { ! true ( ) ++ ;
 } ;
 } ;
 } else { for val foo int = true [ true [ ! ~ - ~ ( - false [ ~ - true ] - ~ ~ true & 123 > ! true ) ( ! ~ false <= 123 != ~ foo , foo ) ] * - - - - true ] / - ~ foo ;
 ( ! foo ) ;
 - 123 /= 123 != - ~ ! ~ foo { if false { if false { if ~ foo { ( foo . foo ) = ( ~ ! 123 / ~ - false [ ~ "bar" [ false & - 123 ] ] ) ;
 } else { ( "bar" . foo ) ^ true ;
 } ;
 } else { for val foo int = ~ ~ - ~ 123 ( ) & foo ;
 true != "bar" ;
 true ++ { if true { - 123 . foo ++ ;
 } else { - ~ false -- ;
 } ;
 } ;
 } ;
 } else { if ! ! 123 <= ~ ! ! false { ~ true ;
 } else { if false { - ~ - ! ~ true += ~ false . foo / false ;
 } else { ! false / true . foo -- ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 func foo ( ) int { for val foo int = ~ "bar" - - false ;
 ! foo ;
 ~ ! foo > - foo { if ~ false { - - - - - false ( ) -- ;
 } else { for var foo int . int = true ;
 "bar" - - ( ( false ) != 123 ) . foo / - false . foo ;
 foo [ 123 ( ) ] * false { ~ ~ ( ! ~ ! "bar" [ false . foo ] ) *= foo ;
 } ;
 } ;
 } ;
 } ;
 foo int ;
 func foo ( foo int , foo int . int , foo int , foo int , foo int , foo int . int ) int { ( ! ~ "bar" ) . foo /= ~ 123 . foo * "bar" ;
 } ;
 } ;
 class foo { foo int ;
 func foo ( foo int . int . int , foo int , foo int , foo int . int , foo int ) int . int { for var foo int . int = "bar" ( ) ;
 - ( ~ foo - ! - "bar" ) <= true [ ~ - foo ] ;
 ! true < true /= ! 123 . foo { "bar" -- ;
 } ;
 } ;
 foo int . int ;
 } ;
 class foo { foo int ;
 } ;
 class foo { func foo ( foo int , foo int , foo int , foo int , foo int ) int . int { ( - "bar" ) ;
 } ;
 foo int ;
 foo int ;
 func foo ( ) int { - ( ( 123 & ( false [ ( false & true . foo ) != false ] ) ) . foo ) ;
 } ;
 func foo ( ) int . int . int { - - ( true > "bar" [ ! - ! ~ "bar" ] ) . foo * true /= "bar" ;
 } ;
 } ;
 func foo ( ) int . int . int { false [ ! ~ ~ foo / 123 ] = false . foo ;
 } ;
 class foo { func foo ( foo int , foo int , foo int , foo int ) int { for var foo int . int = foo ;
 ! ~ ( - ~ false ( ) - ! - ! ~ foo ( ) ) & "bar" ;
 ! "bar" **= ! ~ true - ~ ~ - ~ ~ - "bar" { for val foo int = ~ ! true ( - foo , ! ! true [ ! foo ( ~ ! ( - ~ ~ - ! ~ false * 123 > - 123 ) , ! "bar" . foo ) ] ) >= - ! - ~ "bar" ;
 "bar" ( ) ;
 ~ ! ~ "bar" == ! false [ ~ ~ - ~ ! true ] /= 123 >= ( ( false * false ) != ( "bar" . foo + foo ( - - 123 , - true & false ) > foo ) . foo * true ^ ( "bar" ) ) { ! - - - true / true /= - true ;
 } ;
 } ;
 } ;
 foo int . int . int ;
 func foo ( foo int , foo int , foo int ) int { for val foo int = ~ ! foo + "bar" ;
 foo ( ! - ~ - 123 , - - ~ ( 123 | false >= false != ~ true & foo ) ) ;
 ~ ~ - false **= ! 123 { ~ 123 ^ "bar" / ~ ! ( foo ) ;
 } ;
 } ;
 func foo ( ) int { 123 / ~ true >= "bar" += ( 123 ) ;
 } ;
 foo int ;
 foo int ;
 foo int ;
 func foo ( foo int ) int { false . foo ++ ;
 } ;
 foo int . int ;
 func foo ( ) int { false ( ) ;
 } ;
 } ;
 class foo { foo int ;
 } ;
 class foo { } ;
 class foo { func foo ( ) int . int . int { "bar" = ~ ~ - foo ( - ~ - 123 <= - ~ ! - "bar" , ! foo ( - ~ ! - 123 . foo , false ) < ~ - foo ) ;
 } ;
 foo int ;
 foo int . int . int ;
 foo int ;
 func foo ( ) int { - false * - ( ! ~ false < - true . foo ) | foo ++ ;
 } ;
 foo int ;
 func foo ( foo int , foo int , foo int , foo int , foo int . int ) int { - false ( "bar" ( ) , ! 123 == ~ false + ! true [ ! - ! ( ! ~ - ! - - - ! ~ ! 123 ) ^ "bar" ] ) ;
 } ;
 } ;
 class foo { func foo ( foo int , foo int . int , foo int ) int { "bar" /= "bar" & - foo . foo ;
 } ;
 foo int ;
 func foo ( ) int . int . int { if ~ false <= ~ foo { true [ "bar" ( ~ ~ false * true , - ~ ! false ) ] ++ ;
 } else { true ;
 } ;
 } ;
 foo int . int ;
 } ;
 class foo { func foo ( foo int , foo int . int ) int . int { true . foo ;
 } ;
 func foo ( ) int { - false <= ~ ~ ! ~ true /= 123 ( ) ;
 } ;
 foo int ;
 func foo ( foo int , foo int . int . int , foo int . int ) int . int . int { if ~ ~ ~ ~ ~ ~ "bar" { for var foo int = ( ( - ! - ! ! ( ~ true ( 123 , - false ) ) ) ) ;
 ( - ! foo ) ;
 ! - - false [ 123 ] / "bar" -- { for val foo int = ! ! ~ ! ( 123 ) ;
 ! foo / "bar" . foo == ! 123 ( ! ~ - ! 123 , - ( ( ! "bar" <= ! "bar" ) ) [ - - ~ - ~ - ( true . foo ) ( ) ^ ~ - true [ ~ "bar" ] ] ) - "bar" . foo ;
 ! foo . foo <= "bar" { ! "bar" . foo *= - "bar" ;
 } ;
 } ;
 } else { foo ;
 } ;
 } ;
 } ;
 
