module foo ;
 func foo ( foo int . int . int , foo int ) int { - 123 *= ~ ( false ) . foo == ! "bar" ;
 } ;
 class foo { foo int ;
 func foo ( foo int , foo int , foo int , foo int . int , foo int . int , foo int ) int . int . int { for val foo int = foo ;
 ( ! ~ ! true . foo ^ ~ "bar" == ~ ~ false ) ( ! 123 , ! false ) ;
 ! foo . foo -- { if true { foo -= - - false ;
 } else { for val foo int . int . int = ! true ;
 foo ;
 foo ( ) > ( "bar" == ~ ! - "bar" >= 123 ) = ( ( ! ~ true ) ) { ! - ~ ~ 123 -- ;
 } ;
 } ;
 } ;
 } ;
 foo int ;
 func foo ( foo int , foo int , foo int . int . int , foo int . int ) int { if ! "bar" [ ! - "bar" [ foo ] == ! ! ( foo ) ] >= - foo ( ~ "bar" [ foo ] , foo ) { for val foo int . int . int = "bar" [ ( true . foo ) [ ! "bar" ] ] ;
 ( true ) [ ( - foo ) == - true ] ;
 ~ false ( ) -= true [ ( - ! - ! ( foo [ true ] ) [ ( ! false / ! 123 ) [ true ] + "bar" ] ) ] { "bar" -= "bar" ;
 } ;
 } else { for var foo int . int = - "bar" & - foo ( ! ! false . foo , ! true ( true , "bar" <= ~ ( ! 123 | ~ - - ! foo ) ) ) < ~ "bar" ( ! - ! ~ foo & ~ foo - true , "bar" ) & ~ 123 ;
 ! false ;
 123 * ~ "bar" . foo == true -- { 123 > false & ! true ++ ;
 } ;
 } ;
 } ;
 func foo ( ) int { for var foo int . int . int = - true ;
 ( "bar" > - - ~ ~ ~ - ! "bar" ) | "bar" ;
 ! ( ( - "bar" [ ! "bar" ] ) [ - false ] ) -= ! ! ( ! true ( ) ) { if - ~ ~ ! false + ~ ! ~ false [ ! true . foo ] { 123 ( 123 + ! ( 123 * 123 ( false , ~ false ) ) , ( ! ! ~ ( ! ! - true ) ) & ~ true ) -- ;
 } else { for val foo int = ( ~ ( ! 123 [ ~ ( - - ! foo ) [ ! ~ foo . foo ] ] / 123 ( ) ) . foo * ! ~ false ) ;
 - - "bar" + ~ - - - foo ( ! true , - ! - false ( ~ - ( ~ ( true ) ( ) ) ( ( 123 > ~ "bar" . foo ) , - ! 123 . foo ) , 123 ) ) ;
 true - 123 ++ { ~ ~ foo **= ~ ~ "bar" ;
 } ;
 } ;
 } ;
 } ;
 foo int ;
 foo int ;
 func foo ( ) int { if - - ! foo { if - ! - false ^ true { for var foo int . int . int = false . foo > ( - 123 <= ! foo ) & ! ! ! foo ;
 ~ ! ~ - ! ! ! ! ~ ( ~ "bar" ) ;
 true -- { if ( ! ! false ) [ foo ] { true != - - ! ~ ! "bar" ( ~ - - "bar" , "bar" ( true , - ~ ~ ~ ~ ( foo ( ) * false . foo ) ) >= "bar" ) ;
 } else { true [ 123 | foo ] ++ ;
 } ;
 } ;
 } else { ~ ! ~ false ++ ;
 } ;
 } else { - foo ( ) /= ! foo ;
 } ;
 } ;
 } ;
 val foo int = "bar" ;
 class foo { func foo ( foo int , foo int . int , foo int . int , foo int ) int { ( ( ( ! foo ( "bar" , ! - true ) <= ( ~ 123 == foo . foo ) ) ) | true >= ~ foo [ - - - ! ( ~ ~ false ) ] ) ++ ;
 } ;
 func foo ( ) int { "bar" ^ "bar" -- ;
 } ;
 foo int . int ;
 } ;
 class foo { foo int ;
 func foo ( ) int . int . int { false ( ) ;
 } ;
 foo int ;
 func foo ( foo int , foo int , foo int ) int { for val foo int = ! - ( ~ ~ foo [ ! ~ true . foo * ( ! 123 & - - false ( ) ) ] ^ ~ 123 . foo ) ;
 ! ( true ) ;
 ~ ( false ) == 123 ++ { if "bar" [ true [ - foo ] ] { ( ~ - ~ 123 != ( - "bar" [ "bar" > ( - ( false ) [ ( - - ! - - ! ~ "bar" [ - ~ ! ! ( ! ~ 123 < - false [ ~ ( ! ~ 123 ) [ ~ "bar" . foo <= ! 123 ( ~ false , true < true ) ] ] ) ] ^ ~ ( foo ) ( - ~ foo . foo , ~ true ) ) ] ) ] ) >= "bar" ) == ! 123 . foo ;
 } else { if ! foo ( ~ - ~ - foo * "bar" , ~ - true ) { for var foo int . int = - - "bar" . foo + - - - foo * ~ ~ ~ true ;
 123 ;
 foo { ! false < ~ false ;
 } ;
 } else { for var foo int = 123 . foo - - false ;
 ~ false [ ~ false ] <= ~ "bar" ;
 ( "bar" ( ! - 123 , 123 >= 123 ( true | ! true , 123 == true ( ) ) ) - - true [ 123 ] >= ~ - 123 ) . foo <= - - ~ true [ false [ 123 ] ] -= true { if 123 [ ! true ( ) ] { ~ "bar" ( foo . foo , "bar" ) -- ;
 } else { if - true [ ~ false ] <= ! - 123 { if ( ~ ! - - ~ "bar" ) { for val foo int = ~ - ! foo ;
 true ^ false ;
 ~ ! false **= false { for var foo int = ! ( true ) ;
 foo [ 123 / true - ! foo ] ;
 ! ~ true = ! ~ ~ ~ ~ ~ foo { for var foo int . int = foo ;
 ~ ! false ;
 ~ true != 123 **= ! ! true < false - "bar" * true { if ( "bar" * foo . foo ) <= - 123 { ~ foo **= ! true ;
 } else { false ( - ~ ( true . foo ^ "bar" ) [ - ~ - - ~ ( true ) ( ! ~ false , - ! foo ) ] , ! false [ false & ! 123 ] ) ++ ;
 } ;
 } ;
 } ;
 } ;
 } else { if ! ! ! - ! foo { ! - ~ ~ ( ! ! ! "bar" ) ;
 } else { for val foo int . int = ! - "bar" ( 123 . foo >= ( ( false . foo == - - true ) . foo ) , ~ "bar" & - ( ! "bar" ) != ~ ~ ~ "bar" ) ;
 true ( ( foo / ! - true ) | ! - true ( ) , - true * ! ~ true ) ;
 false { ! - 123 *= true ( foo . foo , ! ! foo ) ;
 } ;
 } ;
 } ;
 } else { for var foo int = true ;
 false * "bar" ;
 ( true ) [ ~ ! true [ 123 [ "bar" ] | ! ~ 123 ] ] ^ ! foo { ! "bar" & foo **= false - ! ~ true ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 func foo ( ) int { ~ ~ foo - ~ foo ( - 123 , true . foo + - true [ ~ ( foo ) > ( ~ ~ false ( ) ) - ! true ] == 123 [ foo + ! ~ - foo ] + foo ) ;
 } ;
 func foo ( ) int { if ( ~ true ) ( ) { ( true ) | "bar" . foo / ~ ! false **= 123 ;
 } else { if "bar" { if - ~ ~ - ! ! ~ 123 { 123 [ false ] <= true ++ ;
 } else { for val foo int . int . int = "bar" ;
 "bar" < ! "bar" == ~ ~ ~ false ( ) ;
 ! "bar" { ~ false ( ~ "bar" ( "bar" / "bar" , foo & - - 123 [ true ] >= "bar" ) > ~ foo [ ! ( false ) ( ) ] != - ! - ( false - 123 ) , - true ( ~ false | - - ! true , ! foo ( ) ) ) **= ! ( "bar" [ - - ! ! ~ - ( - ! 123 ) [ ! 123 > foo ( ) * - ~ true [ ! foo ( ) ] ] ] ) ;
 } ;
 } ;
 } else { 123 ( - ~ ~ false . foo > ( ! false <= foo ) , true ) *= ~ ~ ! 123 ^ ( - ! ~ "bar" ) * ~ true ;
 } ;
 } ;
 } ;
 foo int ;
 foo int ;
 func foo ( ) int { for var foo int . int = - ! "bar" & - - ! ~ false < ! - 123 ;
 ~ 123 ;
 - ~ foo { if "bar" [ false ( - ~ 123 , ~ ! ~ foo != - 123 ) ] { ( ( - "bar" ) [ foo ] ) . foo ;
 } else { - 123 ;
 } ;
 } ;
 } ;
 foo int ;
 } ;
 val foo int = 123 ;
 func foo ( foo int , foo int ) int . int . int { if true == ~ foo { for val foo int = foo ;
 false ;
 foo /= ~ ! 123 { if - ( true ) { if ( ! foo ( ~ ( false ) , "bar" ( false [ false <= ~ "bar" ] , - "bar" * 123 ) ) ) ( 123 , foo ) { for var foo int = foo ;
 ! ~ ~ ~ "bar" ;
 123 . foo ++ { if "bar" { for var foo int . int . int = true . foo ;
 123 ;
 foo ( ) ++ { if ! 123 { false ;
 } else { for var foo int . int . int = - 123 <= 123 ;
 123 ;
 ~ "bar" . foo -- { ! ( - - - ~ - ! 123 ) += ( - true ) != ~ 123 ;
 } ;
 } ;
 } ;
 } else { ~ foo / ~ - ~ ~ 123 . foo ++ ;
 } ;
 } ;
 } else { for var foo int = foo ;
 foo . foo < ! ~ "bar" * false [ true ( ! - ~ ~ ! - - foo == "bar" . foo , ! - ( "bar" & ( - "bar" ) ^ ! ~ true ) ) ] ;
 ! foo < - 123 + true * ( foo ) -- { ! ( false [ ! foo <= "bar" ] * - - false ) ++ ;
 } ;
 } ;
 } else { - ~ - 123 = ! false ;
 } ;
 } ;
 } else { 123 ^ "bar" += "bar" ;
 } ;
 } ;
 class foo { foo int ;
 foo int ;
 foo int ;
 foo int ;
 foo int . int . int ;
 foo int ;
 func foo ( ) int { if true { for val foo int . int . int = false ;
 "bar" . foo ;
 - false . foo *= true & ~ "bar" [ ! ! ! ! false + "bar" ] { for var foo int = ! "bar" . foo ;
 true [ "bar" . foo ] - ! ! ~ - 123 ;
 true [ ( ~ ~ ( - "bar" ) ( ( ~ foo ) * ! ! ~ false [ ~ ~ - false ] , - ! 123 ) ) + - - true ] { ~ ~ - foo ( true . foo != true , ! foo ) ;
 } ;
 } ;
 } else { for val foo int = "bar" ;
 123 . foo ;
 123 { for val foo int = ( false ) ;
 ! 123 . foo / foo != ~ - ~ 123 . foo ^ false ;
 ! foo { true / ! true ( ) **= foo . foo ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int . int , foo int , foo int , foo int ) int . int . int { if ~ ~ ! - ~ foo ( ) <= ! - ~ false { foo + "bar" ;
 } else { ~ "bar" [ ! true & ~ ( 123 ) ] += ! - 123 == ( - ! ~ foo ) * ~ - - - foo . foo ;
 } ;
 } ;
 foo int . int . int ;
 } ;
 class foo { foo int . int ;
 foo int ;
 } ;
 func foo ( ) int . int . int { true ;
 } ;
 class foo { foo int . int . int ;
 func foo ( ) int { ! true . foo *= ~ false * ( "bar" >= ! - 123 ( ) ) ;
 } ;
 foo int . int . int ;
 foo int ;
 foo int ;
 func foo ( ) int { ~ ! foo . foo -- ;
 } ;
 } ;
 class foo { foo int ;
 func foo ( ) int { - - false ^ - false . foo ;
 } ;
 foo int ;
 func foo ( ) int . int { - ~ "bar" -- ;
 } ;
 foo int ;
 func foo ( ) int { for val foo int . int = ~ false != 123 ( ) / ~ ~ ( - 123 ) ;
 ~ ( ~ "bar" ) == true | false ;
 ( 123 != "bar" ) = - 123 { ! ~ ! ~ false . foo ;
 } ;
 } ;
 } ;
 class foo { foo int ;
 func foo ( foo int , foo int . int , foo int , foo int . int . int , foo int , foo int ) int { if 123 [ foo . foo * - ! - - - ( ~ ! - true < 123 ) | ~ true [ ( "bar" . foo * true . foo != ! ~ true ) ( ) != ( true ) / ! ( - ! ~ false . foo ) ] == true ] { for var foo int = - ! - ~ - 123 ( ) ;
 true ;
 ( "bar" ) ( ) != ! ! ! "bar" . foo /= - foo / ~ ! foo | true { - true ;
 } ;
 } else { ! ! - "bar" != ! foo ++ ;
 } ;
 } ;
 foo int ;
 func foo ( foo int . int ) int { - ~ "bar" ;
 } ;
 foo int ;
 func foo ( ) int . int { ! ! ! 123 ++ ;
 } ;
 } ;
 class foo { foo int . int . int ;
 foo int . int ;
 } ;
 func foo ( foo int . int , foo int , foo int . int . int , foo int ) int . int . int { ( foo - ! true & - ! false ( ) ) ;
 } ;
 class foo { foo int ;
 foo int ;
 foo int . int ;
 func foo ( foo int . int , foo int . int , foo int ) int { if ( true ^ - "bar" ) { true ;
 } else { true ( ) ;
 } ;
 } ;
 foo int ;
 foo int ;
 func foo ( foo int , foo int , foo int , foo int . int . int ) int { if ! ! true . foo >= ! ~ ~ ! ! 123 { if false + - ( true ) { "bar" ( - ~ ~ ! ( "bar" == false ) + false , true ) >= foo ;
 } else { if true ( true ( ) , ( ~ ~ ! foo [ ( foo + ( ! ~ - "bar" . foo ) ) [ ~ ( true ) & "bar" ( ) + true ] ] | ~ true ) < ! "bar" ) != - foo { ~ ~ ( ! 123 [ "bar" [ - foo [ ( ! ! false ( ) ) ] ] ] / ~ foo ) ++ ;
 } else { if false [ foo ( ( "bar" . foo | 123 ) , "bar" ) ] { for val foo int = - ~ "bar" . foo ;
 true == ( ~ ~ ! "bar" ) ;
 false ++ { if foo { for val foo int = - ( 123 * ( ~ false ) ( 123 , - - - - 123 ) ) ;
 ~ 123 >= "bar" | ~ ! ! true ;
 ! ! ~ ! true { 123 **= "bar" . foo ;
 } ;
 } else { if ! ! ( ! ! ! ( ~ ~ true ) ) . foo { if true { ~ ~ - true != true <= ~ "bar" ;
 } else { for val foo int . int . int = ~ "bar" ( ) ;
 false ;
 foo [ - true ] == ( "bar" ) -- { - ~ 123 -- ;
 } ;
 } ;
 } else { false & ( ! ! "bar" ( false , true ) ) -- ;
 } ;
 } ;
 } ;
 } else { 123 [ ~ ! ~ foo ( false [ foo ] , ! ~ ! 123 ) / true . foo ] == ~ "bar" & ~ ~ foo *= true ;
 } ;
 } ;
 } ;
 } else { "bar" . foo -- ;
 } ;
 } ;
 foo int ;
 } ;
 func foo ( foo int . int . int , foo int . int , foo int . int , foo int , foo int , foo int ) int . int { 123 ++ ;
 } ;
 func foo ( ) int . int { ~ false ++ ;
 } ;
 class foo { foo int ;
 func foo ( ) int . int . int { for var foo int = - ~ ! 123 != false . foo ;
 "bar" ;
 true -= ! ~ false . foo { foo ;
 } ;
 } ;
 func foo ( ) int . int { ( ! ! true ( "bar" ^ - ~ foo , ( ! "bar" ) ) ) += - foo / ! ! - "bar" ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int . int . int ) int { if foo [ ~ true ] { false ( ) ++ ;
 } else { if "bar" { if false { true *= - 123 >= ~ "bar" ;
 } else { ! false ;
 } ;
 } else { - ~ 123 . foo ++ ;
 } ;
 } ;
 } ;
 func foo ( ) int { 123 != ( false [ ! foo ] | - ! "bar" ) . foo ;
 } ;
 } ;
 val foo int = ! ( 123 > "bar" ) <= false ;
 val foo int = true > ~ foo ( ! ~ - ! true , ~ false ( true ( ) , ~ - false / true . foo ) ) ;
 func foo ( foo int ) int { for val foo int . int = ! ~ ~ ! ! - ~ foo ;
 ~ ~ ~ false ;
 true { false [ ~ foo ^ foo ] > false ( ) ^ foo . foo ;
 } ;
 } ;
 class foo { foo int ;
 foo int . int ;
 foo int ;
 func foo ( foo int ) int { if 123 { for var foo int . int . int = 123 - ~ "bar" [ ( foo < ! - ! ! ~ "bar" != true > "bar" ) ] == - ! foo ;
 - - ( "bar" == - false . foo ) ^ foo ( false , ! true [ true ] > ~ ! ~ foo . foo != foo ) ;
 true /= foo { if ~ ! ~ foo [ - false ] + false { 123 ;
 } else { for val foo int . int = ! ( ( "bar" . foo ) ( ) * ~ ( ~ - 123 ) ) / 123 ( ) ;
 ~ 123 != - - false . foo ;
 ~ ~ ~ - "bar" * "bar" > true *= - true { ~ ! ! true - foo >= ( ! "bar" + ( ( ~ ~ ( false [ ! "bar" ] & - "bar" ) ( ~ false + ! - ! foo , ! ~ ( true ) ( ) ) ^ ~ 123 / - - ! ~ ~ foo ) . foo ) / ( ! ( false ( ( ~ 123 ) | ! - - ~ true , - "bar" ( ( "bar" == true ) / ~ 123 - ! ~ foo [ "bar" ] , ! ! ~ false * ! ~ ( - - foo ( - false ( 123 , ~ ~ "bar" ( ) < false ) / ! true , ! false ) ) != - ~ 123 ) ) / ~ true [ true ] ) ) ) - - ! ! ! ~ 123 & ! ! "bar" ;
 } ;
 } ;
 } ;
 } else { - ! 123 . foo ;
 } ;
 } ;
 foo int ;
 } ;
 class foo { foo int . int . int ;
 func foo ( ) int { for val foo int = false . foo ;
 ! ~ foo . foo ;
 123 ( ! ( ! true ) , - - 123 == ~ ! ~ foo ) ++ { ( ~ "bar" > - ! foo . foo ) ;
 } ;
 } ;
 } ;
 val foo int = ! - - ! ( ~ ~ ~ true ) * ! foo . foo - foo . foo ;
 val foo int = false & ~ foo ( true , - false ) ;
 func foo ( ) int { ~ false ++ ;
 } ;
 func foo ( ) int { - ! 123 <= ( 123 . foo & ~ ~ ~ 123 [ ! ! 123 ] ) -- ;
 } ;
 class foo { foo int . int . int ;
 foo int ;
 func foo ( ) int { for val foo int = - ~ 123 [ ~ true < "bar" ] <= 123 & ! ~ false ;
 - - true ;
 123 -= ! true ( ( true ) . foo / true + ! ! "bar" , ~ ( - "bar" ) * ! - 123 ( ! foo , ! ~ - ! ( false ) ) - false ) { ~ ( ~ ~ ~ ! 123 ) ( foo . foo , - false - ( true ) ) == ~ ! ! ! ! true ^ 123 ++ ;
 } ;
 } ;
 foo int . int ;
 func foo ( ) int { ! true ;
 } ;
 foo int ;
 } ;
 func foo ( foo int . int , foo int , foo int ) int { for var foo int = - - - ( 123 == - ! ! - foo [ false * "bar" [ "bar" ( ! ~ - ! true ^ false , "bar" ) * ! foo + ! ! - ~ - - ( - "bar" ) == - ( true / ! - ! "bar" <= "bar" ) ] ] <= ~ ~ - false ) != ~ 123 ;
 ~ - true ;
 true [ true * foo ] == ! "bar" -= ! 123 { false ;
 } ;
 } ;
 var foo int . int = - ~ ( ~ - foo / 123 ) > ~ true * - ( foo / true ) ;
 class foo { foo int ;
 } ;
 func foo ( ) int { for var foo int . int = 123 ;
 ~ ~ ~ "bar" ;
 false <= true { foo ;
 } ;
 } ;
 func foo ( ) int { 123 ;
 } ;
 var foo int = ~ foo + - 123 ;
 func foo ( foo int , foo int , foo int , foo int ) int { for val foo int = "bar" . foo ;
 - ! true ;
 ! "bar" { if "bar" [ foo ] == - true & - foo { if 123 { for var foo int = - - - - ( 123 [ ~ ~ ( ~ - foo ^ ! "bar" ) ] ) ;
 true [ - 123 . foo ] ;
 ~ - ~ - - true { true -= ( - ~ ~ 123 ) . foo / true [ - true [ ~ ( - ( false ) ) >= "bar" | false [ foo ] ] ] ;
 } ;
 } else { if - false [ - - ! - ( true ) ] { for val foo int = ! 123 ;
 - true * - ! true ;
 - ( - foo ^ 123 . foo ) **= "bar" { for val foo int = - ~ ~ ! - ! false ;
 foo ;
 - false ++ { for var foo int . int = - ~ - foo ;
 true + ! - false ;
 - ( ~ - true ( - false , "bar" < ! - - - false . foo ^ ! 123 ) ) + "bar" { ! - ~ 123 ;
 } ;
 } ;
 } ;
 } else { for val foo int . int . int = foo ;
 ~ ~ ~ - ~ - true [ - - - foo ] ;
 ~ foo ( - true , false * false ) ++ { ! foo ( ) ;
 } ;
 } ;
 } ;
 } else { true * ( true [ "bar" [ true . foo == ~ ~ ( ! false . foo ) ] ] ) *= foo < - - foo [ foo [ ~ 123 ] ] / - ~ foo ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int . int ) int { foo . foo ++ ;
 } ;
 class foo { foo int ;
 foo int ;
 foo int ;
 func foo ( foo int , foo int ) int { if ! ! - ~ ~ 123 ( - ~ - ! ! ! - ! ! true - ( ! ! - - ( ! "bar" != ( true ) ) . foo ) , 123 [ ~ "bar" ] < true ) { for var foo int . int = "bar" [ ~ - ! - ~ foo . foo ] ;
 foo ;
 123 += false { "bar" ++ ;
 } ;
 } else { if ~ 123 { for var foo int = "bar" ;
 false - ! ! ( ~ ( "bar" + ! true ) ) * ~ foo ;
 "bar" += "bar" { ! ~ ! ! "bar" -- ;
 } ;
 } else { for val foo int = true & - ~ false ;
 ! ! true ;
 - ~ 123 -- { for val foo int = 123 [ ! true / 123 < foo | ~ ( true + ( true ) ) [ false / ( false ) > ! ! foo . foo + ! ( 123 ) ] == true [ ~ true ] ] + - false ;
 true . foo + ( ( ( ~ ! - ( false [ ! false | true . foo ] ) ) ) ) ;
 ! false == false & - ! ( "bar" == true ( ! ! false . foo , ~ false [ ! "bar" != false > true ] == ~ - ~ ! - foo - ! "bar" . foo ) ) { if ! false { if ~ ! ~ ! false * ! ~ "bar" + foo { ~ "bar" ;
 } else { ! true ++ ;
 } ;
 } else { for var foo int = ! ( - ! foo ^ ~ - - - 123 ) ;
 ! ~ - ! ( ! foo ^ ~ ~ 123 ) ( ) * true != ~ foo . foo ;
 ~ true . foo { ~ - - - ! ! foo ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 foo int . int . int ;
 func foo ( ) int . int . int { ! - ! ! 123 = "bar" <= foo ;
 } ;
 func foo ( foo int . int , foo int . int . int ) int { if foo ( ) { "bar" . foo ;
 } else { false = 123 ;
 } ;
 } ;
 foo int ;
 func foo ( ) int { false ;
 } ;
 foo int . int . int ;
 } ;
 class foo { func foo ( foo int , foo int . int ) int . int . int { ~ "bar" ++ ;
 } ;
 foo int ;
 foo int ;
 func foo ( foo int , foo int . int . int , foo int , foo int , foo int , foo int ) int { - "bar" -- ;
 } ;
 foo int ;
 func foo ( ) int . int . int { - 123 -- ;
 } ;
 foo int ;
 } ;
 func foo ( ) int { for val foo int . int . int = true == ! ( ( false < ( ~ - ~ false ( ) < "bar" & ! "bar" ) . foo ) ) ;
 ( 123 ) ;
 ~ - "bar" >= - ! - ~ ~ ~ false - true / foo ++ { "bar" [ ( ~ - foo ) == - ( - true != ! "bar" ) ] ;
 } ;
 } ;
 var foo int = ! "bar" ;
 class foo { } ;
 val foo int = ~ true ( ) ;
 class foo { func foo ( foo int , foo int . int , foo int , foo int , foo int . int . int , foo int ) int { if ( foo ) ( true ( ) , - false ) != ( false & false > "bar" ) { true . foo ^ - - - - ~ ~ ~ ( ~ false ) == 123 . foo > false . foo ;
 } else { ( false . foo ) . foo ;
 } ;
 } ;
 func foo ( foo int ) int { "bar" == foo [ foo . foo ] & true -- ;
 } ;
 } ;
 val foo int = ! - ! foo ;
 class foo { foo int . int . int ;
 } ;
 
