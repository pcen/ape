module foo ;
 foo : = "bar" >= - foo ;
 func foo ( ) int { foo : : - [ ! ~ ~ ! [ "bar" , true , ! ~ 123 [ ~ ! ~ - ( ! 123 ) ] ] , true & 123 == - true or ~ ! false <= ! true ( ) , "bar" or [ ] , [ ] , [ ] ] ;
 } ;
 class foo { foo int ;
 func foo ( foo int ) int { if foo { foo : int . int . int = "bar" or ~ ~ ~ ~ ! - true ;
 } else { foo : = foo <= false ;
 } ;
 } ;
 } ;
 foo : : [ ( ~ - ~ [ ~ foo . foo ] or ~ ~ foo ( ) ) , ! - - false ^ ~ ! ~ [ ! - - ! 123 or ! true % 123 , foo == 123 , ! foo , "bar" / foo , 123 ] , foo and ! ~ ( ~ ! ~ foo ) or false , true , false , ~ 123 ] ;
 foo : int . int = "bar" . foo << ~ foo != foo and false or true ;
 foo : = - ! - ( "bar" ) ;
 foo : int = false . foo == "bar" % false . foo ;
 foo : int : 123 ;
 class foo { foo int ;
 } ;
 func foo ( foo int , foo int , foo int , foo int ) int { REVERSE ;
 } ;
 foo : = ~ false and - ( [ ] ) / foo ;
 foo : int : ! ! 123 == foo ;
 func foo ( foo int . int . int , foo int , foo int , foo int , foo int ) int . int { foo : = - ~ "bar" ;
 } ;
 class foo { foo int . int . int ;
 } ;
 func foo ( ) int { for foo : : ( false != - ! - - false << ! - [ ] ) ;
 - ! "bar" . foo ;
 REVERSE { foo : int . int . int = 123 ;
 } ;
 } ;
 class foo { func foo ( foo int . int , foo int , foo int . int , foo int , foo int ) int . int { } ;
 foo int ;
 func foo ( foo int , foo int ) int { } ;
 foo int ;
 } ;
 class foo { func foo ( foo int . int . int , foo int , foo int , foo int , foo int ) int { } ;
 foo int ;
 func foo ( foo int , foo int , foo int ) int { foo : : - ! false ;
 } ;
 func foo ( ) int { for foo : = foo >> [ ] & ( - ~ ~ true ( "bar" . foo , foo . foo + ( foo ) , foo ) % ~ - - ~ [ - - ( ( foo >> ! - ( 123 ) ) ) ] or "bar" ( ! [ ] , foo , - ~ "bar" . foo , ( ~ true ) . foo < [ ] or 123 [ ~ "bar" ] ) << ! ( false ) ) ;
 false ;
 false -- { } ;
 } ;
 func foo ( ) int { } ;
 } ;
 class foo { } ;
 foo : : true ;
 class foo { foo int . int . int ;
 } ;
 foo : = ~ - [ false , ~ foo , - ( true << ( ~ ( 123 | ~ "bar" ) ) == ~ ! true ) , - [ true or - 123 , [ ] , ( 123 ) and foo ] , - - "bar" , ! ~ ~ ( [ foo , true , "bar" and - ~ foo <= ~ false ] ) ] ;
 func foo ( foo int . int . int , foo int . int , foo int , foo int , foo int ) int . int { SKIP { { } } SEIZE { { SKIP { { if ! true { foo : int : false ;
 } else { } ;
 } } SEIZE ( ( foo . foo ) ) { { } } ;
 } } SEIZE { { foo or ! true + ~ ! ( ! - ~ foo ) += true and ~ true ;
 } } SEIZE ( ~ foo < - ! [ ] ) { { "bar" ++ ;
 } } ;
 } ;
 foo : = - [ ] and ~ false ;
 func foo ( foo int , foo int . int . int , foo int , foo int , foo int . int ) int . int . int { } ;
 class foo { func foo ( foo int . int . int , foo int , foo int . int , foo int , foo int ) int . int . int { SKIP { { } } SEIZE ( ! false ) { { } } ;
 } ;
 foo int . int . int ;
 } ;
 foo : int : ~ - [ ! 123 and ~ ! "bar" , - - ~ ! ~ true ] ;
 class foo { foo int . int ;
 foo int ;
 foo int ;
 func foo ( foo int , foo int . int , foo int ) int . int . int { } ;
 } ;
 
