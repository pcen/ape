module foo ;
 func foo ( ) int . int . int { } ;
 foo : = ! false ;
 class foo { } ;
 foo : = 123 or - ( ! - true ) ;
 class foo { func foo ( ) int . int . int { - ~ [ "bar" > ~ false . foo + foo ( foo ) or - 123 & 123 ( ) , true [ ! true ] , false , false , ( ~ ! foo or ~ - - true ) ] [ ~ ~ true ] - ( ~ ~ 123 != ! ~ ( false [ false ] != [ ] ) [ foo or false ] ) . foo * ! 123 or 123 / - ! "bar" ;
 } ;
 foo int ;
 } ;
 func foo ( ) int { foo : : ( 123 * - [ ] . foo ) >= false / ~ ! - true ;
 } ;
 func foo ( ) int { 123 - true -- ;
 } ;
 func foo ( ) int { } ;
 class foo { func foo ( foo int , foo int , foo int . int , foo int ) int { SKIP { { for foo : int . int : true | ! true ;
 ~ - [ "bar" & ! ! - [ ] or ! false == - ~ ~ true . foo and ~ false , ~ "bar" == ! ~ [ ~ 123 [ ( ~ ( ~ ~ - "bar" ) ) ] , ! 123 , false , ~ true , "bar" - - ~ ~ ! [ - ( foo ( ) - [ ] ) - ! ! ~ ! [ false , ! [ ] . foo , true , foo >= [ ] , true and - ( false . foo ) or ! ( ~ false ) ] != - - - - ~ "bar" , ! ! ~ - false ( ) > ( ! - - false [ ( - - [ - 123 >> true , ~ true , ~ - "bar" , [ ] <= ! true ] [ ~ - - true ] ^ - - ~ ( true and ( "bar" ) ) . foo ) ] != - - 123 [ ( true ( ~ - - "bar" , 123 ( ) , [ ] ) ) ] and - false . foo ) % "bar" , "bar" ( ) , foo , - ! - "bar" ] or ! true ] , ( 123 ) or - [ 123 , ! ~ "bar" . foo and ( 123 ) or - ~ ! ! - ( - ~ [ ] [ true ] and "bar" ) < - ! - false , false and "bar" , ! ( true != ! true ( ) ) and [ true and "bar" or ! foo and - true != ~ true * foo << "bar" ] , - ! true , ! ~ ! ~ foo ( ( false ) , "bar" ( foo == [ ( - - false ) >> 123 and "bar" , [ ] == false . foo * ~ ( [ 123 , ~ false ( ! ~ - 123 , ( ~ ( ( ~ - ~ - false ^ foo ) . foo and true ) ) , true . foo , true or foo | - - true , true ) , - ! ~ ! ! "bar" [ "bar" or ~ true ] , - ! foo & ~ ~ [ ] . foo or ! ! ! [ ! true , ( ~ true ) , ! - ~ ! - ~ ! ~ ~ foo ( ) , - 123 , ! - - foo >> foo ( ) , - - [ ] ] , ~ ! ! ~ - 123 , ! true ] ) , 123 ] ) and true , false ) ] , false . foo < foo ] or "bar" ;
 ! [ ] -= ! - - ~ [ ( foo ) , ~ true , "bar" , true << ( "bar" . foo == - ! ! foo ) , true ] { } ;
 } } SEIZE { { } } SEIZE { { foo : int = ~ true ;
 } } ;
 } ;
 foo int . int ;
 func foo ( ) int . int { } ;
 func foo ( ) int { foo : int : ! ~ ( ( - ~ ~ "bar" / - ! "bar" or ! [ - ~ foo , [ ] . foo , "bar" , - - ~ ! - ! ~ false , "bar" or ! false , - ( [ ] ) ] and ( false or - ~ ( ~ - ! foo ) ) ) [ ~ "bar" and ! - ( ! true ) ] ) ;
 } ;
 foo int ;
 } ;
 func foo ( foo int , foo int , foo int , foo int . int . int ) int { } ;
 func foo ( foo int , foo int ) int { - ( ! - [ true , ! [ ] % - true . foo ] ( ) ) ++ ;
 } ;
 foo : int . int : foo ;
 class foo { func foo ( ) int . int { if - foo { } else { } ;
 } ;
 foo int . int ;
 } ;
 
