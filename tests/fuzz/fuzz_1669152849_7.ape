module foo ;
 class foo { if - true . foo ^ ! ! ~ ! - ! 123 { true != ~ ! ~ - - ~ 123 ( ) ++ ;
 } else { false **= ~ 123 ;
 } ;
 } ;
 func foo ( ) int . int . int { if ~ "bar" { foo = - foo & ~ foo ;
 } else { ( ! ! foo | ! foo ) ( ) /= ! 123 ;
 } ;
 } ;
 class foo { ~ false ;
 } ;
 val foo int = 123 ;
 func foo ( ) int { false -- ;
 } ;
 class foo { ~ 123 ++ ;
 } ;
 func foo ( ) int { ! false ( ) >= ! true ++ ;
 } ;
 func foo ( foo int , foo int . int . int ) int . int . int { if 123 { ~ ~ ! 123 += 123 < - true ;
 } else { if true { if ( ~ "bar" ) { ~ true > ~ ( 123 ( ) ) / ! "bar" [ ~ ! 123 | - true != ! - ! - "bar" . foo - ! foo * - - true ] ;
 } else { for var foo int . int = foo . foo ;
 - true - ~ - "bar" . foo ;
 false <= ~ true -- { - ~ ! foo ;
 } ;
 } ;
 } else { if foo [ - foo >= - ~ 123 ] { ! 123 ;
 } else { for val foo int = ! 123 [ ! - "bar" ( 123 , false == - false ) ] < - ~ ! 123 / false ^ true ( ~ ! "bar" != - true ( ) , ~ ( - foo ( ) - ~ false ) & false ) ;
 ! - ! 123 ;
 ~ false . foo { for val foo int . int . int = false [ - true == ~ foo ( ! false , ~ foo ) ] ;
 foo [ ~ "bar" ] < false ;
 ! ~ false -- { ~ false [ ~ foo >= ! ( ! true . foo ) ] ++ ;
 } ;
 } ;
 } ;
 } ;
 } ;
 } ;
 func foo ( foo int ) int { "bar" -- ;
 } ;
 val foo int = ( foo ( ) ) ;
 func foo ( foo int , foo int . int , foo int . int , foo int , foo int ) int { ~ "bar" ( ~ ! 123 - ! ! ~ ~ 123 , foo ) - ! "bar" -- ;
 } ;
 val foo int = 123 ;
 var foo int = ! "bar" ( ) ;
 func foo ( foo int . int , foo int , foo int , foo int . int . int , foo int ) int { for var foo int . int = foo ;
 123 >= - ! foo ;
 ! ! false ++ { foo > ! "bar" != "bar" ( foo , foo > 123 ) ;
 } ;
 } ;
 class foo { ~ ~ true += ( ( 123 ) . foo & ~ ~ - - "bar" ) ;
 } ;
 class foo { true ( ~ ( ! - ~ 123 ) . foo , ~ ! ~ - ~ - ~ "bar" == 123 [ false ] ) < false -- ;
 } ;
 func foo ( foo int . int , foo int , foo int , foo int . int . int , foo int . int , foo int ) int { if foo { for var foo int = "bar" ;
 "bar" ;
 ! foo | ( foo ) [ ! - "bar" == ~ ~ ! foo . foo ] { if ~ ~ foo [ foo ] { for val foo int = 123 + foo ;
 true ;
 ~ 123 & ( ~ true ( ) ) ( true , - - - foo ) -- { ( - ! foo . foo ) ( - - foo | ~ ! true <= false , false < ~ - true ) ;
 } ;
 } else { false ( ~ ! ! 123 != - ~ ~ false , true . foo ^ 123 [ true [ foo ] != ~ 123 . foo >= ~ ! ! ~ ! ( 123 ) ] ) + - - ~ false /= ! - false ( true , ~ ~ - ~ "bar" [ ( ( false == ! ! true ) [ - ! - 123 ] * ~ ~ true ( ) ) ] != 123 ) ;
 } ;
 } ;
 } else { "bar" ;
 } ;
 } ;
 class foo { ! ~ ~ 123 ++ ;
 } ;
 var foo int = - foo ;
 var foo int . int . int = ~ ( 123 ( - "bar" ( ) , - "bar" ^ - ! ! ! ~ ( true ^ false ) ( true & ! ! ( "bar" != ( - ! ! 123 [ ~ - "bar" [ ! - "bar" ( ) ] >= foo ] ) ) , "bar" * "bar" ( foo , ! ! 123 [ "bar" ] ) ) ) < ~ - 123 ) ( ) ;
 var foo int = ( - ~ - 123 ) * true [ true == false ] ;
 var foo int . int . int = ! true ;
 func foo ( ) int { for val foo int . int . int = ( ~ - ( ~ true ) ) >= 123 . foo + ( foo [ - ~ ! ! ( - - false | 123 ) >= - ! true != ~ ~ false [ ~ 123 ] ] - foo != 123 ) . foo ;
 - - false [ ~ - ! - "bar" ] | foo [ false | true ] <= ! ! true . foo | ! 123 ;
 ~ - - ~ ! ( ~ ( foo ) ( ! ! ~ 123 , ~ ! - - ~ "bar" >= - true ) & ~ - foo ) == ( ! ~ false ( ) ) *= false { for var foo int . int . int = ~ - - ! - - - - false ;
 123 [ - ! ~ false ] ;
 foo . foo /= ~ 123 { "bar" *= - 123 ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int . int ) int { for val foo int = "bar" == ~ "bar" ;
 ~ ! ! "bar" != ( "bar" ) ;
 123 != "bar" - ! ( ( ! false [ foo . foo ] >= true [ ! - - ~ ( foo == ( ! 123 ) ) ( - false , ~ foo [ - foo ] ) ] ) [ "bar" ( "bar" ( ! ~ false ( ) , - - - - ~ false ) , ~ ( 123 > 123 ) . foo ) < ~ ~ - false ] ) { "bar" -- ;
 } ;
 } ;
 var foo int = ! true ;
 class foo { if 123 { for val foo int = true != 123 ;
 "bar" ( ) ;
 false { for val foo int . int . int = ! ! 123 . foo - - 123 ( ) ;
 - ! false . foo ;
 ! ( false < foo [ foo & 123 == foo ] ) / true -- { foo [ false ] = false ;
 } ;
 } ;
 } else { foo /= ( - ( false ) ) & - ~ ~ foo > ! ! ! ~ - - "bar" ^ ~ ~ ! - "bar" [ 123 ] ;
 } ;
 } ;
 var foo int = 123 ;
 val foo int = ( - ! ! ~ ~ ~ 123 [ foo != ( ~ - ! ! false ) ] ) ;
 val foo int = foo / ~ ~ true <= - ! - - ~ - "bar" ;
 class foo { for var foo int = true | true ;
 - - true ( "bar" == 123 , foo ) ;
 ! ! foo . foo { for var foo int = ! 123 ;
 ~ ( 123 + ~ foo ( ) / - - false ) ;
 123 . foo += foo { false ;
 } ;
 } ;
 } ;
 var foo int = ~ true ;
 class foo { 123 ;
 } ;
 val foo int . int . int = ~ foo ;
 class foo { 123 * foo = foo ;
 } ;
 var foo int . int = true ;
 func foo ( foo int , foo int . int , foo int , foo int , foo int . int . int , foo int . int . int ) int { for val foo int = foo ;
 ! ! ( foo ) ;
 ~ - ~ ~ false -- { if foo ^ ~ ~ ! true { if "bar" { ! - ( - false == - - ( foo / - foo . foo == - ( ( true [ ~ ~ "bar" . foo ] | ! foo ) ) >= true ) ) [ 123 . foo | ~ ! ~ 123 [ ! true + - "bar" & true == "bar" ] ] < true [ ! false ^ ~ 123 == false <= ~ ! "bar" ] ;
 } else { for val foo int = "bar" ( ) ;
 false == - 123 ;
 123 -- { if foo . foo { "bar" ++ ;
 } else { ~ - ~ ! false * foo ;
 } ;
 } ;
 } ;
 } else { ! foo . foo ;
 } ;
 } ;
 } ;
 class foo { ! - "bar" ++ ;
 } ;
 val foo int . int = foo . foo ;
 var foo int = ~ "bar" [ foo ( ) ] ;
 class foo { true ;
 } ;
 func foo ( foo int , foo int . int , foo int ) int { ~ foo [ ! ( ( ( ! ( - ~ 123 ) [ ~ ( false ) < - ( ~ ( ! ! 123 ) ) ] ) ( ( - foo != ~ ~ ! - false < ! ( 123 . foo ) ) , foo * ! "bar" < - foo . foo ) ) - ~ ! "bar" ) [ ~ ~ ~ - foo ] ] ;
 } ;
 var foo int = ! foo | ~ ~ ( ! "bar" ) . foo ;
 class foo { true | ~ - ~ ! true != ! true [ "bar" [ ~ 123 ] / ( ~ - ( - ! 123 <= ! ! ! 123 . foo ) ) != ~ ~ - foo . foo + ~ ! ( ( ! ! - ( foo [ ~ false >= ( 123 [ - foo ] ) == true ] ) ) . foo ) ] ^ ~ ! ! ~ ( ~ ~ - - ! foo ^ true & ( ! ( false - false ( ) ) ) ) * ~ ! ! true ;
 } ;
 func foo ( foo int , foo int . int . int , foo int ) int { 123 ;
 } ;
 
