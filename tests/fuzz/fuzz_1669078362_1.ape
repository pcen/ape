module foo ;
 class foo { ( - ( ( 123 [ - 123 [ ! ( "bar" . foo ) ] & false ] == "bar" [ - ! 123 | ( false ( ~ "bar" . foo , 123 ( ~ ~ - 123 * ( true [ true . foo > ( - true ) ] ) == foo [ ~ ( false ) ( ~ - "bar" , 123 ) ] | ~ ~ ( ! ~ - ! true ) , - ~ - - ! ~ - 123 . foo & - - ! ~ false ) != ! true ( true , ~ ! "bar" ( ! ( foo . foo ) , false ) ) * true ) ^ "bar" . foo ) ] ) . foo ) ) . foo ^ true ++ ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) { for val foo int = - - foo [ ~ ~ 123 ] | ! ~ 123 ;
 true ;
 ! foo += - true . foo { - - ( ~ foo != - ! ~ ! ~ 123 ( 123 , - ~ false ) ) - - false . foo -- ;
 } ;
 } ;
 class foo { ! ~ 123 != ! foo ^ 123 [ - ~ - ! ~ foo ] >= ! ! ~ ! "bar" += ( 123 ) ( - false / ~ - "bar" . foo , ! "bar" ) | ! true ;
 } ;
 val foo int = false ;
 func foo ( foo int , foo int ) { for var foo int = ! ( "bar" ) | - - false ;
 false . foo ;
 foo & "bar" { - ( false > 123 != "bar" ) = false >= "bar" ;
 } ;
 } ;
 func foo ( foo int ) { for var foo int = - false * 123 == foo [ 123 != foo <= 123 [ foo ] ] < - foo ( - ( ( true ) ) [ "bar" ( false . foo | 123 ( ( ~ ~ ( 123 ^ foo & ~ ~ - true ) * false ) [ foo ] * true , true ) , ~ ! false ) ] , 123 == 123 + ( foo ) ) * 123 ;
 - false ;
 - - false **= ( ~ ~ - ~ ~ false [ - ~ true > true | ! - ( ~ ~ ( true ( ! - - true , - ( false [ ~ ~ ~ ! ! "bar" + ( "bar" ) ( ~ 123 & false , foo [ true ( ( "bar" ^ true ) [ - true ] / foo | ! ~ ~ false , ~ ! - true . foo & ~ ! foo [ ! 123 / - false ] <= ~ 123 ) ] ) * ! foo ] & - - ! - ! ! 123 ) ) ) . foo ) ] | - - - 123 ( ( ~ foo * - - ! - ! 123 ( foo , ~ - ~ true ) ) != true [ foo ( false ( 123 [ ~ foo ] & true , ~ true ) <= ( ! 123 > - ! ! ~ ( foo ( - ! ~ foo , "bar" ) ) & ! - ( false ( ( ! ~ foo ) <= - false , "bar" ) <= false ) . foo ) , - false == - - foo ) ] , ~ false ^ ! - false ) ) { ~ ~ - false ( true , ~ true ) == ( ! ! ~ - 123 > ! true ( ~ - ~ false , true [ ~ 123 ( ~ ~ ~ ( - - - ~ ! true . foo ) , true ) <= 123 ( true [ true ( foo , ! ~ ! ! 123 ) > false [ - false < ( ! 123 ^ ! foo ) ] ] , foo . foo ) - true & ! - ~ ! ! ! ~ - ! ~ false [ ! - foo > true . foo ] ] / 123 ) ) ;
 } ;
 } ;
 func foo ( foo int , foo int ) { ! false ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int , foo int ) { ! ~ "bar" ;
 } ;
 class foo { - ( 123 ) ( - false + "bar" , "bar" >= - false ) ^ true [ 123 ( "bar" + ! ! foo , 123 . foo / 123 | true / ! "bar" [ ! ! 123 ] ) ] * 123 >= foo -- ;
 } ;
 func foo ( foo int ) { if - ~ - ~ ( foo [ ~ "bar" ] != - ~ "bar" ) { for var foo int = false ;
 ~ 123 ( - false , ! 123 . foo ) * foo ;
 - "bar" -- { ! foo ( - ! - ~ 123 , - ~ ~ foo ) * foo *= ! - ~ "bar" ;
 } ;
 } else { for var foo int = true ;
 foo ;
 123 -- { "bar" ++ ;
 } ;
 } ;
 } ;
 class foo { if 123 | 123 { ! ! foo ;
 } else { for val foo int = ~ ~ true / "bar" ;
 true ;
 ! foo ( ! ( 123 - - - "bar" ) / ~ "bar" . foo , - ~ foo & ~ ! "bar" ) * ~ 123 { if ! foo . foo { for var foo int = ~ ! - ~ - true ( ! true ( true ( false - ! ! false , - 123 ( ~ ~ foo ^ ~ "bar" . foo , - "bar" ) ) / ~ true [ - false * ( ! foo [ foo / - ! ~ "bar" ] ) > - foo | ( false ( "bar" . foo , ~ ! ( - ! 123 ) * "bar" > foo ) - 123 ) ( "bar" ( ! false , ! ~ ( - - - ! ~ ~ ! - ~ ~ false >= - foo ) > ~ - true [ "bar" ] ) , 123 . foo > ~ ~ ~ - ( false ( - foo == true . foo , 123 . foo ) ) . foo ) ] , - foo / ~ ! ! true [ - false . foo == foo ( ~ 123 == - 123 [ "bar" . foo ] > - ! false [ true ] , ! "bar" [ "bar" ( true , true [ "bar" ] ) ] ) + ! 123 ( ~ ! - ~ - foo & ! ( foo ) , - true ( foo , true . foo ) ) ] ) , - - true . foo == ~ false [ ! 123 ] ) ;
 ~ ! ! ( ! ! ! ~ - ~ false ) | - ~ ~ ! - ! 123 . foo ;
 ~ - "bar" < 123 *= ( "bar" [ ! ! ( ( ! "bar" ) ) ] ) { if 123 . foo { ( ! - ! 123 ) ( - ~ - foo , true | "bar" [ ! ~ ! ! ! 123 ] ) ;
 } else { if 123 { ( foo . foo ) [ ( foo . foo ) ( foo & ~ false [ - false ( ! 123 , ( ! false ) == ~ 123 . foo >= foo ( "bar" [ ( - - "bar" ) [ ! foo [ "bar" [ ( true . foo ) ( ! - 123 [ 123 ] , foo ) ] ] == true ] ] - 123 , 123 [ ~ true ] / ! ~ ! true [ ! ~ false ] <= - ! ~ - ( foo . foo & - ~ true ) & ~ "bar" ) + "bar" ) | false ] != ! ! ( 123 ( ( ~ false [ ~ ( ~ ~ - false & ! ~ 123 >= - ~ ! "bar" ) ] ^ - false . foo ) , true - ( - ! foo ) ) > ( ~ false & ( ! - 123 ) [ ! ! ! - - foo . foo == - ( true ) ] > ~ - ( ~ ~ false ) ) | 123 / 123 ) , 123 ) ] *= - - - - false [ ( ! ~ ! ! ~ false ) ^ - ! - false ] ;
 } else { if false == true / false { - - - 123 [ true ( "bar" , ! ~ - ~ ! ! ( ~ true > "bar" == "bar" ( ~ "bar" , false ) + true [ foo ^ foo . foo ] & ! foo ) == 123 <= ( ~ ~ ! ~ false ) ) != "bar" | ~ ! - ( ! - ~ - ~ ~ - "bar" ( ~ - 123 - false & - ( "bar" . foo ) , true ( ! 123 - 123 * false , ~ "bar" . foo >= true ) <= - ~ true ) ) & ~ ! - ~ ( true ) . foo ] / true [ "bar" . foo != true < true ] | true ( 123 ( ~ - - ~ ! 123 [ ~ ( ~ ( false ) [ ! - 123 ] ) ( ! - true == ( ~ ~ ! foo ) , 123 [ true ] ) ] , ( ! - foo > ( "bar" == ! ! "bar" ) ( ~ ( false ) , ~ ! false ) + ! true ) > false ( - ( - "bar" . foo ^ ! ! "bar" ) , foo ) ) , ! - "bar" ( ! foo . foo == ~ ! ! ! foo [ ~ ~ true ] >= false , 123 . foo > ~ ( ~ - "bar" >= ! ! ( "bar" ) == - ( - ! ( ! ( ~ ( foo ) ) ) [ "bar" ] ) . foo ) ) ) ;
 } else { - ( "bar" ) [ foo ] - ( true . foo != ~ ! - foo ) ++ ;
 } ;
 } ;
 } ;
 } ;
 } else { for var foo int = ! - false ( ! - ! "bar" , 123 ) >= "bar" == ( - - true ( "bar" , "bar" <= 123 ) ) ;
 "bar" | ( - ! ! ! ! ~ 123 ) ;
 123 [ ! ~ ( ~ - "bar" & ! ! "bar" ) ] { true /= foo != ~ foo ^ - true ;
 } ;
 } ;
 } ;
 } ;
 } ;
 var foo int = ! ! 123 ;
 func foo ( foo int , foo int , foo int ) { ( true ) ( true * - ~ - - true . foo <= ! ~ - - ! ( 123 [ - true ] != ! ~ 123 ) , "bar" . foo & true [ ~ ~ ~ false [ ( ( ~ - 123 == false > foo + ! - "bar" ) ) ] | ( ~ ~ ! true ( ~ ~ 123 , ! true ) & true [ - foo ] ) ] != false [ ~ - ~ ! ! ! ! ~ ~ foo [ ( ~ - ~ true [ foo ] + - true ) ] ] ) -- ;
 } ;
 func foo ( foo int , foo int , foo int , foo int ) { "bar" [ ~ - 123 ] <= false ( ( ( ! - foo ) . foo != ~ 123 ) != true , ~ ~ ! - ! foo [ - foo ] ) ++ ;
 } ;
 func foo ( foo int , foo int , foo int ) { - ~ 123 < 123 . foo ;
 } ;
 func foo ( foo int , foo int , foo int ) { if ( ~ 123 ^ - ~ ! - "bar" [ - ~ ( ~ ! ! ! 123 ) ] ) { ! ! ~ ~ foo ( ~ - true , ! "bar" [ ~ - false ] >= ~ - ( - - foo ) ) < foo ++ ;
 } else { for var foo int = 123 == false . foo ;
 foo . foo | - true / ! ! ~ - - "bar" ;
 - 123 . foo *= ~ "bar" > 123 { ! ~ ! ! foo . foo ^ 123 -- ;
 } ;
 } ;
 } ;
 class foo { if - ~ true { for val foo int = ! ! ! - ! ~ - - "bar" ;
 false != true . foo ;
 - ~ true { ~ false ;
 } ;
 } else { 123 [ false ] == "bar" . foo >= "bar" ^ 123 / ~ foo [ true [ ~ ! 123 . foo - ~ false ] / ! 123 [ false ] ] ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int ) { for var foo int = "bar" ;
 - - true ;
 ~ ! ~ foo -= ~ - "bar" ( ( - true ) ( ! ! foo , - ( - 123 > foo == ! - ! 123 ^ ( foo * - ! ~ 123 ) ) . foo ) , - 123 ) { for val foo int = ! ~ foo <= ~ true . foo ;
 "bar" [ ~ ! ~ foo ( foo , foo ) <= "bar" ] <= ~ ! ~ 123 ;
 - ( ( foo . foo ) ( foo , "bar" ( true [ "bar" ] , ( false ) - ( ~ ! - foo + ! ( false . foo ) ) ) > foo . foo ^ ( ~ true ) . foo ) ) > ! ! 123 * - ~ ! - ~ "bar" ( foo , - ( ~ - - foo ) ) -- { true = - - true ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) { if - - true { if "bar" { if ( ( - ! "bar" ( false | "bar" , ~ ! ( ! ~ 123 [ ! false . foo ] + ! foo > ! ( ~ ! ~ ~ ! ! foo ) + ! - ! foo . foo ) > ~ false ( foo , false [ - 123 ] & foo ) ) ) ) ( - ! "bar" * ( ( ~ 123 ^ false [ - false [ ~ foo ] - false != ( ( ~ 123 | ! 123 ) ( false [ "bar" [ - ( - foo ) ( "bar" , foo ) * "bar" ] & ! "bar" . foo ] , ~ ( 123 / foo ) . foo == "bar" ^ false ) ) ] ) [ ~ foo < false ( ( - true ) + ~ true . foo , ~ ( foo ) ( ! true , true + ~ ( "bar" [ ! false ] / foo . foo ) * ( ! ~ 123 < ( "bar" ) ) >= ! ! 123 ) ) & "bar" - "bar" * ~ 123 ] ) [ ~ ! - - - ~ "bar" ] | true , ~ - ! foo [ - ~ true ( ! 123 ( ~ ! ! false , "bar" . foo ) | ~ foo , true [ 123 ( false , ~ "bar" ) ] <= - ! - ( ! - - true ) ) ] ) + ~ "bar" . foo / ! - false == ! ( 123 ) . foo >= - ! ~ ~ ! ! true ^ - ~ foo { ! ~ foo ( ( - ~ ! ( ! true ) ) , ( ! - foo & - ! ! ~ foo ) - 123 < ~ true ^ - foo & false ) ;
 } else { true . foo ++ ;
 } ;
 } else { if ! ! false ^ ~ foo { false != true & 123 ;
 } else { ( true . foo - 123 ) ( false . foo == "bar" ( "bar" , - ! ( ~ false + - "bar" [ "bar" ] & ~ "bar" != ( "bar" [ ( 123 & ! ! true ) ] ) ) & foo . foo ) , "bar" ( 123 , ~ ( ! ~ - ( - ( - ~ "bar" ) / ! ! ( ! true . foo ) ) ) ) * 123 ( ! ~ "bar" ( foo . foo , - foo ) * ~ - false [ false ] , ! - 123 ( true . foo , true ) != ! ! ~ - ~ ! - ! ~ ( true ) ) ) ++ ;
 } ;
 } ;
 } else { for var foo int = ! ~ ( false ) ^ ! false ( - ! foo [ ! ~ 123 ( ~ false . foo , - 123 ) ] , foo ) ;
 - ~ ! ~ foo ( ~ "bar" ( ( false ) . foo < true . foo , "bar" ) , ( 123 >= "bar" [ ! ( foo ) ] ) ) + ( ( false [ ( ! ~ - ( ! 123 . foo - 123 ) ) & "bar" ^ true ] * foo ) . foo < 123 ) < ! ! ! - - false ( - true == - ~ - ~ 123 >= foo , ~ false * - - ! ~ "bar" ) * 123 [ ! - ~ - "bar" - ! ! - - foo ] + ~ foo [ true ] ;
 ! ( 123 ^ ~ 123 > true [ ! "bar" / ! - 123 < - foo * ! false ] ) & true *= ! ~ - 123 { false -- ;
 } ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int ) { "bar" **= ! ! foo ( - foo ( false != 123 [ ! false ] , ! ~ ( false / foo != "bar" / - ! ~ 123 ( true & - ~ foo . foo < true , - 123 [ true >= true + ( ~ ! ~ "bar" + false ) ] ) ) < ! true == ~ 123 ( false , ! ! ( ~ ! true ) ) & ( ~ 123 - ~ - ~ foo [ ~ ! ( ( true . foo != "bar" < "bar" - foo . foo ) ) . foo ] ) ) , 123 ) ;
 } ;
 
