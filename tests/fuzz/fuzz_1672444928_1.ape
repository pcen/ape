module foo ;
 class foo { func foo ( foo int , foo int , foo int ) int { var foo int . int . int = ~ - ! "bar" . foo and "bar" & ! ~ "bar" ;
 } ;
 foo int . int . int ;
 func foo ( foo int , foo int . int . int , foo int ) int { if - foo ( ) * ~ ! true { val foo int = foo ;
 } else { for var foo int . int = true ;
 123 ;
 ( 123 [ ~ ( ! ~ - ! 123 or 123 != ! "bar" ) [ "bar" >> true or ( ! ( 123 ( false != 123 % "bar" , "bar" ) ^ ! foo and ~ - ! true ) ) ] > ! ( - ~ 123 ) ( ) ] ) . foo = "bar" >> ( - ( false ( ~ ~ - ! "bar" | ! ! "bar" or ~ ! foo * foo < "bar" , "bar" or ( - ~ 123 [ ! foo & "bar" < ~ 123 >> "bar" ( true ^ 123 << - ! foo ( ) , ! ~ ! true < false ( ) ) and ! ! "bar" ] ) << false ) | - foo ( ) ) * ! false [ - 123 ] ) [ - ! 123 << "bar" ] { var foo int . int = false > ! - - ( false - ! ! - foo ) ;
 } ;
 } ;
 } ;
 foo int ;
 func foo ( foo int , foo int . int . int , foo int , foo int . int , foo int , foo int ) int { ! ! ! ~ true << foo ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int . int ) int { ! ( foo ) . foo %= ~ "bar" [ - false . foo % true < ~ - true ( ( ( 123 ) ) , 123 <= - ~ foo & true . foo + true ) and false ] ;
 } ;
 func foo ( ) int . int { ! ( ( - ( false ) ) ^ ! ! ! foo and ! ~ "bar" ) ;
 } ;
 foo int ;
 func foo ( foo int . int , foo int . int . int ) int . int . int { ~ foo == true ^ ( false + 123 or - false . foo ) [ "bar" ] >> ~ ! ~ - - true ( ) or 123 ++ ;
 } ;
 } ;
 val foo int . int . int = false or - ( ~ - foo ( ~ "bar" and true or false [ 123 << ( ~ 123 ) ( 123 , ! true ) ] >> ( ! true ( ! ! "bar" >= 123 , "bar" or ! 123 . foo ) ) and true >> 123 , ~ ! ! foo < ! "bar" or foo ) and true ) ;
 class foo { foo int . int . int ;
 func foo ( ) int . int { val foo int = - ! ! true ;
 } ;
 foo int ;
 func foo ( ) int { foo ;
 } ;
 func foo ( ) int . int { ~ ! false [ ~ foo ( "bar" << true ( ) & ! ! - - ~ true , - ~ ( 123 or "bar" ) ) & ( foo ) . foo ] != true - - foo += ! ~ ~ - ! - ~ 123 ;
 } ;
 } ;
 class foo { func foo ( foo int , foo int . int ) int { "bar" ;
 } ;
 foo int . int . int ;
 foo int ;
 } ;
 class foo { foo int . int ;
 func foo ( ) int { ! - ! ~ ! ! - - ~ - foo % foo -= - - - false ;
 } ;
 foo int ;
 func foo ( foo int . int , foo int ) int . int . int { var foo int . int . int = false and - true ( false [ ! ! ! ( ( - ! ~ ~ - "bar" ) ) [ - ! ! ~ 123 . foo ] ] % foo , ~ ( ( ! false ) or ( false ( ~ ~ ! foo ( ) << ! ( ! ~ "bar" / - 123 and ! - ( false . foo >= - ~ - ! false ) & ~ ! true ( ) ) != ! ~ ~ false . foo & ~ 123 , "bar" ) and "bar" ) ) . foo << ( foo ( ) ) % ( ( false [ "bar" and foo . foo ] or ~ ! ! - false ) and foo ) < false & ~ ~ ( true . foo - foo and ~ ~ true > 123 ) ^ ! foo ) > ( - ! - false ( ) & ! foo ) . foo & "bar" . foo ;
 } ;
 foo int . int . int ;
 } ;
 class foo { func foo ( ) int { for var foo int . int . int = "bar" . foo ;
 ! ! - "bar" [ false >> ! ! ( true ) and "bar" ] ;
 ! ! ( - false > 123 [ ! false * ! "bar" . foo and "bar" ( false [ ~ ~ ! ! true ] or 123 [ ~ - ! - 123 ] + ~ ~ true == true , ( "bar" ) [ foo . foo + ! - ~ foo ] / - true << ! - 123 [ ! true ( - - ~ ~ "bar" * ~ true , ( ! ! 123 and ! "bar" [ - - true < 123 ] ) ) ] < ! ! "bar" and 123 ) ] | "bar" ) % - "bar" or ( ~ "bar" * true ) <= - ( - 123 and "bar" [ ! 123 [ foo & - ( false ) > "bar" . foo % - - "bar" ( ) << 123 ] ] or ~ ~ false ) ++ { - - "bar" . foo ++ ;
 } ;
 } ;
 foo int ;
 foo int ;
 foo int ;
 func foo ( foo int . int , foo int . int , foo int ) int { val foo int = 123 [ 123 - "bar" % - true != false ] or "bar" ( ) >= true [ false ( ) ] != ( ! - - 123 ( - true [ "bar" ] and ! ( false or - 123 ) , foo ) != ! ~ ( true or ! ~ 123 ) and ! ( true ) . foo ) * ! - false ;
 } ;
 foo int ;
 func foo ( foo int ) int { val foo int = - ~ - ~ foo ( ( ~ - - - ( foo - ~ ~ ! false > 123 ( foo or - false ( ~ ~ ! ~ ! false , ~ false % ( ( ! 123 ( ) ) % false [ ! foo or ! 123 ] ) . foo >> 123 [ ! 123 or foo + - - ~ true ] ) >> - ~ ( foo != ! foo << ! ! ( ( ! ~ false [ 123 != ! - foo [ "bar" ] % "bar" ] << true == ~ "bar" * ! true - 123 >> "bar" and ! ! ! ~ false ) ) ) , ! foo ( ) ) >> ~ foo ( ) or 123 ) & true < ! ~ - ~ - true ( 123 >> ~ foo == ~ 123 , ~ true ( ) and "bar" ) << 123 [ ~ ! - ! ! ~ false and false > ! ! foo ] - "bar" . foo or ( ! - false . foo or ! ~ ~ true [ ~ - ( - ( - ~ "bar" or false . foo ^ "bar" [ - true ( ) * - 123 < true ( ) ] ) >> ! ! - - ~ - - "bar" % - ( false >= - ! ! false ( ) ) == ! ~ - "bar" ( ) ) . foo and "bar" > ( true >> - ! foo + false [ 123 ] ) ( foo == ~ ~ - ! ! foo & ( ~ foo [ ! - ! false ( ! true or false , foo . foo ) ] and false % ~ false [ ! ( - true or ~ "bar" & false and false . foo ) [ "bar" * true ] or ! - ! 123 ( true , false ( ) ) ] + ~ - "bar" ) , ! ~ 123 and 123 . foo - - ~ ( - ( ! ( ( ! 123 and ! - false % foo [ foo & 123 ] ) - false . foo ) ) or ~ ( 123 > - foo ) ) ) ] & ( ~ ~ ( - ( ! foo ( ~ ( true and ~ ~ ~ foo + 123 * false ) , ! "bar" ^ ~ 123 != true [ "bar" [ false + ~ ! - false > - ~ ~ 123 . foo or false [ - - ! - ~ foo ] ] & "bar" ] ) / foo ( ! ! true . foo , ~ - ! - foo ( - foo / 123 or 123 , ~ 123 and ~ ! - - ! ! foo ) and ~ foo * ! ! true ) < ! ~ false [ true ] >> false or false ) >= ~ ( foo and ! ~ ~ ! ~ ( - ! ( true ( "bar" . foo , 123 ) and 123 [ ! false ] - false ) ) >= foo ( ) & foo ) << ! 123 and ! 123 ) [ - ! ~ false ] >> ! ( ~ ! "bar" ) [ - false ] < ~ ( foo and false ( - ! ! ( "bar" [ - ~ 123 << - ~ 123 ] == 123 % ~ false . foo ^ "bar" and ~ false ( ) ) ^ - false ( ( foo [ foo [ ! 123 == 123 ( ) ] ] ) ( - ! - ! foo [ ~ ~ true | ! ! 123 << false ] > foo & - ( false + "bar" ( ) ) [ ~ false [ - true [ 123 % "bar" or ! ~ - ! false ( foo ( - ( ( false ) [ ~ false . foo ] | ! "bar" ) and - ! foo > ! ! - - ~ - ! ( ~ ! true ) , true or false == - ( false . foo ) ) or ! - ! foo [ - true ] != ( true ) [ ~ 123 ] , ~ true . foo * ! ( ~ ~ ! true [ ! ~ ! - true >> - foo != ~ ! ! ( ( false + ~ ! ( ( "bar" + - false ) == ( - - ~ ! "bar" ) [ ~ "bar" and 123 >= true ] and - ~ - ! true ) * true ( 123 << 123 and false - ~ foo ( ~ - ~ true and "bar" . foo ^ ~ ! false , ! false ) / 123 . foo == true , 123 >> ! 123 ) <= ~ false [ 123 ] ) >> ! ~ false ) ] ) ) ] << false . foo > ! - - false ] or ~ ! - ~ ~ false << ! ~ - ( 123 . foo ) <= ! foo >> ! ! ( true ) [ 123 ] ] , foo . foo & - 123 < ! foo ( true , true . foo | ~ ~ true ) * false . foo ) , 123 << 123 ) or - foo - ~ true . foo and true ( foo and foo or ! ! false , 123 and - ~ true ) , ! ~ - 123 [ ~ ! false ] and false != ! - "bar" ) ) . foo != ~ - - ! ~ ! ( - - "bar" . foo | "bar" . foo >> false ) ( ) ) [ - 123 ] and false == true . foo >> 123 . foo ) >> - - ~ "bar" and ( ~ foo ^ - ~ 123 [ false and ~ false ( ) or ( 123 >> ( "bar" . foo ) ) ] ) << ~ ~ foo ) or "bar" * - true . foo , "bar" . foo >> ( false [ true ] & ~ foo [ ! "bar" + ( foo == 123 . foo ) and false ] ) ) ;
 } ;
 func foo ( ) int { var foo int . int = 123 and ~ false & ! "bar" ;
 } ;
 } ;
 class foo { func foo ( ) int { if - - ! - 123 { ~ ! - ( true <= "bar" ) ( ) %= 123 . foo & foo ;
 } else { for val foo int . int = ~ ! false * ~ 123 >= foo ;
 123 ;
 ! ! false ( "bar" . foo % ~ 123 and - - foo / - foo , 123 ) /= true { - ! ( ( true / "bar" ^ - - true ( - false . foo , foo [ false [ foo [ - ~ 123 * ! true ] ] / foo | true ] and ! ! ! ~ ! ! - ! ! false <= ~ "bar" + ~ ! ! foo ) and ! true or "bar" . foo <= ~ "bar" and "bar" + ( - foo ( ) ) ) ) -- ;
 } ;
 } ;
 } ;
 func foo ( ) int { val foo int . int . int = ! foo ;
 } ;
 func foo ( ) int { var foo int . int = foo ;
 } ;
 } ;
 func foo ( ) int { val foo int = - ~ 123 [ ! ! - ! foo > "bar" ] ;
 } ;
 class foo { foo int ;
 foo int . int ;
 } ;
 class foo { foo int ;
 func foo ( foo int , foo int ) int { ! - - ! ~ 123 [ ! false < ~ - ! ~ - foo | - ~ ~ ! ! foo . foo ] * - ~ false **= - ~ false ;
 } ;
 func foo ( foo int . int . int , foo int ) int { ! ~ true [ ! false & ! - ! - ! - ! ~ ! ! false < ~ - - "bar" and "bar" ( true , ~ "bar" [ - - "bar" ] % false ( ) or "bar" ) ] ;
 } ;
 foo int . int ;
 func foo ( ) int { foo ++ ;
 } ;
 foo int ;
 func foo ( ) int { if true < 123 ( ) { foo . foo >> "bar" and true + false *= - ! 123 . foo & foo << ! foo [ true . foo % true [ - - ~ 123 ] >= ~ false . foo ] ;
 } else { val foo int = 123 >= ~ ~ ~ - - - 123 ( ( "bar" . foo & 123 ) or false , 123 ) | true ;
 } ;
 } ;
 func foo ( ) int . int . int { if foo { ! true ( - "bar" [ false . foo ] and "bar" ( - "bar" , foo | "bar" ) , - true [ ( true or 123 . foo ) [ - ! - ~ ! false ] < false % - ! ! "bar" or ( - ~ - foo - true [ - 123 * true ] ) ] ) >> ~ true -= ~ ( false [ - 123 >= foo . foo ] ) >> - ! "bar" or foo ;
 } else { - - foo or ( - ~ ! ( "bar" ( ) or ( ( ~ foo . foo + "bar" ) ( - ! foo - - false , true ) ) [ ~ ~ false == 123 . foo << foo ] < ! foo ) and ~ false or ~ ~ ~ 123 ) >= false >> "bar" = - "bar" ;
 } ;
 } ;
 func foo ( ) int { val foo int = ! false ;
 } ;
 foo int . int ;
 } ;
 func foo ( ) int { val foo int . int . int = "bar" & ~ ~ false ;
 } ;
 class foo { func foo ( ) int { for var foo int = true ;
 false >> ! false ;
 true ( foo , true . foo ) or ~ - "bar" ( true , true ( foo != "bar" , 123 >> - foo ( true < - ! false [ 123 / ~ ! ~ "bar" . foo and 123 . foo ] == ( ( 123 [ false ] & false . foo ) ) [ ~ 123 > ~ ( ! ~ foo >> ~ 123 ( ) ) ( true , false ( ! - false [ foo ] << ! ! ! ~ 123 and ( ! - ! ~ "bar" & - - true or ~ foo ) % ! "bar" , true ) ) ] , true == foo ) == - ! 123 [ ! true . foo ] ) * 123 ) { for var foo int = true [ - foo ] ;
 "bar" and true ;
 ~ true { ~ true ;
 } ;
 } ;
 } ;
 } ;
 class foo { func foo ( foo int , foo int , foo int , foo int , foo int . int . int , foo int ) int . int { for var foo int = ( false or ~ foo % - - ( ~ 123 ) and ~ ! true ) ( ) ;
 ~ true - ! foo << ~ ~ false [ true / ! ! 123 or 123 >> foo [ ! - - false ] >= - "bar" ] ;
 true != 123 . foo %= ~ - 123 [ ~ ~ ! ! "bar" ( ~ - ~ 123 , ~ ! 123 and ! true or 123 ) ] { val foo int = true ;
 } ;
 } ;
 func foo ( ) int { var foo int = false [ ! foo . foo != ! ( false and ! true ( false . foo , ~ true + ! - ( ~ 123 or ~ ( ! - ! ( ! "bar" - 123 << ~ true == "bar" << true ) and foo <= "bar" or ! - "bar" ( false / 123 , ! ! foo - "bar" or ( ! 123 + - ( true [ ~ ~ foo ] and ( 123 ) . foo >> foo == true <= ~ ( true ) >> - 123 [ foo [ - true | - ~ - - - ! false < "bar" or 123 ] > - 123 or - ! ~ - ! ! true ( ) ] % ( - ~ true . foo == ! ! true . foo <= ~ false ) [ false ] ) >> ! foo . foo ) ( ! true , ! ! ( false / true [ ( ! - - "bar" | true ) ^ 123 ] ) and ( ! "bar" ( "bar" ( ) >> ~ "bar" . foo , false ( ) >= false [ ~ foo ] >> ~ foo ) + ~ ( ~ foo [ false . foo and ~ ! ! false ( "bar" . foo , ! 123 ) ] >> - foo [ - ( ! foo ) ] ) ) [ ~ ( ! - ( "bar" ) and true . foo ) . foo and foo ] != - ! "bar" . foo ) ) | "bar" ) > ! foo and ~ - - true - 123 ) != - - - ~ - ( true == ! false ( ( 123 . foo - - false . foo ) != true [ ~ ! 123 ( true , ! "bar" . foo + ! ! ~ ! ! ~ "bar" ) << ~ ! - ~ ! ~ ~ 123 . foo / true and foo ( ) ] , 123 ( ) and ~ foo ) ) | ! - foo >> true and - ~ ! "bar" or ! ~ 123 ( ) * ! true . foo ) >> ( ~ - true [ - 123 ] and ! ~ - 123 ) >= false ( ) or ~ ! false << false <= foo ) and 123 ( ) & - ~ true >> false ] or 123 ;
 } ;
 foo int ;
 foo int . int . int ;
 foo int ;
 foo int ;
 func foo ( foo int , foo int , foo int ) int { if 123 { var foo int = ( ( - ! foo [ foo ] < - foo % ( ! "bar" ( ) and - ~ false ( ) or - ( ! "bar" ) ) ) ) ( ) ;
 } else { val foo int . int = ( ( 123 + ~ true % foo . foo ) / ! foo >> - ~ ~ ~ "bar" & false . foo ) ;
 } ;
 } ;
 } ;
 val foo int . int = true [ - ~ - "bar" [ ~ ~ ! true [ - ~ ( ~ - - ! - true ) ] or "bar" and ( ! "bar" ( ) ) [ ! ! "bar" [ 123 + 123 ] ] ] ] == ~ false ;
 class foo { func foo ( ) int { val foo int . int = true % ~ - - ( foo ) . foo and 123 ;
 } ;
 foo int . int ;
 foo int . int ;
 foo int ;
 func foo ( foo int . int , foo int . int , foo int , foo int . int . int , foo int ) int . int { ~ ~ foo ;
 } ;
 foo int ;
 } ;
 func foo ( ) int { - false << ~ ~ false *= - "bar" ;
 } ;
 func foo ( foo int , foo int , foo int ) int { ~ 123 >> ! false . foo * ! ~ ~ false ;
 } ;
 func foo ( ) int . int . int { if - true { if true { val foo int = "bar" and ! "bar" ;
 } else { ! true . foo and ~ "bar" & 123 + ( 123 ) [ ~ ! - foo ] ;
 } ;
 } else { val foo int . int = ~ ( foo . foo and 123 ( - true < ! - ~ ! true [ ~ 123 >> "bar" or "bar" ] == ( ! ~ ~ ! "bar" ) > - ~ false , false ) ) ;
 } ;
 } ;
 func foo ( foo int , foo int , foo int , foo int , foo int . int , foo int . int ) int . int . int { - - ! ( ! ( foo ) ^ - ! true and true . foo ) - foo ( ) * - true . foo >> ! true . foo ^ ! ~ ~ ~ 123 % - foo [ ! ! true ] or ( "bar" [ true == ( 123 . foo * false ) >> foo . foo ] ) ;
 } ;
 
