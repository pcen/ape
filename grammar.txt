program        -> moduleDecl decl*

moduleDecl     -> "module" IDENT ";"
decl           -> ( varDecl | funcDecl | classDecl ) ";"

varDecl        -> typedVarDecl | untypedVarDecl
typedVarDecl   -> ( IDENT  ":" type "=" expr ) | ( IDENT ":" type ":" expr )
untypedVarDecl -> ( IDENT ":" "=" expr ) | ( IDENT ":" ":" expr )


funcDecl       -> "func" IDENT "(" parameters? ")" type blockStmt

classDecl      -> "class" IDENT classBody
classBody      -> "{" ( ( memberDecl | funcDecl ) ";" )* "}"
memberDecl     -> IDENT type

parameters     -> paramDecl ( "," paramDecl )*
paramDecl      -> IDENT type

blockStmt      -> "{" stmtList "}"
stmtList       -> (stmt ";") *

stmt           -> simpleStmt | compoundStmt | varDeclStmt

simpleStmt     -> incStmt | reverseStmt | assignment | expr

incStmt        -> expr ("++" | "--")
reverseStmt    -> ( "reverse" expr ) | ( "reverse" )
assignment     -> expr assignOp expr
assignOp       -> "=" | "+=" | "*=" | "-=" | "/=" | "**=" | "%="

compoundStmt   -> ifStmt | forStmt | skipStmt

ifStmt         -> "if" condBlockStmt "else" blockStmt
condBlockStmt  -> equality blockStmt
skipStmt       -> "skip" "{" blockStmt "}" seizeStmt seizeStmt*
seizeStmt      -> ( "seize" expr "{" blockStmt "}" ) | ( "seize" "{" blockStmt "}" )

forStmt        -> "for" varDecl ";" expr ";" simpleStmt blockStmt

varDeclStmt    -> varDecl

expr           -> or
or             -> and ( "or" and )*
and            -> equality ( "and" equality )*
equality       -> comparison ( ( "!=" | "==" ) comparison )*
comparison     -> shift ( ( ">" | ">=" | "<" | "<=" ) shift )*
shift          -> term ( ( ">>" | "<<" ) term )*
term           -> factor ( ( "-" | "+" | "|" | "^" ) factor )*
factor         -> unary ( ( "/" | "*" | "&" | "%" ) unary )*
unary          -> ( "!" | "-" | "~" ) unary | primary
primary        -> atom ( ( "(" arguments? ")" ) | ( "." IDENT ) | ( "[" expr "]" ) )*
atom           -> NUMBER | STRING | IDENT | "true" | "false" | group | litlist
group          -> "(" expr ")"
litlist        -> "[" arguments? "]"

arguments      -> expr ( "," expr ) *
type           -> IDENT | IDENT ( "." IDENT )*
