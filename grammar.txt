program      -> moduleDecl decl*

moduleDecl   -> "module" IDENT ";"
decl         -> (typedDecl | funcDecl | classDecl) ";"

typedDecl    -> ("val" | "var") IDENT type  "=" expr
funcDecl     -> "func" IDENT "(" parameters? ")" type blockStmt

classDecl    -> "class" IDENT blockStmt

parameters   -> paramDecl ( "," paramDecl )*
paramDecl    -> IDENT type

blockStmt    -> "{" stmtList "}"
stmtList     -> (stmt ";") *

stmt         -> simpleStmt | compoundStmt
simpleStmt   -> incStmt | assignment | expr
incStmt      -> expr ("++" | "--")
assignment   -> expr assignOp expr
assignOp     -> "=" | "+=" | "*=" | "-=" | "/=" | "**="

compoundStmt -> ifStmt | forStmt

ifStmt        -> "if" condBlockStmt "else" blockStmt
condBlockStmt -> equality blockStmt

forStmt      -> "for" typedDecl ";" expr ";" simpleStmt blockStmt

expr         -> equality
equality     -> comparison ( ( "!=" | "==" ) comparison )*
comparison   -> term ( ( ">" | ">=" | "<" | "<=" ) term )*
term         -> factor ( ( "-" | "+" | "|" | "^" ) factor )*
factor       -> unary ( ( "/" | "*" | "&" ) unary )*
unary        -> ( "!" | "-" | "~" ) unary | primary
primary      -> atom ( ( "(" arguments? ")" ) | ( "." IDENT ) | ( "[" expr "]" ) )*
atom         -> NUMBER | STRING | IDENT | "true" | "false" | group
group        -> "(" expr ")"

arguments    -> expr ( "," expr ) *
type         -> IDENT | IDENT ( "." IDENT )*
